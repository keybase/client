#! /usr/bin/env bash

set -e -u -o pipefail

# This is the script responsible for launching keybase on boot on Linux. A
# .desktop file will be created by the service on first launch in
# ~/.config/autostart/ to invoke this script.
#
# We're in the process of adding support for systemd. If you're running systemd
# and you set the environment variable KEYBASE_SYSTEMD=1, we'll start as
# systemd user-level services. At some point

runtime_dir="${XDG_RUNTIME_DIR:-$HOME/.config}/keybase"
mkdir -p "$runtime_dir"
startup_token="$runtime_dir/startup_mode"

systemd_running() {
    # Mirrors https://www.freedesktop.org/software/systemd/man/sd_booted.html.
    [ -d "/run/systemd/system" ]
}

was_started_with_systemd() {
    [ -e "$startup_token" ] && [ "$(cat "$startup_token")" = "systemd" ]
}

# Currently defaults to false unless KEYBASE_SYSTEMD=1. This default will
# change in the future.
wants_systemd() {
    [ "${KEYBASE_SYSTEMD:-0}" = "1" ] && systemd_running
}

write_startup_token() {
  echo "$1" > "$startup_token"
}

# This works no matter how the services were started, because our
# Restart=on-failure configuration won't restart after SIGTERM. However, the
# systemd-to-systemd case shouldn't call it.
kill_all() {
  if killall Keybase &> /dev/null ; then
    echo Shutting down Keybase GUI...
  fi
  if fusermount -uz /keybase &> /dev/null ; then
    echo Unmounting /keybase...
  fi
  if killall kbfsfuse &> /dev/null ; then
    echo Shutting down kbfsfuse...
  fi
  if killall keybase &> /dev/null ; then
    echo Shutting down keybase service...
  fi

  # There is a race condition where if we try to start the keybase service before
  # the previous process has died, we might fail to lock the pid file and error
  # out. Avoid this by waiting for the lock file to be free, on systems with flock
  # installed.
  lockfile="$runtime_dir/keybased.pid"
  if which flock &> /dev/null && [ -e "$lockfile" ] ; then
    flock "$lockfile" true
  fi
}

start_systemd() {
  # If the services weren't started with systemd, we need to kill them.
  if ! was_started_with_systemd ; then
    kill_all
    # Our non-systemd services tend to delete systemd's socket files. Make sure
    # they get recreated.
    systemctl --user stop keybase.socket kbfs.socket
  fi
  echo Starting via systemd.
  # The GUI needs access to the env var KEYBASE_START_UI. This is set to
  # "hideWindow" by the autostart file that might be calling us. We need to
  # pass it along.
  echo "KEYBASE_START_UI=${KEYBASE_START_UI:-}" > "$runtime_dir/keybase.gui.env"
  # Some distros (e.g. Ubuntu 16.04) don't make X session variables available
  # to user units automatically. Add them to the env file ourselves.
  echo "DISPLAY=${DISPLAY:-}" >> "$runtime_dir/keybase.gui.env"
  echo "XAUTHORITY=${XAUTHORITY:-}" >> "$runtime_dir/keybase.gui.env"
  # The keybase.gui.service unit has keybase.service and kbfs.service as
  # dependencies, so we don't have to list them here. But including them lets
  # us report an error if they fail to start.
  systemctl --user start keybase.service kbfs.service keybase.gui.service
  write_startup_token "systemd"
}

start_background() {
  # Always restart any running services. (Reliably detecting whether services
  # are running is tricky. Leave it to systemd.)
  kill_all

  export KEYBASE_RUN_MODE="${KEYBASE_RUN_MODE:-prod}"
  export KEYBASE_DEBUG=1
  logdir="${XDG_CACHE_HOME:-$HOME/.cache}/keybase"
  mkdir -p "$logdir"

  echo Launching keybase service...
  # We set the --auto-forked flag here so that updated clients that try to
  # restart this service will know to re-fork it themselves. That's all it does.
  keybase -d --log-file="$logdir/keybase.service.log" service --auto-forked &>> "$logdir/keybase.start.log" &
  echo Mounting /keybase...
  kbfsfuse -debug -log-to-file /keybase &>> "$logdir/keybase.start.log" &
  echo Launching Keybase GUI...
  /opt/keybase/Keybase &>> "$logdir/Keybase.app.log" &
  write_startup_token "background"
}

main() {
  if wants_systemd ; then
      start_systemd
  else
      start_background
  fi
  echo 'Success!'
  # Magical squirrel produced by https://github.com/erkin/ponysay
  cat /opt/keybase/crypto_squirrel.txt
}

main
