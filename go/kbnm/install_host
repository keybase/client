#!/usr/bin/env bash
# Install and uninstall the Chrome NativeMessaging host whitelist file for the
# Keybase extension.
#
# Usage:
#   ./install_host
#   ./install_host uninstall
#
# It can be run multiple times. The whitelist will be overwritten each time.

realpath() {
  if [[ $1 = /* ]]; then
    echo "$1"
  else
    echo "$PWD/${1#./}"
  fi
}

detect_chrome() {
  declare filename="$1"

  # Find where the NativeMessagingHosts whitelist lives for this platform.
  whoami="$(whoami)"
  if [[ "$(uname -s)" == "Darwin" ]]; then
    # Mac
    if [[ "$whoami" == "root" ]]; then
      echo "/Library/Google/Chrome/NativeMessagingHosts/${filename}"
    else
      echo "$HOME/Library/Application Support/Google/Chrome/NativeMessagingHosts/${filename}"
    fi
  else
    # Linux
    if [[ "$whoami" == "root" ]]; then
      echo "/etc/opt/chrome/native-messaging-hosts/${filename}"
    else
      echo "$HOME/.config/google-chrome/NativeMessagingHosts/${filename}"
    fi
  fi
}

detect_firefox() {
  declare filename="$1"

  # Find where the NativeMessagingHosts whitelist lives for this platform.
  whoami="$(whoami)"
  if [[ "$(uname -s)" == "Darwin" ]]; then
    # Mac
    if [[ "$whoami" == "root" ]]; then
      echo "/Library/Application Support/Mozilla/NativeMessagingHosts/${filename}"
    else
      echo "$HOME/Library/Application Support/Mozilla/NativeMessagingHosts/${filename}"
    fi
  else
    # Linux
    if [[ "$whoami" == "root" ]]; then
      echo "/usr/lib/mozilla/native-messaging-hosts/${filename}"
    else
      echo "$HOME/.mozilla/native-messaging-hosts/${filename}"
    fi
  fi
}

install() {
  # Install the whitelist.
  declare template="$1"
  declare target="$2"

  local target_dir="$(dirname "$target")"
  if [[ ! -d "$target_dir" ]]; then
    mkdir -p "$target_dir"
  fi

  local here="$(dirname $(realpath "$BASH_SOURCE"))"
  local host_path="$(which "kbnm" || echo "$here/kbnm")"

  if [[ ! -x "$host_path" ]]; then
    # Is it in GOPATH, but not PATH?
    host_path="$GOPATH/bin/kbnm"
  fi

  if [[ ! -x "$host_path" ]]; then
    echo "failed to find kbnm executable, make sure it's in your \$PATH."
    exit 2
  fi

  echo "Writing: $target"
  cat "$template" \
    | sed "s|@@HOST_PATH@@|$host_path|g" \
    > "$target"

  chmod +r "$target"

  cat "$target"

  echo "Success."
}

uninstall() {
  # Uninstall the whitelist.
  declare target="$1"

  rm "$target" && echo "Removed Chrome NativeMessaging whitelist: $target" || echo "Install not found: $target"
}


main() {
  set -eou pipefail; [[ "${TRACE:-}" ]] && set -x

  declare cmd="${1:-}"

  local here="$(dirname $(realpath "$BASH_SOURCE"))"
  local filename="io.keybase.kbnm.json"

  case "$cmd" in
    "uninstall")
      uninstall "$(detect_chrome "$filename")"
      uninstall "$(detect_firefox "$filename")"
      ;;
    *)
      install "$here/host_json.template" "$(detect_chrome "$filename")"
      install "$here/host_json.firefox.template" "$(detect_firefox "$filename")"
      ;;
  esac
}


[[ "$0" == "$BASH_SOURCE" ]] && main "$@"
