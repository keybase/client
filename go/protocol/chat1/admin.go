// Auto-generated by avdl-compiler v1.3.22 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/chat1/admin.avdl

package chat1

import (
	gregor1 "github.com/keybase/client/go/protocol/gregor1"
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
	context "golang.org/x/net/context"
)

type SendBlock struct {
	Uid    gregor1.UID  `codec:"uid" json:"uid"`
	Admin  gregor1.UID  `codec:"admin" json:"admin"`
	Reason string       `codec:"reason" json:"reason"`
	Ctime  gregor1.Time `codec:"ctime" json:"ctime"`
}

func (o SendBlock) DeepCopy() SendBlock {
	return SendBlock{
		Uid:    o.Uid.DeepCopy(),
		Admin:  o.Admin.DeepCopy(),
		Reason: o.Reason,
		Ctime:  o.Ctime.DeepCopy(),
	}
}

type BlockSendUserArg struct {
	Uid    gregor1.UID `codec:"uid" json:"uid"`
	Admin  gregor1.UID `codec:"admin" json:"admin"`
	Reason string      `codec:"reason" json:"reason"`
}

type IsUserSendBlockedArg struct {
	Uid gregor1.UID `codec:"uid" json:"uid"`
}

type AdminInterface interface {
	BlockSendUser(context.Context, BlockSendUserArg) error
	IsUserSendBlocked(context.Context, gregor1.UID) (*SendBlock, error)
}

func AdminProtocol(i AdminInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "chat.1.admin",
		Methods: map[string]rpc.ServeHandlerDescription{
			"blockSendUser": {
				MakeArg: func() interface{} {
					ret := make([]BlockSendUserArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]BlockSendUserArg)
					if !ok {
						err = rpc.NewTypeError((*[]BlockSendUserArg)(nil), args)
						return
					}
					err = i.BlockSendUser(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"isUserSendBlocked": {
				MakeArg: func() interface{} {
					ret := make([]IsUserSendBlockedArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]IsUserSendBlockedArg)
					if !ok {
						err = rpc.NewTypeError((*[]IsUserSendBlockedArg)(nil), args)
						return
					}
					ret, err = i.IsUserSendBlocked(ctx, (*typedArgs)[0].Uid)
					return
				},
				MethodType: rpc.MethodCall,
			},
		},
	}
}

type AdminClient struct {
	Cli rpc.GenericClient
}

func (c AdminClient) BlockSendUser(ctx context.Context, __arg BlockSendUserArg) (err error) {
	err = c.Cli.Call(ctx, "chat.1.admin.blockSendUser", []interface{}{__arg}, nil)
	return
}

func (c AdminClient) IsUserSendBlocked(ctx context.Context, uid gregor1.UID) (res *SendBlock, err error) {
	__arg := IsUserSendBlockedArg{Uid: uid}
	err = c.Cli.Call(ctx, "chat.1.admin.isUserSendBlocked", []interface{}{__arg}, &res)
	return
}
