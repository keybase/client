// Auto-generated by avdl-compiler v1.3.22 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/stellar1/common.avdl

package stellar1

import (
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
)

type AccountID string

func (o AccountID) DeepCopy() AccountID {
	return o
}

type SecretKey string

func (o SecretKey) DeepCopy() SecretKey {
	return o
}

type TransactionID string

func (o TransactionID) DeepCopy() TransactionID {
	return o
}

type KeybaseTransactionID string

func (o KeybaseTransactionID) DeepCopy() KeybaseTransactionID {
	return o
}

type TimeMs int64

func (o TimeMs) DeepCopy() TimeMs {
	return o
}

type Hash []byte

func (o Hash) DeepCopy() Hash {
	return (func(x []byte) []byte {
		if x == nil {
			return nil
		}
		return append([]byte{}, x...)
	})(o)
}

type Asset struct {
	Type   string `codec:"type" json:"type"`
	Code   string `codec:"code" json:"code"`
	Issuer string `codec:"issuer" json:"issuer"`
}

func (o Asset) DeepCopy() Asset {
	return Asset{
		Type:   o.Type,
		Code:   o.Code,
		Issuer: o.Issuer,
	}
}

type Balance struct {
	Asset  Asset  `codec:"asset" json:"asset"`
	Amount string `codec:"amount" json:"amount"`
	Limit  string `codec:"limit" json:"limit"`
}

func (o Balance) DeepCopy() Balance {
	return Balance{
		Asset:  o.Asset.DeepCopy(),
		Amount: o.Amount,
		Limit:  o.Limit,
	}
}

type TransactionStatus int

const (
	TransactionStatus_NONE            TransactionStatus = 0
	TransactionStatus_PENDING         TransactionStatus = 1
	TransactionStatus_SUCCESS         TransactionStatus = 2
	TransactionStatus_ERROR_TRANSIENT TransactionStatus = 3
	TransactionStatus_ERROR_PERMANENT TransactionStatus = 4
)

func (o TransactionStatus) DeepCopy() TransactionStatus { return o }

var TransactionStatusMap = map[string]TransactionStatus{
	"NONE":            0,
	"PENDING":         1,
	"SUCCESS":         2,
	"ERROR_TRANSIENT": 3,
	"ERROR_PERMANENT": 4,
}

var TransactionStatusRevMap = map[TransactionStatus]string{
	0: "NONE",
	1: "PENDING",
	2: "SUCCESS",
	3: "ERROR_TRANSIENT",
	4: "ERROR_PERMANENT",
}

func (e TransactionStatus) String() string {
	if v, ok := TransactionStatusRevMap[e]; ok {
		return v
	}
	return ""
}

type PaymentResult struct {
	StellarID TransactionID        `codec:"stellarID" json:"stellarID"`
	KeybaseID KeybaseTransactionID `codec:"keybaseID" json:"keybaseID"`
	Ledger    int                  `codec:"Ledger" json:"Ledger"`
}

func (o PaymentResult) DeepCopy() PaymentResult {
	return PaymentResult{
		StellarID: o.StellarID.DeepCopy(),
		KeybaseID: o.KeybaseID.DeepCopy(),
		Ledger:    o.Ledger,
	}
}

type CommonInterface interface {
}

func CommonProtocol(i CommonInterface) rpc.Protocol {
	return rpc.Protocol{
		Name:    "stellar.1.common",
		Methods: map[string]rpc.ServeHandlerDescription{},
	}
}

type CommonClient struct {
	Cli rpc.GenericClient
}
