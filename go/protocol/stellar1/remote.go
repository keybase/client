// Auto-generated by avdl-compiler v1.3.22 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/stellar1/remote.avdl

package stellar1

import (
	keybase1 "github.com/keybase/client/go/protocol/keybase1"
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
	context "golang.org/x/net/context"
)

type Members struct {
	FromStellar  AccountID            `codec:"fromStellar" json:"fromStellar"`
	FromKeybase  string               `codec:"fromKeybase" json:"fromKeybase"`
	From         keybase1.UserVersion `codec:"from" json:"from"`
	FromDeviceID keybase1.DeviceID    `codec:"fromDeviceID" json:"fromDeviceID"`
	ToStellar    AccountID            `codec:"toStellar" json:"toStellar"`
	ToKeybase    string               `codec:"toKeybase" json:"toKeybase"`
	To           keybase1.UserVersion `codec:"to" json:"to"`
}

func (o Members) DeepCopy() Members {
	return Members{
		FromStellar:  o.FromStellar.DeepCopy(),
		FromKeybase:  o.FromKeybase,
		From:         o.From.DeepCopy(),
		FromDeviceID: o.FromDeviceID.DeepCopy(),
		ToStellar:    o.ToStellar.DeepCopy(),
		ToKeybase:    o.ToKeybase,
		To:           o.To.DeepCopy(),
	}
}

type TransactionSummary struct {
	StellarID       TransactionID        `codec:"stellarID" json:"stellarID"`
	KeybaseID       KeybaseTransactionID `codec:"keybaseID" json:"keybaseID"`
	Status          TransactionStatus    `codec:"status" json:"status"`
	ErrMsg          string               `codec:"errMsg" json:"errMsg"`
	NoteB64         string               `codec:"noteB64" json:"noteB64"`
	Asset           Asset                `codec:"asset" json:"asset"`
	Amount          string               `codec:"amount" json:"amount"`
	DisplayAmount   string               `codec:"displayAmount" json:"displayAmount"`
	DisplayCurrency string               `codec:"displayCurrency" json:"displayCurrency"`
	Members         Members              `codec:"members" json:"members"`
	Ctime           TimeMs               `codec:"ctime" json:"ctime"`
	Rtime           TimeMs               `codec:"rtime" json:"rtime"`
}

func (o TransactionSummary) DeepCopy() TransactionSummary {
	return TransactionSummary{
		StellarID:       o.StellarID.DeepCopy(),
		KeybaseID:       o.KeybaseID.DeepCopy(),
		Status:          o.Status.DeepCopy(),
		ErrMsg:          o.ErrMsg,
		NoteB64:         o.NoteB64,
		Asset:           o.Asset.DeepCopy(),
		Amount:          o.Amount,
		DisplayAmount:   o.DisplayAmount,
		DisplayCurrency: o.DisplayCurrency,
		Members:         o.Members.DeepCopy(),
		Ctime:           o.Ctime.DeepCopy(),
		Rtime:           o.Rtime.DeepCopy(),
	}
}

type Operation struct {
	ID              string `codec:"ID" json:"ID"`
	OpType          string `codec:"opType" json:"opType"`
	CreatedAt       int    `codec:"createdAt" json:"createdAt"`
	TransactionHash string `codec:"TransactionHash" json:"TransactionHash"`
	Asset           Asset  `codec:"asset" json:"asset"`
	Amount          string `codec:"amount" json:"amount"`
}

func (o Operation) DeepCopy() Operation {
	return Operation{
		ID:              o.ID,
		OpType:          o.OpType,
		CreatedAt:       o.CreatedAt,
		TransactionHash: o.TransactionHash,
		Asset:           o.Asset.DeepCopy(),
		Amount:          o.Amount,
	}
}

type TransactionDetails struct {
	StellarID             TransactionID        `codec:"stellarID" json:"stellarID"`
	KeybaseID             KeybaseTransactionID `codec:"keybaseID" json:"keybaseID"`
	Hash                  string               `codec:"Hash" json:"Hash"`
	Ledger                int                  `codec:"ledger" json:"ledger"`
	LedgerCloseTime       int                  `codec:"ledgerCloseTime" json:"ledgerCloseTime"`
	SourceAccount         AccountID            `codec:"sourceAccount" json:"sourceAccount"`
	SourceAccountSequence string               `codec:"sourceAccountSequence" json:"sourceAccountSequence"`
	FeePaid               int                  `codec:"feePaid" json:"feePaid"`
	Members               Members              `codec:"members" json:"members"`
	NoteB64               string               `codec:"noteB64" json:"noteB64"`
	Signatures            []string             `codec:"signatures" json:"signatures"`
	Operations            []Operation          `codec:"operations" json:"operations"`
	Ctime                 TimeMs               `codec:"ctime" json:"ctime"`
}

func (o TransactionDetails) DeepCopy() TransactionDetails {
	return TransactionDetails{
		StellarID:             o.StellarID.DeepCopy(),
		KeybaseID:             o.KeybaseID.DeepCopy(),
		Hash:                  o.Hash,
		Ledger:                o.Ledger,
		LedgerCloseTime:       o.LedgerCloseTime,
		SourceAccount:         o.SourceAccount.DeepCopy(),
		SourceAccountSequence: o.SourceAccountSequence,
		FeePaid:               o.FeePaid,
		Members:               o.Members.DeepCopy(),
		NoteB64:               o.NoteB64,
		Signatures: (func(x []string) []string {
			if x == nil {
				return nil
			}
			var ret []string
			for _, v := range x {
				vCopy := v
				ret = append(ret, vCopy)
			}
			return ret
		})(o.Signatures),
		Operations: (func(x []Operation) []Operation {
			if x == nil {
				return nil
			}
			var ret []Operation
			for _, v := range x {
				vCopy := v.DeepCopy()
				ret = append(ret, vCopy)
			}
			return ret
		})(o.Operations),
		Ctime: o.Ctime.DeepCopy(),
	}
}

type PaymentPost struct {
	StellarAccountSeqno uint64  `codec:"stellarAccountSeqno" json:"stellarAccountSeqno"`
	Members             Members `codec:"members" json:"members"`
	DisplayAmount       string  `codec:"displayAmount" json:"displayAmount"`
	DisplayCurrency     string  `codec:"displayCurrency" json:"displayCurrency"`
	NoteB64             string  `codec:"noteB64" json:"noteB64"`
	SignedTransaction   string  `codec:"signedTransaction" json:"signedTransaction"`
}

func (o PaymentPost) DeepCopy() PaymentPost {
	return PaymentPost{
		StellarAccountSeqno: o.StellarAccountSeqno,
		Members:             o.Members.DeepCopy(),
		DisplayAmount:       o.DisplayAmount,
		DisplayCurrency:     o.DisplayCurrency,
		NoteB64:             o.NoteB64,
		SignedTransaction:   o.SignedTransaction,
	}
}

type PaymentSummary struct {
	Stellar     *PaymentSummaryStellar `codec:"stellar,omitempty" json:"stellar,omitempty"`
	Keybase     *PaymentSummaryKeybase `codec:"keybase,omitempty" json:"keybase,omitempty"`
	StellarTxID TransactionID          `codec:"stellarTxID" json:"stellarTxID"`
	From        AccountID              `codec:"from" json:"from"`
	To          AccountID              `codec:"to" json:"to"`
	Amount      string                 `codec:"amount" json:"amount"`
	Asset       Asset                  `codec:"asset" json:"asset"`
}

func (o PaymentSummary) DeepCopy() PaymentSummary {
	return PaymentSummary{
		Stellar: (func(x *PaymentSummaryStellar) *PaymentSummaryStellar {
			if x == nil {
				return nil
			}
			tmp := (*x).DeepCopy()
			return &tmp
		})(o.Stellar),
		Keybase: (func(x *PaymentSummaryKeybase) *PaymentSummaryKeybase {
			if x == nil {
				return nil
			}
			tmp := (*x).DeepCopy()
			return &tmp
		})(o.Keybase),
		StellarTxID: o.StellarTxID.DeepCopy(),
		From:        o.From.DeepCopy(),
		To:          o.To.DeepCopy(),
		Amount:      o.Amount,
		Asset:       o.Asset.DeepCopy(),
	}
}

type PaymentSummaryKeybase struct {
	KbTxID          KeybaseTransactionID  `codec:"kbTxID" json:"kbTxID"`
	Status          TransactionStatus     `codec:"status" json:"status"`
	SubmitErrMsg    string                `codec:"submitErrMsg" json:"submitErrMsg"`
	Ctime           TimeMs                `codec:"ctime" json:"ctime"`
	Rtime           TimeMs                `codec:"rtime" json:"rtime"`
	From            keybase1.UserVersion  `codec:"from" json:"from"`
	FromDeviceID    keybase1.DeviceID     `codec:"fromDeviceID" json:"fromDeviceID"`
	To              *keybase1.UserVersion `codec:"to,omitempty" json:"to,omitempty"`
	DisplayAmount   *string               `codec:"displayAmount,omitempty" json:"displayAmount,omitempty"`
	DisplayCurrency *string               `codec:"displayCurrency,omitempty" json:"displayCurrency,omitempty"`
	NoteB64         string                `codec:"noteB64" json:"noteB64"`
}

func (o PaymentSummaryKeybase) DeepCopy() PaymentSummaryKeybase {
	return PaymentSummaryKeybase{
		KbTxID:       o.KbTxID.DeepCopy(),
		Status:       o.Status.DeepCopy(),
		SubmitErrMsg: o.SubmitErrMsg,
		Ctime:        o.Ctime.DeepCopy(),
		Rtime:        o.Rtime.DeepCopy(),
		From:         o.From.DeepCopy(),
		FromDeviceID: o.FromDeviceID.DeepCopy(),
		To: (func(x *keybase1.UserVersion) *keybase1.UserVersion {
			if x == nil {
				return nil
			}
			tmp := (*x).DeepCopy()
			return &tmp
		})(o.To),
		DisplayAmount: (func(x *string) *string {
			if x == nil {
				return nil
			}
			tmp := (*x)
			return &tmp
		})(o.DisplayAmount),
		DisplayCurrency: (func(x *string) *string {
			if x == nil {
				return nil
			}
			tmp := (*x)
			return &tmp
		})(o.DisplayCurrency),
		NoteB64: o.NoteB64,
	}
}

type PaymentSummaryStellar struct {
	OperationID uint64 `codec:"operationID" json:"operationID"`
	Ctime       TimeMs `codec:"ctime" json:"ctime"`
}

func (o PaymentSummaryStellar) DeepCopy() PaymentSummaryStellar {
	return PaymentSummaryStellar{
		OperationID: o.OperationID,
		Ctime:       o.Ctime.DeepCopy(),
	}
}

type BalancesArg struct {
	Caller    keybase1.UserVersion `codec:"caller" json:"caller"`
	AccountID AccountID            `codec:"accountID" json:"accountID"`
}

type RecentPaymentsArg struct {
	Caller    keybase1.UserVersion `codec:"caller" json:"caller"`
	AccountID AccountID            `codec:"accountID" json:"accountID"`
	Limit     int                  `codec:"limit" json:"limit"`
}

type TransactionArg struct {
	Caller keybase1.UserVersion `codec:"caller" json:"caller"`
	Id     TransactionID        `codec:"id" json:"id"`
}

type AccountSeqnoArg struct {
	Caller    keybase1.UserVersion `codec:"caller" json:"caller"`
	AccountID AccountID            `codec:"accountID" json:"accountID"`
}

type SubmitPaymentArg struct {
	Caller  keybase1.UserVersion `codec:"caller" json:"caller"`
	Payment PaymentPost          `codec:"payment" json:"payment"`
}

type IsMasterKeyActiveArg struct {
	Caller    keybase1.UserVersion `codec:"caller" json:"caller"`
	AccountID AccountID            `codec:"accountID" json:"accountID"`
}

type RemoteInterface interface {
	Balances(context.Context, BalancesArg) ([]Balance, error)
	RecentPayments(context.Context, RecentPaymentsArg) ([]PaymentSummary, error)
	Transaction(context.Context, TransactionArg) (TransactionDetails, error)
	AccountSeqno(context.Context, AccountSeqnoArg) (string, error)
	SubmitPayment(context.Context, SubmitPaymentArg) (PaymentResult, error)
	IsMasterKeyActive(context.Context, IsMasterKeyActiveArg) (bool, error)
}

func RemoteProtocol(i RemoteInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "stellar.1.remote",
		Methods: map[string]rpc.ServeHandlerDescription{
			"balances": {
				MakeArg: func() interface{} {
					ret := make([]BalancesArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]BalancesArg)
					if !ok {
						err = rpc.NewTypeError((*[]BalancesArg)(nil), args)
						return
					}
					ret, err = i.Balances(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"recentPayments": {
				MakeArg: func() interface{} {
					ret := make([]RecentPaymentsArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]RecentPaymentsArg)
					if !ok {
						err = rpc.NewTypeError((*[]RecentPaymentsArg)(nil), args)
						return
					}
					ret, err = i.RecentPayments(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"transaction": {
				MakeArg: func() interface{} {
					ret := make([]TransactionArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]TransactionArg)
					if !ok {
						err = rpc.NewTypeError((*[]TransactionArg)(nil), args)
						return
					}
					ret, err = i.Transaction(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"accountSeqno": {
				MakeArg: func() interface{} {
					ret := make([]AccountSeqnoArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]AccountSeqnoArg)
					if !ok {
						err = rpc.NewTypeError((*[]AccountSeqnoArg)(nil), args)
						return
					}
					ret, err = i.AccountSeqno(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"submitPayment": {
				MakeArg: func() interface{} {
					ret := make([]SubmitPaymentArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]SubmitPaymentArg)
					if !ok {
						err = rpc.NewTypeError((*[]SubmitPaymentArg)(nil), args)
						return
					}
					ret, err = i.SubmitPayment(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"isMasterKeyActive": {
				MakeArg: func() interface{} {
					ret := make([]IsMasterKeyActiveArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]IsMasterKeyActiveArg)
					if !ok {
						err = rpc.NewTypeError((*[]IsMasterKeyActiveArg)(nil), args)
						return
					}
					ret, err = i.IsMasterKeyActive(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
		},
	}
}

type RemoteClient struct {
	Cli rpc.GenericClient
}

func (c RemoteClient) Balances(ctx context.Context, __arg BalancesArg) (res []Balance, err error) {
	err = c.Cli.Call(ctx, "stellar.1.remote.balances", []interface{}{__arg}, &res)
	return
}

func (c RemoteClient) RecentPayments(ctx context.Context, __arg RecentPaymentsArg) (res []PaymentSummary, err error) {
	err = c.Cli.Call(ctx, "stellar.1.remote.recentPayments", []interface{}{__arg}, &res)
	return
}

func (c RemoteClient) Transaction(ctx context.Context, __arg TransactionArg) (res TransactionDetails, err error) {
	err = c.Cli.Call(ctx, "stellar.1.remote.transaction", []interface{}{__arg}, &res)
	return
}

func (c RemoteClient) AccountSeqno(ctx context.Context, __arg AccountSeqnoArg) (res string, err error) {
	err = c.Cli.Call(ctx, "stellar.1.remote.accountSeqno", []interface{}{__arg}, &res)
	return
}

func (c RemoteClient) SubmitPayment(ctx context.Context, __arg SubmitPaymentArg) (res PaymentResult, err error) {
	err = c.Cli.Call(ctx, "stellar.1.remote.submitPayment", []interface{}{__arg}, &res)
	return
}

func (c RemoteClient) IsMasterKeyActive(ctx context.Context, __arg IsMasterKeyActiveArg) (res bool, err error) {
	err = c.Cli.Call(ctx, "stellar.1.remote.isMasterKeyActive", []interface{}{__arg}, &res)
	return
}
