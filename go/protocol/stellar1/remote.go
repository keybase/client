// Auto-generated by avdl-compiler v1.3.22 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/stellar1/remote.avdl

package stellar1

import (
	keybase1 "github.com/keybase/client/go/protocol/keybase1"
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
	context "golang.org/x/net/context"
)

type AccountID string

func (o AccountID) DeepCopy() AccountID {
	return o
}

type TransactionID string

func (o TransactionID) DeepCopy() TransactionID {
	return o
}

type KeybaseTransactionID string

func (o KeybaseTransactionID) DeepCopy() KeybaseTransactionID {
	return o
}

type TimeMs int64

func (o TimeMs) DeepCopy() TimeMs {
	return o
}

type Asset struct {
	Type   string `codec:"type" json:"type"`
	Code   string `codec:"code" json:"code"`
	Issuer string `codec:"issuer" json:"issuer"`
}

func (o Asset) DeepCopy() Asset {
	return Asset{
		Type:   o.Type,
		Code:   o.Code,
		Issuer: o.Issuer,
	}
}

type Balance struct {
	Asset  Asset  `codec:"asset" json:"asset"`
	Amount string `codec:"amount" json:"amount"`
	Limit  string `codec:"limit" json:"limit"`
}

func (o Balance) DeepCopy() Balance {
	return Balance{
		Asset:  o.Asset.DeepCopy(),
		Amount: o.Amount,
		Limit:  o.Limit,
	}
}

type EncryptedNote struct {
	V   int          `codec:"v" json:"v"`
	E   []byte       `codec:"e" json:"e"`
	N   []byte       `codec:"n" json:"n"`
	KID keybase1.KID `codec:"KID" json:"KID"`
}

func (o EncryptedNote) DeepCopy() EncryptedNote {
	return EncryptedNote{
		V: o.V,
		E: (func(x []byte) []byte {
			if x == nil {
				return nil
			}
			return append([]byte{}, x...)
		})(o.E),
		N: (func(x []byte) []byte {
			if x == nil {
				return nil
			}
			return append([]byte{}, x...)
		})(o.N),
		KID: o.KID.DeepCopy(),
	}
}

type Members struct {
	FromStellar  AccountID         `codec:"fromStellar" json:"fromStellar"`
	FromKeybase  string            `codec:"fromKeybase" json:"fromKeybase"`
	FromUID      keybase1.UID      `codec:"fromUID" json:"fromUID"`
	FromDeviceID keybase1.DeviceID `codec:"fromDeviceID" json:"fromDeviceID"`
	ToStellar    AccountID         `codec:"toStellar" json:"toStellar"`
	ToKeybase    string            `codec:"toKeybase" json:"toKeybase"`
	ToUID        keybase1.UID      `codec:"toUID" json:"toUID"`
}

func (o Members) DeepCopy() Members {
	return Members{
		FromStellar:  o.FromStellar.DeepCopy(),
		FromKeybase:  o.FromKeybase,
		FromUID:      o.FromUID.DeepCopy(),
		FromDeviceID: o.FromDeviceID.DeepCopy(),
		ToStellar:    o.ToStellar.DeepCopy(),
		ToKeybase:    o.ToKeybase,
		ToUID:        o.ToUID.DeepCopy(),
	}
}

type TransactionSummary struct {
	StellarID       TransactionID        `codec:"stellarID" json:"stellarID"`
	KeybaseID       KeybaseTransactionID `codec:"keybaseID" json:"keybaseID"`
	Status          string               `codec:"status" json:"status"`
	ErrMsg          string               `codec:"errMsg" json:"errMsg"`
	Note            EncryptedNote        `codec:"note" json:"note"`
	Asset           Asset                `codec:"asset" json:"asset"`
	Amount          string               `codec:"amount" json:"amount"`
	DisplayAmount   string               `codec:"displayAmount" json:"displayAmount"`
	DisplayCurrency string               `codec:"displayCurrency" json:"displayCurrency"`
	Members         Members              `codec:"members" json:"members"`
	Ctime           TimeMs               `codec:"ctime" json:"ctime"`
	Rtime           TimeMs               `codec:"rtime" json:"rtime"`
}

func (o TransactionSummary) DeepCopy() TransactionSummary {
	return TransactionSummary{
		StellarID:       o.StellarID.DeepCopy(),
		KeybaseID:       o.KeybaseID.DeepCopy(),
		Status:          o.Status,
		ErrMsg:          o.ErrMsg,
		Note:            o.Note.DeepCopy(),
		Asset:           o.Asset.DeepCopy(),
		Amount:          o.Amount,
		DisplayAmount:   o.DisplayAmount,
		DisplayCurrency: o.DisplayCurrency,
		Members:         o.Members.DeepCopy(),
		Ctime:           o.Ctime.DeepCopy(),
		Rtime:           o.Rtime.DeepCopy(),
	}
}

type Operation struct {
	ID              string `codec:"ID" json:"ID"`
	OpType          string `codec:"opType" json:"opType"`
	CreatedAt       int    `codec:"createdAt" json:"createdAt"`
	TransactionHash string `codec:"TransactionHash" json:"TransactionHash"`
	Asset           Asset  `codec:"asset" json:"asset"`
	Amount          string `codec:"amount" json:"amount"`
}

func (o Operation) DeepCopy() Operation {
	return Operation{
		ID:              o.ID,
		OpType:          o.OpType,
		CreatedAt:       o.CreatedAt,
		TransactionHash: o.TransactionHash,
		Asset:           o.Asset.DeepCopy(),
		Amount:          o.Amount,
	}
}

type TransactionDetails struct {
	StellarID             TransactionID        `codec:"stellarID" json:"stellarID"`
	KeybaseID             KeybaseTransactionID `codec:"keybaseID" json:"keybaseID"`
	Hash                  string               `codec:"Hash" json:"Hash"`
	Ledger                int                  `codec:"ledger" json:"ledger"`
	LedgerCloseTime       int                  `codec:"ledgerCloseTime" json:"ledgerCloseTime"`
	SourceAccount         AccountID            `codec:"sourceAccount" json:"sourceAccount"`
	SourceAccountSequence string               `codec:"sourceAccountSequence" json:"sourceAccountSequence"`
	FeePaid               int                  `codec:"feePaid" json:"feePaid"`
	Members               Members              `codec:"members" json:"members"`
	Note                  EncryptedNote        `codec:"note" json:"note"`
	Signatures            []string             `codec:"signatures" json:"signatures"`
	Operations            []Operation          `codec:"operations" json:"operations"`
	Ctime                 TimeMs               `codec:"ctime" json:"ctime"`
}

func (o TransactionDetails) DeepCopy() TransactionDetails {
	return TransactionDetails{
		StellarID:             o.StellarID.DeepCopy(),
		KeybaseID:             o.KeybaseID.DeepCopy(),
		Hash:                  o.Hash,
		Ledger:                o.Ledger,
		LedgerCloseTime:       o.LedgerCloseTime,
		SourceAccount:         o.SourceAccount.DeepCopy(),
		SourceAccountSequence: o.SourceAccountSequence,
		FeePaid:               o.FeePaid,
		Members:               o.Members.DeepCopy(),
		Note:                  o.Note.DeepCopy(),
		Signatures: (func(x []string) []string {
			if x == nil {
				return nil
			}
			var ret []string
			for _, v := range x {
				vCopy := v
				ret = append(ret, vCopy)
			}
			return ret
		})(o.Signatures),
		Operations: (func(x []Operation) []Operation {
			if x == nil {
				return nil
			}
			var ret []Operation
			for _, v := range x {
				vCopy := v.DeepCopy()
				ret = append(ret, vCopy)
			}
			return ret
		})(o.Operations),
		Ctime: o.Ctime.DeepCopy(),
	}
}

type PaymentPost struct {
	StellarAccountSeqno uint64        `codec:"stellarAccountSeqno" json:"stellarAccountSeqno"`
	Members             Members       `codec:"members" json:"members"`
	DisplayAmount       string        `codec:"displayAmount" json:"displayAmount"`
	DisplayCurrency     string        `codec:"displayCurrency" json:"displayCurrency"`
	Note                EncryptedNote `codec:"note" json:"note"`
	SignedTransaction   string        `codec:"signedTransaction" json:"signedTransaction"`
}

func (o PaymentPost) DeepCopy() PaymentPost {
	return PaymentPost{
		StellarAccountSeqno: o.StellarAccountSeqno,
		Members:             o.Members.DeepCopy(),
		DisplayAmount:       o.DisplayAmount,
		DisplayCurrency:     o.DisplayCurrency,
		Note:                o.Note.DeepCopy(),
		SignedTransaction:   o.SignedTransaction,
	}
}

type PaymentResult struct {
	StellarID TransactionID        `codec:"stellarID" json:"stellarID"`
	KeybaseID KeybaseTransactionID `codec:"keybaseID" json:"keybaseID"`
	Ledger    int                  `codec:"Ledger" json:"Ledger"`
}

func (o PaymentResult) DeepCopy() PaymentResult {
	return PaymentResult{
		StellarID: o.StellarID.DeepCopy(),
		KeybaseID: o.KeybaseID.DeepCopy(),
		Ledger:    o.Ledger,
	}
}

type BalancesArg struct {
	Uid       keybase1.UID `codec:"uid" json:"uid"`
	AccountID AccountID    `codec:"accountID" json:"accountID"`
}

type RecentTransactionsArg struct {
	Uid       keybase1.UID `codec:"uid" json:"uid"`
	AccountID AccountID    `codec:"accountID" json:"accountID"`
	Count     int          `codec:"count" json:"count"`
}

type TransactionArg struct {
	Uid keybase1.UID  `codec:"uid" json:"uid"`
	Id  TransactionID `codec:"id" json:"id"`
}

type SubmitPaymentArg struct {
	Uid     keybase1.UID `codec:"uid" json:"uid"`
	Payment PaymentPost  `codec:"payment" json:"payment"`
}

type RemoteInterface interface {
	Balances(context.Context, BalancesArg) ([]Balance, error)
	RecentTransactions(context.Context, RecentTransactionsArg) ([]TransactionSummary, error)
	Transaction(context.Context, TransactionArg) (TransactionDetails, error)
	SubmitPayment(context.Context, SubmitPaymentArg) (PaymentResult, error)
}

func RemoteProtocol(i RemoteInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "stellar.1.remote",
		Methods: map[string]rpc.ServeHandlerDescription{
			"balances": {
				MakeArg: func() interface{} {
					ret := make([]BalancesArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]BalancesArg)
					if !ok {
						err = rpc.NewTypeError((*[]BalancesArg)(nil), args)
						return
					}
					ret, err = i.Balances(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"recentTransactions": {
				MakeArg: func() interface{} {
					ret := make([]RecentTransactionsArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]RecentTransactionsArg)
					if !ok {
						err = rpc.NewTypeError((*[]RecentTransactionsArg)(nil), args)
						return
					}
					ret, err = i.RecentTransactions(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"transaction": {
				MakeArg: func() interface{} {
					ret := make([]TransactionArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]TransactionArg)
					if !ok {
						err = rpc.NewTypeError((*[]TransactionArg)(nil), args)
						return
					}
					ret, err = i.Transaction(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"submitPayment": {
				MakeArg: func() interface{} {
					ret := make([]SubmitPaymentArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]SubmitPaymentArg)
					if !ok {
						err = rpc.NewTypeError((*[]SubmitPaymentArg)(nil), args)
						return
					}
					ret, err = i.SubmitPayment(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
		},
	}
}

type RemoteClient struct {
	Cli rpc.GenericClient
}

func (c RemoteClient) Balances(ctx context.Context, __arg BalancesArg) (res []Balance, err error) {
	err = c.Cli.Call(ctx, "stellar.1.remote.balances", []interface{}{__arg}, &res)
	return
}

func (c RemoteClient) RecentTransactions(ctx context.Context, __arg RecentTransactionsArg) (res []TransactionSummary, err error) {
	err = c.Cli.Call(ctx, "stellar.1.remote.recentTransactions", []interface{}{__arg}, &res)
	return
}

func (c RemoteClient) Transaction(ctx context.Context, __arg TransactionArg) (res TransactionDetails, err error) {
	err = c.Cli.Call(ctx, "stellar.1.remote.transaction", []interface{}{__arg}, &res)
	return
}

func (c RemoteClient) SubmitPayment(ctx context.Context, __arg SubmitPaymentArg) (res PaymentResult, err error) {
	err = c.Cli.Call(ctx, "stellar.1.remote.submitPayment", []interface{}{__arg}, &res)
	return
}
