// Auto-generated by avdl-compiler v1.3.24 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/stellar1/notify.avdl

package stellar1

import (
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
	context "golang.org/x/net/context"
)

type PaymentNotificationArg struct {
	AccountID AccountID `codec:"accountID" json:"accountID"`
	PaymentID PaymentID `codec:"paymentID" json:"paymentID"`
}

type PaymentStatusNotificationArg struct {
	KbTxID KeybaseTransactionID `codec:"kbTxID" json:"kbTxID"`
	TxID   TransactionID        `codec:"txID" json:"txID"`
}

type RequestStatusNotificationArg struct {
	ReqID KeybaseRequestID `codec:"reqID" json:"reqID"`
}

type NotifyInterface interface {
	PaymentNotification(context.Context, PaymentNotificationArg) error
	PaymentStatusNotification(context.Context, PaymentStatusNotificationArg) error
	RequestStatusNotification(context.Context, KeybaseRequestID) error
}

func NotifyProtocol(i NotifyInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "stellar.1.notify",
		Methods: map[string]rpc.ServeHandlerDescription{
			"paymentNotification": {
				MakeArg: func() interface{} {
					ret := make([]PaymentNotificationArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]PaymentNotificationArg)
					if !ok {
						err = rpc.NewTypeError((*[]PaymentNotificationArg)(nil), args)
						return
					}
					err = i.PaymentNotification(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodNotify,
			},
			"paymentStatusNotification": {
				MakeArg: func() interface{} {
					ret := make([]PaymentStatusNotificationArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]PaymentStatusNotificationArg)
					if !ok {
						err = rpc.NewTypeError((*[]PaymentStatusNotificationArg)(nil), args)
						return
					}
					err = i.PaymentStatusNotification(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodNotify,
			},
			"requestStatusNotification": {
				MakeArg: func() interface{} {
					ret := make([]RequestStatusNotificationArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]RequestStatusNotificationArg)
					if !ok {
						err = rpc.NewTypeError((*[]RequestStatusNotificationArg)(nil), args)
						return
					}
					err = i.RequestStatusNotification(ctx, (*typedArgs)[0].ReqID)
					return
				},
				MethodType: rpc.MethodNotify,
			},
		},
	}
}

type NotifyClient struct {
	Cli rpc.GenericClient
}

func (c NotifyClient) PaymentNotification(ctx context.Context, __arg PaymentNotificationArg) (err error) {
	err = c.Cli.Notify(ctx, "stellar.1.notify.paymentNotification", []interface{}{__arg})
	return
}

func (c NotifyClient) PaymentStatusNotification(ctx context.Context, __arg PaymentStatusNotificationArg) (err error) {
	err = c.Cli.Notify(ctx, "stellar.1.notify.paymentStatusNotification", []interface{}{__arg})
	return
}

func (c NotifyClient) RequestStatusNotification(ctx context.Context, reqID KeybaseRequestID) (err error) {
	__arg := RequestStatusNotificationArg{ReqID: reqID}
	err = c.Cli.Notify(ctx, "stellar.1.notify.requestStatusNotification", []interface{}{__arg})
	return
}
