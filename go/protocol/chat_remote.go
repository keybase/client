// Auto-generated by avdl-compiler v1.3.1 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/chat_remote.avdl

package keybase1

import (
	rpc "github.com/keybase/go-framed-msgpack-rpc"
	context "golang.org/x/net/context"
)

type MessageBoxed struct {
	ServerHeader    *MessageServerHeader `codec:"serverHeader,omitempty" json:"serverHeader,omitempty"`
	ClientHeader    MessageClientHeader  `codec:"clientHeader" json:"clientHeader"`
	HeaderSignature SignatureInfo        `codec:"headerSignature" json:"headerSignature"`
	BodyCiphertext  EncryptedData        `codec:"bodyCiphertext" json:"bodyCiphertext"`
	BodySignature   SignatureInfo        `codec:"bodySignature" json:"bodySignature"`
	KeyGeneration   int                  `codec:"keyGeneration" json:"keyGeneration"`
}

type ThreadViewBoxed struct {
	Messages   []MessageBoxed `codec:"messages" json:"messages"`
	Pagination *Pagination    `codec:"pagination,omitempty" json:"pagination,omitempty"`
}

type GetInboxRemoteArg struct {
	Pagination *Pagination `codec:"pagination,omitempty" json:"pagination,omitempty"`
}

type GetThreadRemoteArg struct {
	ConversationID ConversationID `codec:"conversationID" json:"conversationID"`
	Pagination     *Pagination    `codec:"pagination,omitempty" json:"pagination,omitempty"`
}

type PostRemoteArg struct {
	ConversationID ConversationID `codec:"conversationID" json:"conversationID"`
	MessageBoxed   MessageBoxed   `codec:"messageBoxed" json:"messageBoxed"`
}

type NewConversationRemoteArg struct {
	ConversationMetadata ConversationMetadata `codec:"conversationMetadata" json:"conversationMetadata"`
}

type ChatRemoteInterface interface {
	GetInboxRemote(context.Context, *Pagination) (InboxView, error)
	GetThreadRemote(context.Context, GetThreadRemoteArg) (ThreadViewBoxed, error)
	PostRemote(context.Context, PostRemoteArg) error
	NewConversationRemote(context.Context, ConversationMetadata) error
}

func ChatRemoteProtocol(i ChatRemoteInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "keybase.1.chatRemote",
		Methods: map[string]rpc.ServeHandlerDescription{
			"getInboxRemote": {
				MakeArg: func() interface{} {
					ret := make([]GetInboxRemoteArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]GetInboxRemoteArg)
					if !ok {
						err = rpc.NewTypeError((*[]GetInboxRemoteArg)(nil), args)
						return
					}
					ret, err = i.GetInboxRemote(ctx, (*typedArgs)[0].Pagination)
					return
				},
				MethodType: rpc.MethodCall,
			},
			"getThreadRemote": {
				MakeArg: func() interface{} {
					ret := make([]GetThreadRemoteArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]GetThreadRemoteArg)
					if !ok {
						err = rpc.NewTypeError((*[]GetThreadRemoteArg)(nil), args)
						return
					}
					ret, err = i.GetThreadRemote(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"postRemote": {
				MakeArg: func() interface{} {
					ret := make([]PostRemoteArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]PostRemoteArg)
					if !ok {
						err = rpc.NewTypeError((*[]PostRemoteArg)(nil), args)
						return
					}
					err = i.PostRemote(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"newConversationRemote": {
				MakeArg: func() interface{} {
					ret := make([]NewConversationRemoteArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]NewConversationRemoteArg)
					if !ok {
						err = rpc.NewTypeError((*[]NewConversationRemoteArg)(nil), args)
						return
					}
					err = i.NewConversationRemote(ctx, (*typedArgs)[0].ConversationMetadata)
					return
				},
				MethodType: rpc.MethodCall,
			},
		},
	}
}

type ChatRemoteClient struct {
	Cli rpc.GenericClient
}

func (c ChatRemoteClient) GetInboxRemote(ctx context.Context, pagination *Pagination) (res InboxView, err error) {
	__arg := GetInboxRemoteArg{Pagination: pagination}
	err = c.Cli.Call(ctx, "keybase.1.chatRemote.getInboxRemote", []interface{}{__arg}, &res)
	return
}

func (c ChatRemoteClient) GetThreadRemote(ctx context.Context, __arg GetThreadRemoteArg) (res ThreadViewBoxed, err error) {
	err = c.Cli.Call(ctx, "keybase.1.chatRemote.getThreadRemote", []interface{}{__arg}, &res)
	return
}

func (c ChatRemoteClient) PostRemote(ctx context.Context, __arg PostRemoteArg) (err error) {
	err = c.Cli.Call(ctx, "keybase.1.chatRemote.postRemote", []interface{}{__arg}, nil)
	return
}

func (c ChatRemoteClient) NewConversationRemote(ctx context.Context, conversationMetadata ConversationMetadata) (err error) {
	__arg := NewConversationRemoteArg{ConversationMetadata: conversationMetadata}
	err = c.Cli.Call(ctx, "keybase.1.chatRemote.newConversationRemote", []interface{}{__arg}, nil)
	return
}
