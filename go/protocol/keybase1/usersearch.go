// Auto-generated by avdl-compiler v1.3.29 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/keybase1/usersearch.avdl

package keybase1

import (
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
	context "golang.org/x/net/context"
)

type APIUserServiceIDWithContact string

func (o APIUserServiceIDWithContact) DeepCopy() APIUserServiceIDWithContact {
	return o
}

type APIUserKeybaseResult struct {
	Username   string `codec:"username" json:"username"`
	Uid        string `codec:"uid" json:"uid"`
	PictureUrl string `codec:"pictureUrl" json:"picture_url"`
	FullName   string `codec:"fullName" json:"full_name"`
	IsFollowee bool   `codec:"isFollowee" json:"is_followee"`
}

func (o APIUserKeybaseResult) DeepCopy() APIUserKeybaseResult {
	return APIUserKeybaseResult{
		Username:   o.Username,
		Uid:        o.Uid,
		PictureUrl: o.PictureUrl,
		FullName:   o.FullName,
		IsFollowee: o.IsFollowee,
	}
}

type APIUserServiceResult struct {
	ServiceName APIUserServiceIDWithContact `codec:"serviceName" json:"service_name"`
	Username    string                      `codec:"username" json:"username"`
	PictureUrl  string                      `codec:"pictureUrl" json:"picture_url"`
	Bio         string                      `codec:"bio" json:"bio"`
	Location    string                      `codec:"location" json:"location"`
	FullName    string                      `codec:"fullName" json:"full_name"`
}

func (o APIUserServiceResult) DeepCopy() APIUserServiceResult {
	return APIUserServiceResult{
		ServiceName: o.ServiceName.DeepCopy(),
		Username:    o.Username,
		PictureUrl:  o.PictureUrl,
		Bio:         o.Bio,
		Location:    o.Location,
		FullName:    o.FullName,
	}
}

type APIUserServiceSummary struct {
	ServiceName APIUserServiceIDWithContact `codec:"serviceName" json:"service_name"`
	Username    string                      `codec:"username" json:"username"`
}

func (o APIUserServiceSummary) DeepCopy() APIUserServiceSummary {
	return APIUserServiceSummary{
		ServiceName: o.ServiceName.DeepCopy(),
		Username:    o.Username,
	}
}

type APIUserSearchResult struct {
	Score           float64                                               `codec:"score" json:"score"`
	Keybase         *APIUserKeybaseResult                                 `codec:"keybase,omitempty" json:"keybase,omitempty"`
	Service         *APIUserServiceResult                                 `codec:"service,omitempty" json:"service,omitempty"`
	ServicesSummary map[APIUserServiceIDWithContact]APIUserServiceSummary `codec:"servicesSummary" json:"services_summary"`
}

func (o APIUserSearchResult) DeepCopy() APIUserSearchResult {
	return APIUserSearchResult{
		Score: o.Score,
		Keybase: (func(x *APIUserKeybaseResult) *APIUserKeybaseResult {
			if x == nil {
				return nil
			}
			tmp := (*x).DeepCopy()
			return &tmp
		})(o.Keybase),
		Service: (func(x *APIUserServiceResult) *APIUserServiceResult {
			if x == nil {
				return nil
			}
			tmp := (*x).DeepCopy()
			return &tmp
		})(o.Service),
		ServicesSummary: (func(x map[APIUserServiceIDWithContact]APIUserServiceSummary) map[APIUserServiceIDWithContact]APIUserServiceSummary {
			if x == nil {
				return nil
			}
			ret := make(map[APIUserServiceIDWithContact]APIUserServiceSummary, len(x))
			for k, v := range x {
				kCopy := k.DeepCopy()
				vCopy := v.DeepCopy()
				ret[kCopy] = vCopy
			}
			return ret
		})(o.ServicesSummary),
	}
}

type UserSearchArg struct {
	Query      string `codec:"query" json:"query"`
	Service    string `codec:"service" json:"service"`
	MaxResults int    `codec:"maxResults" json:"maxResults"`
}

type UserSearchInterface interface {
	UserSearch(context.Context, UserSearchArg) ([]APIUserSearchResult, error)
}

func UserSearchProtocol(i UserSearchInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "keybase.1.userSearch",
		Methods: map[string]rpc.ServeHandlerDescription{
			"userSearch": {
				MakeArg: func() interface{} {
					var ret [1]UserSearchArg
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[1]UserSearchArg)
					if !ok {
						err = rpc.NewTypeError((*[1]UserSearchArg)(nil), args)
						return
					}
					ret, err = i.UserSearch(ctx, typedArgs[0])
					return
				},
			},
		},
	}
}

type UserSearchClient struct {
	Cli rpc.GenericClient
}

func (c UserSearchClient) UserSearch(ctx context.Context, __arg UserSearchArg) (res []APIUserSearchResult, err error) {
	err = c.Cli.Call(ctx, "keybase.1.userSearch.userSearch", []interface{}{__arg}, &res)
	return
}
