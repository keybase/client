// Auto-generated by avdl-compiler v1.3.25 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/keybase1/notify_phone.avdl

package keybase1

import (
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
	context "golang.org/x/net/context"
)

type PhoneNumberAddedArg struct {
	PhoneNumber PhoneNumber `codec:"phoneNumber" json:"phoneNumber"`
}

type PhoneNumberVerifiedArg struct {
	PhoneNumber PhoneNumber `codec:"phoneNumber" json:"phoneNumber"`
}

type PhoneNumberSupersededArg struct {
	PhoneNumber PhoneNumber `codec:"phoneNumber" json:"phoneNumber"`
}

type NotifyPhoneNumberInterface interface {
	PhoneNumberAdded(context.Context, PhoneNumber) error
	PhoneNumberVerified(context.Context, PhoneNumber) error
	PhoneNumberSuperseded(context.Context, PhoneNumber) error
}

func NotifyPhoneNumberProtocol(i NotifyPhoneNumberInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "keybase.1.NotifyPhoneNumber",
		Methods: map[string]rpc.ServeHandlerDescription{
			"phoneNumberAdded": {
				MakeArg: func() interface{} {
					var ret [1]PhoneNumberAddedArg
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[1]PhoneNumberAddedArg)
					if !ok {
						err = rpc.NewTypeError((*[1]PhoneNumberAddedArg)(nil), args)
						return
					}
					err = i.PhoneNumberAdded(ctx, typedArgs[0].PhoneNumber)
					return
				},
				MethodType: rpc.MethodNotify,
			},
			"phoneNumberVerified": {
				MakeArg: func() interface{} {
					var ret [1]PhoneNumberVerifiedArg
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[1]PhoneNumberVerifiedArg)
					if !ok {
						err = rpc.NewTypeError((*[1]PhoneNumberVerifiedArg)(nil), args)
						return
					}
					err = i.PhoneNumberVerified(ctx, typedArgs[0].PhoneNumber)
					return
				},
				MethodType: rpc.MethodNotify,
			},
			"phoneNumberSuperseded": {
				MakeArg: func() interface{} {
					var ret [1]PhoneNumberSupersededArg
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[1]PhoneNumberSupersededArg)
					if !ok {
						err = rpc.NewTypeError((*[1]PhoneNumberSupersededArg)(nil), args)
						return
					}
					err = i.PhoneNumberSuperseded(ctx, typedArgs[0].PhoneNumber)
					return
				},
				MethodType: rpc.MethodNotify,
			},
		},
	}
}

type NotifyPhoneNumberClient struct {
	Cli rpc.GenericClient
}

func (c NotifyPhoneNumberClient) PhoneNumberAdded(ctx context.Context, phoneNumber PhoneNumber) (err error) {
	__arg := PhoneNumberAddedArg{PhoneNumber: phoneNumber}
	err = c.Cli.Notify(ctx, "keybase.1.NotifyPhoneNumber.phoneNumberAdded", []interface{}{__arg})
	return
}

func (c NotifyPhoneNumberClient) PhoneNumberVerified(ctx context.Context, phoneNumber PhoneNumber) (err error) {
	__arg := PhoneNumberVerifiedArg{PhoneNumber: phoneNumber}
	err = c.Cli.Notify(ctx, "keybase.1.NotifyPhoneNumber.phoneNumberVerified", []interface{}{__arg})
	return
}

func (c NotifyPhoneNumberClient) PhoneNumberSuperseded(ctx context.Context, phoneNumber PhoneNumber) (err error) {
	__arg := PhoneNumberSupersededArg{PhoneNumber: phoneNumber}
	err = c.Cli.Notify(ctx, "keybase.1.NotifyPhoneNumber.phoneNumberSuperseded", []interface{}{__arg})
	return
}
