// Auto-generated by avdl-compiler v1.3.29 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/keybase1/identify3_ui.avdl

package keybase1

import (
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
	context "golang.org/x/net/context"
)

type Identify3RowState int

const (
	Identify3RowState_CHECKING Identify3RowState = 1
	Identify3RowState_VALID    Identify3RowState = 2
	Identify3RowState_ERROR    Identify3RowState = 3
	Identify3RowState_WARNING  Identify3RowState = 4
	Identify3RowState_REVOKED  Identify3RowState = 5
)

func (o Identify3RowState) DeepCopy() Identify3RowState { return o }

var Identify3RowStateMap = map[string]Identify3RowState{
	"CHECKING": 1,
	"VALID":    2,
	"ERROR":    3,
	"WARNING":  4,
	"REVOKED":  5,
}

var Identify3RowStateRevMap = map[Identify3RowState]string{
	1: "CHECKING",
	2: "VALID",
	3: "ERROR",
	4: "WARNING",
	5: "REVOKED",
}

func (e Identify3RowState) String() string {
	if v, ok := Identify3RowStateRevMap[e]; ok {
		return v
	}
	return ""
}

type Identify3RowColor int

const (
	Identify3RowColor_BLUE  Identify3RowColor = 1
	Identify3RowColor_RED   Identify3RowColor = 2
	Identify3RowColor_BLACK Identify3RowColor = 3
	Identify3RowColor_GREEN Identify3RowColor = 4
)

func (o Identify3RowColor) DeepCopy() Identify3RowColor { return o }

var Identify3RowColorMap = map[string]Identify3RowColor{
	"BLUE":  1,
	"RED":   2,
	"BLACK": 3,
	"GREEN": 4,
}

var Identify3RowColorRevMap = map[Identify3RowColor]string{
	1: "BLUE",
	2: "RED",
	3: "BLACK",
	4: "GREEN",
}

func (e Identify3RowColor) String() string {
	if v, ok := Identify3RowColorRevMap[e]; ok {
		return v
	}
	return ""
}

type Identify3ResultType int

const (
	Identify3ResultType_OK            Identify3ResultType = 0
	Identify3ResultType_BROKEN        Identify3ResultType = 1
	Identify3ResultType_NEEDS_UPGRADE Identify3ResultType = 2
)

func (o Identify3ResultType) DeepCopy() Identify3ResultType { return o }

var Identify3ResultTypeMap = map[string]Identify3ResultType{
	"OK":            0,
	"BROKEN":        1,
	"NEEDS_UPGRADE": 2,
}

var Identify3ResultTypeRevMap = map[Identify3ResultType]string{
	0: "OK",
	1: "BROKEN",
	2: "NEEDS_UPGRADE",
}

func (e Identify3ResultType) String() string {
	if v, ok := Identify3ResultTypeRevMap[e]; ok {
		return v
	}
	return ""
}

type Identify3RowMeta string

func (o Identify3RowMeta) DeepCopy() Identify3RowMeta {
	return o
}

type ShowTrackerArg struct {
	GuiID     Identify3GUIID     `codec:"guiID" json:"guiID"`
	Assertion Identify3Assertion `codec:"assertion" json:"assertion"`
	Reason    string             `codec:"reason" json:"reason"`
}

type Identify3UpdateRowArg struct {
	GuiID    Identify3GUIID     `codec:"guiID" json:"guiID"`
	Key      string             `codec:"key" json:"key"`
	Value    string             `codec:"value" json:"value"`
	SiteURL  string             `codec:"siteURL" json:"siteURL"`
	SiteIcon string             `codec:"siteIcon" json:"siteIcon"`
	ProofURL string             `codec:"proofURL" json:"proofURL"`
	State    Identify3RowState  `codec:"state" json:"state"`
	Metas    []Identify3RowMeta `codec:"metas" json:"metas"`
	Color    Identify3RowColor  `codec:"color" json:"color"`
}

type Identify3UpdateDetailsArg struct {
	GuiID          Identify3GUIID `codec:"guiID" json:"guiID"`
	FollowsYou     bool           `codec:"followsYou" json:"followsYou"`
	FollowThem     bool           `codec:"followThem" json:"followThem"`
	FollowersCount int            `codec:"followersCount" json:"followersCount"`
	FollowingCount int            `codec:"followingCount" json:"followingCount"`
	Bio            string         `codec:"bio" json:"bio"`
	Location       string         `codec:"location" json:"location"`
	PublishedTeams []string       `codec:"publishedTeams" json:"publishedTeams"`
}

type Identify3TrackerTimedOutArg struct {
	GuiID Identify3GUIID `codec:"guiID" json:"guiID"`
}

type Identify3ResultArg struct {
	Result Identify3ResultType `codec:"result" json:"result"`
}

type Identify3UiInterface interface {
	ShowTracker(context.Context, ShowTrackerArg) error
	Identify3UpdateRow(context.Context, Identify3UpdateRowArg) error
	Identify3UpdateDetails(context.Context, Identify3UpdateDetailsArg) error
	Identify3TrackerTimedOut(context.Context, Identify3GUIID) error
	Identify3Result(context.Context, Identify3ResultType) error
}

func Identify3UiProtocol(i Identify3UiInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "keybase.1.identify3Ui",
		Methods: map[string]rpc.ServeHandlerDescription{
			"showTracker": {
				MakeArg: func() interface{} {
					var ret [1]ShowTrackerArg
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[1]ShowTrackerArg)
					if !ok {
						err = rpc.NewTypeError((*[1]ShowTrackerArg)(nil), args)
						return
					}
					err = i.ShowTracker(ctx, typedArgs[0])
					return
				},
			},
			"identify3UpdateRow": {
				MakeArg: func() interface{} {
					var ret [1]Identify3UpdateRowArg
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[1]Identify3UpdateRowArg)
					if !ok {
						err = rpc.NewTypeError((*[1]Identify3UpdateRowArg)(nil), args)
						return
					}
					err = i.Identify3UpdateRow(ctx, typedArgs[0])
					return
				},
			},
			"identify3UpdateDetails": {
				MakeArg: func() interface{} {
					var ret [1]Identify3UpdateDetailsArg
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[1]Identify3UpdateDetailsArg)
					if !ok {
						err = rpc.NewTypeError((*[1]Identify3UpdateDetailsArg)(nil), args)
						return
					}
					err = i.Identify3UpdateDetails(ctx, typedArgs[0])
					return
				},
			},
			"identify3TrackerTimedOut": {
				MakeArg: func() interface{} {
					var ret [1]Identify3TrackerTimedOutArg
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[1]Identify3TrackerTimedOutArg)
					if !ok {
						err = rpc.NewTypeError((*[1]Identify3TrackerTimedOutArg)(nil), args)
						return
					}
					err = i.Identify3TrackerTimedOut(ctx, typedArgs[0].GuiID)
					return
				},
			},
			"identify3Result": {
				MakeArg: func() interface{} {
					var ret [1]Identify3ResultArg
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[1]Identify3ResultArg)
					if !ok {
						err = rpc.NewTypeError((*[1]Identify3ResultArg)(nil), args)
						return
					}
					err = i.Identify3Result(ctx, typedArgs[0].Result)
					return
				},
			},
		},
	}
}

type Identify3UiClient struct {
	Cli rpc.GenericClient
}

func (c Identify3UiClient) ShowTracker(ctx context.Context, __arg ShowTrackerArg) (err error) {
	err = c.Cli.Notify(ctx, "keybase.1.identify3Ui.showTracker", []interface{}{__arg})
	return
}

func (c Identify3UiClient) Identify3UpdateRow(ctx context.Context, __arg Identify3UpdateRowArg) (err error) {
	err = c.Cli.Notify(ctx, "keybase.1.identify3Ui.identify3UpdateRow", []interface{}{__arg})
	return
}

func (c Identify3UiClient) Identify3UpdateDetails(ctx context.Context, __arg Identify3UpdateDetailsArg) (err error) {
	err = c.Cli.Notify(ctx, "keybase.1.identify3Ui.identify3UpdateDetails", []interface{}{__arg})
	return
}

func (c Identify3UiClient) Identify3TrackerTimedOut(ctx context.Context, guiID Identify3GUIID) (err error) {
	__arg := Identify3TrackerTimedOutArg{GuiID: guiID}
	err = c.Cli.Notify(ctx, "keybase.1.identify3Ui.identify3TrackerTimedOut", []interface{}{__arg})
	return
}

func (c Identify3UiClient) Identify3Result(ctx context.Context, result Identify3ResultType) (err error) {
	__arg := Identify3ResultArg{Result: result}
	err = c.Cli.Notify(ctx, "keybase.1.identify3Ui.identify3Result", []interface{}{__arg})
	return
}
