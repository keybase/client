// Auto-generated by avdl-compiler v1.3.29 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/keybase1/appstate.avdl

package keybase1

import (
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
	context "golang.org/x/net/context"
)

type MobileAppState int

const (
	MobileAppState_FOREGROUND       MobileAppState = 0
	MobileAppState_BACKGROUND       MobileAppState = 1
	MobileAppState_INACTIVE         MobileAppState = 2
	MobileAppState_BACKGROUNDACTIVE MobileAppState = 3
)

func (o MobileAppState) DeepCopy() MobileAppState { return o }

var MobileAppStateMap = map[string]MobileAppState{
	"FOREGROUND":       0,
	"BACKGROUND":       1,
	"INACTIVE":         2,
	"BACKGROUNDACTIVE": 3,
}

var MobileAppStateRevMap = map[MobileAppState]string{
	0: "FOREGROUND",
	1: "BACKGROUND",
	2: "INACTIVE",
	3: "BACKGROUNDACTIVE",
}

func (e MobileAppState) String() string {
	if v, ok := MobileAppStateRevMap[e]; ok {
		return v
	}
	return ""
}

type PowerMonitorEventArg struct {
	Event string `codec:"event" json:"event"`
}

type AppStateInterface interface {
	PowerMonitorEvent(context.Context, string) error
}

func AppStateProtocol(i AppStateInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "keybase.1.appState",
		Methods: map[string]rpc.ServeHandlerDescription{
			"powerMonitorEvent": {
				MakeArg: func() interface{} {
					var ret [1]PowerMonitorEventArg
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[1]PowerMonitorEventArg)
					if !ok {
						err = rpc.NewTypeError((*[1]PowerMonitorEventArg)(nil), args)
						return
					}
					err = i.PowerMonitorEvent(ctx, typedArgs[0].Event)
					return
				},
			},
		},
	}
}

type AppStateClient struct {
	Cli rpc.GenericClient
}

func (c AppStateClient) PowerMonitorEvent(ctx context.Context, event string) (err error) {
	__arg := PowerMonitorEventArg{Event: event}
	err = c.Cli.Call(ctx, "keybase.1.appState.powerMonitorEvent", []interface{}{__arg}, nil)
	return
}
