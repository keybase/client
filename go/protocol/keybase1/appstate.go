// Auto-generated by avdl-compiler v1.3.22 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/keybase1/appstate.avdl

package keybase1

import (
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
	context "golang.org/x/net/context"
)

type AppState int

const (
	AppState_FOREGROUND       AppState = 0
	AppState_BACKGROUND       AppState = 1
	AppState_INACTIVE         AppState = 2
	AppState_BACKGROUNDACTIVE AppState = 3
	AppState_BACKGROUNDFINAL  AppState = 4
)

func (o AppState) DeepCopy() AppState { return o }

var AppStateMap = map[string]AppState{
	"FOREGROUND":       0,
	"BACKGROUND":       1,
	"INACTIVE":         2,
	"BACKGROUNDACTIVE": 3,
	"BACKGROUNDFINAL":  4,
}

var AppStateRevMap = map[AppState]string{
	0: "FOREGROUND",
	1: "BACKGROUND",
	2: "INACTIVE",
	3: "BACKGROUNDACTIVE",
	4: "BACKGROUNDFINAL",
}

func (e AppState) String() string {
	if v, ok := AppStateRevMap[e]; ok {
		return v
	}
	return ""
}

type UpdateAppStateArg struct {
	State AppState `codec:"state" json:"state"`
}

type AppStateInterface interface {
	UpdateAppState(context.Context, AppState) error
}

func AppStateProtocol(i AppStateInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "keybase.1.appState",
		Methods: map[string]rpc.ServeHandlerDescription{
			"updateAppState": {
				MakeArg: func() interface{} {
					ret := make([]UpdateAppStateArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]UpdateAppStateArg)
					if !ok {
						err = rpc.NewTypeError((*[]UpdateAppStateArg)(nil), args)
						return
					}
					err = i.UpdateAppState(ctx, (*typedArgs)[0].State)
					return
				},
				MethodType: rpc.MethodCall,
			},
		},
	}
}

type AppStateClient struct {
	Cli rpc.GenericClient
}

func (c AppStateClient) UpdateAppState(ctx context.Context, state AppState) (err error) {
	__arg := UpdateAppStateArg{State: state}
	err = c.Cli.Call(ctx, "keybase.1.appState.updateAppState", []interface{}{__arg}, nil)
	return
}
