// Auto-generated by avdl-compiler v1.3.22 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/keybase1/stellar.avdl

package keybase1

import (
	"errors"
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
)

type StellarAccountID string

func (o StellarAccountID) DeepCopy() StellarAccountID {
	return o
}

type StellarSecretKey string

func (o StellarSecretKey) DeepCopy() StellarSecretKey {
	return o
}

type StellarRevision uint64

func (o StellarRevision) DeepCopy() StellarRevision {
	return o
}

type Hash []byte

func (o Hash) DeepCopy() Hash {
	return (func(x []byte) []byte {
		if x == nil {
			return nil
		}
		return append([]byte{}, x...)
	})(o)
}

type EncryptedStellarBundle struct {
	V   int                  `codec:"v" json:"v"`
	E   []byte               `codec:"e" json:"e"`
	N   BoxNonce             `codec:"n" json:"n"`
	Gen PerUserKeyGeneration `codec:"gen" json:"gen"`
}

func (o EncryptedStellarBundle) DeepCopy() EncryptedStellarBundle {
	return EncryptedStellarBundle{
		V: o.V,
		E: (func(x []byte) []byte {
			if x == nil {
				return nil
			}
			return append([]byte{}, x...)
		})(o.E),
		N:   o.N.DeepCopy(),
		Gen: o.Gen.DeepCopy(),
	}
}

type StellarBundleVersion int

const (
	StellarBundleVersion_V1 StellarBundleVersion = 1
)

func (o StellarBundleVersion) DeepCopy() StellarBundleVersion { return o }

var StellarBundleVersionMap = map[string]StellarBundleVersion{
	"V1": 1,
}

var StellarBundleVersionRevMap = map[StellarBundleVersion]string{
	1: "V1",
}

func (e StellarBundleVersion) String() string {
	if v, ok := StellarBundleVersionRevMap[e]; ok {
		return v
	}
	return ""
}

type StellarBundleSecretVersioned struct {
	Version__ StellarBundleVersion   `codec:"version" json:"version"`
	V1__      *StellarBundleSecretV1 `codec:"v1,omitempty" json:"v1,omitempty"`
}

func (o *StellarBundleSecretVersioned) Version() (ret StellarBundleVersion, err error) {
	switch o.Version__ {
	case StellarBundleVersion_V1:
		if o.V1__ == nil {
			err = errors.New("unexpected nil value for V1__")
			return ret, err
		}
	}
	return o.Version__, nil
}

func (o StellarBundleSecretVersioned) V1() (res StellarBundleSecretV1) {
	if o.Version__ != StellarBundleVersion_V1 {
		panic("wrong case accessed")
	}
	if o.V1__ == nil {
		return
	}
	return *o.V1__
}

func NewStellarBundleSecretVersionedWithV1(v StellarBundleSecretV1) StellarBundleSecretVersioned {
	return StellarBundleSecretVersioned{
		Version__: StellarBundleVersion_V1,
		V1__:      &v,
	}
}

func (o StellarBundleSecretVersioned) DeepCopy() StellarBundleSecretVersioned {
	return StellarBundleSecretVersioned{
		Version__: o.Version__.DeepCopy(),
		V1__: (func(x *StellarBundleSecretV1) *StellarBundleSecretV1 {
			if x == nil {
				return nil
			}
			tmp := (*x).DeepCopy()
			return &tmp
		})(o.V1__),
	}
}

type StellarBundleVisibleV1 struct {
	Revision StellarRevision       `codec:"revision" json:"revision"`
	Prev     Hash                  `codec:"prev" json:"prev"`
	Accounts []StellarVisibleEntry `codec:"accounts" json:"accounts"`
}

func (o StellarBundleVisibleV1) DeepCopy() StellarBundleVisibleV1 {
	return StellarBundleVisibleV1{
		Revision: o.Revision.DeepCopy(),
		Prev:     o.Prev.DeepCopy(),
		Accounts: (func(x []StellarVisibleEntry) []StellarVisibleEntry {
			if x == nil {
				return nil
			}
			var ret []StellarVisibleEntry
			for _, v := range x {
				vCopy := v.DeepCopy()
				ret = append(ret, vCopy)
			}
			return ret
		})(o.Accounts),
	}
}

type StellarBundleSecretV1 struct {
	VisibleHash Hash                 `codec:"visibleHash" json:"visibleHash"`
	Accounts    []StellarSecretEntry `codec:"accounts" json:"accounts"`
}

func (o StellarBundleSecretV1) DeepCopy() StellarBundleSecretV1 {
	return StellarBundleSecretV1{
		VisibleHash: o.VisibleHash.DeepCopy(),
		Accounts: (func(x []StellarSecretEntry) []StellarSecretEntry {
			if x == nil {
				return nil
			}
			var ret []StellarSecretEntry
			for _, v := range x {
				vCopy := v.DeepCopy()
				ret = append(ret, vCopy)
			}
			return ret
		})(o.Accounts),
	}
}

type StellarAccountMode int

const (
	StellarAccountMode_NONE StellarAccountMode = 0
	StellarAccountMode_USER StellarAccountMode = 1
)

func (o StellarAccountMode) DeepCopy() StellarAccountMode { return o }

var StellarAccountModeMap = map[string]StellarAccountMode{
	"NONE": 0,
	"USER": 1,
}

var StellarAccountModeRevMap = map[StellarAccountMode]string{
	0: "NONE",
	1: "USER",
}

func (e StellarAccountMode) String() string {
	if v, ok := StellarAccountModeRevMap[e]; ok {
		return v
	}
	return ""
}

type StellarVisibleEntry struct {
	AccountID StellarAccountID   `codec:"accountID" json:"accountID"`
	Mode      StellarAccountMode `codec:"mode" json:"mode"`
	IsPrimary bool               `codec:"isPrimary" json:"isPrimary"`
}

func (o StellarVisibleEntry) DeepCopy() StellarVisibleEntry {
	return StellarVisibleEntry{
		AccountID: o.AccountID.DeepCopy(),
		Mode:      o.Mode.DeepCopy(),
		IsPrimary: o.IsPrimary,
	}
}

type StellarSecretEntry struct {
	AccountID StellarAccountID   `codec:"accountID" json:"accountID"`
	Signers   []StellarSecretKey `codec:"signers" json:"signers"`
	Name      string             `codec:"name" json:"name"`
}

func (o StellarSecretEntry) DeepCopy() StellarSecretEntry {
	return StellarSecretEntry{
		AccountID: o.AccountID.DeepCopy(),
		Signers: (func(x []StellarSecretKey) []StellarSecretKey {
			if x == nil {
				return nil
			}
			var ret []StellarSecretKey
			for _, v := range x {
				vCopy := v.DeepCopy()
				ret = append(ret, vCopy)
			}
			return ret
		})(o.Signers),
		Name: o.Name,
	}
}

type StellarBundle struct {
	Revision StellarRevision `codec:"revision" json:"revision"`
	Prev     Hash            `codec:"prev" json:"prev"`
	OwnHash  Hash            `codec:"ownHash" json:"ownHash"`
	Accounts []StellarEntry  `codec:"accounts" json:"accounts"`
}

func (o StellarBundle) DeepCopy() StellarBundle {
	return StellarBundle{
		Revision: o.Revision.DeepCopy(),
		Prev:     o.Prev.DeepCopy(),
		OwnHash:  o.OwnHash.DeepCopy(),
		Accounts: (func(x []StellarEntry) []StellarEntry {
			if x == nil {
				return nil
			}
			var ret []StellarEntry
			for _, v := range x {
				vCopy := v.DeepCopy()
				ret = append(ret, vCopy)
			}
			return ret
		})(o.Accounts),
	}
}

type StellarEntry struct {
	AccountID StellarAccountID   `codec:"accountID" json:"accountID"`
	Mode      StellarAccountMode `codec:"mode" json:"mode"`
	IsPrimary bool               `codec:"isPrimary" json:"isPrimary"`
	Signers   []StellarSecretKey `codec:"signers" json:"signers"`
	Name      string             `codec:"name" json:"name"`
}

func (o StellarEntry) DeepCopy() StellarEntry {
	return StellarEntry{
		AccountID: o.AccountID.DeepCopy(),
		Mode:      o.Mode.DeepCopy(),
		IsPrimary: o.IsPrimary,
		Signers: (func(x []StellarSecretKey) []StellarSecretKey {
			if x == nil {
				return nil
			}
			var ret []StellarSecretKey
			for _, v := range x {
				vCopy := v.DeepCopy()
				ret = append(ret, vCopy)
			}
			return ret
		})(o.Signers),
		Name: o.Name,
	}
}

type StellarInterface interface {
}

func StellarProtocol(i StellarInterface) rpc.Protocol {
	return rpc.Protocol{
		Name:    "keybase.1.stellar",
		Methods: map[string]rpc.ServeHandlerDescription{},
	}
}

type StellarClient struct {
	Cli rpc.GenericClient
}
