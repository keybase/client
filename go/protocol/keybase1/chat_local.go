// Auto-generated by avdl-compiler v1.3.6 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/keybase1/chat_local.avdl

package keybase1

import (
	"errors"
	chat1 "github.com/keybase/client/go/protocol/chat1"
	rpc "github.com/keybase/go-framed-msgpack-rpc"
	context "golang.org/x/net/context"
)

type MessageText struct {
	Body string `codec:"body" json:"body"`
}

type MessageConversationMetadata struct {
	ConversationTitle string `codec:"conversationTitle" json:"conversationTitle"`
}

type MessageEdit struct {
	MessageID chat1.MessageID `codec:"messageID" json:"messageID"`
	Body      string          `codec:"body" json:"body"`
}

type MessageDelete struct {
	MessageID chat1.MessageID `codec:"messageID" json:"messageID"`
}

type MessageAttachment struct {
	Path string `codec:"path" json:"path"`
}

type MessageBody struct {
	MessageType__ chat1.MessageType            `codec:"messageType" json:"messageType"`
	Text__        *MessageText                 `codec:"text,omitempty" json:"text,omitempty"`
	Attachment__  *MessageAttachment           `codec:"attachment,omitempty" json:"attachment,omitempty"`
	Edit__        *MessageEdit                 `codec:"edit,omitempty" json:"edit,omitempty"`
	Delete__      *MessageDelete               `codec:"delete,omitempty" json:"delete,omitempty"`
	Metadata__    *MessageConversationMetadata `codec:"metadata,omitempty" json:"metadata,omitempty"`
}

func (o *MessageBody) MessageType() (ret chat1.MessageType, err error) {
	switch o.MessageType__ {
	case chat1.MessageType_TEXT:
		if o.Text__ == nil {
			err = errors.New("unexpected nil value for Text__")
			return ret, err
		}
	case chat1.MessageType_ATTACHMENT:
		if o.Attachment__ == nil {
			err = errors.New("unexpected nil value for Attachment__")
			return ret, err
		}
	case chat1.MessageType_EDIT:
		if o.Edit__ == nil {
			err = errors.New("unexpected nil value for Edit__")
			return ret, err
		}
	case chat1.MessageType_DELETE:
		if o.Delete__ == nil {
			err = errors.New("unexpected nil value for Delete__")
			return ret, err
		}
	case chat1.MessageType_METADATA:
		if o.Metadata__ == nil {
			err = errors.New("unexpected nil value for Metadata__")
			return ret, err
		}
	}
	return o.MessageType__, nil
}

func (o MessageBody) Text() MessageText {
	if o.MessageType__ != chat1.MessageType_TEXT {
		panic("wrong case accessed")
	}
	if o.Text__ == nil {
		return MessageText{}
	}
	return *o.Text__
}

func (o MessageBody) Attachment() MessageAttachment {
	if o.MessageType__ != chat1.MessageType_ATTACHMENT {
		panic("wrong case accessed")
	}
	if o.Attachment__ == nil {
		return MessageAttachment{}
	}
	return *o.Attachment__
}

func (o MessageBody) Edit() MessageEdit {
	if o.MessageType__ != chat1.MessageType_EDIT {
		panic("wrong case accessed")
	}
	if o.Edit__ == nil {
		return MessageEdit{}
	}
	return *o.Edit__
}

func (o MessageBody) Delete() MessageDelete {
	if o.MessageType__ != chat1.MessageType_DELETE {
		panic("wrong case accessed")
	}
	if o.Delete__ == nil {
		return MessageDelete{}
	}
	return *o.Delete__
}

func (o MessageBody) Metadata() MessageConversationMetadata {
	if o.MessageType__ != chat1.MessageType_METADATA {
		panic("wrong case accessed")
	}
	if o.Metadata__ == nil {
		return MessageConversationMetadata{}
	}
	return *o.Metadata__
}

func NewMessageBodyWithText(v MessageText) MessageBody {
	return MessageBody{
		MessageType__: chat1.MessageType_TEXT,
		Text__:        &v,
	}
}

func NewMessageBodyWithAttachment(v MessageAttachment) MessageBody {
	return MessageBody{
		MessageType__: chat1.MessageType_ATTACHMENT,
		Attachment__:  &v,
	}
}

func NewMessageBodyWithEdit(v MessageEdit) MessageBody {
	return MessageBody{
		MessageType__: chat1.MessageType_EDIT,
		Edit__:        &v,
	}
}

func NewMessageBodyWithDelete(v MessageDelete) MessageBody {
	return MessageBody{
		MessageType__: chat1.MessageType_DELETE,
		Delete__:      &v,
	}
}

func NewMessageBodyWithMetadata(v MessageConversationMetadata) MessageBody {
	return MessageBody{
		MessageType__: chat1.MessageType_METADATA,
		Metadata__:    &v,
	}
}

type MessagePlaintext struct {
	ClientHeader  chat1.MessageClientHeader `codec:"clientHeader" json:"clientHeader"`
	MessageBodies []MessageBody             `codec:"messageBodies" json:"messageBodies"`
}

type MessageInfoLocal struct {
	IsNew            bool   `codec:"isNew" json:"isNew"`
	SenderUsername   string `codec:"senderUsername" json:"senderUsername"`
	SenderDeviceName string `codec:"senderDeviceName" json:"senderDeviceName"`
}

type Message struct {
	ServerHeader     chat1.MessageServerHeader `codec:"serverHeader" json:"serverHeader"`
	MessagePlaintext MessagePlaintext          `codec:"messagePlaintext" json:"messagePlaintext"`
	Info             *MessageInfoLocal         `codec:"info,omitempty" json:"info,omitempty"`
}

type ThreadView struct {
	Messages   []Message         `codec:"messages" json:"messages"`
	Pagination *chat1.Pagination `codec:"pagination,omitempty" json:"pagination,omitempty"`
}

type MessageSelector struct {
	MessageTypes  []chat1.MessageType    `codec:"MessageTypes" json:"MessageTypes"`
	Since         *string                `codec:"Since,omitempty" json:"Since,omitempty"`
	OnlyNew       bool                   `codec:"onlyNew" json:"onlyNew"`
	Limit         int                    `codec:"limit" json:"limit"`
	Conversations []chat1.ConversationID `codec:"conversations" json:"conversations"`
	MarkAsRead    bool                   `codec:"markAsRead" json:"markAsRead"`
}

type ConversationInfoLocal struct {
	TlfName   string          `codec:"tlfName" json:"tlfName"`
	TopicName string          `codec:"topicName" json:"topicName"`
	TopicType chat1.TopicType `codec:"topicType" json:"topicType"`
}

type ConversationLocal struct {
	Id       chat1.ConversationID   `codec:"id" json:"id"`
	Info     *ConversationInfoLocal `codec:"info,omitempty" json:"info,omitempty"`
	Messages []Message              `codec:"messages" json:"messages"`
}

type GetInboxLocalArg struct {
	Pagination *chat1.Pagination `codec:"pagination,omitempty" json:"pagination,omitempty"`
}

type GetThreadLocalArg struct {
	ConversationID chat1.ConversationID `codec:"conversationID" json:"conversationID"`
	MarkAsRead     bool                 `codec:"markAsRead" json:"markAsRead"`
	Pagination     *chat1.Pagination    `codec:"pagination,omitempty" json:"pagination,omitempty"`
}

type PostLocalArg struct {
	ConversationID   chat1.ConversationID `codec:"conversationID" json:"conversationID"`
	MessagePlaintext MessagePlaintext     `codec:"messagePlaintext" json:"messagePlaintext"`
}

type NewConversationLocalArg struct {
	ConversationTriple chat1.ConversationIDTriple `codec:"conversationTriple" json:"conversationTriple"`
}

type ResolveConversationLocalArg struct {
	Conversation ConversationInfoLocal `codec:"conversation" json:"conversation"`
}

type GetMessagesLocalArg struct {
	Selector MessageSelector `codec:"selector" json:"selector"`
}

type CompleteAndCanonicalizeTlfNameArg struct {
	TlfName string `codec:"tlfName" json:"tlfName"`
}

type ChatLocalInterface interface {
	GetInboxLocal(context.Context, *chat1.Pagination) (chat1.InboxView, error)
	GetThreadLocal(context.Context, GetThreadLocalArg) (ThreadView, error)
	PostLocal(context.Context, PostLocalArg) error
	NewConversationLocal(context.Context, chat1.ConversationIDTriple) (chat1.ConversationID, error)
	ResolveConversationLocal(context.Context, ConversationInfoLocal) ([]chat1.ConversationID, error)
	GetMessagesLocal(context.Context, MessageSelector) ([]ConversationLocal, error)
	CompleteAndCanonicalizeTlfName(context.Context, string) (CanonicalTlfName, error)
}

func ChatLocalProtocol(i ChatLocalInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "keybase.1.chatLocal",
		Methods: map[string]rpc.ServeHandlerDescription{
			"getInboxLocal": {
				MakeArg: func() interface{} {
					ret := make([]GetInboxLocalArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]GetInboxLocalArg)
					if !ok {
						err = rpc.NewTypeError((*[]GetInboxLocalArg)(nil), args)
						return
					}
					ret, err = i.GetInboxLocal(ctx, (*typedArgs)[0].Pagination)
					return
				},
				MethodType: rpc.MethodCall,
			},
			"getThreadLocal": {
				MakeArg: func() interface{} {
					ret := make([]GetThreadLocalArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]GetThreadLocalArg)
					if !ok {
						err = rpc.NewTypeError((*[]GetThreadLocalArg)(nil), args)
						return
					}
					ret, err = i.GetThreadLocal(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"postLocal": {
				MakeArg: func() interface{} {
					ret := make([]PostLocalArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]PostLocalArg)
					if !ok {
						err = rpc.NewTypeError((*[]PostLocalArg)(nil), args)
						return
					}
					err = i.PostLocal(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"newConversationLocal": {
				MakeArg: func() interface{} {
					ret := make([]NewConversationLocalArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]NewConversationLocalArg)
					if !ok {
						err = rpc.NewTypeError((*[]NewConversationLocalArg)(nil), args)
						return
					}
					ret, err = i.NewConversationLocal(ctx, (*typedArgs)[0].ConversationTriple)
					return
				},
				MethodType: rpc.MethodCall,
			},
			"resolveConversationLocal": {
				MakeArg: func() interface{} {
					ret := make([]ResolveConversationLocalArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]ResolveConversationLocalArg)
					if !ok {
						err = rpc.NewTypeError((*[]ResolveConversationLocalArg)(nil), args)
						return
					}
					ret, err = i.ResolveConversationLocal(ctx, (*typedArgs)[0].Conversation)
					return
				},
				MethodType: rpc.MethodCall,
			},
			"getMessagesLocal": {
				MakeArg: func() interface{} {
					ret := make([]GetMessagesLocalArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]GetMessagesLocalArg)
					if !ok {
						err = rpc.NewTypeError((*[]GetMessagesLocalArg)(nil), args)
						return
					}
					ret, err = i.GetMessagesLocal(ctx, (*typedArgs)[0].Selector)
					return
				},
				MethodType: rpc.MethodCall,
			},
			"completeAndCanonicalizeTlfName": {
				MakeArg: func() interface{} {
					ret := make([]CompleteAndCanonicalizeTlfNameArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]CompleteAndCanonicalizeTlfNameArg)
					if !ok {
						err = rpc.NewTypeError((*[]CompleteAndCanonicalizeTlfNameArg)(nil), args)
						return
					}
					ret, err = i.CompleteAndCanonicalizeTlfName(ctx, (*typedArgs)[0].TlfName)
					return
				},
				MethodType: rpc.MethodCall,
			},
		},
	}
}

type ChatLocalClient struct {
	Cli rpc.GenericClient
}

func (c ChatLocalClient) GetInboxLocal(ctx context.Context, pagination *chat1.Pagination) (res chat1.InboxView, err error) {
	__arg := GetInboxLocalArg{Pagination: pagination}
	err = c.Cli.Call(ctx, "keybase.1.chatLocal.getInboxLocal", []interface{}{__arg}, &res)
	return
}

func (c ChatLocalClient) GetThreadLocal(ctx context.Context, __arg GetThreadLocalArg) (res ThreadView, err error) {
	err = c.Cli.Call(ctx, "keybase.1.chatLocal.getThreadLocal", []interface{}{__arg}, &res)
	return
}

func (c ChatLocalClient) PostLocal(ctx context.Context, __arg PostLocalArg) (err error) {
	err = c.Cli.Call(ctx, "keybase.1.chatLocal.postLocal", []interface{}{__arg}, nil)
	return
}

func (c ChatLocalClient) NewConversationLocal(ctx context.Context, conversationTriple chat1.ConversationIDTriple) (res chat1.ConversationID, err error) {
	__arg := NewConversationLocalArg{ConversationTriple: conversationTriple}
	err = c.Cli.Call(ctx, "keybase.1.chatLocal.newConversationLocal", []interface{}{__arg}, &res)
	return
}

func (c ChatLocalClient) ResolveConversationLocal(ctx context.Context, conversation ConversationInfoLocal) (res []chat1.ConversationID, err error) {
	__arg := ResolveConversationLocalArg{Conversation: conversation}
	err = c.Cli.Call(ctx, "keybase.1.chatLocal.resolveConversationLocal", []interface{}{__arg}, &res)
	return
}

func (c ChatLocalClient) GetMessagesLocal(ctx context.Context, selector MessageSelector) (res []ConversationLocal, err error) {
	__arg := GetMessagesLocalArg{Selector: selector}
	err = c.Cli.Call(ctx, "keybase.1.chatLocal.getMessagesLocal", []interface{}{__arg}, &res)
	return
}

func (c ChatLocalClient) CompleteAndCanonicalizeTlfName(ctx context.Context, tlfName string) (res CanonicalTlfName, err error) {
	__arg := CompleteAndCanonicalizeTlfNameArg{TlfName: tlfName}
	err = c.Cli.Call(ctx, "keybase.1.chatLocal.completeAndCanonicalizeTlfName", []interface{}{__arg}, &res)
	return
}
