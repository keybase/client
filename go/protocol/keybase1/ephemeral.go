// Auto-generated by avdl-compiler v1.3.22 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/keybase1/ephemeral.avdl

package keybase1

import (
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
)

type EkGeneration int64

func (o EkGeneration) DeepCopy() EkGeneration {
	return o
}

type DeviceEkMetadataStatement struct {
	CurrentDeviceEkMetadata  DeviceEkMetadata   `codec:"currentDeviceEkMetadata" json:"current_device_ek_metadata"`
	ExistingDeviceEkMetadata []DeviceEkMetadata `codec:"existingDeviceEkMetadata" json:"existing_device_ek_metadata"`
}

func (o DeviceEkMetadataStatement) DeepCopy() DeviceEkMetadataStatement {
	return DeviceEkMetadataStatement{
		CurrentDeviceEkMetadata: o.CurrentDeviceEkMetadata.DeepCopy(),
		ExistingDeviceEkMetadata: (func(x []DeviceEkMetadata) []DeviceEkMetadata {
			if x == nil {
				return nil
			}
			var ret []DeviceEkMetadata
			for _, v := range x {
				vCopy := v.DeepCopy()
				ret = append(ret, vCopy)
			}
			return ret
		})(o.ExistingDeviceEkMetadata),
	}
}

type DeviceEkMetadata struct {
	Kid        KID          `codec:"kid" json:"device_ephemeral_dh_public"`
	HashMeta   HashMeta     `codec:"hashMeta" json:"hash_meta"`
	Generation EkGeneration `codec:"generation" json:"generation"`
	Ctime      Time         `codec:"ctime" json:"ctime"`
}

func (o DeviceEkMetadata) DeepCopy() DeviceEkMetadata {
	return DeviceEkMetadata{
		Kid:        o.Kid.DeepCopy(),
		HashMeta:   o.HashMeta.DeepCopy(),
		Generation: o.Generation.DeepCopy(),
		Ctime:      o.Ctime.DeepCopy(),
	}
}

type DeviceEk struct {
	Seed     Bytes32          `codec:"seed" json:"seed"`
	Metadata DeviceEkMetadata `codec:"metadata" json:"metadata"`
}

func (o DeviceEk) DeepCopy() DeviceEk {
	return DeviceEk{
		Seed:     o.Seed.DeepCopy(),
		Metadata: o.Metadata.DeepCopy(),
	}
}

type UserEkMetadataStatement struct {
	CurrentUserEkMetadata   UserEkMetadata   `codec:"currentUserEkMetadata" json:"current_user_ek_metadata"`
	ExistingUserEkMetatdata []UserEkMetadata `codec:"existingUserEkMetatdata" json:"existing_user_ek_metadata"`
}

func (o UserEkMetadataStatement) DeepCopy() UserEkMetadataStatement {
	return UserEkMetadataStatement{
		CurrentUserEkMetadata: o.CurrentUserEkMetadata.DeepCopy(),
		ExistingUserEkMetatdata: (func(x []UserEkMetadata) []UserEkMetadata {
			if x == nil {
				return nil
			}
			var ret []UserEkMetadata
			for _, v := range x {
				vCopy := v.DeepCopy()
				ret = append(ret, vCopy)
			}
			return ret
		})(o.ExistingUserEkMetatdata),
	}
}

type UserEkMetadata struct {
	Kid        KID          `codec:"kid" json:"user_ephemeral_dh_public"`
	HashMeta   HashMeta     `codec:"hashMeta" json:"hash_meta"`
	Generation EkGeneration `codec:"generation" json:"generation"`
	Ctime      Time         `codec:"ctime" json:"ctime"`
}

func (o UserEkMetadata) DeepCopy() UserEkMetadata {
	return UserEkMetadata{
		Kid:        o.Kid.DeepCopy(),
		HashMeta:   o.HashMeta.DeepCopy(),
		Generation: o.Generation.DeepCopy(),
		Ctime:      o.Ctime.DeepCopy(),
	}
}

type UserEkBoxed struct {
	Box                string         `codec:"box" json:"box"`
	DeviceEkGeneration EkGeneration   `codec:"deviceEkGeneration" json:"device_ek_generation"`
	Metadata           UserEkMetadata `codec:"metadata" json:"metadata"`
}

func (o UserEkBoxed) DeepCopy() UserEkBoxed {
	return UserEkBoxed{
		Box:                o.Box,
		DeviceEkGeneration: o.DeviceEkGeneration.DeepCopy(),
		Metadata:           o.Metadata.DeepCopy(),
	}
}

type UserEk struct {
	Seed     Bytes32        `codec:"seed" json:"seed"`
	Metadata UserEkMetadata `codec:"metadata" json:"metadata"`
}

func (o UserEk) DeepCopy() UserEk {
	return UserEk{
		Seed:     o.Seed.DeepCopy(),
		Metadata: o.Metadata.DeepCopy(),
	}
}

type EphemeralInterface interface {
}

func EphemeralProtocol(i EphemeralInterface) rpc.Protocol {
	return rpc.Protocol{
		Name:    "keybase.1.ephemeral",
		Methods: map[string]rpc.ServeHandlerDescription{},
	}
}

type EphemeralClient struct {
	Cli rpc.GenericClient
}
