// Auto-generated by avdl-compiler v1.3.22 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/keybase1/implicit_team_upgrade.avdl

package keybase1

import (
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
	context "golang.org/x/net/context"
)

type UpgradeLockArg struct {
	TlfName string `codec:"tlfName" json:"tlfName"`
}

type ImplicitTeamUpgradeInterface interface {
	UpgradeLock(context.Context, string) error
}

func ImplicitTeamUpgradeProtocol(i ImplicitTeamUpgradeInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "keybase.1.implicitTeamUpgrade",
		Methods: map[string]rpc.ServeHandlerDescription{
			"upgradeLock": {
				MakeArg: func() interface{} {
					ret := make([]UpgradeLockArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]UpgradeLockArg)
					if !ok {
						err = rpc.NewTypeError((*[]UpgradeLockArg)(nil), args)
						return
					}
					err = i.UpgradeLock(ctx, (*typedArgs)[0].TlfName)
					return
				},
				MethodType: rpc.MethodCall,
			},
		},
	}
}

type ImplicitTeamUpgradeClient struct {
	Cli rpc.GenericClient
}

func (c ImplicitTeamUpgradeClient) UpgradeLock(ctx context.Context, tlfName string) (err error) {
	__arg := UpgradeLockArg{TlfName: tlfName}
	err = c.Cli.Call(ctx, "keybase.1.implicitTeamUpgrade.upgradeLock", []interface{}{__arg}, nil)
	return
}
