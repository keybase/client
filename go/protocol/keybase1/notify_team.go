// Auto-generated by avdl-compiler v1.3.17 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/keybase1/notify_team.avdl

package keybase1

import (
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
	context "golang.org/x/net/context"
)

type TeamKeyRotatedArg struct {
	TeamID   TeamID `codec:"teamID" json:"teamID"`
	TeamName string `codec:"teamName" json:"teamName"`
}

func (o TeamKeyRotatedArg) DeepCopy() TeamKeyRotatedArg {
	return TeamKeyRotatedArg{
		TeamID:   o.TeamID.DeepCopy(),
		TeamName: o.TeamName,
	}
}

type NotifyTeamInterface interface {
	TeamKeyRotated(context.Context, TeamKeyRotatedArg) error
}

func NotifyTeamProtocol(i NotifyTeamInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "keybase.1.NotifyTeam",
		Methods: map[string]rpc.ServeHandlerDescription{
			"teamKeyRotated": {
				MakeArg: func() interface{} {
					ret := make([]TeamKeyRotatedArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]TeamKeyRotatedArg)
					if !ok {
						err = rpc.NewTypeError((*[]TeamKeyRotatedArg)(nil), args)
						return
					}
					err = i.TeamKeyRotated(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodNotify,
			},
		},
	}
}

type NotifyTeamClient struct {
	Cli rpc.GenericClient
}

func (c NotifyTeamClient) TeamKeyRotated(ctx context.Context, __arg TeamKeyRotatedArg) (err error) {
	err = c.Cli.Notify(ctx, "keybase.1.NotifyTeam.teamKeyRotated", []interface{}{__arg})
	return
}
