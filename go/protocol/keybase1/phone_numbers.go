// Auto-generated by avdl-compiler v1.3.26 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/keybase1/phone_numbers.avdl

package keybase1

import (
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
	context "golang.org/x/net/context"
)

// Phone number support for TOFU chats.
type UserPhoneNumber struct {
	PhoneNumber PhoneNumber `codec:"phoneNumber" json:"phone_number"`
	Verified    bool        `codec:"verified" json:"verified"`
	Ctime       UnixTime    `codec:"ctime" json:"ctime"`
}

func (o UserPhoneNumber) DeepCopy() UserPhoneNumber {
	return UserPhoneNumber{
		PhoneNumber: o.PhoneNumber.DeepCopy(),
		Verified:    o.Verified,
		Ctime:       o.Ctime.DeepCopy(),
	}
}

type PhoneNumberAddedMsg struct {
	PhoneNumber PhoneNumber `codec:"phoneNumber" json:"phone"`
}

func (o PhoneNumberAddedMsg) DeepCopy() PhoneNumberAddedMsg {
	return PhoneNumberAddedMsg{
		PhoneNumber: o.PhoneNumber.DeepCopy(),
	}
}

type PhoneNumberVerifiedMsg struct {
	PhoneNumber PhoneNumber `codec:"phoneNumber" json:"phone"`
}

func (o PhoneNumberVerifiedMsg) DeepCopy() PhoneNumberVerifiedMsg {
	return PhoneNumberVerifiedMsg{
		PhoneNumber: o.PhoneNumber.DeepCopy(),
	}
}

type PhoneNumberSupersededMsg struct {
	PhoneNumber PhoneNumber `codec:"phoneNumber" json:"phone"`
}

func (o PhoneNumberSupersededMsg) DeepCopy() PhoneNumberSupersededMsg {
	return PhoneNumberSupersededMsg{
		PhoneNumber: o.PhoneNumber.DeepCopy(),
	}
}

type AddPhoneNumberArg struct {
	SessionID   int         `codec:"sessionID" json:"sessionID"`
	PhoneNumber PhoneNumber `codec:"phoneNumber" json:"phoneNumber"`
}

type VerifyPhoneNumberArg struct {
	SessionID   int         `codec:"sessionID" json:"sessionID"`
	PhoneNumber PhoneNumber `codec:"phoneNumber" json:"phoneNumber"`
	Code        string      `codec:"code" json:"code"`
}

type GetPhoneNumbersArg struct {
	SessionID int `codec:"sessionID" json:"sessionID"`
}

type PhoneNumbersInterface interface {
	AddPhoneNumber(context.Context, AddPhoneNumberArg) error
	VerifyPhoneNumber(context.Context, VerifyPhoneNumberArg) error
	GetPhoneNumbers(context.Context, int) ([]UserPhoneNumber, error)
}

func PhoneNumbersProtocol(i PhoneNumbersInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "keybase.1.phoneNumbers",
		Methods: map[string]rpc.ServeHandlerDescription{
			"addPhoneNumber": {
				MakeArg: func() interface{} {
					var ret [1]AddPhoneNumberArg
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[1]AddPhoneNumberArg)
					if !ok {
						err = rpc.NewTypeError((*[1]AddPhoneNumberArg)(nil), args)
						return
					}
					err = i.AddPhoneNumber(ctx, typedArgs[0])
					return
				},
			},
			"verifyPhoneNumber": {
				MakeArg: func() interface{} {
					var ret [1]VerifyPhoneNumberArg
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[1]VerifyPhoneNumberArg)
					if !ok {
						err = rpc.NewTypeError((*[1]VerifyPhoneNumberArg)(nil), args)
						return
					}
					err = i.VerifyPhoneNumber(ctx, typedArgs[0])
					return
				},
			},
			"getPhoneNumbers": {
				MakeArg: func() interface{} {
					var ret [1]GetPhoneNumbersArg
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[1]GetPhoneNumbersArg)
					if !ok {
						err = rpc.NewTypeError((*[1]GetPhoneNumbersArg)(nil), args)
						return
					}
					ret, err = i.GetPhoneNumbers(ctx, typedArgs[0].SessionID)
					return
				},
			},
		},
	}
}

type PhoneNumbersClient struct {
	Cli rpc.GenericClient
}

func (c PhoneNumbersClient) AddPhoneNumber(ctx context.Context, __arg AddPhoneNumberArg) (err error) {
	err = c.Cli.CallCompressed(ctx, "keybase.1.phoneNumbers.addPhoneNumber", []interface{}{__arg}, nil, rpc.CompressionNone)
	return
}

func (c PhoneNumbersClient) VerifyPhoneNumber(ctx context.Context, __arg VerifyPhoneNumberArg) (err error) {
	err = c.Cli.CallCompressed(ctx, "keybase.1.phoneNumbers.verifyPhoneNumber", []interface{}{__arg}, nil, rpc.CompressionNone)
	return
}

func (c PhoneNumbersClient) GetPhoneNumbers(ctx context.Context, sessionID int) (res []UserPhoneNumber, err error) {
	__arg := GetPhoneNumbersArg{SessionID: sessionID}
	err = c.Cli.CallCompressed(ctx, "keybase.1.phoneNumbers.getPhoneNumbers", []interface{}{__arg}, &res, rpc.CompressionNone)
	return
}
