// Auto-generated by avdl-compiler v1.3.22 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/keybase1/notify_ephemeral.avdl

package keybase1

import (
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
	context "golang.org/x/net/context"
)

type NewTeamEkArg struct {
	Id         TeamID       `codec:"id" json:"id"`
	Generation EkGeneration `codec:"generation" json:"generation"`
}

type NotifyEphemeralInterface interface {
	NewTeamEk(context.Context, NewTeamEkArg) error
}

func NotifyEphemeralProtocol(i NotifyEphemeralInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "keybase.1.NotifyEphemeral",
		Methods: map[string]rpc.ServeHandlerDescription{
			"newTeamEk": {
				MakeArg: func() interface{} {
					ret := make([]NewTeamEkArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]NewTeamEkArg)
					if !ok {
						err = rpc.NewTypeError((*[]NewTeamEkArg)(nil), args)
						return
					}
					err = i.NewTeamEk(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodNotify,
			},
		},
	}
}

type NotifyEphemeralClient struct {
	Cli rpc.GenericClient
}

func (c NotifyEphemeralClient) NewTeamEk(ctx context.Context, __arg NewTeamEkArg) (err error) {
	err = c.Cli.Notify(ctx, "keybase.1.NotifyEphemeral.newTeamEk", []interface{}{__arg})
	return
}
