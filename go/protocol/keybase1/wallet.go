// Auto-generated by avdl-compiler v1.3.22 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/keybase1/wallet.avdl

package keybase1

import (
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
	context "golang.org/x/net/context"
)

type WalletInitArg struct {
}

type WalletInterface interface {
	WalletInit(context.Context) error
}

func WalletProtocol(i WalletInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "keybase.1.wallet",
		Methods: map[string]rpc.ServeHandlerDescription{
			"walletInit": {
				MakeArg: func() interface{} {
					ret := make([]WalletInitArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					err = i.WalletInit(ctx)
					return
				},
				MethodType: rpc.MethodCall,
			},
		},
	}
}

type WalletClient struct {
	Cli rpc.GenericClient
}

func (c WalletClient) WalletInit(ctx context.Context) (err error) {
	err = c.Cli.Call(ctx, "keybase.1.wallet.walletInit", []interface{}{WalletInitArg{}}, nil)
	return
}
