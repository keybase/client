// Auto-generated by avdl-compiler v1.3.11 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/keybase1/simple_fs.avdl

package keybase1

import (
	"errors"
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
	context "golang.org/x/net/context"
)

type OpID [16]byte
type PathType int

const (
	PathType_LOCAL PathType = 0
	PathType_KBFS  PathType = 1
)

var PathTypeMap = map[string]PathType{
	"LOCAL": 0,
	"KBFS":  1,
}

var PathTypeRevMap = map[PathType]string{
	0: "LOCAL",
	1: "KBFS",
}

func (e PathType) String() string {
	if v, ok := PathTypeRevMap[e]; ok {
		return v
	}
	return ""
}

type LocalPath string
type KBFSPath string
type Path struct {
	PathType__ PathType   `codec:"PathType" json:"PathType"`
	Local__    *LocalPath `codec:"local,omitempty" json:"local,omitempty"`
	Kbfs__     *KBFSPath  `codec:"kbfs,omitempty" json:"kbfs,omitempty"`
}

func (o *Path) PathType() (ret PathType, err error) {
	switch o.PathType__ {
	case PathType_LOCAL:
		if o.Local__ == nil {
			err = errors.New("unexpected nil value for Local__")
			return ret, err
		}
	case PathType_KBFS:
		if o.Kbfs__ == nil {
			err = errors.New("unexpected nil value for Kbfs__")
			return ret, err
		}
	}
	return o.PathType__, nil
}

func (o Path) Local() LocalPath {
	if o.PathType__ != PathType_LOCAL {
		panic("wrong case accessed")
	}
	if o.Local__ == nil {
		return LocalPath{}
	}
	return *o.Local__
}

func (o Path) Kbfs() KBFSPath {
	if o.PathType__ != PathType_KBFS {
		panic("wrong case accessed")
	}
	if o.Kbfs__ == nil {
		return KBFSPath{}
	}
	return *o.Kbfs__
}

func NewPathWithLocal(v LocalPath) Path {
	return Path{
		PathType__: PathType_LOCAL,
		Local__:    &v,
	}
}

func NewPathWithKbfs(v KBFSPath) Path {
	return Path{
		PathType__: PathType_KBFS,
		Kbfs__:     &v,
	}
}

type DirentType int

const (
	DirentType_ DirentType = FILE
	DirentType_ DirentType = DIR
	DirentType_ DirentType = SYM
	DirentType_ DirentType = EXEC
)

var DirentTypeMap = map[string]DirentType{
	"": FILE,
	"": DIR,
	"": SYM,
	"": EXEC,
}

var DirentTypeRevMap = map[DirentType]string{
	FILE: "",
	DIR:  "",
	SYM:  "",
	EXEC: "",
}

func (e DirentType) String() string {
	if v, ok := DirentTypeRevMap[e]; ok {
		return v
	}
	return ""
}

type Dirent struct {
	Time       Time       `codec:"time" json:"time"`
	Size       int        `codec:"size" json:"size"`
	DirentType DirentType `codec:"direntType" json:"direntType"`
}

type ErrorNum int
type OpenFlags int

const (
	OpenFlags_READ       OpenFlags = 0
	OpenFlags_REPLACE    OpenFlags = 1
	OpenFlags_EXISTING   OpenFlags = 2
	OpenFlags_WRITE      OpenFlags = 4
	OpenFlags_EXECUTABLE OpenFlags = 8
	OpenFlags_DIRECTORY  OpenFlags = 16
)

var OpenFlagsMap = map[string]OpenFlags{
	"READ":       0,
	"REPLACE":    1,
	"EXISTING":   2,
	"WRITE":      4,
	"EXECUTABLE": 8,
	"DIRECTORY":  16,
}

var OpenFlagsRevMap = map[OpenFlags]string{
	0:  "READ",
	1:  "REPLACE",
	2:  "EXISTING",
	4:  "WRITE",
	8:  "EXECUTABLE",
	16: "DIRECTORY",
}

func (e OpenFlags) String() string {
	if v, ok := OpenFlagsRevMap[e]; ok {
		return v
	}
	return ""
}

type Progress int
type ListResult struct {
	Paths    []KBFSPath `codec:"Paths" json:"Paths"`
	Progress Progress   `codec:"progress" json:"progress"`
}

type FileContent struct {
	Data     []byte   `codec:"data" json:"data"`
	Progress Progress `codec:"progress" json:"progress"`
}

type PathType int

const (
	PathType_LOCAL PathType = 0
	PathType_KBFS  PathType = 1
)

var PathTypeMap = map[string]PathType{
	"LOCAL": 0,
	"KBFS":  1,
}

var PathTypeRevMap = map[PathType]string{
	0: "LOCAL",
	1: "KBFS",
}

func (e PathType) String() string {
	if v, ok := PathTypeRevMap[e]; ok {
		return v
	}
	return ""
}

type LocalPath string
type KBFSPath string
type AsyncOps int

const (
	AsyncOps_LIST           AsyncOps = 0
	AsyncOps_LIST_RECURSIVE AsyncOps = 1
	AsyncOps_READ           AsyncOps = 2
	AsyncOps_WRITE          AsyncOps = 3
	AsyncOps_COPY           AsyncOps = 4
	AsyncOps_MOVE           AsyncOps = 5
	AsyncOps_REMOVE         AsyncOps = 6
)

var AsyncOpsMap = map[string]AsyncOps{
	"LIST":           0,
	"LIST_RECURSIVE": 1,
	"READ":           2,
	"WRITE":          3,
	"COPY":           4,
	"MOVE":           5,
	"REMOVE":         6,
}

var AsyncOpsRevMap = map[AsyncOps]string{
	0: "LIST",
	1: "LIST_RECURSIVE",
	2: "READ",
	3: "WRITE",
	4: "COPY",
	5: "MOVE",
	6: "REMOVE",
}

func (e AsyncOps) String() string {
	if v, ok := AsyncOpsRevMap[e]; ok {
		return v
	}
	return ""
}

type ListRemoveArgs struct {
	OpID OpID     `codec:"opID" json:"opID"`
	Path KBFSPath `codec:"path" json:"path"`
}

type ReadWriteArgs struct {
	OpID   OpID     `codec:"opID" json:"opID"`
	Path   KBFSPath `codec:"path" json:"path"`
	Offset int      `codec:"offset" json:"offset"`
}

type CopyMoveArgs struct {
	OpID OpID `codec:"opID" json:"opID"`
	Src  Path `codec:"src" json:"src"`
	Dest Path `codec:"dest" json:"dest"`
}

type OpDescription struct {
	AsyncOp__       AsyncOps        `codec:"asyncOp" json:"asyncOp"`
	List__          *ListArgs       `codec:"list,omitempty" json:"list,omitempty"`
	ListRecursive__ *ListArgs       `codec:"listRecursive,omitempty" json:"listRecursive,omitempty"`
	Read__          *ReadWriteArgs  `codec:"read,omitempty" json:"read,omitempty"`
	Write__         *ReadWriteArgs  `codec:"write,omitempty" json:"write,omitempty"`
	Copy__          *CopyMoveArgs   `codec:"copy,omitempty" json:"copy,omitempty"`
	Move__          *CopyMoveArgs   `codec:"move,omitempty" json:"move,omitempty"`
	Remove__        *ListRemoveArgs `codec:"remove,omitempty" json:"remove,omitempty"`
}

func (o *OpDescription) AsyncOp() (ret AsyncOps, err error) {
	switch o.AsyncOp__ {
	case AsyncOps_LIST:
		if o.List__ == nil {
			err = errors.New("unexpected nil value for List__")
			return ret, err
		}
	case AsyncOps_LIST_RECURSIVE:
		if o.ListRecursive__ == nil {
			err = errors.New("unexpected nil value for ListRecursive__")
			return ret, err
		}
	case AsyncOps_READ:
		if o.Read__ == nil {
			err = errors.New("unexpected nil value for Read__")
			return ret, err
		}
	case AsyncOps_WRITE:
		if o.Write__ == nil {
			err = errors.New("unexpected nil value for Write__")
			return ret, err
		}
	case AsyncOps_COPY:
		if o.Copy__ == nil {
			err = errors.New("unexpected nil value for Copy__")
			return ret, err
		}
	case AsyncOps_MOVE:
		if o.Move__ == nil {
			err = errors.New("unexpected nil value for Move__")
			return ret, err
		}
	case AsyncOps_REMOVE:
		if o.Remove__ == nil {
			err = errors.New("unexpected nil value for Remove__")
			return ret, err
		}
	}
	return o.AsyncOp__, nil
}

func (o OpDescription) List() ListArgs {
	if o.AsyncOp__ != AsyncOps_LIST {
		panic("wrong case accessed")
	}
	if o.List__ == nil {
		return ListArgs{}
	}
	return *o.List__
}

func (o OpDescription) ListRecursive() ListArgs {
	if o.AsyncOp__ != AsyncOps_LIST_RECURSIVE {
		panic("wrong case accessed")
	}
	if o.ListRecursive__ == nil {
		return ListArgs{}
	}
	return *o.ListRecursive__
}

func (o OpDescription) Read() ReadWriteArgs {
	if o.AsyncOp__ != AsyncOps_READ {
		panic("wrong case accessed")
	}
	if o.Read__ == nil {
		return ReadWriteArgs{}
	}
	return *o.Read__
}

func (o OpDescription) Write() ReadWriteArgs {
	if o.AsyncOp__ != AsyncOps_WRITE {
		panic("wrong case accessed")
	}
	if o.Write__ == nil {
		return ReadWriteArgs{}
	}
	return *o.Write__
}

func (o OpDescription) Copy() CopyMoveArgs {
	if o.AsyncOp__ != AsyncOps_COPY {
		panic("wrong case accessed")
	}
	if o.Copy__ == nil {
		return CopyMoveArgs{}
	}
	return *o.Copy__
}

func (o OpDescription) Move() CopyMoveArgs {
	if o.AsyncOp__ != AsyncOps_MOVE {
		panic("wrong case accessed")
	}
	if o.Move__ == nil {
		return CopyMoveArgs{}
	}
	return *o.Move__
}

func (o OpDescription) Remove() ListRemoveArgs {
	if o.AsyncOp__ != AsyncOps_REMOVE {
		panic("wrong case accessed")
	}
	if o.Remove__ == nil {
		return ListRemoveArgs{}
	}
	return *o.Remove__
}

func NewOpDescriptionWithList(v ListArgs) OpDescription {
	return OpDescription{
		AsyncOp__: AsyncOps_LIST,
		List__:    &v,
	}
}

func NewOpDescriptionWithListRecursive(v ListArgs) OpDescription {
	return OpDescription{
		AsyncOp__:       AsyncOps_LIST_RECURSIVE,
		ListRecursive__: &v,
	}
}

func NewOpDescriptionWithRead(v ReadWriteArgs) OpDescription {
	return OpDescription{
		AsyncOp__: AsyncOps_READ,
		Read__:    &v,
	}
}

func NewOpDescriptionWithWrite(v ReadWriteArgs) OpDescription {
	return OpDescription{
		AsyncOp__: AsyncOps_WRITE,
		Write__:   &v,
	}
}

func NewOpDescriptionWithCopy(v CopyMoveArgs) OpDescription {
	return OpDescription{
		AsyncOp__: AsyncOps_COPY,
		Copy__:    &v,
	}
}

func NewOpDescriptionWithMove(v CopyMoveArgs) OpDescription {
	return OpDescription{
		AsyncOp__: AsyncOps_MOVE,
		Move__:    &v,
	}
}

func NewOpDescriptionWithRemove(v ListRemoveArgs) OpDescription {
	return OpDescription{
		AsyncOp__: AsyncOps_REMOVE,
		Remove__:  &v,
	}
}

type ListArg struct {
	OpID OpID     `codec:"opID" json:"opID"`
	Path KBFSPath `codec:"path" json:"path"`
}

type ListRecursiveArg struct {
	OpID OpID     `codec:"opID" json:"opID"`
	Path KBFSPath `codec:"path" json:"path"`
}

type ReadListArg struct {
	OpID OpID `codec:"opID" json:"opID"`
}

type CopyArg struct {
	OpID OpID `codec:"opID" json:"opID"`
	Src  Path `codec:"src" json:"src"`
	Dest Path `codec:"dest" json:"dest"`
}

type CopyRecursiveArg struct {
	OpID OpID `codec:"opID" json:"opID"`
	Src  Path `codec:"src" json:"src"`
	Dest Path `codec:"dest" json:"dest"`
}

type MoveArg struct {
	OpID OpID     `codec:"opID" json:"opID"`
	Src  KBFSPath `codec:"src" json:"src"`
	Dest KBFSPath `codec:"dest" json:"dest"`
}

type RenameArg struct {
	Src  KBFSPath `codec:"src" json:"src"`
	Dest KBFSPath `codec:"dest" json:"dest"`
}

type OpenArg struct {
	OpID  OpID      `codec:"opID" json:"opID"`
	Dest  KBFSPath  `codec:"dest" json:"dest"`
	Flags OpenFlags `codec:"flags" json:"flags"`
}

type ReadArg struct {
	OpID   OpID `codec:"opID" json:"opID"`
	Offset int  `codec:"offset" json:"offset"`
	Size   int  `codec:"size" json:"size"`
}

type WriteArg struct {
	OpID    OpID   `codec:"opID" json:"opID"`
	Offset  int    `codec:"offset" json:"offset"`
	Content []byte `codec:"content" json:"content"`
}

type RemoveArg struct {
	OpID OpID     `codec:"opID" json:"opID"`
	Path KBFSPath `codec:"path" json:"path"`
}

type StatArg struct {
	Path KBFSPath `codec:"path" json:"path"`
}

type MakeOpIDArg struct {
}

type CloseArg struct {
	OpID OpID `codec:"opID" json:"opID"`
}

type CheckArg struct {
	OpID OpID `codec:"opID" json:"opID"`
}

type GetOpsArg struct {
}

type WaitArg struct {
	OpID OpID `codec:"opID" json:"opID"`
}

type SimpleFSInterface interface {
	// Begin list of items in directory at path
	// Retrieve results with readList()
	// Can be a single file to get flags/status
	List(context.Context, ListArg) error
	// Begin recursive list of items in directory at path
	ListRecursive(context.Context, ListRecursiveArg) error
	// Get list of Paths in progress. Can indicate status of pending
	// to get more entries.
	ReadList(context.Context, OpID) (ListResult, error)
	// Begin copy of file or directory
	Copy(context.Context, CopyArg) error
	// Begin recursive copy of directory
	CopyRecursive(context.Context, CopyRecursiveArg) error
	// Begin move of file or directory, from/to KBFS only
	Move(context.Context, MoveArg) error
	// Rename file or directory, KBFS side only
	Rename(context.Context, RenameArg) error
	// Create/open a file and leave it open
	// or create a directory
	// or set the executable bit on an existing file.
	// Files must be closed afterwards.
	Open(context.Context, OpenArg) error
	// Read (possibly partial) contents of open file,
	// up to the amount specified by size.
	// Repeat until zero bytes are returned or error.
	// If size is zero, read an arbitrary amount.
	Read(context.Context, ReadArg) (FileContent, error)
	// Append content to opened file.
	// May be repeated until OpID is closed.
	Write(context.Context, WriteArg) error
	// Remove file or directory from filesystem
	Remove(context.Context, RemoveArg) error
	// Get info about file
	Stat(context.Context, KBFSPath) (Dirent, error)
	// Convenience helper for generating new random value
	MakeOpID(context.Context) (OpID, error)
	// Close OpID, cancels any pending operation.
	// Must be called after list/copy/remove
	Close(context.Context, OpID) error
	// Check progress of pending operation
	Check(context.Context, OpID) (Progress, error)
	// Get all the outstanding operations
	GetOps(context.Context) ([]OpDescription, error)
	// Blocking wait for the pending operation to finish
	Wait(context.Context, OpID) error
}

func SimpleFSProtocol(i SimpleFSInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "keybase.1.SimpleFS",
		Methods: map[string]rpc.ServeHandlerDescription{
			"list": {
				MakeArg: func() interface{} {
					ret := make([]ListArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]ListArg)
					if !ok {
						err = rpc.NewTypeError((*[]ListArg)(nil), args)
						return
					}
					err = i.List(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"listRecursive": {
				MakeArg: func() interface{} {
					ret := make([]ListRecursiveArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]ListRecursiveArg)
					if !ok {
						err = rpc.NewTypeError((*[]ListRecursiveArg)(nil), args)
						return
					}
					err = i.ListRecursive(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"readList": {
				MakeArg: func() interface{} {
					ret := make([]ReadListArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]ReadListArg)
					if !ok {
						err = rpc.NewTypeError((*[]ReadListArg)(nil), args)
						return
					}
					ret, err = i.ReadList(ctx, (*typedArgs)[0].OpID)
					return
				},
				MethodType: rpc.MethodCall,
			},
			"copy": {
				MakeArg: func() interface{} {
					ret := make([]CopyArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]CopyArg)
					if !ok {
						err = rpc.NewTypeError((*[]CopyArg)(nil), args)
						return
					}
					err = i.Copy(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"copyRecursive": {
				MakeArg: func() interface{} {
					ret := make([]CopyRecursiveArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]CopyRecursiveArg)
					if !ok {
						err = rpc.NewTypeError((*[]CopyRecursiveArg)(nil), args)
						return
					}
					err = i.CopyRecursive(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"move": {
				MakeArg: func() interface{} {
					ret := make([]MoveArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]MoveArg)
					if !ok {
						err = rpc.NewTypeError((*[]MoveArg)(nil), args)
						return
					}
					err = i.Move(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"rename": {
				MakeArg: func() interface{} {
					ret := make([]RenameArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]RenameArg)
					if !ok {
						err = rpc.NewTypeError((*[]RenameArg)(nil), args)
						return
					}
					err = i.Rename(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"open": {
				MakeArg: func() interface{} {
					ret := make([]OpenArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]OpenArg)
					if !ok {
						err = rpc.NewTypeError((*[]OpenArg)(nil), args)
						return
					}
					err = i.Open(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"read": {
				MakeArg: func() interface{} {
					ret := make([]ReadArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]ReadArg)
					if !ok {
						err = rpc.NewTypeError((*[]ReadArg)(nil), args)
						return
					}
					ret, err = i.Read(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"write": {
				MakeArg: func() interface{} {
					ret := make([]WriteArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]WriteArg)
					if !ok {
						err = rpc.NewTypeError((*[]WriteArg)(nil), args)
						return
					}
					err = i.Write(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"remove": {
				MakeArg: func() interface{} {
					ret := make([]RemoveArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]RemoveArg)
					if !ok {
						err = rpc.NewTypeError((*[]RemoveArg)(nil), args)
						return
					}
					err = i.Remove(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"stat": {
				MakeArg: func() interface{} {
					ret := make([]StatArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]StatArg)
					if !ok {
						err = rpc.NewTypeError((*[]StatArg)(nil), args)
						return
					}
					ret, err = i.Stat(ctx, (*typedArgs)[0].Path)
					return
				},
				MethodType: rpc.MethodCall,
			},
			"makeOpID": {
				MakeArg: func() interface{} {
					ret := make([]MakeOpIDArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					ret, err = i.MakeOpID(ctx)
					return
				},
				MethodType: rpc.MethodCall,
			},
			"close": {
				MakeArg: func() interface{} {
					ret := make([]CloseArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]CloseArg)
					if !ok {
						err = rpc.NewTypeError((*[]CloseArg)(nil), args)
						return
					}
					err = i.Close(ctx, (*typedArgs)[0].OpID)
					return
				},
				MethodType: rpc.MethodCall,
			},
			"check": {
				MakeArg: func() interface{} {
					ret := make([]CheckArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]CheckArg)
					if !ok {
						err = rpc.NewTypeError((*[]CheckArg)(nil), args)
						return
					}
					ret, err = i.Check(ctx, (*typedArgs)[0].OpID)
					return
				},
				MethodType: rpc.MethodCall,
			},
			"getOps": {
				MakeArg: func() interface{} {
					ret := make([]GetOpsArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					ret, err = i.GetOps(ctx)
					return
				},
				MethodType: rpc.MethodCall,
			},
			"wait": {
				MakeArg: func() interface{} {
					ret := make([]WaitArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]WaitArg)
					if !ok {
						err = rpc.NewTypeError((*[]WaitArg)(nil), args)
						return
					}
					err = i.Wait(ctx, (*typedArgs)[0].OpID)
					return
				},
				MethodType: rpc.MethodCall,
			},
		},
	}
}

type SimpleFSClient struct {
	Cli rpc.GenericClient
}

// Begin list of items in directory at path
// Retrieve results with readList()
// Can be a single file to get flags/status
func (c SimpleFSClient) List(ctx context.Context, __arg ListArg) (err error) {
	err = c.Cli.Call(ctx, "keybase.1.SimpleFS.list", []interface{}{__arg}, nil)
	return
}

// Begin recursive list of items in directory at path
func (c SimpleFSClient) ListRecursive(ctx context.Context, __arg ListRecursiveArg) (err error) {
	err = c.Cli.Call(ctx, "keybase.1.SimpleFS.listRecursive", []interface{}{__arg}, nil)
	return
}

// Get list of Paths in progress. Can indicate status of pending
// to get more entries.
func (c SimpleFSClient) ReadList(ctx context.Context, opID OpID) (res ListResult, err error) {
	__arg := ReadListArg{OpID: opID}
	err = c.Cli.Call(ctx, "keybase.1.SimpleFS.readList", []interface{}{__arg}, &res)
	return
}

// Begin copy of file or directory
func (c SimpleFSClient) Copy(ctx context.Context, __arg CopyArg) (err error) {
	err = c.Cli.Call(ctx, "keybase.1.SimpleFS.copy", []interface{}{__arg}, nil)
	return
}

// Begin recursive copy of directory
func (c SimpleFSClient) CopyRecursive(ctx context.Context, __arg CopyRecursiveArg) (err error) {
	err = c.Cli.Call(ctx, "keybase.1.SimpleFS.copyRecursive", []interface{}{__arg}, nil)
	return
}

// Begin move of file or directory, from/to KBFS only
func (c SimpleFSClient) Move(ctx context.Context, __arg MoveArg) (err error) {
	err = c.Cli.Call(ctx, "keybase.1.SimpleFS.move", []interface{}{__arg}, nil)
	return
}

// Rename file or directory, KBFS side only
func (c SimpleFSClient) Rename(ctx context.Context, __arg RenameArg) (err error) {
	err = c.Cli.Call(ctx, "keybase.1.SimpleFS.rename", []interface{}{__arg}, nil)
	return
}

// Create/open a file and leave it open
// or create a directory
// or set the executable bit on an existing file.
// Files must be closed afterwards.
func (c SimpleFSClient) Open(ctx context.Context, __arg OpenArg) (err error) {
	err = c.Cli.Call(ctx, "keybase.1.SimpleFS.open", []interface{}{__arg}, nil)
	return
}

// Read (possibly partial) contents of open file,
// up to the amount specified by size.
// Repeat until zero bytes are returned or error.
// If size is zero, read an arbitrary amount.
func (c SimpleFSClient) Read(ctx context.Context, __arg ReadArg) (res FileContent, err error) {
	err = c.Cli.Call(ctx, "keybase.1.SimpleFS.read", []interface{}{__arg}, &res)
	return
}

// Append content to opened file.
// May be repeated until OpID is closed.
func (c SimpleFSClient) Write(ctx context.Context, __arg WriteArg) (err error) {
	err = c.Cli.Call(ctx, "keybase.1.SimpleFS.write", []interface{}{__arg}, nil)
	return
}

// Remove file or directory from filesystem
func (c SimpleFSClient) Remove(ctx context.Context, __arg RemoveArg) (err error) {
	err = c.Cli.Call(ctx, "keybase.1.SimpleFS.remove", []interface{}{__arg}, nil)
	return
}

// Get info about file
func (c SimpleFSClient) Stat(ctx context.Context, path KBFSPath) (res Dirent, err error) {
	__arg := StatArg{Path: path}
	err = c.Cli.Call(ctx, "keybase.1.SimpleFS.stat", []interface{}{__arg}, &res)
	return
}

// Convenience helper for generating new random value
func (c SimpleFSClient) MakeOpID(ctx context.Context) (res OpID, err error) {
	err = c.Cli.Call(ctx, "keybase.1.SimpleFS.makeOpID", []interface{}{MakeOpIDArg{}}, &res)
	return
}

// Close OpID, cancels any pending operation.
// Must be called after list/copy/remove
func (c SimpleFSClient) Close(ctx context.Context, opID OpID) (err error) {
	__arg := CloseArg{OpID: opID}
	err = c.Cli.Call(ctx, "keybase.1.SimpleFS.close", []interface{}{__arg}, nil)
	return
}

// Check progress of pending operation
func (c SimpleFSClient) Check(ctx context.Context, opID OpID) (res Progress, err error) {
	__arg := CheckArg{OpID: opID}
	err = c.Cli.Call(ctx, "keybase.1.SimpleFS.check", []interface{}{__arg}, &res)
	return
}

// Get all the outstanding operations
func (c SimpleFSClient) GetOps(ctx context.Context) (res []OpDescription, err error) {
	err = c.Cli.Call(ctx, "keybase.1.SimpleFS.getOps", []interface{}{GetOpsArg{}}, &res)
	return
}

// Blocking wait for the pending operation to finish
func (c SimpleFSClient) Wait(ctx context.Context, opID OpID) (err error) {
	__arg := WaitArg{OpID: opID}
	err = c.Cli.Call(ctx, "keybase.1.SimpleFS.wait", []interface{}{__arg}, nil)
	return
}
