// Auto-generated by avdl-compiler v1.3.1 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/kbfs_common.avdl

package keybase1

import (
	rpc "github.com/keybase/go-framed-msgpack-rpc"
)

type FSStatusCode int

const (
	FSStatusCode_START  FSStatusCode = 0
	FSStatusCode_FINISH FSStatusCode = 1
	FSStatusCode_ERROR  FSStatusCode = 2
)

type FSNotificationType int

const (
	FSNotificationType_ENCRYPTING      FSNotificationType = 0
	FSNotificationType_DECRYPTING      FSNotificationType = 1
	FSNotificationType_SIGNING         FSNotificationType = 2
	FSNotificationType_VERIFYING       FSNotificationType = 3
	FSNotificationType_REKEYING        FSNotificationType = 4
	FSNotificationType_CONNECTION      FSNotificationType = 5
	FSNotificationType_MD_READ_SUCCESS FSNotificationType = 6
)

type FSErrorType int

const (
	FSErrorType_ACCESS_DENIED         FSErrorType = 0
	FSErrorType_USER_NOT_FOUND        FSErrorType = 1
	FSErrorType_REVOKED_DATA_DETECTED FSErrorType = 2
	FSErrorType_NOT_LOGGED_IN         FSErrorType = 3
	FSErrorType_TIMEOUT               FSErrorType = 4
	FSErrorType_REKEY_NEEDED          FSErrorType = 5
	FSErrorType_BAD_FOLDER            FSErrorType = 6
	FSErrorType_NOT_IMPLEMENTED       FSErrorType = 7
	FSErrorType_OLD_VERSION           FSErrorType = 8
	FSErrorType_OVER_QUOTA            FSErrorType = 9
	FSErrorType_NO_SIG_CHAIN          FSErrorType = 10
)

type FSNotification struct {
	PublicTopLevelFolder bool               `codec:"publicTopLevelFolder" json:"publicTopLevelFolder"`
	Filename             string             `codec:"filename" json:"filename"`
	Status               string             `codec:"status" json:"status"`
	StatusCode           FSStatusCode       `codec:"statusCode" json:"statusCode"`
	NotificationType     FSNotificationType `codec:"notificationType" json:"notificationType"`
	ErrorType            FSErrorType        `codec:"errorType" json:"errorType"`
	Params               map[string]string  `codec:"params" json:"params"`
}

type KbfsCommonInterface interface {
}

func KbfsCommonProtocol(i KbfsCommonInterface) rpc.Protocol {
	return rpc.Protocol{
		Name:    "keybase.1.kbfsCommon",
		Methods: map[string]rpc.ServeHandlerDescription{},
	}
}

type KbfsCommonClient struct {
	Cli rpc.GenericClient
}
