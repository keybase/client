// Auto-generated by avdl-compiler v1.3.1 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/notify_chat.avdl

package keybase1

import (
	rpc "github.com/keybase/go-framed-msgpack-rpc"
	context "golang.org/x/net/context"
)

type NewChatMessageArg struct {
	Uid UID     `codec:"uid" json:"uid"`
	Msg Message `codec:"msg" json:"msg"`
}

type NotifyChatInterface interface {
	NewChatMessage(context.Context, NewChatMessageArg) error
}

func NotifyChatProtocol(i NotifyChatInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "keybase.1.NotifyChat",
		Methods: map[string]rpc.ServeHandlerDescription{
			"newChatMessage": {
				MakeArg: func() interface{} {
					ret := make([]NewChatMessageArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]NewChatMessageArg)
					if !ok {
						err = rpc.NewTypeError((*[]NewChatMessageArg)(nil), args)
						return
					}
					err = i.NewChatMessage(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodNotify,
			},
		},
	}
}

type NotifyChatClient struct {
	Cli rpc.GenericClient
}

func (c NotifyChatClient) NewChatMessage(ctx context.Context, __arg NewChatMessageArg) (err error) {
	err = c.Cli.Notify(ctx, "keybase.1.NotifyChat.newChatMessage", []interface{}{__arg})
	return
}
