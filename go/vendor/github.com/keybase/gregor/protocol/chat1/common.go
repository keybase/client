// Auto-generated by avdl-compiler v1.3.3 (https://github.com/keybase/node-avdl-compiler)
//   Input file: chat1/common.avdl

package chat1

import (
	rpc "github.com/keybase/go-framed-msgpack-rpc"
	gregor1 "github.com/keybase/gregor/protocol/gregor1"
)

type ThreadID []byte
type MessageID []byte
type PaginationResourceID []byte
type TopicID []byte
type ConversationID int64
type TLFID []byte
type DeviceID []byte
type MessageType int

const (
	MessageType_NONE       MessageType = 0
	MessageType_TEXT       MessageType = 1
	MessageType_ATTACHMENT MessageType = 2
	MessageType_EDIT       MessageType = 3
	MessageType_DELETE     MessageType = 4
	MessageType_METADATA   MessageType = 5
)

type Pagination struct {
	ResourceID []byte `codec:"resourceID" json:"resourceID"`
	Last       int    `codec:"last" json:"last"`
	Num        int    `codec:"num" json:"num"`
}

type ConversationIDTriple struct {
	Tlfid     TLFID   `codec:"tlfid" json:"tlfid"`
	TopicType int     `codec:"topicType" json:"topicType"`
	TopicID   TopicID `codec:"topicID" json:"topicID"`
}

type ConversationMetadata struct {
	IdTriple       ConversationIDTriple `codec:"idTriple" json:"idTriple"`
	ConversationID ConversationID       `codec:"conversationID" json:"conversationID"`
}

type Conversation struct {
	Metadata   ConversationMetadata  `codec:"metadata" json:"metadata"`
	MaxHeaders []MessageServerHeader `codec:"maxHeaders" json:"maxHeaders"`
}

type MessageServerHeader struct {
	MessageType  MessageType  `codec:"messageType" json:"messageType"`
	MessageID    MessageID    `codec:"messageID" json:"messageID"`
	Sender       gregor1.UID  `codec:"sender" json:"sender"`
	SenderDevice DeviceID     `codec:"senderDevice" json:"senderDevice"`
	SupersededBy MessageID    `codec:"supersededBy" json:"supersededBy"`
	Ctime        gregor1.Time `codec:"ctime" json:"ctime"`
}

type MessagePreviousPointer struct {
	Id   MessageID `codec:"id" json:"id"`
	Hash []byte    `codec:"hash" json:"hash"`
}

type MessageClientHeader struct {
	Conv         ConversationIDTriple     `codec:"conv" json:"conv"`
	MessageType  MessageType              `codec:"messageType" json:"messageType"`
	Prev         []MessagePreviousPointer `codec:"prev" json:"prev"`
	Sender       gregor1.UID              `codec:"sender" json:"sender"`
	SenderDevice DeviceID                 `codec:"senderDevice" json:"senderDevice"`
}

type EncryptedData struct {
	V int    `codec:"v" json:"v"`
	E []byte `codec:"e" json:"e"`
	N []byte `codec:"n" json:"n"`
}

type SignatureInfo struct {
	V int    `codec:"v" json:"v"`
	S []byte `codec:"s" json:"s"`
	K []byte `codec:"k" json:"k"`
}

type InboxView struct {
	Conversations []Conversation `codec:"conversations" json:"conversations"`
	Pagination    *Pagination    `codec:"pagination,omitempty" json:"pagination,omitempty"`
}

type CommonInterface interface {
}

func CommonProtocol(i CommonInterface) rpc.Protocol {
	return rpc.Protocol{
		Name:    "chat.1.common",
		Methods: map[string]rpc.ServeHandlerDescription{},
	}
}

type CommonClient struct {
	Cli rpc.GenericClient
}
