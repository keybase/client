// Code generated by MockGen. DO NOT EDIT.
// Source: codec.go

// Package kbfscodec is a generated GoMock package.
package kbfscodec

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kbfscodec "github.com/keybase/client/go/kbfs/kbfscodec"
)

// MockCodec is a mock of Codec interface.
type MockCodec struct {
	ctrl     *gomock.Controller
	recorder *MockCodecMockRecorder
}

// MockCodecMockRecorder is the mock recorder for MockCodec.
type MockCodecMockRecorder struct {
	mock *MockCodec
}

// NewMockCodec creates a new mock instance.
func NewMockCodec(ctrl *gomock.Controller) *MockCodec {
	mock := &MockCodec{ctrl: ctrl}
	mock.recorder = &MockCodecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodec) EXPECT() *MockCodecMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockCodec) Decode(buf []byte, obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", buf, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockCodecMockRecorder) Decode(buf, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockCodec)(nil).Decode), buf, obj)
}

// Encode mocks base method.
func (m *MockCodec) Encode(obj interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", obj)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockCodecMockRecorder) Encode(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockCodec)(nil).Encode), obj)
}

// RegisterIfaceSliceType mocks base method.
func (m *MockCodec) RegisterIfaceSliceType(rt reflect.Type, code kbfscodec.ExtCode, typer func(interface{}) reflect.Value) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterIfaceSliceType", rt, code, typer)
}

// RegisterIfaceSliceType indicates an expected call of RegisterIfaceSliceType.
func (mr *MockCodecMockRecorder) RegisterIfaceSliceType(rt, code, typer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterIfaceSliceType", reflect.TypeOf((*MockCodec)(nil).RegisterIfaceSliceType), rt, code, typer)
}

// RegisterType mocks base method.
func (m *MockCodec) RegisterType(rt reflect.Type, code kbfscodec.ExtCode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterType", rt, code)
}

// RegisterType indicates an expected call of RegisterType.
func (mr *MockCodecMockRecorder) RegisterType(rt, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterType", reflect.TypeOf((*MockCodec)(nil).RegisterType), rt, code)
}
