// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/keybase/client/go/kbfs/data (interfaces: BlockWithPtrs)

// Package data is a generated GoMock package.
package data

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBlockWithPtrs is a mock of BlockWithPtrs interface
type MockBlockWithPtrs struct {
	ctrl     *gomock.Controller
	recorder *MockBlockWithPtrsMockRecorder
}

// MockBlockWithPtrsMockRecorder is the mock recorder for MockBlockWithPtrs
type MockBlockWithPtrsMockRecorder struct {
	mock *MockBlockWithPtrs
}

// NewMockBlockWithPtrs creates a new mock instance
func NewMockBlockWithPtrs(ctrl *gomock.Controller) *MockBlockWithPtrs {
	mock := &MockBlockWithPtrs{ctrl: ctrl}
	mock.recorder = &MockBlockWithPtrsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockWithPtrs) EXPECT() *MockBlockWithPtrsMockRecorder {
	return m.recorder
}

// AppendNewIndirectPtr mocks base method
func (m *MockBlockWithPtrs) AppendNewIndirectPtr(arg0 BlockPointer, arg1 Offset) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppendNewIndirectPtr", arg0, arg1)
}

// AppendNewIndirectPtr indicates an expected call of AppendNewIndirectPtr
func (mr *MockBlockWithPtrsMockRecorder) AppendNewIndirectPtr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendNewIndirectPtr", reflect.TypeOf((*MockBlockWithPtrs)(nil).AppendNewIndirectPtr), arg0, arg1)
}

// BytesCanBeDirtied mocks base method
func (m *MockBlockWithPtrs) BytesCanBeDirtied() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BytesCanBeDirtied")
	ret0, _ := ret[0].(int64)
	return ret0
}

// BytesCanBeDirtied indicates an expected call of BytesCanBeDirtied
func (mr *MockBlockWithPtrsMockRecorder) BytesCanBeDirtied() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesCanBeDirtied", reflect.TypeOf((*MockBlockWithPtrs)(nil).BytesCanBeDirtied))
}

// ClearIndirectPtrSize mocks base method
func (m *MockBlockWithPtrs) ClearIndirectPtrSize(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearIndirectPtrSize", arg0)
}

// ClearIndirectPtrSize indicates an expected call of ClearIndirectPtrSize
func (mr *MockBlockWithPtrsMockRecorder) ClearIndirectPtrSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearIndirectPtrSize", reflect.TypeOf((*MockBlockWithPtrs)(nil).ClearIndirectPtrSize), arg0)
}

// DataVersion mocks base method
func (m *MockBlockWithPtrs) DataVersion() Ver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataVersion")
	ret0, _ := ret[0].(Ver)
	return ret0
}

// DataVersion indicates an expected call of DataVersion
func (mr *MockBlockWithPtrsMockRecorder) DataVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataVersion", reflect.TypeOf((*MockBlockWithPtrs)(nil).DataVersion))
}

// FirstOffset mocks base method
func (m *MockBlockWithPtrs) FirstOffset() Offset {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstOffset")
	ret0, _ := ret[0].(Offset)
	return ret0
}

// FirstOffset indicates an expected call of FirstOffset
func (mr *MockBlockWithPtrsMockRecorder) FirstOffset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOffset", reflect.TypeOf((*MockBlockWithPtrs)(nil).FirstOffset))
}

// GetEncodedSize mocks base method
func (m *MockBlockWithPtrs) GetEncodedSize() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncodedSize")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetEncodedSize indicates an expected call of GetEncodedSize
func (mr *MockBlockWithPtrsMockRecorder) GetEncodedSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncodedSize", reflect.TypeOf((*MockBlockWithPtrs)(nil).GetEncodedSize))
}

// IndirectPtr mocks base method
func (m *MockBlockWithPtrs) IndirectPtr(arg0 int) (BlockInfo, Offset) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndirectPtr", arg0)
	ret0, _ := ret[0].(BlockInfo)
	ret1, _ := ret[1].(Offset)
	return ret0, ret1
}

// IndirectPtr indicates an expected call of IndirectPtr
func (mr *MockBlockWithPtrsMockRecorder) IndirectPtr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndirectPtr", reflect.TypeOf((*MockBlockWithPtrs)(nil).IndirectPtr), arg0)
}

// IsIndirect mocks base method
func (m *MockBlockWithPtrs) IsIndirect() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsIndirect")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsIndirect indicates an expected call of IsIndirect
func (mr *MockBlockWithPtrsMockRecorder) IsIndirect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsIndirect", reflect.TypeOf((*MockBlockWithPtrs)(nil).IsIndirect))
}

// IsTail mocks base method
func (m *MockBlockWithPtrs) IsTail() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTail")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTail indicates an expected call of IsTail
func (mr *MockBlockWithPtrsMockRecorder) IsTail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTail", reflect.TypeOf((*MockBlockWithPtrs)(nil).IsTail))
}

// NewEmptier mocks base method
func (m *MockBlockWithPtrs) NewEmptier() func() Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEmptier")
	ret0, _ := ret[0].(func() Block)
	return ret0
}

// NewEmptier indicates an expected call of NewEmptier
func (mr *MockBlockWithPtrsMockRecorder) NewEmptier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEmptier", reflect.TypeOf((*MockBlockWithPtrs)(nil).NewEmptier))
}

// NewEmpty mocks base method
func (m *MockBlockWithPtrs) NewEmpty() Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEmpty")
	ret0, _ := ret[0].(Block)
	return ret0
}

// NewEmpty indicates an expected call of NewEmpty
func (mr *MockBlockWithPtrsMockRecorder) NewEmpty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEmpty", reflect.TypeOf((*MockBlockWithPtrs)(nil).NewEmpty))
}

// NumIndirectPtrs mocks base method
func (m *MockBlockWithPtrs) NumIndirectPtrs() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumIndirectPtrs")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumIndirectPtrs indicates an expected call of NumIndirectPtrs
func (mr *MockBlockWithPtrsMockRecorder) NumIndirectPtrs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumIndirectPtrs", reflect.TypeOf((*MockBlockWithPtrs)(nil).NumIndirectPtrs))
}

// OffsetExceedsData mocks base method
func (m *MockBlockWithPtrs) OffsetExceedsData(arg0, arg1 Offset) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OffsetExceedsData", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// OffsetExceedsData indicates an expected call of OffsetExceedsData
func (mr *MockBlockWithPtrsMockRecorder) OffsetExceedsData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OffsetExceedsData", reflect.TypeOf((*MockBlockWithPtrs)(nil).OffsetExceedsData), arg0, arg1)
}

// Set mocks base method
func (m *MockBlockWithPtrs) Set(arg0 Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0)
}

// Set indicates an expected call of Set
func (mr *MockBlockWithPtrsMockRecorder) Set(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockBlockWithPtrs)(nil).Set), arg0)
}

// SetEncodedSize mocks base method
func (m *MockBlockWithPtrs) SetEncodedSize(arg0 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEncodedSize", arg0)
}

// SetEncodedSize indicates an expected call of SetEncodedSize
func (mr *MockBlockWithPtrsMockRecorder) SetEncodedSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEncodedSize", reflect.TypeOf((*MockBlockWithPtrs)(nil).SetEncodedSize), arg0)
}

// SetIndirectPtrInfo mocks base method
func (m *MockBlockWithPtrs) SetIndirectPtrInfo(arg0 int, arg1 BlockInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIndirectPtrInfo", arg0, arg1)
}

// SetIndirectPtrInfo indicates an expected call of SetIndirectPtrInfo
func (mr *MockBlockWithPtrsMockRecorder) SetIndirectPtrInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIndirectPtrInfo", reflect.TypeOf((*MockBlockWithPtrs)(nil).SetIndirectPtrInfo), arg0, arg1)
}

// SetIndirectPtrOff mocks base method
func (m *MockBlockWithPtrs) SetIndirectPtrOff(arg0 int, arg1 Offset) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIndirectPtrOff", arg0, arg1)
}

// SetIndirectPtrOff indicates an expected call of SetIndirectPtrOff
func (mr *MockBlockWithPtrsMockRecorder) SetIndirectPtrOff(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIndirectPtrOff", reflect.TypeOf((*MockBlockWithPtrs)(nil).SetIndirectPtrOff), arg0, arg1)
}

// SetIndirectPtrType mocks base method
func (m *MockBlockWithPtrs) SetIndirectPtrType(arg0 int, arg1 BlockDirectType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIndirectPtrType", arg0, arg1)
}

// SetIndirectPtrType indicates an expected call of SetIndirectPtrType
func (mr *MockBlockWithPtrsMockRecorder) SetIndirectPtrType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIndirectPtrType", reflect.TypeOf((*MockBlockWithPtrs)(nil).SetIndirectPtrType), arg0, arg1)
}

// SwapIndirectPtrs mocks base method
func (m *MockBlockWithPtrs) SwapIndirectPtrs(arg0 int, arg1 BlockWithPtrs, arg2 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SwapIndirectPtrs", arg0, arg1, arg2)
}

// SwapIndirectPtrs indicates an expected call of SwapIndirectPtrs
func (mr *MockBlockWithPtrsMockRecorder) SwapIndirectPtrs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapIndirectPtrs", reflect.TypeOf((*MockBlockWithPtrs)(nil).SwapIndirectPtrs), arg0, arg1, arg2)
}

// ToCommonBlock mocks base method
func (m *MockBlockWithPtrs) ToCommonBlock() *CommonBlock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCommonBlock")
	ret0, _ := ret[0].(*CommonBlock)
	return ret0
}

// ToCommonBlock indicates an expected call of ToCommonBlock
func (mr *MockBlockWithPtrsMockRecorder) ToCommonBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCommonBlock", reflect.TypeOf((*MockBlockWithPtrs)(nil).ToCommonBlock))
}
