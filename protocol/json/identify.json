{
  "protocol" : "identify",
  "namespace" : "keybase.1",
  "types" : [ {
    "type" : "record",
    "name" : "StringKVPair",
    "fields" : [ {
      "name" : "key",
      "type" : "string"
    }, {
      "name" : "value",
      "type" : "string"
    } ]
  }, {
    "type" : "record",
    "name" : "Status",
    "fields" : [ {
      "name" : "code",
      "type" : "int"
    }, {
      "name" : "name",
      "type" : "string"
    }, {
      "name" : "desc",
      "type" : "string"
    }, {
      "name" : "fields",
      "type" : {
        "type" : "array",
        "items" : "StringKVPair"
      }
    } ]
  }, {
    "type" : "fixed",
    "name" : "UID",
    "size" : 16
  }, {
    "type" : "record",
    "name" : "FOKID",
    "fields" : [ {
      "name" : "pgpFingerprint",
      "type" : [ "null", "bytes" ]
    }, {
      "name" : "kid",
      "type" : [ "null", "bytes" ]
    } ]
  }, {
    "type" : "record",
    "name" : "Text",
    "fields" : [ {
      "name" : "data",
      "type" : "string"
    }, {
      "name" : "markup",
      "type" : "boolean"
    } ]
  }, {
    "type" : "record",
    "name" : "PgpIdentity",
    "fields" : [ {
      "name" : "username",
      "type" : "string"
    }, {
      "name" : "comment",
      "type" : "string"
    }, {
      "name" : "email",
      "type" : "string"
    } ]
  }, {
    "type" : "record",
    "name" : "Image",
    "fields" : [ {
      "name" : "url",
      "type" : "string"
    }, {
      "name" : "width",
      "type" : "int"
    }, {
      "name" : "height",
      "type" : "int"
    } ]
  }, {
    "type" : "record",
    "name" : "PublicKey",
    "fields" : [ {
      "name" : "KID",
      "type" : "string"
    }, {
      "name" : "PGPFingerprint",
      "type" : "string"
    }, {
      "name" : "PGPIdentities",
      "type" : {
        "type" : "array",
        "items" : "PgpIdentity"
      }
    }, {
      "name" : "isSibkey",
      "type" : "boolean"
    }, {
      "name" : "isEldest",
      "type" : "boolean"
    }, {
      "name" : "isWeb",
      "type" : "boolean"
    }, {
      "name" : "parentID",
      "type" : "string"
    }, {
      "name" : "deviceID",
      "type" : "string"
    }, {
      "name" : "deviceDescription",
      "type" : "string"
    }, {
      "name" : "cTime",
      "type" : "long"
    }, {
      "name" : "eTime",
      "type" : "long"
    } ]
  }, {
    "type" : "record",
    "name" : "User",
    "fields" : [ {
      "name" : "uid",
      "type" : "UID"
    }, {
      "name" : "username",
      "type" : "string"
    }, {
      "name" : "image",
      "type" : [ "null", "Image" ]
    }, {
      "name" : "publicKeys",
      "type" : {
        "type" : "array",
        "items" : "PublicKey"
      }
    } ]
  }, {
    "type" : "record",
    "name" : "Device",
    "fields" : [ {
      "name" : "type",
      "type" : "string"
    }, {
      "name" : "name",
      "type" : "string"
    }, {
      "name" : "deviceID",
      "type" : "string"
    } ]
  }, {
    "type" : "record",
    "name" : "Stream",
    "fields" : [ {
      "name" : "fd",
      "type" : "int"
    } ]
  }, {
    "type" : "fixed",
    "name" : "SIGID",
    "size" : 32
  }, {
    "type" : "enum",
    "name" : "ProofState",
    "symbols" : [ "NONE", "OK", "TEMP_FAILURE", "PERM_FAILURE", "LOOKING", "SUPERSEDED", "POSTED", "REVOKED" ],
    "defaults" : {
      "NONE" : 0,
      "OK" : 1,
      "TEMP_FAILURE" : 2,
      "PERM_FAILURE" : 3,
      "LOOKING" : 4,
      "SUPERSEDED" : 5,
      "POSTED" : 6,
      "REVOKED" : 7
    }
  }, {
    "type" : "enum",
    "name" : "ProofCheckStatus",
    "doc" : "3: It's been found in the hunt, but not proven yet\n    1xx: Retryable soft errors\n    2xx: Will likely result in a hard error, if repeated enough\n    3xx: Hard final errors",
    "symbols" : [ "NONE", "OK", "LOCAL", "FOUND", "HOST_UNREACHABLE", "PERMISSION_DENIED", "FAILED_PARSE", "DNS_ERROR", "AUTH_FAILED", "HTTP_500", "TIMEOUT", "INTERNAL_ERROR", "NOT_FOUND", "CONTENT_FAILURE", "BAD_USERNAME", "BAD_REMOTE_ID", "TEXT_NOT_FOUND", "BAD_ARGS", "CONTENT_MISSING", "TITLE_NOT_FOUND", "SERVICE_ERROR", "TOR_SKIPPED", "TOR_INCOMPATIBLE", "HTTP_300", "HTTP_400", "HTTP_OTHER", "EMPTY_JSON", "DELETED", "SERVICE_DEAD", "BAD_SIGNATURE", "BAD_API_URL", "UNKNOWN_TYPE", "NO_HINT", "BAD_HINT_TEXT" ],
    "defaults" : {
      "NONE" : 0,
      "OK" : 1,
      "LOCAL" : 2,
      "FOUND" : 3,
      "HOST_UNREACHABLE" : 101,
      "PERMISSION_DENIED" : 103,
      "FAILED_PARSE" : 106,
      "DNS_ERROR" : 107,
      "AUTH_FAILED" : 108,
      "HTTP_500" : 150,
      "TIMEOUT" : 160,
      "INTERNAL_ERROR" : 170,
      "NOT_FOUND" : 201,
      "CONTENT_FAILURE" : 202,
      "BAD_USERNAME" : 203,
      "BAD_REMOTE_ID" : 204,
      "TEXT_NOT_FOUND" : 205,
      "BAD_ARGS" : 206,
      "CONTENT_MISSING" : 207,
      "TITLE_NOT_FOUND" : 208,
      "SERVICE_ERROR" : 209,
      "TOR_SKIPPED" : 210,
      "TOR_INCOMPATIBLE" : 211,
      "HTTP_300" : 230,
      "HTTP_400" : 240,
      "HTTP_OTHER" : 260,
      "EMPTY_JSON" : 270,
      "DELETED" : 301,
      "SERVICE_DEAD" : 302,
      "BAD_SIGNATURE" : 303,
      "BAD_API_URL" : 304,
      "UNKNOWN_TYPE" : 305,
      "NO_HINT" : 306,
      "BAD_HINT_TEXT" : 307
    }
  }, {
    "type" : "enum",
    "name" : "ProofType",
    "symbols" : [ "NONE", "KEYBASE", "TWITTER", "GITHUB", "REDDIT", "COINBASE", "HACKERNEWS", "GENERIC_WEB_SITE", "DNS" ],
    "defaults" : {
      "NONE" : 0,
      "KEYBASE" : 1,
      "TWITTER" : 2,
      "GITHUB" : 3,
      "REDDIT" : 4,
      "COINBASE" : 5,
      "HACKERNEWS" : 6,
      "GENERIC_WEB_SITE" : 1000,
      "DNS" : 1001
    }
  }, {
    "type" : "enum",
    "name" : "TrackDiffType",
    "symbols" : [ "NONE", "ERROR", "CLASH", "DELETED", "UPGRADED", "NEW", "REMOTE_FAIL", "REMOTE_WORKING", "REMOTE_CHANGED" ]
  }, {
    "type" : "record",
    "name" : "TrackDiff",
    "fields" : [ {
      "name" : "type",
      "type" : "TrackDiffType"
    }, {
      "name" : "displayMarkup",
      "type" : "string"
    } ]
  }, {
    "type" : "record",
    "name" : "TrackSummary",
    "fields" : [ {
      "name" : "username",
      "type" : "string"
    }, {
      "name" : "time",
      "type" : "int"
    }, {
      "name" : "isRemote",
      "type" : "boolean"
    } ]
  }, {
    "type" : "record",
    "name" : "IdentifyOutcome",
    "fields" : [ {
      "name" : "username",
      "type" : "string"
    }, {
      "name" : "status",
      "type" : [ "null", "Status" ]
    }, {
      "name" : "warnings",
      "type" : {
        "type" : "array",
        "items" : "string"
      }
    }, {
      "name" : "trackUsed",
      "type" : [ "null", "TrackSummary" ]
    }, {
      "name" : "numTrackFailures",
      "type" : "int"
    }, {
      "name" : "numTrackChanges",
      "type" : "int"
    }, {
      "name" : "numProofFailures",
      "type" : "int"
    }, {
      "name" : "numDeleted",
      "type" : "int"
    }, {
      "name" : "numProofSuccesses",
      "type" : "int"
    }, {
      "name" : "deleted",
      "type" : {
        "type" : "array",
        "items" : "TrackDiff"
      }
    }, {
      "name" : "localOnly",
      "type" : "boolean"
    }, {
      "name" : "approveRemote",
      "type" : "boolean"
    } ]
  }, {
    "type" : "record",
    "name" : "IdentifyRes",
    "fields" : [ {
      "name" : "user",
      "type" : [ "null", "User" ]
    }, {
      "name" : "outcome",
      "type" : "IdentifyOutcome"
    } ]
  }, {
    "type" : "record",
    "name" : "RemoteProof",
    "fields" : [ {
      "name" : "proofType",
      "type" : "ProofType"
    }, {
      "name" : "key",
      "type" : "string"
    }, {
      "name" : "value",
      "type" : "string"
    }, {
      "name" : "displayMarkup",
      "type" : "string"
    }, {
      "name" : "sigID",
      "type" : "string"
    }, {
      "name" : "mtime",
      "type" : "int"
    } ]
  } ],
  "messages" : {
    "identify" : {
      "request" : [ {
        "name" : "sessionID",
        "type" : "int"
      }, {
        "name" : "userAssertion",
        "type" : "string"
      }, {
        "name" : "trackStatement",
        "type" : "boolean"
      } ],
      "response" : "IdentifyRes"
    },
    "identifyDefault" : {
      "request" : [ {
        "name" : "sessionID",
        "type" : "int"
      }, {
        "name" : "userAssertion",
        "type" : "string"
      } ],
      "response" : "IdentifyRes"
    }
  }
}