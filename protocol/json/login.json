{
  "protocol": "login",
  "imports": [
    {
      "path": "common.avdl",
      "type": "idl"
    }
  ],
  "types": [
    {
      "type": "record",
      "name": "ConfiguredAccount",
      "fields": [
        {
          "type": "string",
          "name": "username"
        },
        {
          "type": "boolean",
          "name": "hasStoredSecret"
        }
      ]
    }
  ],
  "messages": {
    "getConfiguredAccounts": {
      "request": [
        {
          "name": "sessionID",
          "type": "int"
        }
      ],
      "response": {
        "type": "array",
        "items": "ConfiguredAccount"
      },
      "doc": "Returns an array of information about accounts configured on the local\n    machine. Currently configured accounts are defined as those that have stored\n    secrets, but this definition may be expanded in the future."
    },
    "login": {
      "request": [
        {
          "name": "sessionID",
          "type": "int"
        },
        {
          "name": "deviceType",
          "type": "string"
        },
        {
          "name": "usernameOrEmail",
          "type": "string"
        },
        {
          "name": "clientType",
          "type": "ClientType"
        }
      ],
      "response": null,
      "doc": "Performs login.  deviceType should be libkb.DeviceTypeDesktop\n    or libkb.DeviceTypeMobile.  usernameOrEmail is optional.\n    If the current device isn't provisioned, this function will\n    provision it.\n\n    Note that if usernameOrEmail is an email address, only provisioning\n    will be attempted.  If the device is already provisioned, login\n    via email address does not work."
    },
    "clearStoredSecret": {
      "request": [
        {
          "name": "sessionID",
          "type": "int"
        },
        {
          "name": "username",
          "type": "string"
        }
      ],
      "response": null,
      "doc": "Removes any existing stored secret for the given username.\n    loginWithStoredSecret(_, username) will fail after this is called."
    },
    "logout": {
      "request": [
        {
          "name": "sessionID",
          "type": "int"
        }
      ],
      "response": null
    },
    "deprovision": {
      "request": [
        {
          "name": "sessionID",
          "type": "int"
        },
        {
          "name": "username",
          "type": "string"
        },
        {
          "name": "doRevoke",
          "type": "boolean"
        }
      ],
      "response": null
    },
    "recoverAccountFromEmailAddress": {
      "request": [
        {
          "name": "email",
          "type": "string"
        }
      ],
      "response": null
    },
    "paperKey": {
      "request": [
        {
          "name": "sessionID",
          "type": "int"
        }
      ],
      "response": null,
      "doc": "PaperKey generates paper backup keys for restoring an account.\n    It calls login_ui.displayPaperKeyPhrase with the phrase."
    },
    "unlock": {
      "request": [
        {
          "name": "sessionID",
          "type": "int"
        }
      ],
      "response": null,
      "doc": "Unlock restores access to local key store by priming passphrase stream cache."
    },
    "unlockWithPassphrase": {
      "request": [
        {
          "name": "sessionID",
          "type": "int"
        },
        {
          "name": "passphrase",
          "type": "string"
        }
      ],
      "response": null
    }
  },
  "namespace": "keybase.1"
}