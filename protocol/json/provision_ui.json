{
  "protocol": "provisionUi",
  "types": [
    {
      "type": "record",
      "name": "Time",
      "fields": [],
      "typedef": "long"
    },
    {
      "type": "record",
      "name": "StringKVPair",
      "fields": [
        {
          "type": "string",
          "name": "key"
        },
        {
          "type": "string",
          "name": "value"
        }
      ]
    },
    {
      "type": "record",
      "name": "Status",
      "fields": [
        {
          "type": "int",
          "name": "code"
        },
        {
          "type": "string",
          "name": "name"
        },
        {
          "type": "string",
          "name": "desc"
        },
        {
          "type": {
            "type": "array",
            "items": "StringKVPair"
          },
          "name": "fields"
        }
      ]
    },
    {
      "type": "record",
      "name": "UID",
      "fields": [],
      "typedef": "string"
    },
    {
      "type": "record",
      "name": "DeviceID",
      "fields": [],
      "typedef": "string"
    },
    {
      "type": "record",
      "name": "SigID",
      "fields": [],
      "typedef": "string"
    },
    {
      "type": "record",
      "name": "KID",
      "fields": [],
      "typedef": "string"
    },
    {
      "type": "record",
      "name": "Text",
      "fields": [
        {
          "type": "string",
          "name": "data"
        },
        {
          "type": "boolean",
          "name": "markup"
        }
      ]
    },
    {
      "type": "record",
      "name": "PGPIdentity",
      "fields": [
        {
          "type": "string",
          "name": "username"
        },
        {
          "type": "string",
          "name": "comment"
        },
        {
          "type": "string",
          "name": "email"
        }
      ]
    },
    {
      "type": "record",
      "name": "PublicKey",
      "fields": [
        {
          "type": "KID",
          "name": "KID"
        },
        {
          "type": "string",
          "name": "PGPFingerprint"
        },
        {
          "type": {
            "type": "array",
            "items": "PGPIdentity"
          },
          "name": "PGPIdentities"
        },
        {
          "type": "boolean",
          "name": "isSibkey"
        },
        {
          "type": "boolean",
          "name": "isEldest"
        },
        {
          "type": "string",
          "name": "parentID"
        },
        {
          "type": "DeviceID",
          "name": "deviceID"
        },
        {
          "type": "string",
          "name": "deviceDescription"
        },
        {
          "type": "string",
          "name": "deviceType"
        },
        {
          "type": "Time",
          "name": "cTime"
        },
        {
          "type": "Time",
          "name": "eTime"
        }
      ]
    },
    {
      "type": "record",
      "name": "KeybaseTime",
      "fields": [
        {
          "type": "Time",
          "name": "unix"
        },
        {
          "type": "int",
          "name": "chain"
        }
      ]
    },
    {
      "type": "record",
      "name": "RevokedKey",
      "fields": [
        {
          "type": "PublicKey",
          "name": "key"
        },
        {
          "type": "KeybaseTime",
          "name": "time"
        }
      ]
    },
    {
      "type": "record",
      "name": "User",
      "fields": [
        {
          "type": "UID",
          "name": "uid"
        },
        {
          "type": "string",
          "name": "username"
        }
      ]
    },
    {
      "type": "record",
      "name": "Device",
      "fields": [
        {
          "type": "string",
          "name": "type"
        },
        {
          "type": "string",
          "name": "name"
        },
        {
          "type": "DeviceID",
          "name": "deviceID"
        },
        {
          "type": "Time",
          "name": "cTime"
        },
        {
          "type": "Time",
          "name": "mTime"
        },
        {
          "type": "KID",
          "name": "encryptKey"
        },
        {
          "type": "KID",
          "name": "verifyKey"
        },
        {
          "type": "int",
          "name": "status"
        }
      ]
    },
    {
      "type": "record",
      "name": "Stream",
      "fields": [
        {
          "type": "int",
          "name": "fd"
        }
      ]
    },
    {
      "type": "enum",
      "name": "LogLevel",
      "symbols": [
        "NONE_0",
        "DEBUG_1",
        "INFO_2",
        "NOTICE_3",
        "WARN_4",
        "ERROR_5",
        "CRITICAL_6",
        "FATAL_7"
      ]
    },
    {
      "type": "enum",
      "name": "ClientType",
      "symbols": [
        "NONE_0",
        "CLI_1",
        "GUI_2",
        "KBFS_3"
      ]
    },
    {
      "type": "record",
      "name": "UserVersionVector",
      "fields": [
        {
          "type": "long",
          "name": "id"
        },
        {
          "type": "int",
          "name": "sigHints"
        },
        {
          "type": "long",
          "name": "sigChain"
        },
        {
          "type": "Time",
          "name": "cachedAt"
        },
        {
          "type": "Time",
          "name": "lastIdentifiedAt"
        }
      ]
    },
    {
      "type": "record",
      "name": "UserPlusKeys",
      "fields": [
        {
          "type": "UID",
          "name": "uid"
        },
        {
          "type": "string",
          "name": "username"
        },
        {
          "type": {
            "type": "array",
            "items": "PublicKey"
          },
          "name": "deviceKeys"
        },
        {
          "type": {
            "type": "array",
            "items": "RevokedKey"
          },
          "name": "revokedDeviceKeys"
        },
        {
          "type": "int",
          "name": "pgpKeyCount"
        },
        {
          "type": "UserVersionVector",
          "name": "uvv"
        }
      ]
    },
    {
      "type": "enum",
      "name": "MerkleTreeID",
      "symbols": [
        "MASTER_0",
        "KBFS_PUBLIC_1",
        "KBFS_PRIVATE_2"
      ]
    },
    {
      "type": "record",
      "name": "SocialAssertionService",
      "fields": [],
      "doc": "SocialAssertionService is a service that can be used to assert proofs for a\n    user.",
      "typedef": "string"
    },
    {
      "type": "record",
      "name": "SocialAssertion",
      "fields": [
        {
          "type": "string",
          "name": "user"
        },
        {
          "type": "SocialAssertionService",
          "name": "service"
        }
      ],
      "doc": "SocialAssertion contains a service and username for that service, that\n    together form an assertion about a user. Resolving an assertion requires\n    that the user posts a Keybase proof on the asserted service as the asserted\n    user."
    },
    {
      "type": "record",
      "name": "UserResolution",
      "fields": [
        {
          "type": "SocialAssertion",
          "name": "assertion"
        },
        {
          "type": "UID",
          "name": "userID"
        }
      ],
      "doc": "UserResolution maps how an unresolved user assertion has been resolved."
    },
    {
      "type": "record",
      "name": "GPGKey",
      "fields": [
        {
          "type": "string",
          "name": "algorithm"
        },
        {
          "type": "string",
          "name": "keyID"
        },
        {
          "type": "string",
          "name": "creation"
        },
        {
          "type": "string",
          "name": "expiration"
        },
        {
          "type": {
            "type": "array",
            "items": "PGPIdentity"
          },
          "name": "identities"
        }
      ]
    },
    {
      "type": "enum",
      "name": "ProvisionMethod",
      "symbols": [
        "DEVICE_0",
        "PAPER_KEY_1",
        "PASSPHRASE_2",
        "GPG_IMPORT_3",
        "GPG_SIGN_4"
      ]
    },
    {
      "type": "enum",
      "name": "GPGMethod",
      "symbols": [
        "GPG_NONE_0",
        "GPG_IMPORT_1",
        "GPG_SIGN_2"
      ]
    },
    {
      "type": "enum",
      "name": "DeviceType",
      "symbols": [
        "DESKTOP_0",
        "MOBILE_1"
      ]
    },
    {
      "type": "enum",
      "name": "ChooseType",
      "symbols": [
        "EXISTING_DEVICE_0",
        "NEW_DEVICE_1"
      ]
    },
    {
      "type": "record",
      "name": "SecretResponse",
      "fields": [
        {
          "type": "bytes",
          "name": "secret"
        },
        {
          "type": "string",
          "name": "phrase"
        }
      ],
      "doc": "SecretResponse should be returned by DisplayAndPromptSecret.  Use either secret or phrase."
    }
  ],
  "messages": {
    "chooseProvisioningMethod": {
      "request": [
        {
          "name": "sessionID",
          "type": "int"
        },
        {
          "name": "gpgOption",
          "type": "boolean"
        }
      ],
      "response": "ProvisionMethod",
      "doc": "DEPRECATED:\n    Called during device provisioning for the user to select a\n    method for provisioning.  gpgOption will be true if GPG\n    should be offered as an option."
    },
    "chooseGPGMethod": {
      "request": [
        {
          "name": "sessionID",
          "type": "int"
        },
        {
          "name": "keys",
          "type": {
            "type": "array",
            "items": "GPGKey"
          }
        }
      ],
      "response": "GPGMethod",
      "doc": "Called during device provisioning for the user to select a \n    GPG method, either import the key into keybase's local keyring\n    or use GPG to sign a provisioning statement.\n\n    The keys are provided for display purposes, so the UI can \n    do something like \"We found the following GPG keys on this \n    machine.  How would you like to use one of them to provision\n    this device?\"\n\n    After this, gpg_ui.selectKey will be called (if there are\n    multiple keys available)."
    },
    "switchToGPGSignOK": {
      "request": [
        {
          "name": "sessionID",
          "type": "int"
        },
        {
          "name": "key",
          "type": "GPGKey"
        },
        {
          "name": "importError",
          "type": "string"
        }
      ],
      "response": "boolean",
      "doc": "If there was an error importing a gpg key into the local\n    keyring, tell the user and offer to switch to GPG signing\n    with this key.  Return true to switch to GPG signing, \n    false to abort provisioning."
    },
    "chooseDevice": {
      "request": [
        {
          "name": "sessionID",
          "type": "int"
        },
        {
          "name": "devices",
          "type": {
            "type": "array",
            "items": "Device"
          }
        }
      ],
      "response": "DeviceID"
    },
    "chooseDeviceType": {
      "request": [
        {
          "name": "sessionID",
          "type": "int"
        },
        {
          "name": "kind",
          "type": "ChooseType"
        }
      ],
      "response": "DeviceType",
      "doc": "If provisioning via device, this will be called so user can select the provisioner/provisionee device type: desktop or mobile.\n   If selecting the existing device type, set kind to EXISTING_DEVICE_0.\n   If selecting the new device type, set kind to NEW_DEVICE_1."
    },
    "DisplayAndPromptSecret": {
      "request": [
        {
          "name": "sessionID",
          "type": "int"
        },
        {
          "name": "secret",
          "type": "bytes"
        },
        {
          "name": "phrase",
          "type": "string"
        },
        {
          "name": "otherDeviceType",
          "type": "DeviceType"
        }
      ],
      "response": "SecretResponse",
      "doc": "DisplayAndPromptSecret displays a secret that the user can enter into the other device.\n   It also can return a secret that the user enters into this device (from the other device).\n   If it does not return a secret, it will be canceled when this device receives the secret via kex2."
    },
    "DisplaySecretExchanged": {
      "request": [
        {
          "name": "sessionID",
          "type": "int"
        }
      ],
      "response": "null",
      "doc": "DisplaySecretExchanged is called when the kex2 secret has successfully been exchanged by the two\n   devices."
    },
    "PromptNewDeviceName": {
      "request": [
        {
          "name": "sessionID",
          "type": "int"
        },
        {
          "name": "existingDevices",
          "type": {
            "type": "array",
            "items": "string"
          }
        },
        {
          "name": "errorMessage",
          "type": "string"
        }
      ],
      "response": "string",
      "doc": "PromptNewDeviceName is called when the device provisioning process needs a name for the new device.\n   To help the clients not send a duplicate name, existingDevices is populated with the current device\n   names for the user.  If the device name returned to the service is invalid or already\n   taken, it will call this again with an error message in errorMessage."
    },
    "ProvisioneeSuccess": {
      "request": [
        {
          "name": "sessionID",
          "type": "int"
        },
        {
          "name": "username",
          "type": "string"
        },
        {
          "name": "deviceName",
          "type": "string"
        }
      ],
      "response": "null",
      "doc": "ProvisioneeSuccess is called on provisionee when it is successfully provisioned."
    },
    "ProvisionerSuccess": {
      "request": [
        {
          "name": "sessionID",
          "type": "int"
        },
        {
          "name": "deviceName",
          "type": "string"
        },
        {
          "name": "deviceType",
          "type": "string"
        }
      ],
      "response": "null",
      "doc": "ProvisionerSuccess is called on provisioner when it successfully provisions another device."
    }
  },
  "namespace": "keybase.1"
}