// @flow
/* eslint-disable */

// This file is auto-generated by client/protocol/Makefile.
import * as Gregor1 from './flow-types-gregor'

import engine, {EngineChannel} from '../../engine'
import {RPCError} from '../../util/errors'
import {putOnChannelMap, createChannelMap, closeChannelMap} from '../../util/saga'
import {Buffer} from 'buffer'
import type {ChannelConfig, ChannelMap} from './saga'

type Bool = boolean
type Boolean = boolean
type Bytes = Buffer
type Double = number
type Int = number
type Int64 = number
type Long = number
type String = string
type Uint = number
type Uint64 = number
type WaitingHandlerType = (waiting: boolean) => void

const engineRpcOutgoing = (method: string, params: any, callbackOverride: any, incomingCallMapOverride: any) => engine()._rpcOutgoing(method, params, callbackOverride, incomingCallMapOverride)

type RequestCommon = {
  waitingHandler?: WaitingHandlerType,
  incomingCallMap?: IncomingCallMapType,
}

type RequestErrorCallback = {
  callback?: ?(err: ?RPCError) => void
}

type RPCErrorHandler = (err: RPCError) => void

type CommonResponseHandler = {
  error: RPCErrorHandler,
  result: (...rest: Array<void>) => void,
}

function _channelMapRpcHelper(channelConfig: ChannelConfig<*>, partialRpcCall: (incomingCallMap: any, callback: Function) => void): ChannelMap<*> {
  const channelMap = createChannelMap(channelConfig)
  const incomingCallMap = Object.keys(channelMap).reduce((acc, k) => {
    acc[k] = (params, response) => {
      putOnChannelMap(channelMap, k, {params, response})
    }
    return acc
  }, {})
  const callback = (error, params) => {
    channelMap['finished'] && putOnChannelMap(channelMap, 'finished', {error, params})
    closeChannelMap(channelMap)
  }
  partialRpcCall(incomingCallMap, callback)
  return channelMap
}


export const appStateAppState = {
  foreground: 0,
  background: 1,
  inactive: 2,
  backgroundactive: 3,
}

export const backendCommonBlockType = {
  data: 0,
  md: 1,
  git: 2,
}

export const commonClientType = {
  none: 0,
  cli: 1,
  guiMain: 2,
  kbfs: 3,
  guiHelper: 4,
}

export const commonDeviceType = {
  desktop: 0,
  mobile: 1,
}

export const commonFullNamePackageVersion = {
  v0: 0,
  v1: 1,
}

export const commonLogLevel = {
  none: 0,
  debug: 1,
  info: 2,
  notice: 3,
  warn: 4,
  error: 5,
  critical: 6,
  fatal: 7,
}

export const commonMerkleTreeID = {
  master: 0,
  kbfsPublic: 1,
  kbfsPrivate: 2,
  kbfsPrivateteam: 3,
}

export const commonSeqType = {
  public: 1,
  private: 2,
  semiprivate: 3,
}

export const commonTLFVisibility = {
  any: 0,
  public: 1,
  private: 2,
}

export const commonTeamType = {
  none: 0,
  legacy: 1,
  modern: 2,
}

export const commonUserOrTeamResult = {
  user: 1,
  team: 2,
}

export const configForkType = {
  none: 0,
  auto: 1,
  watchdog: 2,
  launchd: 3,
  systemd: 4,
}

export const constantsStatusCode = {
  scok: 0,
  scinputerror: 100,
  scloginrequired: 201,
  scbadsession: 202,
  scbadloginusernotfound: 203,
  scbadloginpassword: 204,
  scnotfound: 205,
  scthrottlecontrol: 210,
  scdeleted: 216,
  scgeneric: 218,
  scalreadyloggedin: 235,
  scexists: 230,
  sccanceled: 237,
  scinputcanceled: 239,
  screloginrequired: 274,
  scresolutionfailed: 275,
  scprofilenotpublic: 276,
  scidentifyfailed: 277,
  sctrackingbroke: 278,
  scwrongcryptoformat: 279,
  scdecryptionerror: 280,
  scinvalidaddress: 281,
  scnosession: 283,
  scaccountreset: 290,
  scidentifiesfailed: 295,
  scbademail: 472,
  scbadsignupusernametaken: 701,
  scbadinvitationcode: 707,
  scmissingresult: 801,
  sckeynotfound: 901,
  sckeycorrupted: 905,
  sckeyinuse: 907,
  sckeybadgen: 913,
  sckeynosecret: 914,
  sckeybaduids: 915,
  sckeynoactive: 916,
  sckeynosig: 917,
  sckeybadsig: 918,
  sckeybadeldest: 919,
  sckeynoeldest: 920,
  sckeyduplicateupdate: 921,
  scsibkeyalreadyexists: 922,
  scdecryptionkeynotfound: 924,
  sckeynopgpencryption: 927,
  sckeynonaclencryption: 928,
  sckeysyncedpgpnotfound: 929,
  sckeynomatchinggpg: 930,
  sckeyrevoked: 931,
  scsigoldseqno: 1010,
  scbadtracksession: 1301,
  scdevicebadname: 1404,
  scdevicenameinuse: 1408,
  scdevicenotfound: 1409,
  scdevicemismatch: 1410,
  scdevicerequired: 1411,
  scdeviceprevprovisioned: 1413,
  scdevicenoprovision: 1414,
  scdeviceprovisionviadevice: 1415,
  screvokecurrentdevice: 1416,
  screvokelastdevice: 1417,
  scdeviceprovisionoffline: 1418,
  scstreamexists: 1501,
  scstreamnotfound: 1502,
  scstreamwrongkind: 1503,
  scstreameof: 1504,
  scgenericapierror: 1600,
  scapinetworkerror: 1601,
  sctimeout: 1602,
  scprooferror: 1701,
  scidentificationexpired: 1702,
  scselfnotfound: 1703,
  scbadkexphrase: 1704,
  scnouidelegation: 1705,
  scnoui: 1706,
  scgpgunavailable: 1707,
  scinvalidversionerror: 1800,
  scoldversionerror: 1801,
  scinvalidlocationerror: 1802,
  scservicestatuserror: 1803,
  scinstallerror: 1804,
  scloadkexterror: 1810,
  scloadkextpermerror: 1811,
  scgitinternal: 2300,
  scgitrepoalreadyexists: 2301,
  scgitinvalidreponame: 2302,
  scgitcannotdelete: 2303,
  scgitrepodoesntexist: 2304,
  scloginstatetimeout: 2400,
  scchatinternal: 2500,
  scchatratelimit: 2501,
  scchatconvexists: 2502,
  scchatunknowntlfid: 2503,
  scchatnotinconv: 2504,
  scchatbadmsg: 2505,
  scchatbroadcast: 2506,
  scchatalreadysuperseded: 2507,
  scchatalreadydeleted: 2508,
  scchattlffinalized: 2509,
  scchatcollision: 2510,
  scidentifysummaryerror: 2511,
  scneedselfrekey: 2512,
  scneedotherrekey: 2513,
  scchatmessagecollision: 2514,
  scchatduplicatemessage: 2515,
  scchatclienterror: 2516,
  scchatnotinteam: 2517,
  scchatstalepreviousstate: 2518,
  scteamselfnotowner: 2607,
  scteamnotfound: 2614,
  scteamexists: 2619,
  scteamreaderror: 2623,
  scnoop: 2638,
  scteamtarduplicate: 2663,
  scteamtarnotfound: 2664,
  scteammemberexists: 2665,
  scteamnotreleased: 2666,
  scteampermanentlyleft: 2667,
  scteamneedrootid: 2668,
  scteamhaslivechildren: 2669,
  scteamdeleteerror: 2670,
  scteambadrootteam: 2671,
  scteamnameconflictswithuser: 2672,
  scteamdeletenouppointer: 2673,
  scteamneedowner: 2674,
  scteamnoownerallowed: 2675,
  scteamimplicitnononsbs: 2676,
  scteamimplicitbadhash: 2677,
  scteamimplicitbadname: 2678,
  scteamimplicitclash: 2679,
  scteamimplicitduplicate: 2680,
  scteamimplicitbadop: 2681,
  scteamimplicitbadrole: 2682,
  scteamimplicitnotfound: 2683,
  scteambadadminseqnotype: 2684,
  scteamimplicitbadadd: 2685,
  scteamimplicitbadremove: 2686,
  scteamkeymasknotfound: 2697,
  scteambanned: 2702,
  scteaminvalidban: 2703,
}

export const ctlDbType = {
  main: 0,
  chat: 1,
}

export const ctlExitCode = {
  ok: 0,
  notok: 2,
  restart: 4,
}

export const favoriteFolderType = {
  unknown: 0,
  private: 1,
  public: 2,
  team: 3,
}

export const gitGitLocalMetadataVersion = {
  v1: 1,
}

export const gitGitRepoResultState = {
  err: 0,
  ok: 1,
}

export const gregorUIPushReason = {
  none: 0,
  reconnected: 1,
  newData: 2,
}

export const homeHomeScreenItemType = {
  todo: 1,
  people: 2,
}

export const homeHomeScreenPeopleNotificationType = {
  followed: 0,
  followedMulti: 1,
}

export const homeHomeScreenTodoType = {
  none: 0,
  bio: 1,
  proof: 2,
  device: 3,
  follow: 4,
  chat: 5,
  paperkey: 6,
  team: 7,
  folder: 8,
  gitRepo: 9,
  teamShowcase: 10,
}

export const identifyCommonIdentifyReasonType = {
  none: 0,
  id: 1,
  track: 2,
  encrypt: 3,
  decrypt: 4,
  verify: 5,
  resource: 6,
  background: 7,
}

export const identifyCommonTrackDiffType = {
  none: 0,
  error: 1,
  clash: 2,
  revoked: 3,
  upgraded: 4,
  new: 5,
  remoteFail: 6,
  remoteWorking: 7,
  remoteChanged: 8,
  newEldest: 9,
  noneViaTemporary: 10,
}

export const identifyCommonTrackStatus = {
  newOk: 1,
  newZeroProofs: 2,
  newFailProofs: 3,
  updateBrokenFailedProofs: 4,
  updateNewProofs: 5,
  updateOk: 6,
  updateBrokenRevoked: 7,
}

export const identifyUiCheckResultFreshness = {
  fresh: 0,
  aged: 1,
  rancid: 2,
}

export const identifyUiDismissReasonType = {
  none: 0,
  handledElsewhere: 1,
}

export const installInstallAction = {
  unknown: 0,
  none: 1,
  upgrade: 2,
  reinstall: 3,
  install: 4,
}

export const installInstallStatus = {
  unknown: 0,
  error: 1,
  notInstalled: 2,
  installed: 4,
}

export const kbfsCommonFSErrorType = {
  accessDenied: 0,
  userNotFound: 1,
  revokedDataDetected: 2,
  notLoggedIn: 3,
  timeout: 4,
  rekeyNeeded: 5,
  badFolder: 6,
  notImplemented: 7,
  oldVersion: 8,
  overQuota: 9,
  noSigChain: 10,
  tooManyFolders: 11,
  exdevNotSupported: 12,
  diskLimitReached: 13,
  diskCacheErrorLogSend: 14,
}

export const kbfsCommonFSNotificationType = {
  encrypting: 0,
  decrypting: 1,
  signing: 2,
  verifying: 3,
  rekeying: 4,
  connection: 5,
  mdReadSuccess: 6,
  fileCreated: 7,
  fileModified: 8,
  fileDeleted: 9,
  fileRenamed: 10,
  initialized: 11,
}

export const kbfsCommonFSStatusCode = {
  start: 0,
  finish: 1,
  error: 2,
}

export const metadataMDGetBehavior = {
  getOrCreateClassicTlf: 0,
  getClassicTlfNoCreate: 1,
}

export const passphraseCommonPassphraseType = {
  none: 0,
  paperKey: 1,
  passPhrase: 2,
  verifyPassPhrase: 3,
}

export const pgpSignMode = {
  attached: 0,
  detached: 1,
  clear: 2,
}

export const processFileType = {
  unknown: 0,
  directory: 1,
  file: 2,
}

export const proveCommonProofState = {
  none: 0,
  ok: 1,
  tempFailure: 2,
  permFailure: 3,
  looking: 4,
  superseded: 5,
  posted: 6,
  revoked: 7,
  deleted: 8,
  unknownType: 9,
  sigHintMissing: 10,
  unchecked: 11,
}

export const proveCommonProofStatus = {
  none: 0,
  ok: 1,
  local: 2,
  found: 3,
  baseError: 100,
  hostUnreachable: 101,
  permissionDenied: 103,
  failedParse: 106,
  dnsError: 107,
  authFailed: 108,
  http429: 129,
  http500: 150,
  timeout: 160,
  internalError: 170,
  unchecked: 171,
  missingPvl: 172,
  baseHardError: 200,
  notFound: 201,
  contentFailure: 202,
  badUsername: 203,
  badRemoteId: 204,
  textNotFound: 205,
  badArgs: 206,
  contentMissing: 207,
  titleNotFound: 208,
  serviceError: 209,
  torSkipped: 210,
  torIncompatible: 211,
  http300: 230,
  http400: 240,
  httpOther: 260,
  emptyJson: 270,
  deleted: 301,
  serviceDead: 302,
  badSignature: 303,
  badApiUrl: 304,
  unknownType: 305,
  noHint: 306,
  badHintText: 307,
  invalidPvl: 308,
}

export const proveCommonProofType = {
  none: 0,
  keybase: 1,
  twitter: 2,
  github: 3,
  reddit: 4,
  coinbase: 5,
  hackernews: 6,
  facebook: 8,
  genericWebSite: 1000,
  dns: 1001,
  pgp: 1002,
  rooter: 100001,
}

export const proveUiPromptOverwriteType = {
  social: 0,
  site: 1,
}

export const provisionUiChooseType = {
  existingDevice: 0,
  newDevice: 1,
}

export const provisionUiGPGMethod = {
  gpgNone: 0,
  gpgImport: 1,
  gpgSign: 2,
}

export const provisionUiProvisionMethod = {
  device: 0,
  paperKey: 1,
  passphrase: 2,
  gpgImport: 3,
  gpgSign: 4,
}

export const reachabilityReachable = {
  unknown: 0,
  yes: 1,
  no: 2,
}

export const rekeyOutcome = {
  none: 0,
  fixed: 1,
  ignored: 2,
}

export const rekeyUIRekeyEventType = {
  none: 0,
  notLoggedIn: 1,
  apiError: 2,
  noProblems: 3,
  loadMeError: 4,
  currentDeviceCanRekey: 5,
  deviceLoadError: 6,
  harass: 7,
  noGregorMessages: 8,
}

export const saltpackUiSaltpackSenderType = {
  notTracked: 0,
  unknown: 1,
  anonymous: 2,
  trackingBroke: 3,
  trackingOk: 4,
  self: 5,
  revoked: 6,
  expired: 7,
}

export const simpleFSAsyncOps = {
  list: 0,
  listRecursive: 1,
  read: 2,
  write: 3,
  copy: 4,
  move: 5,
  remove: 6,
}

export const simpleFSDirentType = {
  file: 0,
  dir: 1,
  sym: 2,
  exec: 3,
}

export const simpleFSOpenFlags = {
  read: 0,
  replace: 1,
  existing: 2,
  write: 4,
  append: 8,
  directory: 16,
}

export const simpleFSPathType = {
  local: 0,
  kbfs: 1,
}

export const teamsSeitanIKeyAndLabelVersion = {
  v1: 1,
}

export const teamsSeitanIKeyLabelType = {
  sms: 1,
}

export const teamsTeamApplication = {
  kbfs: 1,
  chat: 2,
  saltpack: 3,
  gitMetadata: 4,
  seitanInviteToken: 5,
}

export const teamsTeamInviteCategory = {
  none: 0,
  unknown: 1,
  keybase: 2,
  email: 3,
  sbs: 4,
  seitan: 5,
}

export const teamsTeamRole = {
  none: 0,
  reader: 1,
  writer: 2,
  admin: 3,
  owner: 4,
}

export const tlfKeysTLFIdentifyBehavior = {
  defaultKbfs: 0,
  chatCli: 1,
  chatGui: 2,
  chatGuiStrict: 3,
  kbfsRekey: 4,
  kbfsQr: 5,
  chatSkip: 6,
}

export const uPKKeyType = {
  none: 0,
  nacl: 1,
  pgp: 2,
}

export const uPKUPAKVersion = {
  v1: 1,
  v2: 2,
}

export const uPKUPK2MinorVersion = {
  v0: 0,
  v1: 1,
  v2: 2,
  v3: 3,
  v4: 4,
  v5: 5,
}

export const uiPromptDefault = {
  none: 0,
  yes: 1,
  no: 2,
}

export function BTCRegisterBTCRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: BTCRegisterBTCRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.BTC.registerBTC', request)
}

export function BTCRegisterBTCRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: BTCRegisterBTCRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.BTC.registerBTC', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function KBFSGitCreateRepoRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: KBFSGitCreateRepoResult) => void} & {param: KBFSGitCreateRepoRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.KBFSGit.createRepo', request)
}

export function KBFSGitCreateRepoRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: KBFSGitCreateRepoResult) => void} & {param: KBFSGitCreateRepoRpcParam})): Promise<KBFSGitCreateRepoResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.KBFSGit.createRepo', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function KBFSGitDeleteRepoRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: KBFSGitDeleteRepoRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.KBFSGit.deleteRepo', request)
}

export function KBFSGitDeleteRepoRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: KBFSGitDeleteRepoRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.KBFSGit.deleteRepo', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function Kex2Provisionee2DidCounterSign2RpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: Kex2Provisionee2DidCounterSign2RpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.Kex2Provisionee2.didCounterSign2', request)
}

export function Kex2Provisionee2DidCounterSign2RpcPromise (request: (RequestCommon & RequestErrorCallback & {param: Kex2Provisionee2DidCounterSign2RpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.Kex2Provisionee2.didCounterSign2', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function Kex2Provisionee2Hello2RpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: Kex2Provisionee2Hello2Result) => void} & {param: Kex2Provisionee2Hello2RpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.Kex2Provisionee2.hello2', request)
}

export function Kex2Provisionee2Hello2RpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: Kex2Provisionee2Hello2Result) => void} & {param: Kex2Provisionee2Hello2RpcParam})): Promise<Kex2Provisionee2Hello2Result> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.Kex2Provisionee2.hello2', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function Kex2ProvisioneeDidCounterSignRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: Kex2ProvisioneeDidCounterSignRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.Kex2Provisionee.didCounterSign', request)
}

export function Kex2ProvisioneeDidCounterSignRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: Kex2ProvisioneeDidCounterSignRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.Kex2Provisionee.didCounterSign', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function Kex2ProvisioneeHelloRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: Kex2ProvisioneeHelloResult) => void} & {param: Kex2ProvisioneeHelloRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.Kex2Provisionee.hello', request)
}

export function Kex2ProvisioneeHelloRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: Kex2ProvisioneeHelloResult) => void} & {param: Kex2ProvisioneeHelloRpcParam})): Promise<Kex2ProvisioneeHelloResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.Kex2Provisionee.hello', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function Kex2ProvisionerKexStartRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.Kex2Provisioner.kexStart', request)
}

export function Kex2ProvisionerKexStartRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.Kex2Provisioner.kexStart', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function NotifyFSRequestFSEditListRequestRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: NotifyFSRequestFSEditListRequestRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.NotifyFSRequest.FSEditListRequest', request)
}

export function NotifyFSRequestFSEditListRequestRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: NotifyFSRequestFSEditListRequestRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.NotifyFSRequest.FSEditListRequest', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function NotifyFSRequestFSSyncStatusRequestRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: NotifyFSRequestFSSyncStatusRequestRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.NotifyFSRequest.FSSyncStatusRequest', request)
}

export function NotifyFSRequestFSSyncStatusRequestRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: NotifyFSRequestFSSyncStatusRequestRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.NotifyFSRequest.FSSyncStatusRequest', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function ScanProofsScanProofsRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: ScanProofsScanProofsRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.ScanProofs.scanProofs', request)
}

export function ScanProofsScanProofsRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: ScanProofsScanProofsRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.ScanProofs.scanProofs', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function SecretKeysGetSecretKeysRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: SecretKeysGetSecretKeysResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.SecretKeys.getSecretKeys', request)
}

export function SecretKeysGetSecretKeysRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: SecretKeysGetSecretKeysResult) => void})): Promise<SecretKeysGetSecretKeysResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.SecretKeys.getSecretKeys', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function SimpleFSSimpleFSCancelRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSCancelRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.SimpleFS.simpleFSCancel', request)
}

export function SimpleFSSimpleFSCancelRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSCancelRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.SimpleFS.simpleFSCancel', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function SimpleFSSimpleFSCheckRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: SimpleFSSimpleFSCheckResult) => void} & {param: SimpleFSSimpleFSCheckRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.SimpleFS.simpleFSCheck', request)
}

export function SimpleFSSimpleFSCheckRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: SimpleFSSimpleFSCheckResult) => void} & {param: SimpleFSSimpleFSCheckRpcParam})): Promise<SimpleFSSimpleFSCheckResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.SimpleFS.simpleFSCheck', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function SimpleFSSimpleFSCloseRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSCloseRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.SimpleFS.simpleFSClose', request)
}

export function SimpleFSSimpleFSCloseRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSCloseRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.SimpleFS.simpleFSClose', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function SimpleFSSimpleFSCopyRecursiveRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSCopyRecursiveRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.SimpleFS.simpleFSCopyRecursive', request)
}

export function SimpleFSSimpleFSCopyRecursiveRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSCopyRecursiveRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.SimpleFS.simpleFSCopyRecursive', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function SimpleFSSimpleFSCopyRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSCopyRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.SimpleFS.simpleFSCopy', request)
}

export function SimpleFSSimpleFSCopyRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSCopyRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.SimpleFS.simpleFSCopy', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function SimpleFSSimpleFSGetOpsRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: SimpleFSSimpleFSGetOpsResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.SimpleFS.simpleFSGetOps', request)
}

export function SimpleFSSimpleFSGetOpsRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: SimpleFSSimpleFSGetOpsResult) => void})): Promise<SimpleFSSimpleFSGetOpsResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.SimpleFS.simpleFSGetOps', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function SimpleFSSimpleFSListRecursiveRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSListRecursiveRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.SimpleFS.simpleFSListRecursive', request)
}

export function SimpleFSSimpleFSListRecursiveRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSListRecursiveRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.SimpleFS.simpleFSListRecursive', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function SimpleFSSimpleFSListRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSListRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.SimpleFS.simpleFSList', request)
}

export function SimpleFSSimpleFSListRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSListRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.SimpleFS.simpleFSList', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function SimpleFSSimpleFSMakeOpidRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: SimpleFSSimpleFSMakeOpidResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.SimpleFS.simpleFSMakeOpid', request)
}

export function SimpleFSSimpleFSMakeOpidRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: SimpleFSSimpleFSMakeOpidResult) => void})): Promise<SimpleFSSimpleFSMakeOpidResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.SimpleFS.simpleFSMakeOpid', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function SimpleFSSimpleFSMoveRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSMoveRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.SimpleFS.simpleFSMove', request)
}

export function SimpleFSSimpleFSMoveRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSMoveRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.SimpleFS.simpleFSMove', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function SimpleFSSimpleFSOpenRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSOpenRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.SimpleFS.simpleFSOpen', request)
}

export function SimpleFSSimpleFSOpenRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSOpenRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.SimpleFS.simpleFSOpen', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function SimpleFSSimpleFSReadListRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: SimpleFSSimpleFSReadListResult) => void} & {param: SimpleFSSimpleFSReadListRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.SimpleFS.simpleFSReadList', request)
}

export function SimpleFSSimpleFSReadListRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: SimpleFSSimpleFSReadListResult) => void} & {param: SimpleFSSimpleFSReadListRpcParam})): Promise<SimpleFSSimpleFSReadListResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.SimpleFS.simpleFSReadList', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function SimpleFSSimpleFSReadRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: SimpleFSSimpleFSReadResult) => void} & {param: SimpleFSSimpleFSReadRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.SimpleFS.simpleFSRead', request)
}

export function SimpleFSSimpleFSReadRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: SimpleFSSimpleFSReadResult) => void} & {param: SimpleFSSimpleFSReadRpcParam})): Promise<SimpleFSSimpleFSReadResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.SimpleFS.simpleFSRead', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function SimpleFSSimpleFSRemoveRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSRemoveRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.SimpleFS.simpleFSRemove', request)
}

export function SimpleFSSimpleFSRemoveRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSRemoveRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.SimpleFS.simpleFSRemove', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function SimpleFSSimpleFSRenameRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSRenameRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.SimpleFS.simpleFSRename', request)
}

export function SimpleFSSimpleFSRenameRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSRenameRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.SimpleFS.simpleFSRename', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function SimpleFSSimpleFSSetStatRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSSetStatRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.SimpleFS.simpleFSSetStat', request)
}

export function SimpleFSSimpleFSSetStatRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSSetStatRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.SimpleFS.simpleFSSetStat', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function SimpleFSSimpleFSStatRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: SimpleFSSimpleFSStatResult) => void} & {param: SimpleFSSimpleFSStatRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.SimpleFS.simpleFSStat', request)
}

export function SimpleFSSimpleFSStatRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: SimpleFSSimpleFSStatResult) => void} & {param: SimpleFSSimpleFSStatRpcParam})): Promise<SimpleFSSimpleFSStatResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.SimpleFS.simpleFSStat', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function SimpleFSSimpleFSWaitRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSWaitRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.SimpleFS.simpleFSWait', request)
}

export function SimpleFSSimpleFSWaitRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSWaitRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.SimpleFS.simpleFSWait', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function SimpleFSSimpleFSWriteRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSWriteRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.SimpleFS.simpleFSWrite', request)
}

export function SimpleFSSimpleFSWriteRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: SimpleFSSimpleFSWriteRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.SimpleFS.simpleFSWrite', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function accountEmailChangeRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: AccountEmailChangeRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.account.emailChange', request)
}

export function accountEmailChangeRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: AccountEmailChangeRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.account.emailChange', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function accountHasServerKeysRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: AccountHasServerKeysResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.account.hasServerKeys', request)
}

export function accountHasServerKeysRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: AccountHasServerKeysResult) => void})): Promise<AccountHasServerKeysResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.account.hasServerKeys', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function accountPassphraseChangeRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: AccountPassphraseChangeRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.account.passphraseChange', request)
}

export function accountPassphraseChangeRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: AccountPassphraseChangeRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.account.passphraseChange', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function accountPassphrasePromptRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: AccountPassphrasePromptResult) => void} & {param: AccountPassphrasePromptRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.account.passphrasePrompt', request)
}

export function accountPassphrasePromptRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: AccountPassphrasePromptResult) => void} & {param: AccountPassphrasePromptRpcParam})): Promise<AccountPassphrasePromptResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.account.passphrasePrompt', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function accountResetAccountRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.account.resetAccount', request)
}

export function accountResetAccountRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.account.resetAccount', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function apiserverDeleteRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: ApiserverDeleteResult) => void} & {param: ApiserverDeleteRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.apiserver.Delete', request)
}

export function apiserverDeleteRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: ApiserverDeleteResult) => void} & {param: ApiserverDeleteRpcParam})): Promise<ApiserverDeleteResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.apiserver.Delete', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function apiserverGetRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: ApiserverGetResult) => void} & {param: ApiserverGetRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.apiserver.Get', request)
}

export function apiserverGetRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: ApiserverGetResult) => void} & {param: ApiserverGetRpcParam})): Promise<ApiserverGetResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.apiserver.Get', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function apiserverGetWithSessionRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: ApiserverGetWithSessionResult) => void} & {param: ApiserverGetWithSessionRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.apiserver.GetWithSession', request)
}

export function apiserverGetWithSessionRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: ApiserverGetWithSessionResult) => void} & {param: ApiserverGetWithSessionRpcParam})): Promise<ApiserverGetWithSessionResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.apiserver.GetWithSession', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function apiserverPostJSONRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: ApiserverPostJSONResult) => void} & {param: ApiserverPostJSONRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.apiserver.PostJSON', request)
}

export function apiserverPostJSONRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: ApiserverPostJSONResult) => void} & {param: ApiserverPostJSONRpcParam})): Promise<ApiserverPostJSONResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.apiserver.PostJSON', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function apiserverPostRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: ApiserverPostResult) => void} & {param: ApiserverPostRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.apiserver.Post', request)
}

export function apiserverPostRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: ApiserverPostResult) => void} & {param: ApiserverPostRpcParam})): Promise<ApiserverPostResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.apiserver.Post', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function appStateUpdateAppStateRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: AppStateUpdateAppStateRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.appState.updateAppState', request)
}

export function appStateUpdateAppStateRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: AppStateUpdateAppStateRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.appState.updateAppState', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function badgerGetBadgeStateRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: BadgerGetBadgeStateResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.badger.getBadgeState', request)
}

export function badgerGetBadgeStateRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: BadgerGetBadgeStateResult) => void})): Promise<BadgerGetBadgeStateResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.badger.getBadgeState', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function blockAddReferenceRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: BlockAddReferenceRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.block.addReference', request)
}

export function blockAddReferenceRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: BlockAddReferenceRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.block.addReference', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function blockArchiveReferenceRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: BlockArchiveReferenceResult) => void} & {param: BlockArchiveReferenceRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.block.archiveReference', request)
}

export function blockArchiveReferenceRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: BlockArchiveReferenceResult) => void} & {param: BlockArchiveReferenceRpcParam})): Promise<BlockArchiveReferenceResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.block.archiveReference', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function blockArchiveReferenceWithCountRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: BlockArchiveReferenceWithCountResult) => void} & {param: BlockArchiveReferenceWithCountRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.block.archiveReferenceWithCount', request)
}

export function blockArchiveReferenceWithCountRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: BlockArchiveReferenceWithCountResult) => void} & {param: BlockArchiveReferenceWithCountRpcParam})): Promise<BlockArchiveReferenceWithCountResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.block.archiveReferenceWithCount', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function blockAuthenticateSessionRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: BlockAuthenticateSessionRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.block.authenticateSession', request)
}

export function blockAuthenticateSessionRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: BlockAuthenticateSessionRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.block.authenticateSession', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function blockBlockPingRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: BlockBlockPingResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.block.blockPing', request)
}

export function blockBlockPingRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: BlockBlockPingResult) => void})): Promise<BlockBlockPingResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.block.blockPing', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function blockDelReferenceRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: BlockDelReferenceRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.block.delReference', request)
}

export function blockDelReferenceRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: BlockDelReferenceRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.block.delReference', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function blockDelReferenceWithCountRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: BlockDelReferenceWithCountResult) => void} & {param: BlockDelReferenceWithCountRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.block.delReferenceWithCount', request)
}

export function blockDelReferenceWithCountRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: BlockDelReferenceWithCountResult) => void} & {param: BlockDelReferenceWithCountRpcParam})): Promise<BlockDelReferenceWithCountResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.block.delReferenceWithCount', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function blockGetBlockRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: BlockGetBlockResult) => void} & {param: BlockGetBlockRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.block.getBlock', request)
}

export function blockGetBlockRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: BlockGetBlockResult) => void} & {param: BlockGetBlockRpcParam})): Promise<BlockGetBlockResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.block.getBlock', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function blockGetSessionChallengeRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: BlockGetSessionChallengeResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.block.getSessionChallenge', request)
}

export function blockGetSessionChallengeRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: BlockGetSessionChallengeResult) => void})): Promise<BlockGetSessionChallengeResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.block.getSessionChallenge', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function blockGetTeamQuotaInfoRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: BlockGetTeamQuotaInfoResult) => void} & {param: BlockGetTeamQuotaInfoRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.block.getTeamQuotaInfo', request)
}

export function blockGetTeamQuotaInfoRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: BlockGetTeamQuotaInfoResult) => void} & {param: BlockGetTeamQuotaInfoRpcParam})): Promise<BlockGetTeamQuotaInfoResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.block.getTeamQuotaInfo', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function blockGetUserQuotaInfoRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: BlockGetUserQuotaInfoResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.block.getUserQuotaInfo', request)
}

export function blockGetUserQuotaInfoRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: BlockGetUserQuotaInfoResult) => void})): Promise<BlockGetUserQuotaInfoResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.block.getUserQuotaInfo', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function blockPutBlockAgainRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: BlockPutBlockAgainRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.block.putBlockAgain', request)
}

export function blockPutBlockAgainRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: BlockPutBlockAgainRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.block.putBlockAgain', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function blockPutBlockRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: BlockPutBlockRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.block.putBlock', request)
}

export function blockPutBlockRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: BlockPutBlockRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.block.putBlock', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function configCheckAPIServerOutOfDateWarningRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: ConfigCheckAPIServerOutOfDateWarningResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.config.checkAPIServerOutOfDateWarning', request)
}

export function configCheckAPIServerOutOfDateWarningRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: ConfigCheckAPIServerOutOfDateWarningResult) => void})): Promise<ConfigCheckAPIServerOutOfDateWarningResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.config.checkAPIServerOutOfDateWarning', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function configClearValueRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: ConfigClearValueRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.config.clearValue', request)
}

export function configClearValueRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: ConfigClearValueRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.config.clearValue', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function configGetBootstrapStatusRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: ConfigGetBootstrapStatusResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.config.getBootstrapStatus', request)
}

export function configGetBootstrapStatusRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: ConfigGetBootstrapStatusResult) => void})): Promise<ConfigGetBootstrapStatusResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.config.getBootstrapStatus', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function configGetConfigRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: ConfigGetConfigResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.config.getConfig', request)
}

export function configGetConfigRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: ConfigGetConfigResult) => void})): Promise<ConfigGetConfigResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.config.getConfig', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function configGetCurrentStatusRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: ConfigGetCurrentStatusResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.config.getCurrentStatus', request)
}

export function configGetCurrentStatusRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: ConfigGetCurrentStatusResult) => void})): Promise<ConfigGetCurrentStatusResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.config.getCurrentStatus', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function configGetExtendedStatusRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: ConfigGetExtendedStatusResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.config.getExtendedStatus', request)
}

export function configGetExtendedStatusRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: ConfigGetExtendedStatusResult) => void})): Promise<ConfigGetExtendedStatusResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.config.getExtendedStatus', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function configGetValueRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: ConfigGetValueResult) => void} & {param: ConfigGetValueRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.config.getValue', request)
}

export function configGetValueRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: ConfigGetValueResult) => void} & {param: ConfigGetValueRpcParam})): Promise<ConfigGetValueResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.config.getValue', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function configHelloIAmRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: ConfigHelloIAmRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.config.helloIAm', request)
}

export function configHelloIAmRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: ConfigHelloIAmRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.config.helloIAm', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function configSetPathRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: ConfigSetPathRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.config.setPath', request)
}

export function configSetPathRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: ConfigSetPathRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.config.setPath', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function configSetUserConfigRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: ConfigSetUserConfigRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.config.setUserConfig', request)
}

export function configSetUserConfigRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: ConfigSetUserConfigRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.config.setUserConfig', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function configSetValueRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: ConfigSetValueRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.config.setValue', request)
}

export function configSetValueRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: ConfigSetValueRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.config.setValue', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function configWaitForClientRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: ConfigWaitForClientResult) => void} & {param: ConfigWaitForClientRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.config.waitForClient', request)
}

export function configWaitForClientRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: ConfigWaitForClientResult) => void} & {param: ConfigWaitForClientRpcParam})): Promise<ConfigWaitForClientResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.config.waitForClient', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function cryptoSignED25519ForKBFSRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: CryptoSignED25519ForKBFSResult) => void} & {param: CryptoSignED25519ForKBFSRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.crypto.signED25519ForKBFS', request)
}

export function cryptoSignED25519ForKBFSRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: CryptoSignED25519ForKBFSResult) => void} & {param: CryptoSignED25519ForKBFSRpcParam})): Promise<CryptoSignED25519ForKBFSResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.crypto.signED25519ForKBFS', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function cryptoSignED25519RpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: CryptoSignED25519Result) => void} & {param: CryptoSignED25519RpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.crypto.signED25519', request)
}

export function cryptoSignED25519RpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: CryptoSignED25519Result) => void} & {param: CryptoSignED25519RpcParam})): Promise<CryptoSignED25519Result> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.crypto.signED25519', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function cryptoSignToStringRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: CryptoSignToStringResult) => void} & {param: CryptoSignToStringRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.crypto.signToString', request)
}

export function cryptoSignToStringRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: CryptoSignToStringResult) => void} & {param: CryptoSignToStringRpcParam})): Promise<CryptoSignToStringResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.crypto.signToString', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function cryptoUnboxBytes32AnyRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: CryptoUnboxBytes32AnyResult) => void} & {param: CryptoUnboxBytes32AnyRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.crypto.unboxBytes32Any', request)
}

export function cryptoUnboxBytes32AnyRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: CryptoUnboxBytes32AnyResult) => void} & {param: CryptoUnboxBytes32AnyRpcParam})): Promise<CryptoUnboxBytes32AnyResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.crypto.unboxBytes32Any', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function cryptoUnboxBytes32RpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: CryptoUnboxBytes32Result) => void} & {param: CryptoUnboxBytes32RpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.crypto.unboxBytes32', request)
}

export function cryptoUnboxBytes32RpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: CryptoUnboxBytes32Result) => void} & {param: CryptoUnboxBytes32RpcParam})): Promise<CryptoUnboxBytes32Result> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.crypto.unboxBytes32', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function cryptocurrencyRegisterAddressRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: CryptocurrencyRegisterAddressResult) => void} & {param: CryptocurrencyRegisterAddressRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.cryptocurrency.registerAddress', request)
}

export function cryptocurrencyRegisterAddressRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: CryptocurrencyRegisterAddressResult) => void} & {param: CryptocurrencyRegisterAddressRpcParam})): Promise<CryptocurrencyRegisterAddressResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.cryptocurrency.registerAddress', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function ctlAppExitRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.ctl.appExit', request)
}

export function ctlAppExitRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.ctl.appExit', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function ctlDbDeleteRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: CtlDbDeleteRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.ctl.dbDelete', request)
}

export function ctlDbDeleteRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: CtlDbDeleteRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.ctl.dbDelete', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function ctlDbGetRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: CtlDbGetResult) => void} & {param: CtlDbGetRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.ctl.dbGet', request)
}

export function ctlDbGetRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: CtlDbGetResult) => void} & {param: CtlDbGetRpcParam})): Promise<CtlDbGetResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.ctl.dbGet', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function ctlDbNukeRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.ctl.dbNuke', request)
}

export function ctlDbNukeRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.ctl.dbNuke', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function ctlDbPutRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: CtlDbPutRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.ctl.dbPut', request)
}

export function ctlDbPutRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: CtlDbPutRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.ctl.dbPut', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function ctlLogRotateRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.ctl.logRotate', request)
}

export function ctlLogRotateRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.ctl.logRotate', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function ctlReloadRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.ctl.reload', request)
}

export function ctlReloadRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.ctl.reload', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function ctlStopRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: CtlStopRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.ctl.stop', request)
}

export function ctlStopRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: CtlStopRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.ctl.stop', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function debuggingFirstStepRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: DebuggingFirstStepResult) => void} & {param: DebuggingFirstStepRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.debugging.firstStep', request)
}

export function debuggingFirstStepRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: DebuggingFirstStepResult) => void} & {param: DebuggingFirstStepRpcParam})): Promise<DebuggingFirstStepResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.debugging.firstStep', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function debuggingIncrementRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: DebuggingIncrementResult) => void} & {param: DebuggingIncrementRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.debugging.increment', request)
}

export function debuggingIncrementRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: DebuggingIncrementResult) => void} & {param: DebuggingIncrementRpcParam})): Promise<DebuggingIncrementResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.debugging.increment', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function debuggingSecondStepRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: DebuggingSecondStepResult) => void} & {param: DebuggingSecondStepRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.debugging.secondStep', request)
}

export function debuggingSecondStepRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: DebuggingSecondStepResult) => void} & {param: DebuggingSecondStepRpcParam})): Promise<DebuggingSecondStepResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.debugging.secondStep', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function delegateUiCtlRegisterGregorFirehoseRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.delegateUiCtl.registerGregorFirehose', request)
}

export function delegateUiCtlRegisterGregorFirehoseRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.delegateUiCtl.registerGregorFirehose', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function delegateUiCtlRegisterIdentifyUIRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.delegateUiCtl.registerIdentifyUI', request)
}

export function delegateUiCtlRegisterIdentifyUIRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.delegateUiCtl.registerIdentifyUI', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function delegateUiCtlRegisterRekeyUIRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.delegateUiCtl.registerRekeyUI', request)
}

export function delegateUiCtlRegisterRekeyUIRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.delegateUiCtl.registerRekeyUI', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function delegateUiCtlRegisterSecretUIRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.delegateUiCtl.registerSecretUI', request)
}

export function delegateUiCtlRegisterSecretUIRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.delegateUiCtl.registerSecretUI', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function delegateUiCtlRegisterUpdateUIRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.delegateUiCtl.registerUpdateUI', request)
}

export function delegateUiCtlRegisterUpdateUIRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.delegateUiCtl.registerUpdateUI', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function deviceCheckDeviceNameForUserRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: DeviceCheckDeviceNameForUserRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.device.checkDeviceNameForUser', request)
}

export function deviceCheckDeviceNameForUserRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: DeviceCheckDeviceNameForUserRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.device.checkDeviceNameForUser', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function deviceCheckDeviceNameFormatRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: DeviceCheckDeviceNameFormatResult) => void} & {param: DeviceCheckDeviceNameFormatRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.device.checkDeviceNameFormat', request)
}

export function deviceCheckDeviceNameFormatRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: DeviceCheckDeviceNameFormatResult) => void} & {param: DeviceCheckDeviceNameFormatRpcParam})): Promise<DeviceCheckDeviceNameFormatResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.device.checkDeviceNameFormat', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function deviceDeviceAddRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.device.deviceAdd', request)
}

export function deviceDeviceAddRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.device.deviceAdd', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function deviceDeviceHistoryListRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: DeviceDeviceHistoryListResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.device.deviceHistoryList', request)
}

export function deviceDeviceHistoryListRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: DeviceDeviceHistoryListResult) => void})): Promise<DeviceDeviceHistoryListResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.device.deviceHistoryList', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function deviceDeviceListRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: DeviceDeviceListResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.device.deviceList', request)
}

export function deviceDeviceListRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: DeviceDeviceListResult) => void})): Promise<DeviceDeviceListResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.device.deviceList', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function favoriteFavoriteAddRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: FavoriteFavoriteAddRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.favorite.favoriteAdd', request)
}

export function favoriteFavoriteAddRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: FavoriteFavoriteAddRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.favorite.favoriteAdd', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function favoriteFavoriteIgnoreRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: FavoriteFavoriteIgnoreRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.favorite.favoriteIgnore', request)
}

export function favoriteFavoriteIgnoreRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: FavoriteFavoriteIgnoreRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.favorite.favoriteIgnore', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function favoriteGetFavoritesRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: FavoriteGetFavoritesResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.favorite.getFavorites', request)
}

export function favoriteGetFavoritesRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: FavoriteGetFavoritesResult) => void})): Promise<FavoriteGetFavoritesResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.favorite.getFavorites', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function fsListRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: FsListResult) => void} & {param: FsListRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.fs.List', request)
}

export function fsListRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: FsListResult) => void} & {param: FsListRpcParam})): Promise<FsListResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.fs.List', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function gitCreatePersonalRepoRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: GitCreatePersonalRepoResult) => void} & {param: GitCreatePersonalRepoRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.git.createPersonalRepo', request)
}

export function gitCreatePersonalRepoRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: GitCreatePersonalRepoResult) => void} & {param: GitCreatePersonalRepoRpcParam})): Promise<GitCreatePersonalRepoResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.git.createPersonalRepo', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function gitCreateTeamRepoRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: GitCreateTeamRepoResult) => void} & {param: GitCreateTeamRepoRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.git.createTeamRepo', request)
}

export function gitCreateTeamRepoRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: GitCreateTeamRepoResult) => void} & {param: GitCreateTeamRepoRpcParam})): Promise<GitCreateTeamRepoResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.git.createTeamRepo', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function gitDeleteGitMetadataRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: GitDeleteGitMetadataRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.git.deleteGitMetadata', request)
}

export function gitDeleteGitMetadataRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: GitDeleteGitMetadataRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.git.deleteGitMetadata', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function gitDeletePersonalRepoRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: GitDeletePersonalRepoRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.git.deletePersonalRepo', request)
}

export function gitDeletePersonalRepoRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: GitDeletePersonalRepoRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.git.deletePersonalRepo', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function gitDeleteTeamRepoRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: GitDeleteTeamRepoRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.git.deleteTeamRepo', request)
}

export function gitDeleteTeamRepoRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: GitDeleteTeamRepoRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.git.deleteTeamRepo', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function gitGetAllGitMetadataRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: GitGetAllGitMetadataResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.git.getAllGitMetadata', request)
}

export function gitGetAllGitMetadataRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: GitGetAllGitMetadataResult) => void})): Promise<GitGetAllGitMetadataResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.git.getAllGitMetadata', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function gitGetGitMetadataRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: GitGetGitMetadataResult) => void} & {param: GitGetGitMetadataRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.git.getGitMetadata', request)
}

export function gitGetGitMetadataRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: GitGetGitMetadataResult) => void} & {param: GitGetGitMetadataRpcParam})): Promise<GitGetGitMetadataResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.git.getGitMetadata', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function gitPutGitMetadataRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: GitPutGitMetadataRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.git.putGitMetadata', request)
}

export function gitPutGitMetadataRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: GitPutGitMetadataRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.git.putGitMetadata', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function gregorDismissCategoryRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: GregorDismissCategoryRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.gregor.dismissCategory', request)
}

export function gregorDismissCategoryRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: GregorDismissCategoryRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.gregor.dismissCategory', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function gregorGetStateRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: GregorGetStateResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.gregor.getState', request)
}

export function gregorGetStateRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: GregorGetStateResult) => void})): Promise<GregorGetStateResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.gregor.getState', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function gregorInjectItemRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: GregorInjectItemResult) => void} & {param: GregorInjectItemRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.gregor.injectItem', request)
}

export function gregorInjectItemRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: GregorInjectItemResult) => void} & {param: GregorInjectItemRpcParam})): Promise<GregorInjectItemResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.gregor.injectItem', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function homeHomeActionTakenRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.home.homeActionTaken', request)
}

export function homeHomeActionTakenRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.home.homeActionTaken', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function homeHomeGetScreenRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: HomeHomeGetScreenResult) => void} & {param: HomeHomeGetScreenRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.home.homeGetScreen', request)
}

export function homeHomeGetScreenRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: HomeHomeGetScreenResult) => void} & {param: HomeHomeGetScreenRpcParam})): Promise<HomeHomeGetScreenResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.home.homeGetScreen', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function homeHomeMarkViewedRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.home.homeMarkViewed', request)
}

export function homeHomeMarkViewedRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.home.homeMarkViewed', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function homeHomeSkipTodoTypeRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: HomeHomeSkipTodoTypeRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.home.homeSkipTodoType', request)
}

export function homeHomeSkipTodoTypeRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: HomeHomeSkipTodoTypeRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.home.homeSkipTodoType', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function identifyIdentify2RpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: IdentifyIdentify2Result) => void} & {param: IdentifyIdentify2RpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.identify.identify2', request)
}

export function identifyIdentify2RpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: IdentifyIdentify2Result) => void} & {param: IdentifyIdentify2RpcParam})): Promise<IdentifyIdentify2Result> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.identify.identify2', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function identifyIdentifyLiteRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: IdentifyIdentifyLiteResult) => void} & {param: IdentifyIdentifyLiteRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.identify.identifyLite', request)
}

export function identifyIdentifyLiteRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: IdentifyIdentifyLiteResult) => void} & {param: IdentifyIdentifyLiteRpcParam})): Promise<IdentifyIdentifyLiteResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.identify.identifyLite', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function identifyResolve3RpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: IdentifyResolve3Result) => void} & {param: IdentifyResolve3RpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.identify.Resolve3', request)
}

export function identifyResolve3RpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: IdentifyResolve3Result) => void} & {param: IdentifyResolve3RpcParam})): Promise<IdentifyResolve3Result> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.identify.Resolve3', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function identifyResolveIdentifyImplicitTeamRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: IdentifyResolveIdentifyImplicitTeamResult) => void} & {param: IdentifyResolveIdentifyImplicitTeamRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.identify.resolveIdentifyImplicitTeam', request)
}

export function identifyResolveIdentifyImplicitTeamRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: IdentifyResolveIdentifyImplicitTeamResult) => void} & {param: IdentifyResolveIdentifyImplicitTeamRpcParam})): Promise<IdentifyResolveIdentifyImplicitTeamResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.identify.resolveIdentifyImplicitTeam', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function installFuseStatusRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: InstallFuseStatusResult) => void} & {param: InstallFuseStatusRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.install.fuseStatus', request)
}

export function installFuseStatusRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: InstallFuseStatusResult) => void} & {param: InstallFuseStatusRpcParam})): Promise<InstallFuseStatusResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.install.fuseStatus', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function installInstallCommandLinePrivilegedRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: InstallInstallCommandLinePrivilegedResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.install.installCommandLinePrivileged', request)
}

export function installInstallCommandLinePrivilegedRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: InstallInstallCommandLinePrivilegedResult) => void})): Promise<InstallInstallCommandLinePrivilegedResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.install.installCommandLinePrivileged', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function installInstallFuseRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: InstallInstallFuseResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.install.installFuse', request)
}

export function installInstallFuseRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: InstallInstallFuseResult) => void})): Promise<InstallInstallFuseResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.install.installFuse', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function installInstallKBFSRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: InstallInstallKBFSResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.install.installKBFS', request)
}

export function installInstallKBFSRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: InstallInstallKBFSResult) => void})): Promise<InstallInstallKBFSResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.install.installKBFS', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function installUninstallKBFSRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: InstallUninstallKBFSResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.install.uninstallKBFS', request)
}

export function installUninstallKBFSRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: InstallUninstallKBFSResult) => void})): Promise<InstallUninstallKBFSResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.install.uninstallKBFS', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function kbfsFSEditListRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: KbfsFSEditListRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.kbfs.FSEditList', request)
}

export function kbfsFSEditListRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: KbfsFSEditListRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.kbfs.FSEditList', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function kbfsFSEventRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: KbfsFSEventRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.kbfs.FSEvent', request)
}

export function kbfsFSEventRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: KbfsFSEventRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.kbfs.FSEvent', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function kbfsFSSyncEventRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: KbfsFSSyncEventRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.kbfs.FSSyncEvent', request)
}

export function kbfsFSSyncEventRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: KbfsFSSyncEventRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.kbfs.FSSyncEvent', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function kbfsFSSyncStatusRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: KbfsFSSyncStatusRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.kbfs.FSSyncStatus', request)
}

export function kbfsFSSyncStatusRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: KbfsFSSyncStatusRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.kbfs.FSSyncStatus', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function kbfsMountGetAllAvailableMountDirsRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: KbfsMountGetAllAvailableMountDirsResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.kbfsMount.GetAllAvailableMountDirs', request)
}

export function kbfsMountGetAllAvailableMountDirsRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: KbfsMountGetAllAvailableMountDirsResult) => void})): Promise<KbfsMountGetAllAvailableMountDirsResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.kbfsMount.GetAllAvailableMountDirs', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function kbfsMountGetCurrentMountDirRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: KbfsMountGetCurrentMountDirResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.kbfsMount.GetCurrentMountDir', request)
}

export function kbfsMountGetCurrentMountDirRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: KbfsMountGetCurrentMountDirResult) => void})): Promise<KbfsMountGetCurrentMountDirResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.kbfsMount.GetCurrentMountDir', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function kbfsMountSetCurrentMountDirRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: KbfsMountSetCurrentMountDirRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.kbfsMount.SetCurrentMountDir', request)
}

export function kbfsMountSetCurrentMountDirRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: KbfsMountSetCurrentMountDirRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.kbfsMount.SetCurrentMountDir', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function logRegisterLoggerRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: LogRegisterLoggerRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.log.registerLogger', request)
}

export function logRegisterLoggerRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: LogRegisterLoggerRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.log.registerLogger', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function loginAccountDeleteRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.login.accountDelete', request)
}

export function loginAccountDeleteRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.login.accountDelete', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function loginClearStoredSecretRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: LoginClearStoredSecretRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.login.clearStoredSecret', request)
}

export function loginClearStoredSecretRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: LoginClearStoredSecretRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.login.clearStoredSecret', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function loginDeprovisionRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: LoginDeprovisionRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.login.deprovision', request)
}

export function loginDeprovisionRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: LoginDeprovisionRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.login.deprovision', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function loginGetConfiguredAccountsRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LoginGetConfiguredAccountsResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.login.getConfiguredAccounts', request)
}

export function loginGetConfiguredAccountsRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: LoginGetConfiguredAccountsResult) => void})): Promise<LoginGetConfiguredAccountsResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.login.getConfiguredAccounts', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function loginLoginProvisionedDeviceRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: LoginLoginProvisionedDeviceRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.login.loginProvisionedDevice', request)
}

export function loginLoginProvisionedDeviceRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: LoginLoginProvisionedDeviceRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.login.loginProvisionedDevice', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function loginLoginRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: LoginLoginRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.login.login', request)
}

export function loginLoginRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: LoginLoginRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.login.login', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function loginLoginWithPaperKeyRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.login.loginWithPaperKey', request)
}

export function loginLoginWithPaperKeyRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.login.loginWithPaperKey', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function loginLogoutRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.login.logout', request)
}

export function loginLogoutRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.login.logout', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function loginPaperKeyRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.login.paperKey', request)
}

export function loginPaperKeyRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.login.paperKey', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function loginPaperKeySubmitRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: LoginPaperKeySubmitRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.login.paperKeySubmit', request)
}

export function loginPaperKeySubmitRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: LoginPaperKeySubmitRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.login.paperKeySubmit', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function loginPgpProvisionRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: LoginPgpProvisionRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.login.pgpProvision', request)
}

export function loginPgpProvisionRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: LoginPgpProvisionRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.login.pgpProvision', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function loginRecoverAccountFromEmailAddressRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: LoginRecoverAccountFromEmailAddressRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.login.recoverAccountFromEmailAddress', request)
}

export function loginRecoverAccountFromEmailAddressRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: LoginRecoverAccountFromEmailAddressRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.login.recoverAccountFromEmailAddress', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function loginUnlockRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.login.unlock', request)
}

export function loginUnlockRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.login.unlock', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function loginUnlockWithPassphraseRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: LoginUnlockWithPassphraseRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.login.unlockWithPassphrase', request)
}

export function loginUnlockWithPassphraseRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: LoginUnlockWithPassphraseRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.login.unlockWithPassphrase', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function merkleGetCurrentMerkleRootRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: MerkleGetCurrentMerkleRootResult) => void} & {param: MerkleGetCurrentMerkleRootRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.merkle.getCurrentMerkleRoot', request)
}

export function merkleGetCurrentMerkleRootRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: MerkleGetCurrentMerkleRootResult) => void} & {param: MerkleGetCurrentMerkleRootRpcParam})): Promise<MerkleGetCurrentMerkleRootResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.merkle.getCurrentMerkleRoot', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataAuthenticateRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: MetadataAuthenticateResult) => void} & {param: MetadataAuthenticateRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.authenticate', request)
}

export function metadataAuthenticateRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: MetadataAuthenticateResult) => void} & {param: MetadataAuthenticateRpcParam})): Promise<MetadataAuthenticateResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.authenticate', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataDeleteKeyRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: MetadataDeleteKeyRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.deleteKey', request)
}

export function metadataDeleteKeyRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: MetadataDeleteKeyRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.deleteKey', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataGetChallengeRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: MetadataGetChallengeResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.getChallenge', request)
}

export function metadataGetChallengeRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: MetadataGetChallengeResult) => void})): Promise<MetadataGetChallengeResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.getChallenge', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataGetFolderHandleRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: MetadataGetFolderHandleResult) => void} & {param: MetadataGetFolderHandleRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.getFolderHandle', request)
}

export function metadataGetFolderHandleRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: MetadataGetFolderHandleResult) => void} & {param: MetadataGetFolderHandleRpcParam})): Promise<MetadataGetFolderHandleResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.getFolderHandle', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataGetFoldersForRekeyRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: MetadataGetFoldersForRekeyRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.getFoldersForRekey', request)
}

export function metadataGetFoldersForRekeyRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: MetadataGetFoldersForRekeyRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.getFoldersForRekey', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataGetKeyBundlesRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: MetadataGetKeyBundlesResult) => void} & {param: MetadataGetKeyBundlesRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.getKeyBundles', request)
}

export function metadataGetKeyBundlesRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: MetadataGetKeyBundlesResult) => void} & {param: MetadataGetKeyBundlesRpcParam})): Promise<MetadataGetKeyBundlesResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.getKeyBundles', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataGetKeyRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: MetadataGetKeyResult) => void} & {param: MetadataGetKeyRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.getKey', request)
}

export function metadataGetKeyRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: MetadataGetKeyResult) => void} & {param: MetadataGetKeyRpcParam})): Promise<MetadataGetKeyResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.getKey', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataGetLatestFolderHandleRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: MetadataGetLatestFolderHandleResult) => void} & {param: MetadataGetLatestFolderHandleRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.getLatestFolderHandle', request)
}

export function metadataGetLatestFolderHandleRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: MetadataGetLatestFolderHandleResult) => void} & {param: MetadataGetLatestFolderHandleRpcParam})): Promise<MetadataGetLatestFolderHandleResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.getLatestFolderHandle', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataGetMerkleNodeRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: MetadataGetMerkleNodeResult) => void} & {param: MetadataGetMerkleNodeRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.getMerkleNode', request)
}

export function metadataGetMerkleNodeRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: MetadataGetMerkleNodeResult) => void} & {param: MetadataGetMerkleNodeRpcParam})): Promise<MetadataGetMerkleNodeResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.getMerkleNode', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataGetMerkleRootLatestRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: MetadataGetMerkleRootLatestResult) => void} & {param: MetadataGetMerkleRootLatestRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.getMerkleRootLatest', request)
}

export function metadataGetMerkleRootLatestRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: MetadataGetMerkleRootLatestResult) => void} & {param: MetadataGetMerkleRootLatestRpcParam})): Promise<MetadataGetMerkleRootLatestResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.getMerkleRootLatest', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataGetMerkleRootRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: MetadataGetMerkleRootResult) => void} & {param: MetadataGetMerkleRootRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.getMerkleRoot', request)
}

export function metadataGetMerkleRootRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: MetadataGetMerkleRootResult) => void} & {param: MetadataGetMerkleRootRpcParam})): Promise<MetadataGetMerkleRootResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.getMerkleRoot', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataGetMerkleRootSinceRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: MetadataGetMerkleRootSinceResult) => void} & {param: MetadataGetMerkleRootSinceRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.getMerkleRootSince', request)
}

export function metadataGetMerkleRootSinceRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: MetadataGetMerkleRootSinceResult) => void} & {param: MetadataGetMerkleRootSinceRpcParam})): Promise<MetadataGetMerkleRootSinceResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.getMerkleRootSince', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataGetMetadataRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: MetadataGetMetadataResult) => void} & {param: MetadataGetMetadataRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.getMetadata', request)
}

export function metadataGetMetadataRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: MetadataGetMetadataResult) => void} & {param: MetadataGetMetadataRpcParam})): Promise<MetadataGetMetadataResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.getMetadata', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataLockRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: MetadataLockRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.lock', request)
}

export function metadataLockRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: MetadataLockRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.lock', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataPing2RpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: MetadataPing2Result) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.ping2', request)
}

export function metadataPing2RpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: MetadataPing2Result) => void})): Promise<MetadataPing2Result> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.ping2', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataPingRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.ping', request)
}

export function metadataPingRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.ping', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataPruneBranchRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: MetadataPruneBranchRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.pruneBranch', request)
}

export function metadataPruneBranchRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: MetadataPruneBranchRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.pruneBranch', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataPutKeysRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: MetadataPutKeysRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.putKeys', request)
}

export function metadataPutKeysRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: MetadataPutKeysRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.putKeys', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataPutMetadataRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: MetadataPutMetadataRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.putMetadata', request)
}

export function metadataPutMetadataRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: MetadataPutMetadataRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.putMetadata', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataRegisterForUpdatesRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: MetadataRegisterForUpdatesRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.registerForUpdates', request)
}

export function metadataRegisterForUpdatesRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: MetadataRegisterForUpdatesRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.registerForUpdates', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataReleaseLockRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: MetadataReleaseLockRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.releaseLock', request)
}

export function metadataReleaseLockRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: MetadataReleaseLockRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.releaseLock', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataTruncateLockRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: MetadataTruncateLockResult) => void} & {param: MetadataTruncateLockRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.truncateLock', request)
}

export function metadataTruncateLockRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: MetadataTruncateLockResult) => void} & {param: MetadataTruncateLockRpcParam})): Promise<MetadataTruncateLockResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.truncateLock', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataTruncateUnlockRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: MetadataTruncateUnlockResult) => void} & {param: MetadataTruncateUnlockRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadata.truncateUnlock', request)
}

export function metadataTruncateUnlockRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: MetadataTruncateUnlockResult) => void} & {param: MetadataTruncateUnlockRpcParam})): Promise<MetadataTruncateUnlockResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadata.truncateUnlock', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataUpdateFolderNeedsRekeyRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: MetadataUpdateFolderNeedsRekeyRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadataUpdate.folderNeedsRekey', request)
}

export function metadataUpdateFolderNeedsRekeyRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: MetadataUpdateFolderNeedsRekeyRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadataUpdate.folderNeedsRekey', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataUpdateFoldersNeedRekeyRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: MetadataUpdateFoldersNeedRekeyRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadataUpdate.foldersNeedRekey', request)
}

export function metadataUpdateFoldersNeedRekeyRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: MetadataUpdateFoldersNeedRekeyRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadataUpdate.foldersNeedRekey', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function metadataUpdateMetadataUpdateRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: MetadataUpdateMetadataUpdateRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.metadataUpdate.metadataUpdate', request)
}

export function metadataUpdateMetadataUpdateRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: MetadataUpdateMetadataUpdateRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.metadataUpdate.metadataUpdate', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function notifyCtlSetNotificationsRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: NotifyCtlSetNotificationsRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.notifyCtl.setNotifications', request)
}

export function notifyCtlSetNotificationsRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: NotifyCtlSetNotificationsRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.notifyCtl.setNotifications', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function paperprovisionPaperProvisionRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: PaperprovisionPaperProvisionRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.paperprovision.paperProvision', request)
}

export function paperprovisionPaperProvisionRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: PaperprovisionPaperProvisionRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.paperprovision.paperProvision', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function pgpPgpDecryptRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: PgpPgpDecryptResult) => void} & {param: PgpPgpDecryptRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.pgp.pgpDecrypt', request)
}

export function pgpPgpDecryptRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: PgpPgpDecryptResult) => void} & {param: PgpPgpDecryptRpcParam})): Promise<PgpPgpDecryptResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.pgp.pgpDecrypt', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function pgpPgpDeletePrimaryRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.pgp.pgpDeletePrimary', request)
}

export function pgpPgpDeletePrimaryRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.pgp.pgpDeletePrimary', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function pgpPgpEncryptRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: PgpPgpEncryptRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.pgp.pgpEncrypt', request)
}

export function pgpPgpEncryptRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: PgpPgpEncryptRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.pgp.pgpEncrypt', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function pgpPgpExportByFingerprintRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: PgpPgpExportByFingerprintResult) => void} & {param: PgpPgpExportByFingerprintRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.pgp.pgpExportByFingerprint', request)
}

export function pgpPgpExportByFingerprintRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: PgpPgpExportByFingerprintResult) => void} & {param: PgpPgpExportByFingerprintRpcParam})): Promise<PgpPgpExportByFingerprintResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.pgp.pgpExportByFingerprint', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function pgpPgpExportByKIDRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: PgpPgpExportByKIDResult) => void} & {param: PgpPgpExportByKIDRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.pgp.pgpExportByKID', request)
}

export function pgpPgpExportByKIDRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: PgpPgpExportByKIDResult) => void} & {param: PgpPgpExportByKIDRpcParam})): Promise<PgpPgpExportByKIDResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.pgp.pgpExportByKID', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function pgpPgpExportRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: PgpPgpExportResult) => void} & {param: PgpPgpExportRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.pgp.pgpExport', request)
}

export function pgpPgpExportRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: PgpPgpExportResult) => void} & {param: PgpPgpExportRpcParam})): Promise<PgpPgpExportResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.pgp.pgpExport', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function pgpPgpImportRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: PgpPgpImportRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.pgp.pgpImport', request)
}

export function pgpPgpImportRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: PgpPgpImportRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.pgp.pgpImport', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function pgpPgpKeyGenDefaultRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: PgpPgpKeyGenDefaultRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.pgp.pgpKeyGenDefault', request)
}

export function pgpPgpKeyGenDefaultRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: PgpPgpKeyGenDefaultRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.pgp.pgpKeyGenDefault', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function pgpPgpKeyGenRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: PgpPgpKeyGenRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.pgp.pgpKeyGen', request)
}

export function pgpPgpKeyGenRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: PgpPgpKeyGenRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.pgp.pgpKeyGen', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function pgpPgpPullRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: PgpPgpPullRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.pgp.pgpPull', request)
}

export function pgpPgpPullRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: PgpPgpPullRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.pgp.pgpPull', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function pgpPgpPurgeRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: PgpPgpPurgeResult) => void} & {param: PgpPgpPurgeRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.pgp.pgpPurge', request)
}

export function pgpPgpPurgeRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: PgpPgpPurgeResult) => void} & {param: PgpPgpPurgeRpcParam})): Promise<PgpPgpPurgeResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.pgp.pgpPurge', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function pgpPgpSelectRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: PgpPgpSelectRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.pgp.pgpSelect', request)
}

export function pgpPgpSelectRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: PgpPgpSelectRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.pgp.pgpSelect', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function pgpPgpSignRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: PgpPgpSignRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.pgp.pgpSign', request)
}

export function pgpPgpSignRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: PgpPgpSignRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.pgp.pgpSign', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function pgpPgpStorageDismissRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.pgp.pgpStorageDismiss', request)
}

export function pgpPgpStorageDismissRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.pgp.pgpStorageDismiss', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function pgpPgpUpdateRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: PgpPgpUpdateRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.pgp.pgpUpdate', request)
}

export function pgpPgpUpdateRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: PgpPgpUpdateRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.pgp.pgpUpdate', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function pgpPgpVerifyRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: PgpPgpVerifyResult) => void} & {param: PgpPgpVerifyRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.pgp.pgpVerify', request)
}

export function pgpPgpVerifyRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: PgpPgpVerifyResult) => void} & {param: PgpPgpVerifyRpcParam})): Promise<PgpPgpVerifyResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.pgp.pgpVerify', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function proveCheckProofRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: ProveCheckProofResult) => void} & {param: ProveCheckProofRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.prove.checkProof', request)
}

export function proveCheckProofRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: ProveCheckProofResult) => void} & {param: ProveCheckProofRpcParam})): Promise<ProveCheckProofResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.prove.checkProof', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function proveStartProofRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: ProveStartProofResult) => void} & {param: ProveStartProofRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.prove.startProof', request)
}

export function proveStartProofRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: ProveStartProofResult) => void} & {param: ProveStartProofRpcParam})): Promise<ProveStartProofResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.prove.startProof', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function quotaVerifySessionRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: QuotaVerifySessionResult) => void} & {param: QuotaVerifySessionRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.quota.verifySession', request)
}

export function quotaVerifySessionRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: QuotaVerifySessionResult) => void} & {param: QuotaVerifySessionRpcParam})): Promise<QuotaVerifySessionResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.quota.verifySession', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function reachabilityCheckReachabilityRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: ReachabilityCheckReachabilityResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.reachability.checkReachability', request)
}

export function reachabilityCheckReachabilityRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: ReachabilityCheckReachabilityResult) => void})): Promise<ReachabilityCheckReachabilityResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.reachability.checkReachability', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function reachabilityReachabilityChangedRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: ReachabilityReachabilityChangedRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.reachability.reachabilityChanged', request)
}

export function reachabilityReachabilityChangedRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: ReachabilityReachabilityChangedRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.reachability.reachabilityChanged', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function reachabilityStartReachabilityRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: ReachabilityStartReachabilityResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.reachability.startReachability', request)
}

export function reachabilityStartReachabilityRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: ReachabilityStartReachabilityResult) => void})): Promise<ReachabilityStartReachabilityResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.reachability.startReachability', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function rekeyDebugShowRekeyStatusRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.rekey.debugShowRekeyStatus', request)
}

export function rekeyDebugShowRekeyStatusRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.rekey.debugShowRekeyStatus', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function rekeyGetPendingRekeyStatusRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RekeyGetPendingRekeyStatusResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.rekey.getPendingRekeyStatus', request)
}

export function rekeyGetPendingRekeyStatusRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: RekeyGetPendingRekeyStatusResult) => void})): Promise<RekeyGetPendingRekeyStatusResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.rekey.getPendingRekeyStatus', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function rekeyGetRevokeWarningRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RekeyGetRevokeWarningResult) => void} & {param: RekeyGetRevokeWarningRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.rekey.getRevokeWarning', request)
}

export function rekeyGetRevokeWarningRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: RekeyGetRevokeWarningResult) => void} & {param: RekeyGetRevokeWarningRpcParam})): Promise<RekeyGetRevokeWarningResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.rekey.getRevokeWarning', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function rekeyRekeyStatusFinishRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RekeyRekeyStatusFinishResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.rekey.rekeyStatusFinish', request)
}

export function rekeyRekeyStatusFinishRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: RekeyRekeyStatusFinishResult) => void})): Promise<RekeyRekeyStatusFinishResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.rekey.rekeyStatusFinish', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function rekeyRekeySyncRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: RekeyRekeySyncRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.rekey.rekeySync', request)
}

export function rekeyRekeySyncRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: RekeyRekeySyncRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.rekey.rekeySync', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function rekeyShowPendingRekeyStatusRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.rekey.showPendingRekeyStatus', request)
}

export function rekeyShowPendingRekeyStatusRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.rekey.showPendingRekeyStatus', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function revokeRevokeDeviceRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: RevokeRevokeDeviceRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.revoke.revokeDevice', request)
}

export function revokeRevokeDeviceRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: RevokeRevokeDeviceRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.revoke.revokeDevice', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function revokeRevokeKeyRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: RevokeRevokeKeyRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.revoke.revokeKey', request)
}

export function revokeRevokeKeyRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: RevokeRevokeKeyRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.revoke.revokeKey', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function revokeRevokeSigsRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: RevokeRevokeSigsRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.revoke.revokeSigs', request)
}

export function revokeRevokeSigsRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: RevokeRevokeSigsRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.revoke.revokeSigs', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function saltpackSaltpackDecryptRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: SaltpackSaltpackDecryptResult) => void} & {param: SaltpackSaltpackDecryptRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.saltpack.saltpackDecrypt', request)
}

export function saltpackSaltpackDecryptRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: SaltpackSaltpackDecryptResult) => void} & {param: SaltpackSaltpackDecryptRpcParam})): Promise<SaltpackSaltpackDecryptResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.saltpack.saltpackDecrypt', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function saltpackSaltpackEncryptRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: SaltpackSaltpackEncryptRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.saltpack.saltpackEncrypt', request)
}

export function saltpackSaltpackEncryptRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: SaltpackSaltpackEncryptRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.saltpack.saltpackEncrypt', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function saltpackSaltpackSignRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: SaltpackSaltpackSignRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.saltpack.saltpackSign', request)
}

export function saltpackSaltpackSignRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: SaltpackSaltpackSignRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.saltpack.saltpackSign', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function saltpackSaltpackVerifyRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: SaltpackSaltpackVerifyRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.saltpack.saltpackVerify', request)
}

export function saltpackSaltpackVerifyRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: SaltpackSaltpackVerifyRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.saltpack.saltpackVerify', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function sessionCurrentSessionRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: SessionCurrentSessionResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.session.currentSession', request)
}

export function sessionCurrentSessionRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: SessionCurrentSessionResult) => void})): Promise<SessionCurrentSessionResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.session.currentSession', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function sessionSessionPingRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.session.sessionPing', request)
}

export function sessionSessionPingRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.session.sessionPing', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function signupCheckInvitationCodeRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: SignupCheckInvitationCodeRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.signup.checkInvitationCode', request)
}

export function signupCheckInvitationCodeRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: SignupCheckInvitationCodeRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.signup.checkInvitationCode', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function signupCheckUsernameAvailableRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: SignupCheckUsernameAvailableRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.signup.checkUsernameAvailable', request)
}

export function signupCheckUsernameAvailableRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: SignupCheckUsernameAvailableRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.signup.checkUsernameAvailable', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function signupGetInvitationCodeRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: SignupGetInvitationCodeResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.signup.getInvitationCode', request)
}

export function signupGetInvitationCodeRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: SignupGetInvitationCodeResult) => void})): Promise<SignupGetInvitationCodeResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.signup.getInvitationCode', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function signupInviteRequestRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: SignupInviteRequestRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.signup.inviteRequest', request)
}

export function signupInviteRequestRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: SignupInviteRequestRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.signup.inviteRequest', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function signupSignupRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: SignupSignupResult) => void} & {param: SignupSignupRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.signup.signup', request)
}

export function signupSignupRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: SignupSignupResult) => void} & {param: SignupSignupRpcParam})): Promise<SignupSignupResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.signup.signup', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function sigsSigListJSONRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: SigsSigListJSONResult) => void} & {param: SigsSigListJSONRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.sigs.sigListJSON', request)
}

export function sigsSigListJSONRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: SigsSigListJSONResult) => void} & {param: SigsSigListJSONRpcParam})): Promise<SigsSigListJSONResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.sigs.sigListJSON', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function sigsSigListRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: SigsSigListResult) => void} & {param: SigsSigListRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.sigs.sigList', request)
}

export function sigsSigListRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: SigsSigListResult) => void} & {param: SigsSigListRpcParam})): Promise<SigsSigListResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.sigs.sigList', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsGetTeamAndMemberShowcaseRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TeamsGetTeamAndMemberShowcaseResult) => void} & {param: TeamsGetTeamAndMemberShowcaseRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.getTeamAndMemberShowcase', request)
}

export function teamsGetTeamAndMemberShowcaseRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TeamsGetTeamAndMemberShowcaseResult) => void} & {param: TeamsGetTeamAndMemberShowcaseRpcParam})): Promise<TeamsGetTeamAndMemberShowcaseResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.getTeamAndMemberShowcase', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsGetTeamRootIDRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TeamsGetTeamRootIDResult) => void} & {param: TeamsGetTeamRootIDRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.getTeamRootID', request)
}

export function teamsGetTeamRootIDRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TeamsGetTeamRootIDResult) => void} & {param: TeamsGetTeamRootIDRpcParam})): Promise<TeamsGetTeamRootIDResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.getTeamRootID', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsGetTeamShowcaseRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TeamsGetTeamShowcaseResult) => void} & {param: TeamsGetTeamShowcaseRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.getTeamShowcase', request)
}

export function teamsGetTeamShowcaseRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TeamsGetTeamShowcaseResult) => void} & {param: TeamsGetTeamShowcaseRpcParam})): Promise<TeamsGetTeamShowcaseResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.getTeamShowcase', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsLoadTeamPlusApplicationKeysRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TeamsLoadTeamPlusApplicationKeysResult) => void} & {param: TeamsLoadTeamPlusApplicationKeysRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.loadTeamPlusApplicationKeys', request)
}

export function teamsLoadTeamPlusApplicationKeysRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TeamsLoadTeamPlusApplicationKeysResult) => void} & {param: TeamsLoadTeamPlusApplicationKeysRpcParam})): Promise<TeamsLoadTeamPlusApplicationKeysResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.loadTeamPlusApplicationKeys', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsLookupImplicitTeamRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TeamsLookupImplicitTeamResult) => void} & {param: TeamsLookupImplicitTeamRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.lookupImplicitTeam', request)
}

export function teamsLookupImplicitTeamRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TeamsLookupImplicitTeamResult) => void} & {param: TeamsLookupImplicitTeamRpcParam})): Promise<TeamsLookupImplicitTeamResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.lookupImplicitTeam', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsLookupOrCreateImplicitTeamRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TeamsLookupOrCreateImplicitTeamResult) => void} & {param: TeamsLookupOrCreateImplicitTeamRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.lookupOrCreateImplicitTeam', request)
}

export function teamsLookupOrCreateImplicitTeamRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TeamsLookupOrCreateImplicitTeamResult) => void} & {param: TeamsLookupOrCreateImplicitTeamRpcParam})): Promise<TeamsLookupOrCreateImplicitTeamResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.lookupOrCreateImplicitTeam', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsSetTeamMemberShowcaseRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: TeamsSetTeamMemberShowcaseRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.setTeamMemberShowcase', request)
}

export function teamsSetTeamMemberShowcaseRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: TeamsSetTeamMemberShowcaseRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.setTeamMemberShowcase', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsSetTeamShowcaseRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: TeamsSetTeamShowcaseRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.setTeamShowcase', request)
}

export function teamsSetTeamShowcaseRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: TeamsSetTeamShowcaseRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.setTeamShowcase', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamAcceptInviteOrRequestAccessRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: TeamsTeamAcceptInviteOrRequestAccessRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamAcceptInviteOrRequestAccess', request)
}

export function teamsTeamAcceptInviteOrRequestAccessRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: TeamsTeamAcceptInviteOrRequestAccessRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamAcceptInviteOrRequestAccess', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamAcceptInviteRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: TeamsTeamAcceptInviteRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamAcceptInvite', request)
}

export function teamsTeamAcceptInviteRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: TeamsTeamAcceptInviteRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamAcceptInvite', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamAddEmailsBulkRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamAddEmailsBulkResult) => void} & {param: TeamsTeamAddEmailsBulkRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamAddEmailsBulk', request)
}

export function teamsTeamAddEmailsBulkRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamAddEmailsBulkResult) => void} & {param: TeamsTeamAddEmailsBulkRpcParam})): Promise<TeamsTeamAddEmailsBulkResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamAddEmailsBulk', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamAddMemberRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamAddMemberResult) => void} & {param: TeamsTeamAddMemberRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamAddMember', request)
}

export function teamsTeamAddMemberRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamAddMemberResult) => void} & {param: TeamsTeamAddMemberRpcParam})): Promise<TeamsTeamAddMemberResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamAddMember', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamChangeMembershipRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: TeamsTeamChangeMembershipRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamChangeMembership', request)
}

export function teamsTeamChangeMembershipRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: TeamsTeamChangeMembershipRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamChangeMembership', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamCreateRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamCreateResult) => void} & {param: TeamsTeamCreateRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamCreate', request)
}

export function teamsTeamCreateRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamCreateResult) => void} & {param: TeamsTeamCreateRpcParam})): Promise<TeamsTeamCreateResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamCreate', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamCreateSeitanTokenRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamCreateSeitanTokenResult) => void} & {param: TeamsTeamCreateSeitanTokenRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamCreateSeitanToken', request)
}

export function teamsTeamCreateSeitanTokenRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamCreateSeitanTokenResult) => void} & {param: TeamsTeamCreateSeitanTokenRpcParam})): Promise<TeamsTeamCreateSeitanTokenResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamCreateSeitanToken', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamCreateWithSettingsRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamCreateWithSettingsResult) => void} & {param: TeamsTeamCreateWithSettingsRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamCreateWithSettings', request)
}

export function teamsTeamCreateWithSettingsRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamCreateWithSettingsResult) => void} & {param: TeamsTeamCreateWithSettingsRpcParam})): Promise<TeamsTeamCreateWithSettingsResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamCreateWithSettings', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamDeleteRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: TeamsTeamDeleteRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamDelete', request)
}

export function teamsTeamDeleteRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: TeamsTeamDeleteRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamDelete', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamEditMemberRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: TeamsTeamEditMemberRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamEditMember', request)
}

export function teamsTeamEditMemberRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: TeamsTeamEditMemberRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamEditMember', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamGetRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamGetResult) => void} & {param: TeamsTeamGetRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamGet', request)
}

export function teamsTeamGetRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamGetResult) => void} & {param: TeamsTeamGetRpcParam})): Promise<TeamsTeamGetResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamGet', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamIgnoreRequestRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: TeamsTeamIgnoreRequestRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamIgnoreRequest', request)
}

export function teamsTeamIgnoreRequestRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: TeamsTeamIgnoreRequestRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamIgnoreRequest', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamImplicitAdminsRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamImplicitAdminsResult) => void} & {param: TeamsTeamImplicitAdminsRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamImplicitAdmins', request)
}

export function teamsTeamImplicitAdminsRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamImplicitAdminsResult) => void} & {param: TeamsTeamImplicitAdminsRpcParam})): Promise<TeamsTeamImplicitAdminsResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamImplicitAdmins', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamLeaveRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: TeamsTeamLeaveRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamLeave', request)
}

export function teamsTeamLeaveRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: TeamsTeamLeaveRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamLeave', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamListRequestsRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamListRequestsResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamListRequests', request)
}

export function teamsTeamListRequestsRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamListRequestsResult) => void})): Promise<TeamsTeamListRequestsResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamListRequests', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamListRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamListResult) => void} & {param: TeamsTeamListRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamList', request)
}

export function teamsTeamListRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamListResult) => void} & {param: TeamsTeamListRpcParam})): Promise<TeamsTeamListResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamList', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamListSubteamsRecursiveRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamListSubteamsRecursiveResult) => void} & {param: TeamsTeamListSubteamsRecursiveRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamListSubteamsRecursive', request)
}

export function teamsTeamListSubteamsRecursiveRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamListSubteamsRecursiveResult) => void} & {param: TeamsTeamListSubteamsRecursiveRpcParam})): Promise<TeamsTeamListSubteamsRecursiveResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamListSubteamsRecursive', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamReAddMemberAfterResetRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: TeamsTeamReAddMemberAfterResetRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamReAddMemberAfterReset', request)
}

export function teamsTeamReAddMemberAfterResetRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: TeamsTeamReAddMemberAfterResetRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamReAddMemberAfterReset', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamRemoveMemberRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: TeamsTeamRemoveMemberRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamRemoveMember', request)
}

export function teamsTeamRemoveMemberRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: TeamsTeamRemoveMemberRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamRemoveMember', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamRenameRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: TeamsTeamRenameRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamRename', request)
}

export function teamsTeamRenameRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: TeamsTeamRenameRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamRename', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamRequestAccessRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamRequestAccessResult) => void} & {param: TeamsTeamRequestAccessRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamRequestAccess', request)
}

export function teamsTeamRequestAccessRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamRequestAccessResult) => void} & {param: TeamsTeamRequestAccessRpcParam})): Promise<TeamsTeamRequestAccessResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamRequestAccess', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamSetSettingsRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: TeamsTeamSetSettingsRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamSetSettings', request)
}

export function teamsTeamSetSettingsRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: TeamsTeamSetSettingsRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamSetSettings', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function teamsTeamTreeRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamTreeResult) => void} & {param: TeamsTeamTreeRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.teams.teamTree', request)
}

export function teamsTeamTreeRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TeamsTeamTreeResult) => void} & {param: TeamsTeamTreeRpcParam})): Promise<TeamsTeamTreeResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.teams.teamTree', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function testPanicRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: TestPanicRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.test.panic', request)
}

export function testPanicRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: TestPanicRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.test.panic', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function testTestCallbackRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TestTestCallbackResult) => void} & {param: TestTestCallbackRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.test.testCallback', request)
}

export function testTestCallbackRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TestTestCallbackResult) => void} & {param: TestTestCallbackRpcParam})): Promise<TestTestCallbackResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.test.testCallback', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function testTestRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TestTestResult) => void} & {param: TestTestRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.test.test', request)
}

export function testTestRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TestTestResult) => void} & {param: TestTestRpcParam})): Promise<TestTestResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.test.test', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function tlfCompleteAndCanonicalizePrivateTlfNameRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TlfCompleteAndCanonicalizePrivateTlfNameResult) => void} & {param: TlfCompleteAndCanonicalizePrivateTlfNameRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.tlf.completeAndCanonicalizePrivateTlfName', request)
}

export function tlfCompleteAndCanonicalizePrivateTlfNameRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TlfCompleteAndCanonicalizePrivateTlfNameResult) => void} & {param: TlfCompleteAndCanonicalizePrivateTlfNameRpcParam})): Promise<TlfCompleteAndCanonicalizePrivateTlfNameResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.tlf.completeAndCanonicalizePrivateTlfName', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function tlfCryptKeysRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TlfCryptKeysResult) => void} & {param: TlfCryptKeysRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.tlf.CryptKeys', request)
}

export function tlfCryptKeysRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TlfCryptKeysResult) => void} & {param: TlfCryptKeysRpcParam})): Promise<TlfCryptKeysResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.tlf.CryptKeys', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function tlfKeysGetPublicCanonicalTLFNameAndIDRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TlfKeysGetPublicCanonicalTLFNameAndIDResult) => void} & {param: TlfKeysGetPublicCanonicalTLFNameAndIDRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.tlfKeys.getPublicCanonicalTLFNameAndID', request)
}

export function tlfKeysGetPublicCanonicalTLFNameAndIDRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TlfKeysGetPublicCanonicalTLFNameAndIDResult) => void} & {param: TlfKeysGetPublicCanonicalTLFNameAndIDRpcParam})): Promise<TlfKeysGetPublicCanonicalTLFNameAndIDResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.tlfKeys.getPublicCanonicalTLFNameAndID', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function tlfKeysGetTLFCryptKeysRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TlfKeysGetTLFCryptKeysResult) => void} & {param: TlfKeysGetTLFCryptKeysRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.tlfKeys.getTLFCryptKeys', request)
}

export function tlfKeysGetTLFCryptKeysRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TlfKeysGetTLFCryptKeysResult) => void} & {param: TlfKeysGetTLFCryptKeysRpcParam})): Promise<TlfKeysGetTLFCryptKeysResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.tlfKeys.getTLFCryptKeys', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function tlfPublicCanonicalTLFNameAndIDRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TlfPublicCanonicalTLFNameAndIDResult) => void} & {param: TlfPublicCanonicalTLFNameAndIDRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.tlf.publicCanonicalTLFNameAndID', request)
}

export function tlfPublicCanonicalTLFNameAndIDRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TlfPublicCanonicalTLFNameAndIDResult) => void} & {param: TlfPublicCanonicalTLFNameAndIDRpcParam})): Promise<TlfPublicCanonicalTLFNameAndIDResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.tlf.publicCanonicalTLFNameAndID', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function trackCheckTrackingRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.track.checkTracking', request)
}

export function trackCheckTrackingRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.track.checkTracking', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function trackDismissWithTokenRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: TrackDismissWithTokenRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.track.dismissWithToken', request)
}

export function trackDismissWithTokenRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: TrackDismissWithTokenRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.track.dismissWithToken', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function trackFakeTrackingChangedRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: TrackFakeTrackingChangedRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.track.fakeTrackingChanged', request)
}

export function trackFakeTrackingChangedRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: TrackFakeTrackingChangedRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.track.fakeTrackingChanged', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function trackTrackRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: TrackTrackResult) => void} & {param: TrackTrackRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.track.track', request)
}

export function trackTrackRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: TrackTrackResult) => void} & {param: TrackTrackRpcParam})): Promise<TrackTrackResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.track.track', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function trackTrackWithTokenRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: TrackTrackWithTokenRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.track.trackWithToken', request)
}

export function trackTrackWithTokenRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: TrackTrackWithTokenRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.track.trackWithToken', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function trackUntrackRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: TrackUntrackRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.track.untrack', request)
}

export function trackUntrackRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: TrackUntrackRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.track.untrack', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function userDeleteUserRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.user.deleteUser', request)
}

export function userDeleteUserRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.user.deleteUser', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function userInterestingPeopleRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: UserInterestingPeopleResult) => void} & {param: UserInterestingPeopleRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.user.interestingPeople', request)
}

export function userInterestingPeopleRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: UserInterestingPeopleResult) => void} & {param: UserInterestingPeopleRpcParam})): Promise<UserInterestingPeopleResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.user.interestingPeople', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function userListTrackers2RpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: UserListTrackers2Result) => void} & {param: UserListTrackers2RpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.user.listTrackers2', request)
}

export function userListTrackers2RpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: UserListTrackers2Result) => void} & {param: UserListTrackers2RpcParam})): Promise<UserListTrackers2Result> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.user.listTrackers2', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function userListTrackersByNameRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: UserListTrackersByNameResult) => void} & {param: UserListTrackersByNameRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.user.listTrackersByName', request)
}

export function userListTrackersByNameRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: UserListTrackersByNameResult) => void} & {param: UserListTrackersByNameRpcParam})): Promise<UserListTrackersByNameResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.user.listTrackersByName', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function userListTrackersRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: UserListTrackersResult) => void} & {param: UserListTrackersRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.user.listTrackers', request)
}

export function userListTrackersRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: UserListTrackersResult) => void} & {param: UserListTrackersRpcParam})): Promise<UserListTrackersResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.user.listTrackers', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function userListTrackersSelfRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: UserListTrackersSelfResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.user.listTrackersSelf', request)
}

export function userListTrackersSelfRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: UserListTrackersSelfResult) => void})): Promise<UserListTrackersSelfResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.user.listTrackersSelf', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function userListTrackingJSONRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: UserListTrackingJSONResult) => void} & {param: UserListTrackingJSONRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.user.listTrackingJSON', request)
}

export function userListTrackingJSONRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: UserListTrackingJSONResult) => void} & {param: UserListTrackingJSONRpcParam})): Promise<UserListTrackingJSONResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.user.listTrackingJSON', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function userListTrackingRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: UserListTrackingResult) => void} & {param: UserListTrackingRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.user.listTracking', request)
}

export function userListTrackingRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: UserListTrackingResult) => void} & {param: UserListTrackingRpcParam})): Promise<UserListTrackingResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.user.listTracking', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function userLoadAllPublicKeysUnverifiedRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: UserLoadAllPublicKeysUnverifiedResult) => void} & {param: UserLoadAllPublicKeysUnverifiedRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.user.loadAllPublicKeysUnverified', request)
}

export function userLoadAllPublicKeysUnverifiedRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: UserLoadAllPublicKeysUnverifiedResult) => void} & {param: UserLoadAllPublicKeysUnverifiedRpcParam})): Promise<UserLoadAllPublicKeysUnverifiedResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.user.loadAllPublicKeysUnverified', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function userLoadMyPublicKeysRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: UserLoadMyPublicKeysResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.user.loadMyPublicKeys', request)
}

export function userLoadMyPublicKeysRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: UserLoadMyPublicKeysResult) => void})): Promise<UserLoadMyPublicKeysResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.user.loadMyPublicKeys', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function userLoadMySettingsRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: UserLoadMySettingsResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.user.loadMySettings', request)
}

export function userLoadMySettingsRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: UserLoadMySettingsResult) => void})): Promise<UserLoadMySettingsResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.user.loadMySettings', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function userLoadPublicKeysRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: UserLoadPublicKeysResult) => void} & {param: UserLoadPublicKeysRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.user.loadPublicKeys', request)
}

export function userLoadPublicKeysRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: UserLoadPublicKeysResult) => void} & {param: UserLoadPublicKeysRpcParam})): Promise<UserLoadPublicKeysResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.user.loadPublicKeys', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function userLoadUncheckedUserSummariesRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: UserLoadUncheckedUserSummariesResult) => void} & {param: UserLoadUncheckedUserSummariesRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.user.loadUncheckedUserSummaries', request)
}

export function userLoadUncheckedUserSummariesRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: UserLoadUncheckedUserSummariesResult) => void} & {param: UserLoadUncheckedUserSummariesRpcParam})): Promise<UserLoadUncheckedUserSummariesResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.user.loadUncheckedUserSummaries', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function userLoadUserByNameRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: UserLoadUserByNameResult) => void} & {param: UserLoadUserByNameRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.user.loadUserByName', request)
}

export function userLoadUserByNameRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: UserLoadUserByNameResult) => void} & {param: UserLoadUserByNameRpcParam})): Promise<UserLoadUserByNameResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.user.loadUserByName', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function userLoadUserPlusKeysRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: UserLoadUserPlusKeysResult) => void} & {param: UserLoadUserPlusKeysRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.user.loadUserPlusKeys', request)
}

export function userLoadUserPlusKeysRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: UserLoadUserPlusKeysResult) => void} & {param: UserLoadUserPlusKeysRpcParam})): Promise<UserLoadUserPlusKeysResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.user.loadUserPlusKeys', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function userLoadUserRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: UserLoadUserResult) => void} & {param: UserLoadUserRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.user.loadUser', request)
}

export function userLoadUserRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: UserLoadUserResult) => void} & {param: UserLoadUserRpcParam})): Promise<UserLoadUserResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.user.loadUser', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function userProfileEditRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: UserProfileEditRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.user.profileEdit', request)
}

export function userProfileEditRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: UserProfileEditRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.user.profileEdit', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function userResetUserRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.user.resetUser', request)
}

export function userResetUserRpcPromise (request: ?(RequestCommon & RequestErrorCallback)): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.user.resetUser', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function userSearchRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: UserSearchResult) => void} & {param: UserSearchRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'keybase.1.user.search', request)
}

export function userSearchRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: UserSearchResult) => void} & {param: UserSearchRpcParam})): Promise<UserSearchResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('keybase.1.user.search', request, (error, result) => error ? reject(error) : resolve(result)))
}

export type APIRes = {|
  status: String,
  body: String,
  httpStatus: Int,
  appStatus: String,
|}

export type AccountEmailChangeRpcParam = {|
  newEmail: String
|}

export type AccountPassphraseChangeRpcParam = {|
  oldPassphrase: String,
  passphrase: String,
  force: Boolean
|}

export type AccountPassphrasePromptRpcParam = {|
  guiArg: GUIEntryArg
|}

export type AnnotatedMemberInfo = {|
  userID: UID,
  teamID: TeamID,
  username: String,
  fullName: String,
  fqName: String,
  isImplicitTeam: Boolean,
  role: TeamRole,
  implicit?: ?ImplicitRole,
  needsPUK: Boolean,
  memberCount: Int,
|}

export type AnnotatedTeamInvite = {|
  role: TeamRole,
  id: TeamInviteID,
  type: TeamInviteType,
  name: TeamInviteName,
  uv: UserVersion,
  inviter: UserVersion,
  inviterUsername: String,
  teamName: String,
|}

export type AnnotatedTeamList = {|
  teams?: ?Array<AnnotatedMemberInfo>,
  annotatedActiveInvites: {[key: string]: AnnotatedTeamInvite},
|}

export type ApiserverDeleteRpcParam = {|
  endpoint: String,
  args?: ?Array<StringKVPair>,
  httpStatus?: ?Array<Int>,
  appStatusCode?: ?Array<Int>
|}

export type ApiserverGetRpcParam = {|
  endpoint: String,
  args?: ?Array<StringKVPair>,
  httpStatus?: ?Array<Int>,
  appStatusCode?: ?Array<Int>
|}

export type ApiserverGetWithSessionRpcParam = {|
  endpoint: String,
  args?: ?Array<StringKVPair>,
  httpStatus?: ?Array<Int>,
  appStatusCode?: ?Array<Int>
|}

export type ApiserverPostJSONRpcParam = {|
  endpoint: String,
  args?: ?Array<StringKVPair>,
  JSONPayload?: ?Array<StringKVPair>,
  httpStatus?: ?Array<Int>,
  appStatusCode?: ?Array<Int>
|}

export type ApiserverPostRpcParam = {|
  endpoint: String,
  args?: ?Array<StringKVPair>,
  httpStatus?: ?Array<Int>,
  appStatusCode?: ?Array<Int>
|}

export type AppState =
    0 // FOREGROUND_0
  | 1 // BACKGROUND_1
  | 2 // INACTIVE_2
  | 3 // BACKGROUNDACTIVE_3

export type AppStateUpdateAppStateRpcParam = {|
  state: AppState
|}

export type AsyncOps =
    0 // LIST_0
  | 1 // LIST_RECURSIVE_1
  | 2 // READ_2
  | 3 // WRITE_3
  | 4 // COPY_4
  | 5 // MOVE_5
  | 6 // REMOVE_6

export type BTCRegisterBTCRpcParam = {|
  address: String,
  force: Boolean
|}

export type BadgeConversationInfo = {|
  convID: ChatConversationID,
  badgeCounts: {[key: string]: Int},
  unreadMessages: Int,
|}

export type BadgeState = {|
  newTlfs: Int,
  rekeysNeeded: Int,
  newFollowers: Int,
  inboxVers: Int,
  conversations?: ?Array<BadgeConversationInfo>,
  newGitRepoGlobalUniqueIDs?: ?Array<String>,
  newTeamNames?: ?Array<String>,
  newTeamAccessRequests?: ?Array<String>,
|}

export type BinaryKID = Bytes

export type BlockAddReferenceRpcParam = {|
  folder: String,
  ref: BlockReference
|}

export type BlockArchiveReferenceRpcParam = {|
  folder: String,
  refs?: ?Array<BlockReference>
|}

export type BlockArchiveReferenceWithCountRpcParam = {|
  folder: String,
  refs?: ?Array<BlockReference>
|}

export type BlockAuthenticateSessionRpcParam = {|
  signature: String
|}

export type BlockDelReferenceRpcParam = {|
  folder: String,
  ref: BlockReference
|}

export type BlockDelReferenceWithCountRpcParam = {|
  folder: String,
  refs?: ?Array<BlockReference>
|}

export type BlockGetBlockRpcParam = {|
  bid: BlockIdCombo,
  folder: String
|}

export type BlockGetTeamQuotaInfoRpcParam = {|
  tid: TeamID
|}

export type BlockIdCombo = {|
  blockHash: String,
  chargedTo: UserOrTeamID,
  blockType: BlockType,
|}

export type BlockPingResponse = {||}

export type BlockPutBlockAgainRpcParam = {|
  folder: String,
  ref: BlockReference,
  blockKey: String,
  buf: Bytes
|}

export type BlockPutBlockRpcParam = {|
  bid: BlockIdCombo,
  folder: String,
  blockKey: String,
  buf: Bytes
|}

export type BlockRefNonce = any

export type BlockReference = {|
  bid: BlockIdCombo,
  nonce: BlockRefNonce,
  chargedTo: UserOrTeamID,
|}

export type BlockReferenceCount = {|
  ref: BlockReference,
  liveCount: Int,
|}

export type BlockType =
    0 // DATA_0
  | 1 // MD_1
  | 2 // GIT_2

export type BootstrapStatus = {|
  registered: Boolean,
  loggedIn: Boolean,
  uid: UID,
  username: String,
  deviceID: DeviceID,
  deviceName: String,
  following?: ?Array<String>,
  followers?: ?Array<String>,
|}

export type BoxNonce = any

export type BoxPublicKey = any

export type BulkRes = {|
  invited?: ?Array<String>,
  alreadyInvited?: ?Array<String>,
  malformed?: ?Array<String>,
|}

export type Bytes32 = any

export type CanonicalTLFNameAndIDWithBreaks = {|
  tlfID: TLFID,
  CanonicalName: CanonicalTlfName,
  breaks: TLFBreak,
|}

export type CanonicalTlfName = String

export type ChallengeInfo = {|
  now: Long,
  challenge: String,
|}

export type ChatConversationID = Bytes

export type CheckProofStatus = {|
  found: Boolean,
  status: ProofStatus,
  proofText: String,
  state: ProofState,
|}

export type CheckResult = {|
  proofResult: ProofResult,
  time: Time,
  freshness: CheckResultFreshness,
|}

export type CheckResultFreshness =
    0 // FRESH_0
  | 1 // AGED_1
  | 2 // RANCID_2

export type ChooseType =
    0 // EXISTING_DEVICE_0
  | 1 // NEW_DEVICE_1

export type CiphertextBundle = {|
  kid: KID,
  ciphertext: EncryptedBytes32,
  nonce: BoxNonce,
  publicKey: BoxPublicKey,
|}

export type ClientDetails = {|
  pid: Int,
  clientType: ClientType,
  argv?: ?Array<String>,
  desc: String,
  version: String,
|}

export type ClientType =
    0 // NONE_0
  | 1 // CLI_1
  | 2 // GUI_MAIN_2
  | 3 // KBFS_3
  | 4 // GUI_HELPER_4

export type CompatibilityTeamID =
    { typ: 1, legacy: ?TLFID }
  | { typ: 2, modern: ?TeamID }

export type ComponentResult = {|
  name: String,
  status: Status,
  exitCode: Int,
|}

export type Config = {|
  serverURI: String,
  socketFile: String,
  label: String,
  runMode: String,
  gpgExists: Boolean,
  gpgPath: String,
  version: String,
  path: String,
  configPath: String,
  versionShort: String,
  versionFull: String,
  isAutoForked: Boolean,
  forkType: ForkType,
|}

export type ConfigClearValueRpcParam = {|
  path: String
|}

export type ConfigGetValueRpcParam = {|
  path: String
|}

export type ConfigHelloIAmRpcParam = {|
  details: ClientDetails
|}

export type ConfigSetPathRpcParam = {|
  path: String
|}

export type ConfigSetUserConfigRpcParam = {|
  username: String,
  key: String,
  value: String
|}

export type ConfigSetValueRpcParam = {|
  path: String,
  value: ConfigValue
|}

export type ConfigValue = {|
  isNull: Boolean,
  b?: ?Boolean,
  i?: ?Int,
  s?: ?String,
  o?: ?String,
|}

export type ConfigWaitForClientRpcParam = {|
  clientType: ClientType,
  timeout: DurationSec
|}

export type ConfiguredAccount = {|
  username: String,
  hasStoredSecret: Boolean,
|}

export type ConfirmResult = {|
  identityConfirmed: Boolean,
  remoteConfirmed: Boolean,
  expiringLocal: Boolean,
  autoConfirmed: Boolean,
|}

export type CopyArgs = {|
  opID: OpID,
  src: Path,
  dest: Path,
|}

export type CryptKey = {|
  KeyGeneration: Int,
  Key: Bytes32,
|}

export type CryptoSignED25519ForKBFSRpcParam = {|
  msg: Bytes,
  reason: String
|}

export type CryptoSignED25519RpcParam = {|
  msg: Bytes,
  reason: String
|}

export type CryptoSignToStringRpcParam = {|
  msg: Bytes,
  reason: String
|}

export type CryptoUnboxBytes32AnyRpcParam = {|
  bundles?: ?Array<CiphertextBundle>,
  reason: String,
  promptPaper: Boolean
|}

export type CryptoUnboxBytes32RpcParam = {|
  encryptedBytes32: EncryptedBytes32,
  nonce: BoxNonce,
  peersPublicKey: BoxPublicKey,
  reason: String
|}

export type Cryptocurrency = {|
  rowId: Int,
  pkhash: Bytes,
  address: String,
  sigID: SigID,
  type: String,
  family: String,
|}

export type CryptocurrencyRegisterAddressRpcParam = {|
  address: String,
  force: Boolean,
  wantedFamily: String
|}

export type CsrfToken = String

export type CtlDbDeleteRpcParam = {|
  key: DbKey
|}

export type CtlDbGetRpcParam = {|
  key: DbKey
|}

export type CtlDbPutRpcParam = {|
  key: DbKey,
  value: DbValue
|}

export type CtlStopRpcParam = {|
  exitCode: ExitCode
|}

export type DbKey = {|
  dbType: DbType,
  objType: Int,
  key: String,
|}

export type DbType =
    0 // MAIN_0
  | 1 // CHAT_1

export type DbValue = Bytes

export type DebuggingFirstStepRpcParam = {|
  val: Int
|}

export type DebuggingIncrementRpcParam = {|
  val: Int
|}

export type DebuggingSecondStepRpcParam = {|
  val: Int
|}

export type Device = {|
  type: String,
  name: String,
  deviceID: DeviceID,
  cTime: Time,
  mTime: Time,
  lastUsedTime: Time,
  encryptKey: KID,
  verifyKey: KID,
  status: Int,
|}

export type DeviceCheckDeviceNameForUserRpcParam = {|
  username: String,
  devicename: String
|}

export type DeviceCheckDeviceNameFormatRpcParam = {|
  name: String
|}

export type DeviceDetail = {|
  device: Device,
  eldest: Boolean,
  provisioner?: ?Device,
  provisionedAt?: ?Time,
  revokedAt?: ?Time,
  revokedBy: KID,
  revokedByDevice?: ?Device,
  currentDevice: Boolean,
|}

export type DeviceID = String

export type DeviceType =
    0 // DESKTOP_0
  | 1 // MOBILE_1

export type Dirent = {|
  time: Time,
  size: Int,
  name: String,
  direntType: DirentType,
|}

export type DirentType =
    0 // FILE_0
  | 1 // DIR_1
  | 2 // SYM_2
  | 3 // EXEC_3

export type DismissReason = {|
  type: DismissReasonType,
  reason: String,
  resource: String,
|}

export type DismissReasonType =
    0 // NONE_0
  | 1 // HANDLED_ELSEWHERE_1

export type DowngradeReferenceRes = {|
  completed?: ?Array<BlockReferenceCount>,
  failed: BlockReference,
|}

export type DurationSec = Double

export type ED25519PublicKey = any

export type ED25519Signature = any

export type ED25519SignatureInfo = {|
  sig: ED25519Signature,
  publicKey: ED25519PublicKey,
|}

export type Email = {|
  email: String,
  isVerified: Boolean,
|}

export type EncryptedBytes32 = any

export type EncryptedGitMetadata = {|
  v: Int,
  e: Bytes,
  n: BoxNonce,
  gen: PerTeamKeyGeneration,
|}

export type ErrorNum = Int

export type ExitCode =
    0 // OK_0
  | 2 // NOTOK_2
  | 4 // RESTART_4

export type ExtendedStatus = {|
  standalone: Boolean,
  passphraseStreamCached: Boolean,
  tsecCached: Boolean,
  deviceSigKeyCached: Boolean,
  deviceEncKeyCached: Boolean,
  paperSigKeyCached: Boolean,
  paperEncKeyCached: Boolean,
  storedSecret: Boolean,
  secretPromptSkip: Boolean,
  device?: ?Device,
  deviceErr?: ?LoadDeviceErr,
  logDir: String,
  session?: ?SessionStatus,
  defaultUsername: String,
  provisionedUsernames?: ?Array<String>,
  Clients?: ?Array<ClientDetails>,
  platformInfo: PlatformInfo,
  defaultDeviceID: DeviceID,
|}

export type FSEditListRequest = {|
  folder: Folder,
  requestID: Int,
|}

export type FSErrorType =
    0 // ACCESS_DENIED_0
  | 1 // USER_NOT_FOUND_1
  | 2 // REVOKED_DATA_DETECTED_2
  | 3 // NOT_LOGGED_IN_3
  | 4 // TIMEOUT_4
  | 5 // REKEY_NEEDED_5
  | 6 // BAD_FOLDER_6
  | 7 // NOT_IMPLEMENTED_7
  | 8 // OLD_VERSION_8
  | 9 // OVER_QUOTA_9
  | 10 // NO_SIG_CHAIN_10
  | 11 // TOO_MANY_FOLDERS_11
  | 12 // EXDEV_NOT_SUPPORTED_12
  | 13 // DISK_LIMIT_REACHED_13
  | 14 // DISK_CACHE_ERROR_LOG_SEND_14

export type FSNotification = {|
  filename: String,
  status: String,
  statusCode: FSStatusCode,
  notificationType: FSNotificationType,
  errorType: FSErrorType,
  params: {[key: string]: String},
  writerUid: UID,
  localTime: Time,
  folderType: FolderType,
|}

export type FSNotificationType =
    0 // ENCRYPTING_0
  | 1 // DECRYPTING_1
  | 2 // SIGNING_2
  | 3 // VERIFYING_3
  | 4 // REKEYING_4
  | 5 // CONNECTION_5
  | 6 // MD_READ_SUCCESS_6
  | 7 // FILE_CREATED_7
  | 8 // FILE_MODIFIED_8
  | 9 // FILE_DELETED_9
  | 10 // FILE_RENAMED_10
  | 11 // INITIALIZED_11

export type FSPathSyncStatus = {|
  folderType: FolderType,
  path: String,
  syncingBytes: Int64,
  syncingOps: Int64,
  syncedBytes: Int64,
|}

export type FSStatusCode =
    0 // START_0
  | 1 // FINISH_1
  | 2 // ERROR_2

export type FSSyncStatus = {|
  totalSyncingBytes: Int64,
  totalSyncingOps: Int64,
  pathStatuses?: ?Array<FSPathSyncStatus>,
|}

export type FSSyncStatusRequest = {|
  requestID: Int,
|}

export type FavoriteFavoriteAddRpcParam = {|
  folder: Folder
|}

export type FavoriteFavoriteIgnoreRpcParam = {|
  folder: Folder
|}

export type FavoritesResult = {|
  favoriteFolders?: ?Array<Folder>,
  ignoredFolders?: ?Array<Folder>,
  newFolders?: ?Array<Folder>,
|}

export type Feature = {|
  allow: Boolean,
  defaultValue: Boolean,
  readonly: Boolean,
  label: String,
|}

export type File = {|
  path: String,
|}

export type FileContent = {|
  data: Bytes,
  progress: Progress,
|}

export type FileDescriptor = {|
  name: String,
  type: FileType,
|}

export type FileType =
    0 // UNKNOWN_0
  | 1 // DIRECTORY_1
  | 2 // FILE_2

export type FirstStepResult = {|
  valPlusTwo: Int,
|}

export type Folder = {|
  name: String,
  private: Boolean,
  notificationsOn: Boolean,
  created: Boolean,
  folderType: FolderType,
|}

export type FolderType =
    0 // UNKNOWN_0
  | 1 // PRIVATE_1
  | 2 // PUBLIC_2
  | 3 // TEAM_3

export type ForkType =
    0 // NONE_0
  | 1 // AUTO_1
  | 2 // WATCHDOG_2
  | 3 // LAUNCHD_3
  | 4 // SYSTEMD_4

export type FsListRpcParam = {|
  path: String
|}

export type FullName = String

export type FullNamePackage = {|
  version: FullNamePackageVersion,
  fullName: FullName,
  eldestSeqno: Seqno,
  cachedAt: Time,
|}

export type FullNamePackageVersion =
    0 // V0_0
  | 1 // V1_1

export type FuseMountInfo = {|
  path: String,
  fstype: String,
  output: String,
|}

export type FuseStatus = {|
  version: String,
  bundleVersion: String,
  kextID: String,
  path: String,
  kextStarted: Boolean,
  installStatus: InstallStatus,
  installAction: InstallAction,
  mountInfos?: ?Array<FuseMountInfo>,
  status: Status,
|}

export type GPGKey = {|
  algorithm: String,
  keyID: String,
  creation: String,
  expiration: String,
  identities?: ?Array<PGPIdentity>,
|}

export type GPGMethod =
    0 // GPG_NONE_0
  | 1 // GPG_IMPORT_1
  | 2 // GPG_SIGN_2

export type GUIEntryArg = {|
  windowTitle: String,
  prompt: String,
  username: String,
  submitLabel: String,
  cancelLabel: String,
  retryLabel: String,
  type: PassphraseType,
  features: GUIEntryFeatures,
|}

export type GUIEntryFeatures = {|
  showTyping: Feature,
|}

export type GetBlockRes = {|
  blockKey: String,
  buf: Bytes,
|}

export type GetCurrentStatusRes = {|
  configured: Boolean,
  registered: Boolean,
  loggedIn: Boolean,
  sessionIsValid: Boolean,
  user?: ?User,
|}

export type GetPassphraseRes = {|
  passphrase: String,
  storeSecret: Boolean,
|}

export type GetTLFCryptKeysRes = {|
  nameIDBreaks: CanonicalTLFNameAndIDWithBreaks,
  CryptKeys?: ?Array<CryptKey>,
|}

export type GitCreatePersonalRepoRpcParam = {|
  repoName: GitRepoName
|}

export type GitCreateTeamRepoRpcParam = {|
  repoName: GitRepoName,
  teamName: TeamName,
  notifyTeam: Boolean
|}

export type GitDeleteGitMetadataRpcParam = {|
  folder: Folder,
  repoName: GitRepoName
|}

export type GitDeletePersonalRepoRpcParam = {|
  repoName: GitRepoName
|}

export type GitDeleteTeamRepoRpcParam = {|
  repoName: GitRepoName,
  teamName: TeamName,
  notifyTeam: Boolean
|}

export type GitGetGitMetadataRpcParam = {|
  folder: Folder
|}

export type GitLocalMetadata = {|
  repoName: GitRepoName,
|}

export type GitLocalMetadataV1 = {|
  repoName: GitRepoName,
|}

export type GitLocalMetadataVersion =
    1 // V1_1

export type GitLocalMetadataVersioned =
    { version: 1, v1: ?GitLocalMetadataV1 }

export type GitPutGitMetadataRpcParam = {|
  folder: Folder,
  repoID: RepoID,
  metadata: GitLocalMetadata,
  notifyTeam: Boolean
|}

export type GitRepoInfo = {|
  folder: Folder,
  repoID: RepoID,
  localMetadata: GitLocalMetadata,
  serverMetadata: GitServerMetadata,
  repoUrl: String,
  globalUniqueID: String,
  canDelete: Boolean,
|}

export type GitRepoName = String

export type GitRepoResult =
    { state: 0, err: ?String }
  | { state: 1, ok: ?GitRepoInfo }

export type GitRepoResultState =
    0 // ERR_0
  | 1 // OK_1

export type GitServerMetadata = {|
  ctime: Time,
  mtime: Time,
  lastModifyingUsername: String,
  lastModifyingDeviceID: DeviceID,
  lastModifyingDeviceName: String,
|}

export type GpgUiSelectKeyAndPushOptionRpcParam = {|
  keys?: ?Array<GPGKey>
|}

export type GpgUiSelectKeyRpcParam = {|
  keys?: ?Array<GPGKey>
|}

export type GpgUiSignRpcParam = {|
  msg: Bytes,
  fingerprint: Bytes
|}

export type GregorDismissCategoryRpcParam = {|
  category: Gregor1.Category
|}

export type GregorInjectItemRpcParam = {|
  cat: String,
  body: String,
  dtime: Gregor1.TimeOrOffset
|}

export type GregorUIPushOutOfBandMessagesRpcParam = {|
  oobm?: ?Array<Gregor1.OutOfBandMessage>
|}

export type GregorUIPushStateRpcParam = {|
  state: Gregor1.State,
  reason: PushReason
|}

export type HasServerKeysRes = {|
  hasServerKeys: Boolean,
|}

export type HashMeta = Bytes

export type Hello2Res = {|
  encryptionKey: KID,
  sigPayload: HelloRes,
|}

export type HelloRes = String

export type HomeHomeGetScreenRpcParam = {|
  markViewed: Boolean
|}

export type HomeHomeSkipTodoTypeRpcParam = {|
  t: HomeScreenTodoType
|}

export type HomeScreen = {|
  lastViewed: Time,
  version: Int,
  items?: ?Array<HomeScreenItem>,
  followSuggestions?: ?Array<UserSummary>,
|}

export type HomeScreenItem = {|
  badged: Boolean,
  data: HomeScreenItemData,
|}

export type HomeScreenItemData =
    { t: 1, todo: ?HomeScreenTodo }
  | { t: 2, people: ?HomeScreenPeopleNotification }

export type HomeScreenItemID = String

export type HomeScreenItemType =
    1 // TODO_1
  | 2 // PEOPLE_2

export type HomeScreenPeopleNotification =
    { t: 0, followed: ?HomeScreenPeopleNotificationFollowed }
  | { t: 1, followedMulti: ?HomeScreenPeopleNotificationFollowedMulti }

export type HomeScreenPeopleNotificationFollowed = {|
  followTime: Time,
  user: UserSummary,
|}

export type HomeScreenPeopleNotificationFollowedMulti = {|
  followers?: ?Array<HomeScreenPeopleNotificationFollowed>,
  numOthers: Int,
|}

export type HomeScreenPeopleNotificationType =
    0 // FOLLOWED_0
  | 1 // FOLLOWED_MULTI_1

export type HomeScreenTodo =
    { t: any }

export type HomeScreenTodoType =
    0 // NONE_0
  | 1 // BIO_1
  | 2 // PROOF_2
  | 3 // DEVICE_3
  | 4 // FOLLOW_4
  | 5 // CHAT_5
  | 6 // PAPERKEY_6
  | 7 // TEAM_7
  | 8 // FOLDER_8
  | 9 // GIT_REPO_9
  | 10 // TEAM_SHOWCASE_10

export type Identify2Res = {|
  upk: UserPlusKeys,
  identifiedAt: Time,
  trackBreaks?: ?IdentifyTrackBreaks,
|}

export type IdentifyIdentify2RpcParam = {|
  uid: UID,
  userAssertion: String,
  reason: IdentifyReason,
  useDelegateUI?: Boolean,
  alwaysBlock?: Boolean,
  noErrorOnTrackFailure?: Boolean,
  forceRemoteCheck?: Boolean,
  needProofSet?: Boolean,
  allowEmptySelfID?: Boolean,
  noSkipSelf?: Boolean,
  canSuppressUI?: Boolean,
  identifyBehavior?: TLFIdentifyBehavior,
  forceDisplay?: Boolean
|}

export type IdentifyIdentifyLiteRpcParam = {|
  id: UserOrTeamID,
  assertion: String,
  reason: IdentifyReason,
  useDelegateUI?: Boolean,
  alwaysBlock?: Boolean,
  noErrorOnTrackFailure?: Boolean,
  forceRemoteCheck?: Boolean,
  needProofSet?: Boolean,
  allowEmptySelfID?: Boolean,
  noSkipSelf?: Boolean,
  canSuppressUI?: Boolean,
  identifyBehavior?: TLFIdentifyBehavior,
  forceDisplay?: Boolean
|}

export type IdentifyKey = {|
  pgpFingerprint: Bytes,
  KID: KID,
  trackDiff?: ?TrackDiff,
  breaksTracking: Boolean,
|}

export type IdentifyLiteRes = {|
  ul: UserOrTeamLite,
  trackBreaks?: ?IdentifyTrackBreaks,
|}

export type IdentifyOutcome = {|
  username: String,
  status?: ?Status,
  warnings?: ?Array<String>,
  trackUsed?: ?TrackSummary,
  trackStatus: TrackStatus,
  numTrackFailures: Int,
  numTrackChanges: Int,
  numProofFailures: Int,
  numRevoked: Int,
  numProofSuccesses: Int,
  revoked?: ?Array<TrackDiff>,
  trackOptions: TrackOptions,
  forPGPPull: Boolean,
  reason: IdentifyReason,
|}

export type IdentifyProofBreak = {|
  remoteProof: RemoteProof,
  lcr: LinkCheckResult,
|}

export type IdentifyReason = {|
  type: IdentifyReasonType,
  reason: String,
  resource: String,
|}

export type IdentifyReasonType =
    0 // NONE_0
  | 1 // ID_1
  | 2 // TRACK_2
  | 3 // ENCRYPT_3
  | 4 // DECRYPT_4
  | 5 // VERIFY_5
  | 6 // RESOURCE_6
  | 7 // BACKGROUND_7

export type IdentifyResolve3RpcParam = {|
  assertion: String
|}

export type IdentifyResolveIdentifyImplicitTeamRpcParam = {|
  assertions: String,
  suffix: String,
  isPublic: Boolean,
  doIdentifies: Boolean,
  create: Boolean,
  reason: IdentifyReason,
  identifyBehavior: TLFIdentifyBehavior
|}

export type IdentifyRow = {|
  rowId: Int,
  proof: RemoteProof,
  trackDiff?: ?TrackDiff,
|}

export type IdentifyTrackBreaks = {|
  keys?: ?Array<IdentifyKey>,
  proofs?: ?Array<IdentifyProofBreak>,
|}

export type IdentifyUiConfirmRpcParam = {|
  outcome: IdentifyOutcome
|}

export type IdentifyUiDismissRpcParam = {|
  username: String,
  reason: DismissReason
|}

export type IdentifyUiDisplayCryptocurrencyRpcParam = {|
  c: Cryptocurrency
|}

export type IdentifyUiDisplayKeyRpcParam = {|
  key: IdentifyKey
|}

export type IdentifyUiDisplayTLFCreateWithInviteRpcParam = {|
  folderName: String,
  isPrivate: Boolean,
  assertion: String,
  socialAssertion: SocialAssertion,
  inviteLink: String,
  throttled: Boolean
|}

export type IdentifyUiDisplayTrackStatementRpcParam = {|
  stmt: String
|}

export type IdentifyUiDisplayUserCardRpcParam = {|
  card: UserCard
|}

export type IdentifyUiFinishSocialProofCheckRpcParam = {|
  rp: RemoteProof,
  lcr: LinkCheckResult
|}

export type IdentifyUiFinishWebProofCheckRpcParam = {|
  rp: RemoteProof,
  lcr: LinkCheckResult
|}

export type IdentifyUiLaunchNetworkChecksRpcParam = {|
  identity: Identity,
  user: User
|}

export type IdentifyUiReportLastTrackRpcParam = {|
  track?: ?TrackSummary
|}

export type IdentifyUiReportTrackTokenRpcParam = {|
  trackToken: TrackToken
|}

export type IdentifyUiStartRpcParam = {|
  username: String,
  reason: IdentifyReason,
  forceDisplay?: Boolean
|}

export type Identity = {|
  status?: ?Status,
  whenLastTracked: Time,
  proofs?: ?Array<IdentifyRow>,
  cryptocurrency?: ?Array<Cryptocurrency>,
  revoked?: ?Array<TrackDiff>,
  revokedDetails?: ?Array<RevokedProof>,
  breaksTracking: Boolean,
|}

export type ImplicitRole = {|
  role: TeamRole,
  ancestor: TeamID,
|}

export type ImplicitTeamConflictInfo = {|
  generation: Int,
  time: Time,
|}

export type ImplicitTeamDisplayName = {|
  isPublic: Boolean,
  writers: ImplicitTeamUserSet,
  readers: ImplicitTeamUserSet,
  conflictInfo?: ?ImplicitTeamConflictInfo,
|}

export type ImplicitTeamUserSet = {|
  keybaseUsers?: ?Array<String>,
  unresolvedUsers?: ?Array<SocialAssertion>,
|}

export type InstallAction =
    0 // UNKNOWN_0
  | 1 // NONE_1
  | 2 // UPGRADE_2
  | 3 // REINSTALL_3
  | 4 // INSTALL_4

export type InstallFuseStatusRpcParam = {|
  bundleVersion: String
|}

export type InstallResult = {|
  componentResults?: ?Array<ComponentResult>,
  status: Status,
  fatal: Boolean,
|}

export type InstallStatus =
    0 // UNKNOWN_0
  | 1 // ERROR_1
  | 2 // NOT_INSTALLED_2
  | 4 // INSTALLED_4

export type InterestingPerson = {|
  uid: UID,
  username: String,
|}

export type KBFSGitCreateRepoRpcParam = {|
  folder: Folder,
  name: GitRepoName
|}

export type KBFSGitDeleteRepoRpcParam = {|
  folder: Folder,
  name: GitRepoName
|}

export type KID = String

export type KbfsFSEditListRpcParam = {|
  edits?: ?Array<FSNotification>,
  requestID: Int
|}

export type KbfsFSEventRpcParam = {|
  event: FSNotification
|}

export type KbfsFSSyncEventRpcParam = {|
  event: FSPathSyncStatus
|}

export type KbfsFSSyncStatusRpcParam = {|
  status: FSSyncStatus,
  requestID: Int
|}

export type KbfsMountSetCurrentMountDirRpcParam = {|
  dir: String
|}

export type Kex2Provisionee2DidCounterSign2RpcParam = {|
  sig: Bytes,
  ppsEncrypted: String,
  pukBox?: ?PerUserKeyBox
|}

export type Kex2Provisionee2Hello2RpcParam = {|
  uid: UID,
  token: SessionToken,
  csrf: CsrfToken,
  sigBody: String
|}

export type Kex2ProvisioneeDidCounterSignRpcParam = {|
  sig: Bytes
|}

export type Kex2ProvisioneeHelloRpcParam = {|
  uid: UID,
  token: SessionToken,
  csrf: CsrfToken,
  pps: PassphraseStream,
  sigBody: String
|}

export type KeyBundle = {|
  version: Int,
  bundle: Bytes,
|}

export type KeyBundleResponse = {|
  WriterBundle: KeyBundle,
  ReaderBundle: KeyBundle,
|}

export type KeyHalf = {|
  user: UID,
  deviceKID: KID,
  key: Bytes,
|}

export type KeyInfo = {|
  fingerprint: String,
  key: String,
  desc: String,
|}

export type KeyType =
    0 // NONE_0
  | 1 // NACL_1
  | 2 // PGP_2

export type KeybaseTime = {|
  unix: Time,
  chain: Seqno,
|}

export type LeaseID = String

export type LinkCheckResult = {|
  proofId: Int,
  proofResult: ProofResult,
  snoozedResult: ProofResult,
  torWarning: Boolean,
  tmpTrackExpireTime: Time,
  cached?: ?CheckResult,
  diff?: ?TrackDiff,
  remoteDiff?: ?TrackDiff,
  hint?: ?SigHint,
  breaksTracking: Boolean,
|}

export type LinkID = String

export type ListArgs = {|
  opID: OpID,
  path: Path,
|}

export type ListResult = {|
  files?: ?Array<File>,
|}

export type LoadDeviceErr = {|
  where: String,
  desc: String,
|}

export type LoadTeamArg = {|
  ID: TeamID,
  name: String,
  public: Boolean,
  needAdmin: Boolean,
  refreshers: TeamRefreshers,
  forceFullReload: Boolean,
  forceRepoll: Boolean,
  staleOK: Boolean,
|}

export type LockContext = {|
  requireLockID: LockID,
  releaseAfterSuccess: Boolean,
|}

export type LockID = Long

export type LogLevel =
    0 // NONE_0
  | 1 // DEBUG_1
  | 2 // INFO_2
  | 3 // NOTICE_3
  | 4 // WARN_4
  | 5 // ERROR_5
  | 6 // CRITICAL_6
  | 7 // FATAL_7

export type LogRegisterLoggerRpcParam = {|
  name: String,
  level: LogLevel
|}

export type LogUiLogRpcParam = {|
  level: LogLevel,
  text: Text
|}

export type LoginClearStoredSecretRpcParam = {|
  username: String
|}

export type LoginDeprovisionRpcParam = {|
  username: String,
  doRevoke: Boolean
|}

export type LoginLoginProvisionedDeviceRpcParam = {|
  username: String,
  noPassphrasePrompt: Boolean
|}

export type LoginLoginRpcParam = {|
  deviceType: String,
  usernameOrEmail: String,
  clientType: ClientType
|}

export type LoginPaperKeySubmitRpcParam = {|
  paperPhrase: String
|}

export type LoginPgpProvisionRpcParam = {|
  username: String,
  passphrase: String,
  deviceName: String
|}

export type LoginRecoverAccountFromEmailAddressRpcParam = {|
  email: String
|}

export type LoginUiDisplayPaperKeyPhraseRpcParam = {|
  phrase: String
|}

export type LoginUiDisplayPrimaryPaperKeyRpcParam = {|
  phrase: String
|}

export type LoginUiPromptRevokePaperKeysRpcParam = {|
  device: Device,
  index: Int
|}

export type LoginUnlockWithPassphraseRpcParam = {|
  passphrase: String
|}

export type LookupImplicitTeamRes = {|
  teamID: TeamID,
  name: TeamName,
  displayName: ImplicitTeamDisplayName,
|}

export type MDBlock = {|
  version: Int,
  timestamp: Time,
  block: Bytes,
|}

export type MDGetBehavior =
    0 // GET_OR_CREATE_CLASSIC_TLF_0
  | 1 // GET_CLASSIC_TLF_NO_CREATE_1

export type MDPriority = Int

export type MaskB64 = Bytes

export type MemberInfo = {|
  userID: UID,
  teamID: TeamID,
  fqName: String,
  isImplicitTeam: Boolean,
  role: TeamRole,
  implicit?: ?ImplicitRole,
|}

export type MerkleGetCurrentMerkleRootRpcParam = {|
  freshnessMsec: Int
|}

export type MerkleRoot = {|
  version: Int,
  root: Bytes,
|}

export type MerkleRootAndTime = {|
  root: MerkleRootV2,
  updateTime: Time,
  fetchTime: Time,
|}

export type MerkleRootV2 = {|
  seqno: Seqno,
  hashMeta: HashMeta,
|}

export type MerkleTreeID =
    0 // MASTER_0
  | 1 // KBFS_PUBLIC_1
  | 2 // KBFS_PRIVATE_2
  | 3 // KBFS_PRIVATETEAM_3

export type MerkleTreeLocation = {|
  leaf: UserOrTeamID,
  loc: SigChainLocation,
|}

export type MetadataAuthenticateRpcParam = {|
  signature: String
|}

export type MetadataDeleteKeyRpcParam = {|
  uid: UID,
  deviceKID: KID,
  keyHalfID: Bytes,
  logTags: {[key: string]: String}
|}

export type MetadataGetFolderHandleRpcParam = {|
  folderID: String,
  signature: String,
  challenge: String
|}

export type MetadataGetFoldersForRekeyRpcParam = {|
  deviceKID: KID
|}

export type MetadataGetKeyBundlesRpcParam = {|
  folderID: String,
  writerBundleID: String,
  readerBundleID: String
|}

export type MetadataGetKeyRpcParam = {|
  keyHalfID: Bytes,
  deviceKID: String,
  logTags: {[key: string]: String}
|}

export type MetadataGetLatestFolderHandleRpcParam = {|
  folderID: String
|}

export type MetadataGetMerkleNodeRpcParam = {|
  hash: String
|}

export type MetadataGetMerkleRootLatestRpcParam = {|
  treeID: MerkleTreeID
|}

export type MetadataGetMerkleRootRpcParam = {|
  treeID: MerkleTreeID,
  seqNo: Long
|}

export type MetadataGetMerkleRootSinceRpcParam = {|
  treeID: MerkleTreeID,
  when: Time
|}

export type MetadataGetMetadataRpcParam = {|
  folderID: String,
  folderHandle: Bytes,
  branchID: String,
  unmerged: Boolean,
  startRevision: Long,
  stopRevision: Long,
  logTags: {[key: string]: String},
  lockBeforeGet?: ?LockID,
  getBehavior: MDGetBehavior
|}

export type MetadataLockRpcParam = {|
  folderID: String,
  lockID: LockID
|}

export type MetadataPruneBranchRpcParam = {|
  folderID: String,
  branchID: String,
  logTags: {[key: string]: String}
|}

export type MetadataPutKeysRpcParam = {|
  keyHalves?: ?Array<KeyHalf>,
  logTags: {[key: string]: String}
|}

export type MetadataPutMetadataRpcParam = {|
  mdBlock: MDBlock,
  readerKeyBundle: KeyBundle,
  writerKeyBundle: KeyBundle,
  logTags: {[key: string]: String},
  lockContext?: ?LockContext,
  priority: MDPriority
|}

export type MetadataRegisterForUpdatesRpcParam = {|
  folderID: String,
  currRevision: Long,
  logTags: {[key: string]: String}
|}

export type MetadataReleaseLockRpcParam = {|
  folderID: String,
  lockID: LockID
|}

export type MetadataResponse = {|
  folderID: String,
  mdBlocks?: ?Array<MDBlock>,
|}

export type MetadataTruncateLockRpcParam = {|
  folderID: String
|}

export type MetadataTruncateUnlockRpcParam = {|
  folderID: String
|}

export type MetadataUpdateFolderNeedsRekeyRpcParam = {|
  folderID: String,
  revision: Long
|}

export type MetadataUpdateFoldersNeedRekeyRpcParam = {|
  requests?: ?Array<RekeyRequest>
|}

export type MetadataUpdateMetadataUpdateRpcParam = {|
  folderID: String,
  revision: Long
|}

export type MoveArgs = {|
  opID: OpID,
  src: Path,
  dest: Path,
|}

export type NaclDHKeyPrivate = any

export type NaclDHKeyPublic = any

export type NaclSigningKeyPrivate = any

export type NaclSigningKeyPublic = any

export type NotificationChannels = {|
  session: Boolean,
  users: Boolean,
  kbfs: Boolean,
  tracking: Boolean,
  favorites: Boolean,
  paperkeys: Boolean,
  keyfamily: Boolean,
  service: Boolean,
  app: Boolean,
  chat: Boolean,
  pgp: Boolean,
  kbfsrequest: Boolean,
  badges: Boolean,
  reachability: Boolean,
  team: Boolean,
|}

export type NotifyBadgesBadgeStateRpcParam = {|
  badgeState: BadgeState
|}

export type NotifyCtlSetNotificationsRpcParam = {|
  channels: NotificationChannels
|}

export type NotifyFSFSActivityRpcParam = {|
  notification: FSNotification
|}

export type NotifyFSFSEditListResponseRpcParam = {|
  edits?: ?Array<FSNotification>,
  requestID: Int
|}

export type NotifyFSFSSyncActivityRpcParam = {|
  status: FSPathSyncStatus
|}

export type NotifyFSFSSyncStatusResponseRpcParam = {|
  status: FSSyncStatus,
  requestID: Int
|}

export type NotifyFSRequestFSEditListRequestRpcParam = {|
  req: FSEditListRequest
|}

export type NotifyFSRequestFSSyncStatusRequestRpcParam = {|
  req: FSSyncStatusRequest
|}

export type NotifyFavoritesFavoritesChangedRpcParam = {|
  uid: UID
|}

export type NotifyKeyfamilyKeyfamilyChangedRpcParam = {|
  uid: UID
|}

export type NotifyPaperKeyPaperKeyCachedRpcParam = {|
  uid: UID,
  encKID: KID,
  sigKID: KID
|}

export type NotifySessionClientOutOfDateRpcParam = {|
  upgradeTo: String,
  upgradeURI: String,
  upgradeMsg: String
|}

export type NotifySessionLoggedInRpcParam = {|
  username: String
|}

export type NotifyTeamTeamChangedRpcParam = {|
  teamID: TeamID,
  teamName: String,
  latestSeqno: Seqno,
  changes: TeamChangeSet
|}

export type NotifyTeamTeamDeletedRpcParam = {|
  teamID: TeamID
|}

export type NotifyTeamTeamExitRpcParam = {|
  teamID: TeamID
|}

export type NotifyTrackingTrackingChangedRpcParam = {|
  uid: UID,
  username: String,
  isTracking: Boolean
|}

export type NotifyUsersUserChangedRpcParam = {|
  uid: UID
|}

export type OpDescription =
    { asyncOp: 0, list: ?ListArgs }
  | { asyncOp: 1, listRecursive: ?ListArgs }
  | { asyncOp: 2, read: ?ReadArgs }
  | { asyncOp: 3, write: ?WriteArgs }
  | { asyncOp: 4, copy: ?CopyArgs }
  | { asyncOp: 5, move: ?MoveArgs }
  | { asyncOp: 6, remove: ?RemoveArgs }

export type OpID = any

export type OpenFlags =
    0 // READ_0
  | 1 // REPLACE_1
  | 2 // EXISTING_2
  | 4 // WRITE_4
  | 8 // APPEND_8
  | 16 // DIRECTORY_16

export type OutOfDateInfo = {|
  upgradeTo: String,
  upgradeURI: String,
  customMessage: String,
  criticalClockSkew: Long,
|}

export type Outcome =
    0 // NONE_0
  | 1 // FIXED_1
  | 2 // IGNORED_2

export type PGPCreateUids = {|
  useDefault: Boolean,
  ids?: ?Array<PGPIdentity>,
|}

export type PGPDecryptOptions = {|
  assertSigned: Boolean,
  signedBy: String,
|}

export type PGPEncryptOptions = {|
  recipients?: ?Array<String>,
  noSign: Boolean,
  noSelf: Boolean,
  binaryOut: Boolean,
  keyQuery: String,
|}

export type PGPFingerprint = any

export type PGPIdentity = {|
  username: String,
  comment: String,
  email: String,
|}

export type PGPPurgeRes = {|
  filenames?: ?Array<String>,
|}

export type PGPQuery = {|
  secret: Boolean,
  query: String,
  exactMatch: Boolean,
|}

export type PGPSigVerification = {|
  isSigned: Boolean,
  verified: Boolean,
  signer: User,
  signKey: PublicKey,
|}

export type PGPSignOptions = {|
  keyQuery: String,
  mode: SignMode,
  binaryIn: Boolean,
  binaryOut: Boolean,
|}

export type PGPVerifyOptions = {|
  signedBy: String,
  signature: Bytes,
|}

export type PaperprovisionPaperProvisionRpcParam = {|
  username: String,
  deviceName: String,
  paperKey: String
|}

export type PassphraseStream = {|
  passphraseStream: Bytes,
  generation: Int,
|}

export type PassphraseType =
    0 // NONE_0
  | 1 // PAPER_KEY_1
  | 2 // PASS_PHRASE_2
  | 3 // VERIFY_PASS_PHRASE_3

export type Path =
    { PathType: 0, local: ?String }
  | { PathType: 1, kbfs: ?String }

export type PathType =
    0 // LOCAL_0
  | 1 // KBFS_1

export type PerTeamKey = {|
  gen: PerTeamKeyGeneration,
  seqno: Seqno,
  sigKID: KID,
  encKID: KID,
|}

export type PerTeamKeyGeneration = Int

export type PerTeamKeySeed = any

export type PerTeamKeySeedItem = {|
  seed: PerTeamKeySeed,
  generation: PerTeamKeyGeneration,
  seqno: Seqno,
|}

export type PerUserKey = {|
  gen: Int,
  seqno: Seqno,
  sigKID: KID,
  encKID: KID,
  signedByKID: KID,
|}

export type PerUserKeyBox = {|
  generation: PerUserKeyGeneration,
  box: String,
  receiverKID: KID,
|}

export type PerUserKeyGeneration = Int

export type PgpPgpDecryptRpcParam = {|
  source: Stream,
  sink: Stream,
  opts: PGPDecryptOptions
|}

export type PgpPgpEncryptRpcParam = {|
  source: Stream,
  sink: Stream,
  opts: PGPEncryptOptions
|}

export type PgpPgpExportByFingerprintRpcParam = {|
  options: PGPQuery,
  encrypted: Boolean
|}

export type PgpPgpExportByKIDRpcParam = {|
  options: PGPQuery,
  encrypted: Boolean
|}

export type PgpPgpExportRpcParam = {|
  options: PGPQuery,
  encrypted: Boolean
|}

export type PgpPgpImportRpcParam = {|
  key: Bytes,
  pushSecret: Boolean
|}

export type PgpPgpKeyGenDefaultRpcParam = {|
  createUids: PGPCreateUids
|}

export type PgpPgpKeyGenRpcParam = {|
  primaryBits: Int,
  subkeyBits: Int,
  createUids: PGPCreateUids,
  allowMulti: Boolean,
  doExport: Boolean,
  exportEncrypted: Boolean,
  pushSecret: Boolean
|}

export type PgpPgpPullRpcParam = {|
  userAsserts?: ?Array<String>
|}

export type PgpPgpPurgeRpcParam = {|
  doPurge: Boolean
|}

export type PgpPgpSelectRpcParam = {|
  fingerprintQuery: String,
  allowMulti: Boolean,
  skipImport: Boolean,
  onlyImport: Boolean
|}

export type PgpPgpSignRpcParam = {|
  source: Stream,
  sink: Stream,
  opts: PGPSignOptions
|}

export type PgpPgpUpdateRpcParam = {|
  all: Boolean,
  fingerprints?: ?Array<String>
|}

export type PgpPgpVerifyRpcParam = {|
  source: Stream,
  opts: PGPVerifyOptions
|}

export type PgpUiKeyGeneratedRpcParam = {|
  kid: KID,
  key: KeyInfo
|}

export type PgpUiOutputSignatureSuccessNonKeybaseRpcParam = {|
  keyID: String,
  signedAt: Time
|}

export type PgpUiOutputSignatureSuccessRpcParam = {|
  fingerprint: String,
  username: String,
  signedAt: Time
|}

export type PingResponse = {|
  timestamp: Time,
|}

export type PlatformInfo = {|
  os: String,
  osVersion: String,
  arch: String,
  goVersion: String,
|}

export type ProblemSet = {|
  user: User,
  kid: KID,
  tlfs?: ?Array<ProblemTLF>,
|}

export type ProblemSetDevices = {|
  problemSet: ProblemSet,
  devices?: ?Array<Device>,
|}

export type ProblemTLF = {|
  tlf: TLF,
  score: Int,
  solution_kids?: ?Array<KID>,
|}

export type Process = {|
  pid: String,
  command: String,
  fileDescriptors?: ?Array<FileDescriptor>,
|}

export type Progress = Int

export type PromptDefault =
    0 // NONE_0
  | 1 // YES_1
  | 2 // NO_2

export type PromptOverwriteType =
    0 // SOCIAL_0
  | 1 // SITE_1

export type ProofResult = {|
  state: ProofState,
  status: ProofStatus,
  desc: String,
|}

export type ProofState =
    0 // NONE_0
  | 1 // OK_1
  | 2 // TEMP_FAILURE_2
  | 3 // PERM_FAILURE_3
  | 4 // LOOKING_4
  | 5 // SUPERSEDED_5
  | 6 // POSTED_6
  | 7 // REVOKED_7
  | 8 // DELETED_8
  | 9 // UNKNOWN_TYPE_9
  | 10 // SIG_HINT_MISSING_10
  | 11 // UNCHECKED_11

export type ProofStatus =
    0 // NONE_0
  | 1 // OK_1
  | 2 // LOCAL_2
  | 3 // FOUND_3
  | 100 // BASE_ERROR_100
  | 101 // HOST_UNREACHABLE_101
  | 103 // PERMISSION_DENIED_103
  | 106 // FAILED_PARSE_106
  | 107 // DNS_ERROR_107
  | 108 // AUTH_FAILED_108
  | 129 // HTTP_429_129
  | 150 // HTTP_500_150
  | 160 // TIMEOUT_160
  | 170 // INTERNAL_ERROR_170
  | 171 // UNCHECKED_171
  | 172 // MISSING_PVL_172
  | 200 // BASE_HARD_ERROR_200
  | 201 // NOT_FOUND_201
  | 202 // CONTENT_FAILURE_202
  | 203 // BAD_USERNAME_203
  | 204 // BAD_REMOTE_ID_204
  | 205 // TEXT_NOT_FOUND_205
  | 206 // BAD_ARGS_206
  | 207 // CONTENT_MISSING_207
  | 208 // TITLE_NOT_FOUND_208
  | 209 // SERVICE_ERROR_209
  | 210 // TOR_SKIPPED_210
  | 211 // TOR_INCOMPATIBLE_211
  | 230 // HTTP_300_230
  | 240 // HTTP_400_240
  | 260 // HTTP_OTHER_260
  | 270 // EMPTY_JSON_270
  | 301 // DELETED_301
  | 302 // SERVICE_DEAD_302
  | 303 // BAD_SIGNATURE_303
  | 304 // BAD_API_URL_304
  | 305 // UNKNOWN_TYPE_305
  | 306 // NO_HINT_306
  | 307 // BAD_HINT_TEXT_307
  | 308 // INVALID_PVL_308

export type ProofType =
    0 // NONE_0
  | 1 // KEYBASE_1
  | 2 // TWITTER_2
  | 3 // GITHUB_3
  | 4 // REDDIT_4
  | 5 // COINBASE_5
  | 6 // HACKERNEWS_6
  | 8 // FACEBOOK_8
  | 1000 // GENERIC_WEB_SITE_1000
  | 1001 // DNS_1001
  | 1002 // PGP_1002
  | 100001 // ROOTER_100001

export type Proofs = {|
  social?: ?Array<TrackProof>,
  web?: ?Array<WebProof>,
  publicKeys?: ?Array<PublicKey>,
|}

export type ProveCheckProofRpcParam = {|
  sigID: SigID
|}

export type ProveStartProofRpcParam = {|
  service: String,
  username: String,
  force: Boolean,
  promptPosted: Boolean,
  auto: Boolean
|}

export type ProveUiDisplayRecheckWarningRpcParam = {|
  text: Text
|}

export type ProveUiOkToCheckRpcParam = {|
  name: String,
  attempt: Int
|}

export type ProveUiOutputInstructionsRpcParam = {|
  instructions: Text,
  proof: String
|}

export type ProveUiOutputPrechecksRpcParam = {|
  text: Text
|}

export type ProveUiPreProofWarningRpcParam = {|
  text: Text
|}

export type ProveUiPromptOverwriteRpcParam = {|
  account: String,
  typ: PromptOverwriteType
|}

export type ProveUiPromptUsernameRpcParam = {|
  prompt: String,
  prevError?: ?Status
|}

export type ProvisionMethod =
    0 // DEVICE_0
  | 1 // PAPER_KEY_1
  | 2 // PASSPHRASE_2
  | 3 // GPG_IMPORT_3
  | 4 // GPG_SIGN_4

export type ProvisionUiChooseDeviceRpcParam = {|
  devices?: ?Array<Device>,
  canSelectNoDevice: Boolean
|}

export type ProvisionUiChooseDeviceTypeRpcParam = {|
  kind: ChooseType
|}

export type ProvisionUiChooseGPGMethodRpcParam = {|
  keys?: ?Array<GPGKey>
|}

export type ProvisionUiChooseProvisioningMethodRpcParam = {|
  gpgOption: Boolean
|}

export type ProvisionUiDisplayAndPromptSecretRpcParam = {|
  secret: Bytes,
  phrase: String,
  otherDeviceType: DeviceType,
  previousErr: String
|}

export type ProvisionUiPromptNewDeviceNameRpcParam = {|
  existingDevices?: ?Array<String>,
  errorMessage: String
|}

export type ProvisionUiProvisioneeSuccessRpcParam = {|
  username: String,
  deviceName: String
|}

export type ProvisionUiProvisionerSuccessRpcParam = {|
  deviceName: String,
  deviceType: String
|}

export type ProvisionUiSwitchToGPGSignOKRpcParam = {|
  key: GPGKey,
  importError: String
|}

export type PublicKey = {|
  KID: KID,
  PGPFingerprint: String,
  PGPIdentities?: ?Array<PGPIdentity>,
  isSibkey: Boolean,
  isEldest: Boolean,
  parentID: String,
  deviceID: DeviceID,
  deviceDescription: String,
  deviceType: String,
  cTime: Time,
  eTime: Time,
  isRevoked: Boolean,
|}

export type PublicKeyV2 =
    { keyType: 1, nacl: ?PublicKeyV2NaCl }
  | { keyType: 2, pgp: ?PublicKeyV2PGPSummary }
  | { keyType: any }

export type PublicKeyV2Base = {|
  kid: KID,
  isSibkey: Boolean,
  isEldest: Boolean,
  cTime: Time,
  eTime: Time,
  provisioning: SignatureMetadata,
  revocation?: ?SignatureMetadata,
|}

export type PublicKeyV2NaCl = {|
  base: PublicKeyV2Base,
  parent?: ?KID,
  deviceID: DeviceID,
  deviceDescription: String,
  deviceType: String,
|}

export type PublicKeyV2PGPSummary = {|
  base: PublicKeyV2Base,
  fingerprint: PGPFingerprint,
  identities?: ?Array<PGPIdentity>,
|}

export type PushReason =
    0 // NONE_0
  | 1 // RECONNECTED_1
  | 2 // NEW_DATA_2

export type QuotaVerifySessionRpcParam = {|
  session: String
|}

export type Reachability = {|
  reachable: Reachable,
|}

export type ReachabilityReachabilityChangedRpcParam = {|
  reachability: Reachability
|}

export type Reachable =
    0 // UNKNOWN_0
  | 1 // YES_1
  | 2 // NO_2

export type ReadArgs = {|
  opID: OpID,
  path: Path,
  offset: Long,
  size: Int,
|}

export type ReaderKeyMask = {|
  application: TeamApplication,
  generation: PerTeamKeyGeneration,
  mask: MaskB64,
|}

export type RegisterAddressRes = {|
  type: String,
  family: String,
|}

export type RekeyEvent = {|
  eventType: RekeyEventType,
  interruptType: Int,
|}

export type RekeyEventType =
    0 // NONE_0
  | 1 // NOT_LOGGED_IN_1
  | 2 // API_ERROR_2
  | 3 // NO_PROBLEMS_3
  | 4 // LOAD_ME_ERROR_4
  | 5 // CURRENT_DEVICE_CAN_REKEY_5
  | 6 // DEVICE_LOAD_ERROR_6
  | 7 // HARASS_7
  | 8 // NO_GREGOR_MESSAGES_8

export type RekeyGetRevokeWarningRpcParam = {|
  actingDevice: DeviceID,
  targetDevice: DeviceID
|}

export type RekeyRekeySyncRpcParam = {|
  force: Boolean
|}

export type RekeyRequest = {|
  folderID: String,
  revision: Long,
|}

export type RekeyUIRefreshRpcParam = {|
  problemSetDevices: ProblemSetDevices
|}

export type RekeyUIRekeySendEventRpcParam = {|
  event: RekeyEvent
|}

export type RemoteProof = {|
  proofType: ProofType,
  key: String,
  value: String,
  displayMarkup: String,
  sigID: SigID,
  mTime: Time,
|}

export type RemoteTrack = {|
  username: String,
  uid: UID,
  linkID: LinkID,
|}

export type RemoveArgs = {|
  opID: OpID,
  path: Path,
|}

export type RepoID = String

export type ResolveIdentifyImplicitTeamRes = {|
  displayName: String,
  teamID: TeamID,
  writers?: ?Array<UserVersion>,
  trackBreaks: {[key: string]: IdentifyTrackBreaks},
|}

export type RevokeRevokeDeviceRpcParam = {|
  deviceID: DeviceID,
  forceSelf: Boolean,
  forceLast: Boolean
|}

export type RevokeRevokeKeyRpcParam = {|
  keyID: KID
|}

export type RevokeRevokeSigsRpcParam = {|
  sigIDQueries?: ?Array<String>
|}

export type RevokeWarning = {|
  endangeredTLFs?: ?Array<TLF>,
|}

export type RevokedKey = {|
  key: PublicKey,
  time: KeybaseTime,
  by: KID,
|}

export type RevokedProof = {|
  proof: RemoteProof,
  diff: TrackDiff,
|}

export type SaltpackDecryptOptions = {|
  interactive: Boolean,
  forceRemoteCheck: Boolean,
  usePaperKey: Boolean,
|}

export type SaltpackEncryptOptions = {|
  recipients?: ?Array<String>,
  anonymousSender: Boolean,
  encryptionOnlyMode: Boolean,
  noSelfEncrypt: Boolean,
  binary: Boolean,
  saltpackVersion: Int,
|}

export type SaltpackEncryptedMessageInfo = {|
  devices?: ?Array<Device>,
  numAnonReceivers: Int,
  receiverIsAnon: Boolean,
  sender: SaltpackSender,
|}

export type SaltpackSaltpackDecryptRpcParam = {|
  source: Stream,
  sink: Stream,
  opts: SaltpackDecryptOptions
|}

export type SaltpackSaltpackEncryptRpcParam = {|
  source: Stream,
  sink: Stream,
  opts: SaltpackEncryptOptions
|}

export type SaltpackSaltpackSignRpcParam = {|
  source: Stream,
  sink: Stream,
  opts: SaltpackSignOptions
|}

export type SaltpackSaltpackVerifyRpcParam = {|
  source: Stream,
  sink: Stream,
  opts: SaltpackVerifyOptions
|}

export type SaltpackSender = {|
  uid: UID,
  username: String,
  senderType: SaltpackSenderType,
|}

export type SaltpackSenderType =
    0 // NOT_TRACKED_0
  | 1 // UNKNOWN_1
  | 2 // ANONYMOUS_2
  | 3 // TRACKING_BROKE_3
  | 4 // TRACKING_OK_4
  | 5 // SELF_5
  | 6 // REVOKED_6
  | 7 // EXPIRED_7

export type SaltpackSignOptions = {|
  detached: Boolean,
  binary: Boolean,
  saltpackVersion: Int,
|}

export type SaltpackUiSaltpackPromptForDecryptRpcParam = {|
  sender: SaltpackSender,
  usedDelegateUI: Boolean
|}

export type SaltpackUiSaltpackVerifyBadSenderRpcParam = {|
  signingKID: KID,
  sender: SaltpackSender
|}

export type SaltpackUiSaltpackVerifySuccessRpcParam = {|
  signingKID: KID,
  sender: SaltpackSender
|}

export type SaltpackVerifyOptions = {|
  signedBy: String,
  signature: Bytes,
|}

export type ScanProofsScanProofsRpcParam = {|
  infile: String,
  indices: String,
  sigid: String,
  ratelimit: Int,
  cachefile: String,
  ignorefile: String
|}

export type SearchComponent = {|
  key: String,
  value: String,
  score: Double,
|}

export type SearchResult = {|
  uid: UID,
  username: String,
  components?: ?Array<SearchComponent>,
  score: Double,
|}

export type SecretEntryArg = {|
  desc: String,
  prompt: String,
  err: String,
  cancel: String,
  ok: String,
  reason: String,
  showTyping: Boolean,
|}

export type SecretEntryRes = {|
  text: String,
  canceled: Boolean,
  storeSecret: Boolean,
|}

export type SecretKeys = {|
  signing: NaclSigningKeyPrivate,
  encryption: NaclDHKeyPrivate,
|}

export type SecretResponse = {|
  secret: Bytes,
  phrase: String,
|}

export type SecretUiGetPassphraseRpcParam = {|
  pinentry: GUIEntryArg,
  terminal?: ?SecretEntryArg
|}

export type SeitanAKey = String

export type SeitanIKey = String

export type SeitanIKeyAndLabel =
    { v: 1, v1: ?SeitanIKeyAndLabelVersion1 }
  | { v: any }

export type SeitanIKeyAndLabelVersion =
    1 // V1_1

export type SeitanIKeyAndLabelVersion1 = {|
  i: SeitanIKey,
  l: SeitanIKeyLabel,
|}

export type SeitanIKeyLabel =
    { t: 1, sms: ?SeitanIKeyLabelSms }
  | { t: any }

export type SeitanIKeyLabelSms = {|
  f: String,
  n: String,
|}

export type SeitanIKeyLabelType =
    1 // SMS_1

export type SelectKeyRes = {|
  keyID: String,
  doSecretPush: Boolean,
|}

export type SeqType =
    1 // PUBLIC_1
  | 2 // PRIVATE_2
  | 3 // SEMIPRIVATE_3

export type Seqno = Int64

export type ServiceStatus = {|
  version: String,
  label: String,
  pid: String,
  lastExitStatus: String,
  bundleVersion: String,
  installStatus: InstallStatus,
  installAction: InstallAction,
  status: Status,
|}

export type ServicesStatus = {|
  service?: ?Array<ServiceStatus>,
  kbfs?: ?Array<ServiceStatus>,
  updater?: ?Array<ServiceStatus>,
|}

export type Session = {|
  uid: UID,
  username: String,
  token: String,
  deviceSubkeyKid: KID,
  deviceSibkeyKid: KID,
|}

export type SessionStatus = {|
  SessionFor: String,
  Loaded: Boolean,
  Cleared: Boolean,
  SaltOnly: Boolean,
  Expired: Boolean,
|}

export type SessionToken = String

export type Sig = {|
  seqno: Seqno,
  sigID: SigID,
  sigIDDisplay: String,
  type: String,
  cTime: Time,
  revoked: Boolean,
  active: Boolean,
  key: String,
  body: String,
|}

export type SigChainLocation = {|
  seqno: Seqno,
  seqType: SeqType,
|}

export type SigHint = {|
  remoteId: String,
  humanUrl: String,
  apiUrl: String,
  checkText: String,
|}

export type SigID = String

export type SigListArgs = {|
  sessionID: Int,
  username: String,
  allKeys: Boolean,
  types?: ?SigTypes,
  filterx: String,
  verbose: Boolean,
  revoked: Boolean,
|}

export type SigTypes = {|
  track: Boolean,
  proof: Boolean,
  cryptocurrency: Boolean,
  isSelf: Boolean,
|}

export type SignMode =
    0 // ATTACHED_0
  | 1 // DETACHED_1
  | 2 // CLEAR_2

export type SignatureMetadata = {|
  signingKID: KID,
  prevMerkleRootSigned: MerkleRootV2,
  firstAppearedUnverified: Seqno,
  time: Time,
  sigChainLocation: SigChainLocation,
|}

export type SignupCheckInvitationCodeRpcParam = {|
  invitationCode: String
|}

export type SignupCheckUsernameAvailableRpcParam = {|
  username: String
|}

export type SignupInviteRequestRpcParam = {|
  email: String,
  fullname: String,
  notes: String
|}

export type SignupRes = {|
  passphraseOk: Boolean,
  postOk: Boolean,
  writeOk: Boolean,
|}

export type SignupSignupRpcParam = {|
  email: String,
  inviteCode: String,
  passphrase: String,
  username: String,
  deviceName: String,
  deviceType: DeviceType,
  storeSecret: Boolean,
  skipMail: Boolean,
  genPGPBatch: Boolean,
  genPaper: Boolean
|}

export type SigsSigListJSONRpcParam = {|
  arg: SigListArgs
|}

export type SigsSigListRpcParam = {|
  arg: SigListArgs
|}

export type SimpleFSListResult = {|
  entries?: ?Array<Dirent>,
  progress: Progress,
|}

export type SimpleFSSimpleFSCancelRpcParam = {|
  opID: OpID
|}

export type SimpleFSSimpleFSCheckRpcParam = {|
  opID: OpID
|}

export type SimpleFSSimpleFSCloseRpcParam = {|
  opID: OpID
|}

export type SimpleFSSimpleFSCopyRecursiveRpcParam = {|
  opID: OpID,
  src: Path,
  dest: Path
|}

export type SimpleFSSimpleFSCopyRpcParam = {|
  opID: OpID,
  src: Path,
  dest: Path
|}

export type SimpleFSSimpleFSListRecursiveRpcParam = {|
  opID: OpID,
  path: Path
|}

export type SimpleFSSimpleFSListRpcParam = {|
  opID: OpID,
  path: Path
|}

export type SimpleFSSimpleFSMoveRpcParam = {|
  opID: OpID,
  src: Path,
  dest: Path
|}

export type SimpleFSSimpleFSOpenRpcParam = {|
  opID: OpID,
  dest: Path,
  flags: OpenFlags
|}

export type SimpleFSSimpleFSReadListRpcParam = {|
  opID: OpID
|}

export type SimpleFSSimpleFSReadRpcParam = {|
  opID: OpID,
  offset: Long,
  size: Int
|}

export type SimpleFSSimpleFSRemoveRpcParam = {|
  opID: OpID,
  path: Path
|}

export type SimpleFSSimpleFSRenameRpcParam = {|
  src: Path,
  dest: Path
|}

export type SimpleFSSimpleFSSetStatRpcParam = {|
  dest: Path,
  flag: DirentType
|}

export type SimpleFSSimpleFSStatRpcParam = {|
  path: Path
|}

export type SimpleFSSimpleFSWaitRpcParam = {|
  opID: OpID
|}

export type SimpleFSSimpleFSWriteRpcParam = {|
  opID: OpID,
  offset: Long,
  content: Bytes
|}

export type SocialAssertion = {|
  user: String,
  service: SocialAssertionService,
|}

export type SocialAssertionService = String

export type StartProofResult = {|
  sigID: SigID,
|}

export type Status = {|
  code: Int,
  name: String,
  desc: String,
  fields?: ?Array<StringKVPair>,
|}

export type StatusCode =
    0 // SCOk_0
  | 100 // SCInputError_100
  | 201 // SCLoginRequired_201
  | 202 // SCBadSession_202
  | 203 // SCBadLoginUserNotFound_203
  | 204 // SCBadLoginPassword_204
  | 205 // SCNotFound_205
  | 210 // SCThrottleControl_210
  | 216 // SCDeleted_216
  | 218 // SCGeneric_218
  | 235 // SCAlreadyLoggedIn_235
  | 230 // SCExists_230
  | 237 // SCCanceled_237
  | 239 // SCInputCanceled_239
  | 274 // SCReloginRequired_274
  | 275 // SCResolutionFailed_275
  | 276 // SCProfileNotPublic_276
  | 277 // SCIdentifyFailed_277
  | 278 // SCTrackingBroke_278
  | 279 // SCWrongCryptoFormat_279
  | 280 // SCDecryptionError_280
  | 281 // SCInvalidAddress_281
  | 283 // SCNoSession_283
  | 290 // SCAccountReset_290
  | 295 // SCIdentifiesFailed_295
  | 472 // SCBadEmail_472
  | 701 // SCBadSignupUsernameTaken_701
  | 707 // SCBadInvitationCode_707
  | 801 // SCMissingResult_801
  | 901 // SCKeyNotFound_901
  | 905 // SCKeyCorrupted_905
  | 907 // SCKeyInUse_907
  | 913 // SCKeyBadGen_913
  | 914 // SCKeyNoSecret_914
  | 915 // SCKeyBadUIDs_915
  | 916 // SCKeyNoActive_916
  | 917 // SCKeyNoSig_917
  | 918 // SCKeyBadSig_918
  | 919 // SCKeyBadEldest_919
  | 920 // SCKeyNoEldest_920
  | 921 // SCKeyDuplicateUpdate_921
  | 922 // SCSibkeyAlreadyExists_922
  | 924 // SCDecryptionKeyNotFound_924
  | 927 // SCKeyNoPGPEncryption_927
  | 928 // SCKeyNoNaClEncryption_928
  | 929 // SCKeySyncedPGPNotFound_929
  | 930 // SCKeyNoMatchingGPG_930
  | 931 // SCKeyRevoked_931
  | 1010 // SCSigOldSeqno_1010
  | 1301 // SCBadTrackSession_1301
  | 1404 // SCDeviceBadName_1404
  | 1408 // SCDeviceNameInUse_1408
  | 1409 // SCDeviceNotFound_1409
  | 1410 // SCDeviceMismatch_1410
  | 1411 // SCDeviceRequired_1411
  | 1413 // SCDevicePrevProvisioned_1413
  | 1414 // SCDeviceNoProvision_1414
  | 1415 // SCDeviceProvisionViaDevice_1415
  | 1416 // SCRevokeCurrentDevice_1416
  | 1417 // SCRevokeLastDevice_1417
  | 1418 // SCDeviceProvisionOffline_1418
  | 1501 // SCStreamExists_1501
  | 1502 // SCStreamNotFound_1502
  | 1503 // SCStreamWrongKind_1503
  | 1504 // SCStreamEOF_1504
  | 1600 // SCGenericAPIError_1600
  | 1601 // SCAPINetworkError_1601
  | 1602 // SCTimeout_1602
  | 1701 // SCProofError_1701
  | 1702 // SCIdentificationExpired_1702
  | 1703 // SCSelfNotFound_1703
  | 1704 // SCBadKexPhrase_1704
  | 1705 // SCNoUIDelegation_1705
  | 1706 // SCNoUI_1706
  | 1707 // SCGPGUnavailable_1707
  | 1800 // SCInvalidVersionError_1800
  | 1801 // SCOldVersionError_1801
  | 1802 // SCInvalidLocationError_1802
  | 1803 // SCServiceStatusError_1803
  | 1804 // SCInstallError_1804
  | 1810 // SCLoadKextError_1810
  | 1811 // SCLoadKextPermError_1811
  | 2300 // SCGitInternal_2300
  | 2301 // SCGitRepoAlreadyExists_2301
  | 2302 // SCGitInvalidRepoName_2302
  | 2303 // SCGitCannotDelete_2303
  | 2304 // SCGitRepoDoesntExist_2304
  | 2400 // SCLoginStateTimeout_2400
  | 2500 // SCChatInternal_2500
  | 2501 // SCChatRateLimit_2501
  | 2502 // SCChatConvExists_2502
  | 2503 // SCChatUnknownTLFID_2503
  | 2504 // SCChatNotInConv_2504
  | 2505 // SCChatBadMsg_2505
  | 2506 // SCChatBroadcast_2506
  | 2507 // SCChatAlreadySuperseded_2507
  | 2508 // SCChatAlreadyDeleted_2508
  | 2509 // SCChatTLFFinalized_2509
  | 2510 // SCChatCollision_2510
  | 2511 // SCIdentifySummaryError_2511
  | 2512 // SCNeedSelfRekey_2512
  | 2513 // SCNeedOtherRekey_2513
  | 2514 // SCChatMessageCollision_2514
  | 2515 // SCChatDuplicateMessage_2515
  | 2516 // SCChatClientError_2516
  | 2517 // SCChatNotInTeam_2517
  | 2518 // SCChatStalePreviousState_2518
  | 2607 // SCTeamSelfNotOwner_2607
  | 2614 // SCTeamNotFound_2614
  | 2619 // SCTeamExists_2619
  | 2623 // SCTeamReadError_2623
  | 2638 // SCNoOp_2638
  | 2663 // SCTeamTarDuplicate_2663
  | 2664 // SCTeamTarNotFound_2664
  | 2665 // SCTeamMemberExists_2665
  | 2666 // SCTeamNotReleased_2666
  | 2667 // SCTeamPermanentlyLeft_2667
  | 2668 // SCTeamNeedRootId_2668
  | 2669 // SCTeamHasLiveChildren_2669
  | 2670 // SCTeamDeleteError_2670
  | 2671 // SCTeamBadRootTeam_2671
  | 2672 // SCTeamNameConflictsWithUser_2672
  | 2673 // SCTeamDeleteNoUpPointer_2673
  | 2674 // SCTeamNeedOwner_2674
  | 2675 // SCTeamNoOwnerAllowed_2675
  | 2676 // SCTeamImplicitNoNonSbs_2676
  | 2677 // SCTeamImplicitBadHash_2677
  | 2678 // SCTeamImplicitBadName_2678
  | 2679 // SCTeamImplicitClash_2679
  | 2680 // SCTeamImplicitDuplicate_2680
  | 2681 // SCTeamImplicitBadOp_2681
  | 2682 // SCTeamImplicitBadRole_2682
  | 2683 // SCTeamImplicitNotFound_2683
  | 2684 // SCTeamBadAdminSeqnoType_2684
  | 2685 // SCTeamImplicitBadAdd_2685
  | 2686 // SCTeamImplicitBadRemove_2686
  | 2697 // SCTeamKeyMaskNotFound_2697
  | 2702 // SCTeamBanned_2702
  | 2703 // SCTeamInvalidBan_2703

export type Stream = {|
  fd: Int,
|}

export type StreamUiCloseRpcParam = {|
  s: Stream
|}

export type StreamUiReadRpcParam = {|
  s: Stream,
  sz: Int
|}

export type StreamUiResetRpcParam = {|
  s: Stream
|}

export type StreamUiWriteRpcParam = {|
  s: Stream,
  buf: Bytes
|}

export type StringKVPair = {|
  key: String,
  value: String,
|}

export type SubteamLogPoint = {|
  name: TeamName,
  seqno: Seqno,
|}

export type TLF = {|
  id: TLFID,
  name: String,
  writers?: ?Array<String>,
  readers?: ?Array<String>,
  isPrivate: Boolean,
|}

export type TLFBreak = {|
  breaks?: ?Array<TLFIdentifyFailure>,
|}

export type TLFID = String

export type TLFIdentifyBehavior =
    0 // DEFAULT_KBFS_0
  | 1 // CHAT_CLI_1
  | 2 // CHAT_GUI_2
  | 3 // CHAT_GUI_STRICT_3
  | 4 // KBFS_REKEY_4
  | 5 // KBFS_QR_5
  | 6 // CHAT_SKIP_6

export type TLFIdentifyFailure = {|
  user: User,
  breaks?: ?IdentifyTrackBreaks,
|}

export type TLFQuery = {|
  tlfName: String,
  identifyBehavior: TLFIdentifyBehavior,
|}

export type TLFVisibility =
    0 // ANY_0
  | 1 // PUBLIC_1
  | 2 // PRIVATE_2

export type TeamAccessRequest = {|
  uid: UID,
  eldestSeqno: Seqno,
|}

export type TeamAddMemberResult = {|
  invited: Boolean,
  user?: ?User,
  emailSent: Boolean,
  chatSent: Boolean,
|}

export type TeamAndMemberShowcase = {|
  teamShowcase: TeamShowcase,
  isMemberShowcased: Boolean,
|}

export type TeamApplication =
    1 // KBFS_1
  | 2 // CHAT_2
  | 3 // SALTPACK_3
  | 4 // GIT_METADATA_4
  | 5 // SEITAN_INVITE_TOKEN_5

export type TeamApplicationKey = {|
  application: TeamApplication,
  keyGeneration: PerTeamKeyGeneration,
  key: Bytes32,
|}

export type TeamCLKRMsg = {|
  teamID: TeamID,
  generation: PerTeamKeyGeneration,
  score: Int,
|}

export type TeamChangeReq = {|
  owners?: ?Array<UserVersion>,
  admins?: ?Array<UserVersion>,
  writers?: ?Array<UserVersion>,
  readers?: ?Array<UserVersion>,
  none?: ?Array<UserVersion>,
  completedInvites: {[key: string]: UserVersionPercentForm},
|}

export type TeamChangeRow = {|
  id: TeamID,
  name: String,
  keyRotated: Boolean,
  membershipChanged: Boolean,
  latestSeqno: Seqno,
|}

export type TeamChangeSet = {|
  membershipChanged: Boolean,
  keyRotated: Boolean,
  renamed: Boolean,
|}

export type TeamCreateResult = {|
  chatSent: Boolean,
  creatorAdded: Boolean,
|}

export type TeamData = {|
  secretless: Boolean,
  name: TeamName,
  chain: TeamSigChainState,
  perTeamKeySeeds: {[key: string]: PerTeamKeySeedItem},
  readerKeyMasks: {[key: string]: {[key: string]: MaskB64}},
  cachedAt: Time,
|}

export type TeamDetails = {|
  members: TeamMembersDetails,
  keyGeneration: PerTeamKeyGeneration,
  annotatedActiveInvites: {[key: string]: AnnotatedTeamInvite},
  settings: TeamSettings,
  showcase: TeamShowcase,
|}

export type TeamExitRow = {|
  id: TeamID,
|}

export type TeamID = String

export type TeamIDAndName = {|
  id: TeamID,
  name: TeamName,
|}

export type TeamIDWithVisibility = {|
  teamID: TeamID,
  visibility: TLFVisibility,
|}

export type TeamInvite = {|
  role: TeamRole,
  id: TeamInviteID,
  type: TeamInviteType,
  name: TeamInviteName,
  inviter: UserVersion,
|}

export type TeamInviteCategory =
    0 // NONE_0
  | 1 // UNKNOWN_1
  | 2 // KEYBASE_2
  | 3 // EMAIL_3
  | 4 // SBS_4
  | 5 // SEITAN_5

export type TeamInviteID = String

export type TeamInviteName = String

export type TeamInviteSocialNetwork = String

export type TeamInviteType =
    { c: 1, unknown: ?String }
  | { c: 4, sbs: ?TeamInviteSocialNetwork }
  | { c: any }

export type TeamInvitee = {|
  inviteID: TeamInviteID,
  uid: UID,
  eldestSeqno: Seqno,
  role: TeamRole,
|}

export type TeamJoinRequest = {|
  name: String,
  username: String,
|}

export type TeamList = {|
  teams?: ?Array<MemberInfo>,
|}

export type TeamMember = {|
  uid: UID,
  role: TeamRole,
  eldestSeqno: Seqno,
  userEldestSeqno: Seqno,
|}

export type TeamMemberDetails = {|
  uv: UserVersion,
  username: String,
  active: Boolean,
  needsPUK: Boolean,
|}

export type TeamMembers = {|
  owners?: ?Array<UserVersion>,
  admins?: ?Array<UserVersion>,
  writers?: ?Array<UserVersion>,
  readers?: ?Array<UserVersion>,
|}

export type TeamMembersDetails = {|
  owners?: ?Array<TeamMemberDetails>,
  admins?: ?Array<TeamMemberDetails>,
  writers?: ?Array<TeamMemberDetails>,
  readers?: ?Array<TeamMemberDetails>,
|}

export type TeamName = {|
  parts?: ?Array<TeamNamePart>,
|}

export type TeamNameLogPoint = {|
  lastPart: TeamNamePart,
  seqno: Seqno,
|}

export type TeamNamePart = String

export type TeamOpenReqMsg = {|
  teamID: TeamID,
  tars?: ?Array<TeamAccessRequest>,
|}

export type TeamPlusApplicationKeys = {|
  id: TeamID,
  name: String,
  implicit: Boolean,
  public: Boolean,
  application: TeamApplication,
  writers?: ?Array<UserVersion>,
  onlyReaders?: ?Array<UserVersion>,
  applicationKeys?: ?Array<TeamApplicationKey>,
|}

export type TeamRefreshers = {|
  needKeyGeneration: PerTeamKeyGeneration,
  wantMembers?: ?Array<UserVersion>,
  wantMembersRole: TeamRole,
|}

export type TeamRequestAccessResult = {|
  open: Boolean,
|}

export type TeamRole =
    0 // NONE_0
  | 1 // READER_1
  | 2 // WRITER_2
  | 3 // ADMIN_3
  | 4 // OWNER_4

export type TeamSBSMsg = {|
  teamID: TeamID,
  score: Int,
  invitees?: ?Array<TeamInvitee>,
|}

export type TeamSeitanMsg = {|
  teamID: TeamID,
  seitans?: ?Array<TeamSeitanRequest>,
|}

export type TeamSeitanRequest = {|
  inviteID: TeamInviteID,
  uid: UID,
  eldestSeqno: Seqno,
  akey: SeitanAKey,
  role: TeamRole,
  unixCTime: Int64,
|}

export type TeamSettings = {|
  open: Boolean,
  joinAs: TeamRole,
|}

export type TeamShowcase = {|
  isShowcased: Boolean,
  description?: ?String,
  setByUID?: ?UID,
|}

export type TeamSigChainState = {|
  reader: UserVersion,
  id: TeamID,
  implicit: Boolean,
  public: Boolean,
  rootAncestor: TeamName,
  nameDepth: Int,
  nameLog?: ?Array<TeamNameLogPoint>,
  lastSeqno: Seqno,
  lastLinkID: LinkID,
  parentID?: ?TeamID,
  userLog: {[key: string]: ?Array<UserLogPoint>},
  subteamLog: {[key: string]: ?Array<SubteamLogPoint>},
  perTeamKeys: {[key: string]: PerTeamKey},
  linkIDs: {[key: string]: LinkID},
  stubbedLinks: {[key: string]: Boolean},
  activeInvites: {[key: string]: TeamInvite},
  open: Boolean,
  openTeamJoinAs: TeamRole,
|}

export type TeamTreeEntry = {|
  name: TeamName,
  admin: Boolean,
|}

export type TeamTreeResult = {|
  entries?: ?Array<TeamTreeEntry>,
|}

export type TeamType =
    0 // NONE_0
  | 1 // LEGACY_1
  | 2 // MODERN_2

export type TeamsGetTeamAndMemberShowcaseRpcParam = {|
  name: String
|}

export type TeamsGetTeamRootIDRpcParam = {|
  id: TeamID
|}

export type TeamsGetTeamShowcaseRpcParam = {|
  name: String
|}

export type TeamsLoadTeamPlusApplicationKeysRpcParam = {|
  id: TeamID,
  application: TeamApplication,
  refreshers: TeamRefreshers
|}

export type TeamsLookupImplicitTeamRpcParam = {|
  name: String,
  public: Boolean
|}

export type TeamsLookupOrCreateImplicitTeamRpcParam = {|
  name: String,
  public: Boolean
|}

export type TeamsSetTeamMemberShowcaseRpcParam = {|
  name: String,
  isShowcased: Boolean
|}

export type TeamsSetTeamShowcaseRpcParam = {|
  name: String,
  isShowcased?: ?Boolean,
  description?: ?String
|}

export type TeamsTeamAcceptInviteOrRequestAccessRpcParam = {|
  tokenOrName: String
|}

export type TeamsTeamAcceptInviteRpcParam = {|
  token: String
|}

export type TeamsTeamAddEmailsBulkRpcParam = {|
  name: String,
  emails: String,
  role: TeamRole
|}

export type TeamsTeamAddMemberRpcParam = {|
  name: String,
  email: String,
  username: String,
  role: TeamRole,
  sendChatNotification: Boolean
|}

export type TeamsTeamChangeMembershipRpcParam = {|
  name: String,
  req: TeamChangeReq
|}

export type TeamsTeamCreateRpcParam = {|
  name: String,
  sendChatNotification: Boolean
|}

export type TeamsTeamCreateSeitanTokenRpcParam = {|
  name: String,
  role: TeamRole,
  label: SeitanIKeyLabel
|}

export type TeamsTeamCreateWithSettingsRpcParam = {|
  name: String,
  sendChatNotification: Boolean,
  settings: TeamSettings
|}

export type TeamsTeamDeleteRpcParam = {|
  name: String
|}

export type TeamsTeamEditMemberRpcParam = {|
  name: String,
  username: String,
  role: TeamRole
|}

export type TeamsTeamGetRpcParam = {|
  name: String,
  forceRepoll: Boolean
|}

export type TeamsTeamIgnoreRequestRpcParam = {|
  name: String,
  username: String
|}

export type TeamsTeamImplicitAdminsRpcParam = {|
  teamName: String
|}

export type TeamsTeamLeaveRpcParam = {|
  name: String,
  permanent: Boolean
|}

export type TeamsTeamListRpcParam = {|
  userAssertion: String,
  all: Boolean,
  includeImplicitTeams: Boolean
|}

export type TeamsTeamListSubteamsRecursiveRpcParam = {|
  parentTeamName: String,
  forceRepoll: Boolean
|}

export type TeamsTeamReAddMemberAfterResetRpcParam = {|
  id: TeamID,
  username: String
|}

export type TeamsTeamRemoveMemberRpcParam = {|
  name: String,
  username: String,
  email: String,
  inviteID: TeamInviteID
|}

export type TeamsTeamRenameRpcParam = {|
  prevName: TeamName,
  newName: TeamName
|}

export type TeamsTeamRequestAccessRpcParam = {|
  name: String
|}

export type TeamsTeamSetSettingsRpcParam = {|
  name: String,
  settings: TeamSettings
|}

export type TeamsTeamTreeRpcParam = {|
  name: TeamName
|}

export type TeamsUiConfirmRootTeamDeleteRpcParam = {|
  teamName: String
|}

export type TeamsUiConfirmSubteamDeleteRpcParam = {|
  teamName: String
|}

export type Test = {|
  reply: String,
|}

export type TestPanicRpcParam = {|
  message: String
|}

export type TestTestCallbackRpcParam = {|
  name: String
|}

export type TestTestRpcParam = {|
  name: String
|}

export type Text = {|
  data: String,
  markup: Boolean,
|}

export type Time = Long

export type TlfCompleteAndCanonicalizePrivateTlfNameRpcParam = {|
  query: TLFQuery
|}

export type TlfCryptKeysRpcParam = {|
  query: TLFQuery
|}

export type TlfKeysGetPublicCanonicalTLFNameAndIDRpcParam = {|
  query: TLFQuery
|}

export type TlfKeysGetTLFCryptKeysRpcParam = {|
  query: TLFQuery
|}

export type TlfPublicCanonicalTLFNameAndIDRpcParam = {|
  query: TLFQuery
|}

export type TrackDiff = {|
  type: TrackDiffType,
  displayMarkup: String,
|}

export type TrackDiffType =
    0 // NONE_0
  | 1 // ERROR_1
  | 2 // CLASH_2
  | 3 // REVOKED_3
  | 4 // UPGRADED_4
  | 5 // NEW_5
  | 6 // REMOTE_FAIL_6
  | 7 // REMOTE_WORKING_7
  | 8 // REMOTE_CHANGED_8
  | 9 // NEW_ELDEST_9
  | 10 // NONE_VIA_TEMPORARY_10

export type TrackDismissWithTokenRpcParam = {|
  trackToken: TrackToken
|}

export type TrackFakeTrackingChangedRpcParam = {|
  username: String,
  isTracking: Boolean
|}

export type TrackOptions = {|
  localOnly: Boolean,
  bypassConfirm: Boolean,
  forceRetrack: Boolean,
  expiringLocal: Boolean,
  forPGPPull: Boolean,
|}

export type TrackProof = {|
  proofType: String,
  proofName: String,
  idString: String,
|}

export type TrackStatus =
    1 // NEW_OK_1
  | 2 // NEW_ZERO_PROOFS_2
  | 3 // NEW_FAIL_PROOFS_3
  | 4 // UPDATE_BROKEN_FAILED_PROOFS_4
  | 5 // UPDATE_NEW_PROOFS_5
  | 6 // UPDATE_OK_6
  | 7 // UPDATE_BROKEN_REVOKED_7

export type TrackSummary = {|
  username: String,
  time: Time,
  isRemote: Boolean,
|}

export type TrackToken = String

export type TrackTrackRpcParam = {|
  userAssertion: String,
  options: TrackOptions,
  forceRemoteCheck: Boolean
|}

export type TrackTrackWithTokenRpcParam = {|
  trackToken: TrackToken,
  options: TrackOptions
|}

export type TrackUntrackRpcParam = {|
  username: String
|}

export type Tracker = {|
  tracker: UID,
  status: Int,
  mTime: Time,
|}

export type UID = String

export type UPAKVersion =
    1 // V1_1
  | 2 // V2_2

export type UPAKVersioned =
    { v: 1, v1: ?UserPlusAllKeys }
  | { v: 2, v2: ?UserPlusKeysV2AllIncarnations }

export type UPK2MinorVersion =
    0 // V0_0
  | 1 // V1_1
  | 2 // V2_2
  | 3 // V3_3
  | 4 // V4_4
  | 5 // V5_5

export type UiPromptYesNoRpcParam = {|
  text: Text,
  promptDefault: PromptDefault
|}

export type UnboxAnyRes = {|
  kid: KID,
  plaintext: Bytes32,
  index: Int,
|}

export type UninstallResult = {|
  componentResults?: ?Array<ComponentResult>,
  status: Status,
|}

export type User = {|
  uid: UID,
  username: String,
|}

export type UserCard = {|
  following: Int,
  followers: Int,
  uid: UID,
  fullName: String,
  location: String,
  bio: String,
  website: String,
  twitter: String,
  youFollowThem: Boolean,
  theyFollowYou: Boolean,
  teamShowcase?: ?Array<UserTeamShowcase>,
|}

export type UserInterestingPeopleRpcParam = {|
  maxUsers: Int
|}

export type UserListTrackers2RpcParam = {|
  assertion: String,
  reverse: Boolean
|}

export type UserListTrackersByNameRpcParam = {|
  username: String
|}

export type UserListTrackersRpcParam = {|
  uid: UID
|}

export type UserListTrackingJSONRpcParam = {|
  filter: String,
  verbose: Boolean,
  assertion: String
|}

export type UserListTrackingRpcParam = {|
  filter: String,
  assertion: String
|}

export type UserLoadAllPublicKeysUnverifiedRpcParam = {|
  uid: UID
|}

export type UserLoadPublicKeysRpcParam = {|
  uid: UID
|}

export type UserLoadUncheckedUserSummariesRpcParam = {|
  uids?: ?Array<UID>
|}

export type UserLoadUserByNameRpcParam = {|
  username: String
|}

export type UserLoadUserPlusKeysRpcParam = {|
  uid: UID,
  pollForKID: KID
|}

export type UserLoadUserRpcParam = {|
  uid: UID
|}

export type UserLogPoint = {|
  role: TeamRole,
  sigMeta: SignatureMetadata,
|}

export type UserOrTeamID = String

export type UserOrTeamLite = {|
  id: UserOrTeamID,
  name: String,
|}

export type UserOrTeamResult =
    1 // USER_1
  | 2 // TEAM_2

export type UserPlusAllKeys = {|
  base: UserPlusKeys,
  pgpKeys?: ?Array<PublicKey>,
  remoteTracks?: ?Array<RemoteTrack>,
|}

export type UserPlusKeys = {|
  uid: UID,
  username: String,
  eldestSeqno: Seqno,
  status: StatusCode,
  deviceKeys?: ?Array<PublicKey>,
  revokedDeviceKeys?: ?Array<RevokedKey>,
  pgpKeyCount: Int,
  uvv: UserVersionVector,
  deletedDeviceKeys?: ?Array<PublicKey>,
  perUserKeys?: ?Array<PerUserKey>,
|}

export type UserPlusKeysV2 = {|
  uid: UID,
  username: String,
  eldestSeqno: Seqno,
  status: StatusCode,
  perUserKeys?: ?Array<PerUserKey>,
  deviceKeys: {[key: string]: PublicKeyV2NaCl},
  pgpKeys: {[key: string]: PublicKeyV2PGPSummary},
  remoteTracks: {[key: string]: RemoteTrack},
|}

export type UserPlusKeysV2AllIncarnations = {|
  current: UserPlusKeysV2,
  pastIncarnations?: ?Array<UserPlusKeysV2>,
  uvv: UserVersionVector,
  seqnoLinkIDs: {[key: string]: LinkID},
  minorVersion: UPK2MinorVersion,
|}

export type UserProfileEditRpcParam = {|
  fullName: String,
  location: String,
  bio: String
|}

export type UserResolution = {|
  assertion: SocialAssertion,
  userID: UID,
|}

export type UserSearchRpcParam = {|
  query: String
|}

export type UserSettings = {|
  emails?: ?Array<Email>,
|}

export type UserSummary = {|
  uid: UID,
  username: String,
  thumbnail: String,
  idVersion: Int,
  fullName: String,
  bio: String,
  proofs: Proofs,
  sigIDDisplay: String,
  trackTime: Time,
|}

export type UserSummary2 = {|
  uid: UID,
  username: String,
  thumbnail: String,
  fullName: String,
  isFollower: Boolean,
  isFollowee: Boolean,
|}

export type UserSummary2Set = {|
  users?: ?Array<UserSummary2>,
  time: Time,
  version: Int,
|}

export type UserTeamShowcase = {|
  fqName: String,
  open: Boolean,
  teamIsShowcased: Boolean,
  description: String,
  role: TeamRole,
|}

export type UserVersion = {|
  uid: UID,
  eldestSeqno: Seqno,
|}

export type UserVersionPercentForm = String

export type UserVersionVector = {|
  id: Long,
  sigHints: Int,
  sigChain: Long,
  cachedAt: Time,
|}

export type VerifySessionRes = {|
  uid: UID,
  sid: String,
  generated: Int,
  lifetime: Int,
|}

export type WebProof = {|
  hostname: String,
  protocols?: ?Array<String>,
|}

export type WriteArgs = {|
  opID: OpID,
  path: Path,
  offset: Long,
|}
type AccountHasServerKeysResult = HasServerKeysRes
type AccountPassphrasePromptResult = GetPassphraseRes
type ApiserverDeleteResult = APIRes
type ApiserverGetResult = APIRes
type ApiserverGetWithSessionResult = APIRes
type ApiserverPostJSONResult = APIRes
type ApiserverPostResult = APIRes
type BadgerGetBadgeStateResult = BadgeState
type BlockArchiveReferenceResult = ?Array<BlockReference>
type BlockArchiveReferenceWithCountResult = DowngradeReferenceRes
type BlockBlockPingResult = BlockPingResponse
type BlockDelReferenceWithCountResult = DowngradeReferenceRes
type BlockGetBlockResult = GetBlockRes
type BlockGetSessionChallengeResult = ChallengeInfo
type BlockGetTeamQuotaInfoResult = Bytes
type BlockGetUserQuotaInfoResult = Bytes
type ConfigCheckAPIServerOutOfDateWarningResult = OutOfDateInfo
type ConfigGetBootstrapStatusResult = BootstrapStatus
type ConfigGetConfigResult = Config
type ConfigGetCurrentStatusResult = GetCurrentStatusRes
type ConfigGetExtendedStatusResult = ExtendedStatus
type ConfigGetValueResult = ConfigValue
type ConfigWaitForClientResult = Boolean
type CryptoSignED25519ForKBFSResult = ED25519SignatureInfo
type CryptoSignED25519Result = ED25519SignatureInfo
type CryptoSignToStringResult = String
type CryptoUnboxBytes32AnyResult = UnboxAnyRes
type CryptoUnboxBytes32Result = Bytes32
type CryptocurrencyRegisterAddressResult = RegisterAddressRes
type CtlDbGetResult = ?DbValue
type DebuggingFirstStepResult = FirstStepResult
type DebuggingIncrementResult = Int
type DebuggingSecondStepResult = Int
type DeviceCheckDeviceNameFormatResult = Boolean
type DeviceDeviceHistoryListResult = ?Array<DeviceDetail>
type DeviceDeviceListResult = ?Array<Device>
type FavoriteGetFavoritesResult = FavoritesResult
type FsListResult = ListResult
type GitCreatePersonalRepoResult = RepoID
type GitCreateTeamRepoResult = RepoID
type GitGetAllGitMetadataResult = ?Array<GitRepoResult>
type GitGetGitMetadataResult = ?Array<GitRepoResult>
type GpgUiConfirmDuplicateKeyChosenResult = Boolean
type GpgUiGetTTYResult = String
type GpgUiSelectKeyAndPushOptionResult = SelectKeyRes
type GpgUiSelectKeyResult = String
type GpgUiSignResult = String
type GpgUiWantToAddGPGKeyResult = Boolean
type GregorGetStateResult = Gregor1.State
type GregorInjectItemResult = Gregor1.MsgID
type HomeHomeGetScreenResult = HomeScreen
type IdentifyIdentify2Result = Identify2Res
type IdentifyIdentifyLiteResult = IdentifyLiteRes
type IdentifyResolve3Result = UserOrTeamLite
type IdentifyResolveIdentifyImplicitTeamResult = ResolveIdentifyImplicitTeamRes
type IdentifyUiConfirmResult = ConfirmResult
type IdentifyUiDelegateIdentifyUIResult = Int
type InstallFuseStatusResult = FuseStatus
type InstallInstallCommandLinePrivilegedResult = InstallResult
type InstallInstallFuseResult = InstallResult
type InstallInstallKBFSResult = InstallResult
type InstallUninstallKBFSResult = UninstallResult
type KBFSGitCreateRepoResult = RepoID
type KbfsMountGetAllAvailableMountDirsResult = ?Array<String>
type KbfsMountGetCurrentMountDirResult = String
type Kex2Provisionee2Hello2Result = Hello2Res
type Kex2ProvisioneeHelloResult = HelloRes
type LoginGetConfiguredAccountsResult = ?Array<ConfiguredAccount>
type LoginUiGetEmailOrUsernameResult = String
type LoginUiPromptRevokePaperKeysResult = Boolean
type MerkleGetCurrentMerkleRootResult = MerkleRootAndTime
type MetadataAuthenticateResult = Int
type MetadataGetChallengeResult = ChallengeInfo
type MetadataGetFolderHandleResult = Bytes
type MetadataGetKeyBundlesResult = KeyBundleResponse
type MetadataGetKeyResult = Bytes
type MetadataGetLatestFolderHandleResult = Bytes
type MetadataGetMerkleNodeResult = Bytes
type MetadataGetMerkleRootLatestResult = MerkleRoot
type MetadataGetMerkleRootResult = MerkleRoot
type MetadataGetMerkleRootSinceResult = MerkleRoot
type MetadataGetMetadataResult = MetadataResponse
type MetadataPing2Result = PingResponse
type MetadataTruncateLockResult = Boolean
type MetadataTruncateUnlockResult = Boolean
type PgpPgpDecryptResult = PGPSigVerification
type PgpPgpExportByFingerprintResult = ?Array<KeyInfo>
type PgpPgpExportByKIDResult = ?Array<KeyInfo>
type PgpPgpExportResult = ?Array<KeyInfo>
type PgpPgpPurgeResult = PGPPurgeRes
type PgpPgpVerifyResult = PGPSigVerification
type PgpUiShouldPushPrivateResult = Boolean
type ProveCheckProofResult = CheckProofStatus
type ProveStartProofResult = StartProofResult
type ProveUiOkToCheckResult = Boolean
type ProveUiPreProofWarningResult = Boolean
type ProveUiPromptOverwriteResult = Boolean
type ProveUiPromptUsernameResult = String
type ProvisionUiChooseDeviceResult = DeviceID
type ProvisionUiChooseDeviceTypeResult = DeviceType
type ProvisionUiChooseGPGMethodResult = GPGMethod
type ProvisionUiChooseProvisioningMethodResult = ProvisionMethod
type ProvisionUiDisplayAndPromptSecretResult = SecretResponse
type ProvisionUiPromptNewDeviceNameResult = String
type ProvisionUiSwitchToGPGSignOKResult = Boolean
type QuotaVerifySessionResult = VerifySessionRes
type ReachabilityCheckReachabilityResult = Reachability
type ReachabilityStartReachabilityResult = Reachability
type RekeyGetPendingRekeyStatusResult = ProblemSetDevices
type RekeyGetRevokeWarningResult = RevokeWarning
type RekeyRekeyStatusFinishResult = Outcome
type RekeyUIDelegateRekeyUIResult = Int
type SaltpackSaltpackDecryptResult = SaltpackEncryptedMessageInfo
type SecretKeysGetSecretKeysResult = SecretKeys
type SecretUiGetPassphraseResult = GetPassphraseRes
type SessionCurrentSessionResult = Session
type SignupGetInvitationCodeResult = String
type SignupSignupResult = SignupRes
type SigsSigListJSONResult = String
type SigsSigListResult = ?Array<Sig>
type SimpleFSSimpleFSCheckResult = Progress
type SimpleFSSimpleFSGetOpsResult = ?Array<OpDescription>
type SimpleFSSimpleFSMakeOpidResult = OpID
type SimpleFSSimpleFSReadListResult = SimpleFSListResult
type SimpleFSSimpleFSReadResult = FileContent
type SimpleFSSimpleFSStatResult = Dirent
type StreamUiReadResult = Bytes
type StreamUiWriteResult = Int
type TeamsGetTeamAndMemberShowcaseResult = TeamAndMemberShowcase
type TeamsGetTeamRootIDResult = TeamID
type TeamsGetTeamShowcaseResult = TeamShowcase
type TeamsLoadTeamPlusApplicationKeysResult = TeamPlusApplicationKeys
type TeamsLookupImplicitTeamResult = LookupImplicitTeamRes
type TeamsLookupOrCreateImplicitTeamResult = LookupImplicitTeamRes
type TeamsTeamAddEmailsBulkResult = BulkRes
type TeamsTeamAddMemberResult = TeamAddMemberResult
type TeamsTeamCreateResult = TeamCreateResult
type TeamsTeamCreateSeitanTokenResult = SeitanIKey
type TeamsTeamCreateWithSettingsResult = TeamCreateResult
type TeamsTeamGetResult = TeamDetails
type TeamsTeamImplicitAdminsResult = ?Array<TeamMemberDetails>
type TeamsTeamListRequestsResult = ?Array<TeamJoinRequest>
type TeamsTeamListResult = AnnotatedTeamList
type TeamsTeamListSubteamsRecursiveResult = ?Array<TeamIDAndName>
type TeamsTeamRequestAccessResult = TeamRequestAccessResult
type TeamsTeamTreeResult = TeamTreeResult
type TeamsUiConfirmRootTeamDeleteResult = Boolean
type TeamsUiConfirmSubteamDeleteResult = Boolean
type TestTestCallbackResult = String
type TestTestResult = Test
type TlfCompleteAndCanonicalizePrivateTlfNameResult = CanonicalTLFNameAndIDWithBreaks
type TlfCryptKeysResult = GetTLFCryptKeysRes
type TlfKeysGetPublicCanonicalTLFNameAndIDResult = CanonicalTLFNameAndIDWithBreaks
type TlfKeysGetTLFCryptKeysResult = GetTLFCryptKeysRes
type TlfPublicCanonicalTLFNameAndIDResult = CanonicalTLFNameAndIDWithBreaks
type TrackTrackResult = ConfirmResult
type UiPromptYesNoResult = Boolean
type UserInterestingPeopleResult = ?Array<InterestingPerson>
type UserListTrackers2Result = UserSummary2Set
type UserListTrackersByNameResult = ?Array<Tracker>
type UserListTrackersResult = ?Array<Tracker>
type UserListTrackersSelfResult = ?Array<Tracker>
type UserListTrackingJSONResult = String
type UserListTrackingResult = ?Array<UserSummary>
type UserLoadAllPublicKeysUnverifiedResult = ?Array<PublicKey>
type UserLoadMyPublicKeysResult = ?Array<PublicKey>
type UserLoadMySettingsResult = UserSettings
type UserLoadPublicKeysResult = ?Array<PublicKey>
type UserLoadUncheckedUserSummariesResult = ?Array<UserSummary>
type UserLoadUserByNameResult = User
type UserLoadUserPlusKeysResult = UserPlusKeys
type UserLoadUserResult = User
type UserSearchResult = ?Array<SearchResult>

export type IncomingCallMapType = {|
  'keybase.1.gpgUi.wantToAddGPGKey'?: (
    params: {|
      sessionID: Int
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: GpgUiWantToAddGPGKeyResult) => void,
    }
  ) => void,
  'keybase.1.gpgUi.confirmDuplicateKeyChosen'?: (
    params: {|
      sessionID: Int
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: GpgUiConfirmDuplicateKeyChosenResult) => void,
    }
  ) => void,
  'keybase.1.gpgUi.selectKeyAndPushOption'?: (
    params: {|
      sessionID: Int,
      keys?: ?Array<GPGKey>
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: GpgUiSelectKeyAndPushOptionResult) => void,
    }
  ) => void,
  'keybase.1.gpgUi.selectKey'?: (
    params: {|
      sessionID: Int,
      keys?: ?Array<GPGKey>
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: GpgUiSelectKeyResult) => void,
    }
  ) => void,
  'keybase.1.gpgUi.sign'?: (
    params: {|
      msg: Bytes,
      fingerprint: Bytes
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: GpgUiSignResult) => void,
    }
  ) => void,
  'keybase.1.gpgUi.getTTY'?: (
    params: void,
    response: {
      error: RPCErrorHandler,
      result: (result: GpgUiGetTTYResult) => void,
    }
  ) => void,
  'keybase.1.gregorUI.pushState'?: (
    params: {|
      state: Gregor1.State,
      reason: PushReason
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.gregorUI.pushOutOfBandMessages'?: (
    params: {|
      oobm?: ?Array<Gregor1.OutOfBandMessage>
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.homeUi.homeUIRefresh'?: (
    params: void,
    response: CommonResponseHandler
  ) => void,
  'keybase.1.identifyUi.displayTLFCreateWithInvite'?: (
    params: {|
      sessionID: Int,
      folderName: String,
      isPrivate: Boolean,
      assertion: String,
      socialAssertion: SocialAssertion,
      inviteLink: String,
      throttled: Boolean
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.identifyUi.delegateIdentifyUI'?: (
    params: void,
    response: {
      error: RPCErrorHandler,
      result: (result: IdentifyUiDelegateIdentifyUIResult) => void,
    }
  ) => void,
  'keybase.1.identifyUi.start'?: (
    params: {|
      sessionID: Int,
      username: String,
      reason: IdentifyReason,
      forceDisplay?: Boolean
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.identifyUi.displayKey'?: (
    params: {|
      sessionID: Int,
      key: IdentifyKey
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.identifyUi.reportLastTrack'?: (
    params: {|
      sessionID: Int,
      track?: ?TrackSummary
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.identifyUi.launchNetworkChecks'?: (
    params: {|
      sessionID: Int,
      identity: Identity,
      user: User
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.identifyUi.displayTrackStatement'?: (
    params: {|
      sessionID: Int,
      stmt: String
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.identifyUi.finishWebProofCheck'?: (
    params: {|
      sessionID: Int,
      rp: RemoteProof,
      lcr: LinkCheckResult
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.identifyUi.finishSocialProofCheck'?: (
    params: {|
      sessionID: Int,
      rp: RemoteProof,
      lcr: LinkCheckResult
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.identifyUi.displayCryptocurrency'?: (
    params: {|
      sessionID: Int,
      c: Cryptocurrency
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.identifyUi.reportTrackToken'?: (
    params: {|
      sessionID: Int,
      trackToken: TrackToken
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.identifyUi.displayUserCard'?: (
    params: {|
      sessionID: Int,
      card: UserCard
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.identifyUi.confirm'?: (
    params: {|
      sessionID: Int,
      outcome: IdentifyOutcome
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: IdentifyUiConfirmResult) => void,
    }
  ) => void,
  'keybase.1.identifyUi.cancel'?: (
    params: {|
      sessionID: Int
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.identifyUi.finish'?: (
    params: {|
      sessionID: Int
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.identifyUi.dismiss'?: (
    params: {|
      sessionID: Int,
      username: String,
      reason: DismissReason
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.logUi.log'?: (
    params: {|
      sessionID: Int,
      level: LogLevel,
      text: Text
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.loginUi.getEmailOrUsername'?: (
    params: {|
      sessionID: Int
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: LoginUiGetEmailOrUsernameResult) => void,
    }
  ) => void,
  'keybase.1.loginUi.promptRevokePaperKeys'?: (
    params: {|
      sessionID: Int,
      device: Device,
      index: Int
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: LoginUiPromptRevokePaperKeysResult) => void,
    }
  ) => void,
  'keybase.1.loginUi.displayPaperKeyPhrase'?: (
    params: {|
      sessionID: Int,
      phrase: String
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.loginUi.displayPrimaryPaperKey'?: (
    params: {|
      sessionID: Int,
      phrase: String
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.logsend.prepareLogsend'?: (
    params: void,
    response: CommonResponseHandler
  ) => void,
  'keybase.1.NotifyApp.exit'?: (
    params: void,
    response: CommonResponseHandler
  ) => void,
  'keybase.1.NotifyBadges.badgeState'?: (
    params: {|
      badgeState: BadgeState
    |} /* ,
    response: {} // Notify call
    */
  ) => void,
  'keybase.1.NotifyFavorites.favoritesChanged'?: (
    params: {|
      uid: UID
    |} /* ,
    response: {} // Notify call
    */
  ) => void,
  'keybase.1.NotifyFS.FSActivity'?: (
    params: {|
      notification: FSNotification
    |} /* ,
    response: {} // Notify call
    */
  ) => void,
  'keybase.1.NotifyFS.FSSyncActivity'?: (
    params: {|
      status: FSPathSyncStatus
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.NotifyFS.FSEditListResponse'?: (
    params: {|
      edits?: ?Array<FSNotification>,
      requestID: Int
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.NotifyFS.FSSyncStatusResponse'?: (
    params: {|
      status: FSSyncStatus,
      requestID: Int
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.NotifyKeyfamily.keyfamilyChanged'?: (
    params: {|
      uid: UID
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.NotifyPaperKey.paperKeyCached'?: (
    params: {|
      uid: UID,
      encKID: KID,
      sigKID: KID
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.NotifyPGP.pgpKeyInSecretStoreFile'?: (
    params: void,
    response: CommonResponseHandler
  ) => void,
  'keybase.1.NotifyService.shutdown'?: (
    params: void,
    response: CommonResponseHandler
  ) => void,
  'keybase.1.NotifySession.loggedOut'?: (
    params: void /* ,
    response: {} // Notify call
    */
  ) => void,
  'keybase.1.NotifySession.loggedIn'?: (
    params: {|
      username: String
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.NotifySession.clientOutOfDate'?: (
    params: {|
      upgradeTo: String,
      upgradeURI: String,
      upgradeMsg: String
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.NotifyTeam.teamChanged'?: (
    params: {|
      teamID: TeamID,
      teamName: String,
      latestSeqno: Seqno,
      changes: TeamChangeSet
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.NotifyTeam.teamDeleted'?: (
    params: {|
      teamID: TeamID
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.NotifyTeam.teamExit'?: (
    params: {|
      teamID: TeamID
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.NotifyTracking.trackingChanged'?: (
    params: {|
      uid: UID,
      username: String,
      isTracking: Boolean
    |} /* ,
    response: {} // Notify call
    */
  ) => void,
  'keybase.1.NotifyUsers.userChanged'?: (
    params: {|
      uid: UID
    |} /* ,
    response: {} // Notify call
    */
  ) => void,
  'keybase.1.pgpUi.outputSignatureSuccess'?: (
    params: {|
      sessionID: Int,
      fingerprint: String,
      username: String,
      signedAt: Time
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.pgpUi.outputSignatureSuccessNonKeybase'?: (
    params: {|
      sessionID: Int,
      keyID: String,
      signedAt: Time
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.pgpUi.keyGenerated'?: (
    params: {|
      sessionID: Int,
      kid: KID,
      key: KeyInfo
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.pgpUi.shouldPushPrivate'?: (
    params: {|
      sessionID: Int
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: PgpUiShouldPushPrivateResult) => void,
    }
  ) => void,
  'keybase.1.pgpUi.finished'?: (
    params: {|
      sessionID: Int
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.proveUi.promptOverwrite'?: (
    params: {|
      sessionID: Int,
      account: String,
      typ: PromptOverwriteType
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: ProveUiPromptOverwriteResult) => void,
    }
  ) => void,
  'keybase.1.proveUi.promptUsername'?: (
    params: {|
      sessionID: Int,
      prompt: String,
      prevError?: ?Status
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: ProveUiPromptUsernameResult) => void,
    }
  ) => void,
  'keybase.1.proveUi.outputPrechecks'?: (
    params: {|
      sessionID: Int,
      text: Text
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.proveUi.preProofWarning'?: (
    params: {|
      sessionID: Int,
      text: Text
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: ProveUiPreProofWarningResult) => void,
    }
  ) => void,
  'keybase.1.proveUi.outputInstructions'?: (
    params: {|
      sessionID: Int,
      instructions: Text,
      proof: String
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.proveUi.okToCheck'?: (
    params: {|
      sessionID: Int,
      name: String,
      attempt: Int
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: ProveUiOkToCheckResult) => void,
    }
  ) => void,
  'keybase.1.proveUi.displayRecheckWarning'?: (
    params: {|
      sessionID: Int,
      text: Text
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.provisionUi.chooseProvisioningMethod'?: (
    params: {|
      sessionID: Int,
      gpgOption: Boolean
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: ProvisionUiChooseProvisioningMethodResult) => void,
    }
  ) => void,
  'keybase.1.provisionUi.chooseGPGMethod'?: (
    params: {|
      sessionID: Int,
      keys?: ?Array<GPGKey>
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: ProvisionUiChooseGPGMethodResult) => void,
    }
  ) => void,
  'keybase.1.provisionUi.switchToGPGSignOK'?: (
    params: {|
      sessionID: Int,
      key: GPGKey,
      importError: String
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: ProvisionUiSwitchToGPGSignOKResult) => void,
    }
  ) => void,
  'keybase.1.provisionUi.chooseDevice'?: (
    params: {|
      sessionID: Int,
      devices?: ?Array<Device>,
      canSelectNoDevice: Boolean
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: ProvisionUiChooseDeviceResult) => void,
    }
  ) => void,
  'keybase.1.provisionUi.chooseDeviceType'?: (
    params: {|
      sessionID: Int,
      kind: ChooseType
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: ProvisionUiChooseDeviceTypeResult) => void,
    }
  ) => void,
  'keybase.1.provisionUi.DisplayAndPromptSecret'?: (
    params: {|
      sessionID: Int,
      secret: Bytes,
      phrase: String,
      otherDeviceType: DeviceType,
      previousErr: String
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: ProvisionUiDisplayAndPromptSecretResult) => void,
    }
  ) => void,
  'keybase.1.provisionUi.DisplaySecretExchanged'?: (
    params: {|
      sessionID: Int
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.provisionUi.PromptNewDeviceName'?: (
    params: {|
      sessionID: Int,
      existingDevices?: ?Array<String>,
      errorMessage: String
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: ProvisionUiPromptNewDeviceNameResult) => void,
    }
  ) => void,
  'keybase.1.provisionUi.ProvisioneeSuccess'?: (
    params: {|
      sessionID: Int,
      username: String,
      deviceName: String
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.provisionUi.ProvisionerSuccess'?: (
    params: {|
      sessionID: Int,
      deviceName: String,
      deviceType: String
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.rekeyUI.delegateRekeyUI'?: (
    params: void,
    response: {
      error: RPCErrorHandler,
      result: (result: RekeyUIDelegateRekeyUIResult) => void,
    }
  ) => void,
  'keybase.1.rekeyUI.refresh'?: (
    params: {|
      sessionID: Int,
      problemSetDevices: ProblemSetDevices
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.rekeyUI.rekeySendEvent'?: (
    params: {|
      sessionID: Int,
      event: RekeyEvent
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.saltpackUi.saltpackPromptForDecrypt'?: (
    params: {|
      sessionID: Int,
      sender: SaltpackSender,
      usedDelegateUI: Boolean
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.saltpackUi.saltpackVerifySuccess'?: (
    params: {|
      sessionID: Int,
      signingKID: KID,
      sender: SaltpackSender
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.saltpackUi.saltpackVerifyBadSender'?: (
    params: {|
      sessionID: Int,
      signingKID: KID,
      sender: SaltpackSender
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.secretUi.getPassphrase'?: (
    params: {|
      sessionID: Int,
      pinentry: GUIEntryArg,
      terminal?: ?SecretEntryArg
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: SecretUiGetPassphraseResult) => void,
    }
  ) => void,
  'keybase.1.streamUi.close'?: (
    params: {|
      sessionID: Int,
      s: Stream
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.streamUi.read'?: (
    params: {|
      sessionID: Int,
      s: Stream,
      sz: Int
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: StreamUiReadResult) => void,
    }
  ) => void,
  'keybase.1.streamUi.reset'?: (
    params: {|
      sessionID: Int,
      s: Stream
    |},
    response: CommonResponseHandler
  ) => void,
  'keybase.1.streamUi.write'?: (
    params: {|
      sessionID: Int,
      s: Stream,
      buf: Bytes
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: StreamUiWriteResult) => void,
    }
  ) => void,
  'keybase.1.teamsUi.confirmRootTeamDelete'?: (
    params: {|
      sessionID: Int,
      teamName: String
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: TeamsUiConfirmRootTeamDeleteResult) => void,
    }
  ) => void,
  'keybase.1.teamsUi.confirmSubteamDelete'?: (
    params: {|
      sessionID: Int,
      teamName: String
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: TeamsUiConfirmSubteamDeleteResult) => void,
    }
  ) => void,
  'keybase.1.ui.promptYesNo'?: (
    params: {|
      sessionID: Int,
      text: Text,
      promptDefault: PromptDefault
    |},
    response: {
      error: RPCErrorHandler,
      result: (result: UiPromptYesNoResult) => void,
    }
  ) => void
|}
