// @flow
/* eslint-disable */

// This file is auto-generated by client/protocol/Makefile.
import * as Gregor1 from './flow-types-gregor'
import * as Keybase1 from './flow-types'
import engine, {EngineChannel} from '../../engine'
import {RPCError} from '../../util/errors'
import {putOnChannelMap, createChannelMap, closeChannelMap} from '../../util/saga'
import {Buffer} from 'buffer'
import type {ChannelConfig, ChannelMap} from './saga'

type Bool = boolean;
type Boolean = boolean
type Bytes = Buffer
type Double = number
type Int = number
type Int64 = number
type Long = number
type String = string
type Uint = number
type Uint64 = number
type WaitingHandlerType = (waiting: boolean) => void

const engineRpcOutgoing = (method: string, params: any, callbackOverride: any, incomingCallMapOverride: any) => engine()._rpcOutgoing(method, params, callbackOverride, incomingCallMapOverride)

type RequestCommon = { waitingHandler?: WaitingHandlerType, incomingCallMap?: IncomingCallMapType }
type RequestErrorCallback = { callback?: ?(err: ?RPCError) => void }
type RPCErrorHandler = (err: RPCError) => void
type CommonResponseHandler = { error: RPCErrorHandler, result: (...rest: Array<void>) => void }

function _channelMapRpcHelper(channelConfig: ChannelConfig<*>, partialRpcCall: (incomingCallMap: any, callback: Function) => void): ChannelMap<*> {
  const channelMap = createChannelMap(channelConfig)
  const incomingCallMap = Object.keys(channelMap).reduce((acc, k) => {
    acc[k] = (params, response) => {
      putOnChannelMap(channelMap, k, {params, response})
    }
    return acc
  }, {})
  const callback = (error, params) => {
    channelMap['finished'] && putOnChannelMap(channelMap, 'finished', {error, params})
    closeChannelMap(channelMap)
  }
  partialRpcCall(incomingCallMap, callback)
  return channelMap
}


export const chatUiMessageUnboxedState = {
  valid: 1,
  error: 2,
  outbox: 3,
  placeholder: 4,
}

export const commonConversationExistence = {
  active: 0,
  archived: 1,
  deleted: 2,
}

export const commonConversationMemberStatus = {
  active: 0,
  removed: 1,
  left: 2,
  preview: 3,
  reset: 4,
}

export const commonConversationMembersType = {
  kbfs: 0,
  team: 1,
  impteam: 2,
}

export const commonConversationStatus = {
  unfiled: 0,
  favorite: 1,
  ignored: 2,
  blocked: 3,
  muted: 4,
  reported: 5,
}

export const commonGlobalAppNotificationSetting = {
  newmessages: 0,
  plaintextmobile: 1,
  plaintextdesktop: 2,
}

export const commonInboxResType = {
  versionhit: 0,
  full: 1,
}

export const commonMessageType = {
  none: 0,
  text: 1,
  attachment: 2,
  edit: 3,
  delete: 4,
  metadata: 5,
  tlfname: 6,
  headline: 7,
  attachmentuploaded: 8,
  join: 9,
  leave: 10,
  system: 11,
}

export const commonNotificationKind = {
  generic: 0,
  atmention: 1,
}

export const commonSyncInboxResType = {
  current: 0,
  incremental: 1,
  clear: 2,
}

export const commonTeamType = {
  none: 0,
  simple: 1,
  complex: 2,
}

export const commonTopicType = {
  none: 0,
  chat: 1,
  dev: 2,
}

export const localAssetMetadataType = {
  none: 0,
  image: 1,
  video: 2,
  audio: 3,
}

export const localAssetTag = {
  primary: 0,
}

export const localBodyPlaintextVersion = {
  v1: 1,
  v2: 2,
  v3: 3,
  v4: 4,
  v5: 5,
  v6: 6,
  v7: 7,
  v8: 8,
  v9: 9,
  v10: 10,
}

export const localCancelPostRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: LocalCancelPostRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.CancelPost', request)

export const localCancelPostRpcPromise = (request: (RequestCommon & RequestErrorCallback & {param: LocalCancelPostRpcParam})): Promise<void> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.CancelPost', request, (error, result) => error ? reject(error) : resolve(result)))

export const localConversationErrorType = {
  permanent: 0,
  missinginfo: 1,
  selfrekeyneeded: 2,
  otherrekeyneeded: 3,
  identify: 4,
  transient: 5,
  none: 6,
}

export const localDeleteConversationLocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalDeleteConversationLocalResult) => void} & {param: LocalDeleteConversationLocalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.deleteConversationLocal', request)

export const localDeleteConversationLocalRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalDeleteConversationLocalResult) => void} & {param: LocalDeleteConversationLocalRpcParam})): Promise<LocalDeleteConversationLocalResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.deleteConversationLocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localDownloadAttachmentLocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalDownloadAttachmentLocalResult) => void} & {param: LocalDownloadAttachmentLocalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.DownloadAttachmentLocal', request)

export const localDownloadAttachmentLocalRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalDownloadAttachmentLocalResult) => void} & {param: LocalDownloadAttachmentLocalRpcParam})): Promise<LocalDownloadAttachmentLocalResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.DownloadAttachmentLocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localDownloadFileAttachmentLocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalDownloadFileAttachmentLocalResult) => void} & {param: LocalDownloadFileAttachmentLocalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.DownloadFileAttachmentLocal', request)

export const localDownloadFileAttachmentLocalRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalDownloadFileAttachmentLocalResult) => void} & {param: LocalDownloadFileAttachmentLocalRpcParam})): Promise<LocalDownloadFileAttachmentLocalResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.DownloadFileAttachmentLocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localFindConversationsLocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalFindConversationsLocalResult) => void} & {param: LocalFindConversationsLocalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.findConversationsLocal', request)

export const localFindConversationsLocalRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalFindConversationsLocalResult) => void} & {param: LocalFindConversationsLocalRpcParam})): Promise<LocalFindConversationsLocalResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.findConversationsLocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localGenerateOutboxIDRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalGenerateOutboxIDResult) => void}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.generateOutboxID', request)

export const localGenerateOutboxIDRpcPromise = (request: ?(RequestCommon & {callback?: ?(err: ?any, response: LocalGenerateOutboxIDResult) => void})): Promise<LocalGenerateOutboxIDResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.generateOutboxID', request, (error, result) => error ? reject(error) : resolve(result)))

export const localGetCachedThreadRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalGetCachedThreadResult) => void} & {param: LocalGetCachedThreadRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.getCachedThread', request)

export const localGetCachedThreadRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalGetCachedThreadResult) => void} & {param: LocalGetCachedThreadRpcParam})): Promise<LocalGetCachedThreadResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.getCachedThread', request, (error, result) => error ? reject(error) : resolve(result)))

export const localGetConversationForCLILocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalGetConversationForCLILocalResult) => void} & {param: LocalGetConversationForCLILocalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.getConversationForCLILocal', request)

export const localGetConversationForCLILocalRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalGetConversationForCLILocalResult) => void} & {param: LocalGetConversationForCLILocalRpcParam})): Promise<LocalGetConversationForCLILocalResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.getConversationForCLILocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localGetGlobalAppNotificationSettingsLocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalGetGlobalAppNotificationSettingsLocalResult) => void}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.getGlobalAppNotificationSettingsLocal', request)

export const localGetGlobalAppNotificationSettingsLocalRpcPromise = (request: ?(RequestCommon & {callback?: ?(err: ?any, response: LocalGetGlobalAppNotificationSettingsLocalResult) => void})): Promise<LocalGetGlobalAppNotificationSettingsLocalResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.getGlobalAppNotificationSettingsLocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localGetInboxAndUnboxLocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalGetInboxAndUnboxLocalResult) => void} & {param: LocalGetInboxAndUnboxLocalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.getInboxAndUnboxLocal', request)

export const localGetInboxAndUnboxLocalRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalGetInboxAndUnboxLocalResult) => void} & {param: LocalGetInboxAndUnboxLocalRpcParam})): Promise<LocalGetInboxAndUnboxLocalResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.getInboxAndUnboxLocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localGetInboxNonblockLocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalGetInboxNonblockLocalResult) => void} & {param: LocalGetInboxNonblockLocalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.getInboxNonblockLocal', request)

export const localGetInboxNonblockLocalRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalGetInboxNonblockLocalResult) => void} & {param: LocalGetInboxNonblockLocalRpcParam})): Promise<LocalGetInboxNonblockLocalResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.getInboxNonblockLocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localGetInboxSummaryForCLILocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalGetInboxSummaryForCLILocalResult) => void} & {param: LocalGetInboxSummaryForCLILocalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.getInboxSummaryForCLILocal', request)

export const localGetInboxSummaryForCLILocalRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalGetInboxSummaryForCLILocalResult) => void} & {param: LocalGetInboxSummaryForCLILocalRpcParam})): Promise<LocalGetInboxSummaryForCLILocalResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.getInboxSummaryForCLILocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localGetMessagesLocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalGetMessagesLocalResult) => void} & {param: LocalGetMessagesLocalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.GetMessagesLocal', request)

export const localGetMessagesLocalRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalGetMessagesLocalResult) => void} & {param: LocalGetMessagesLocalRpcParam})): Promise<LocalGetMessagesLocalResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.GetMessagesLocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localGetTLFConversationsLocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalGetTLFConversationsLocalResult) => void} & {param: LocalGetTLFConversationsLocalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.getTLFConversationsLocal', request)

export const localGetTLFConversationsLocalRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalGetTLFConversationsLocalResult) => void} & {param: LocalGetTLFConversationsLocalRpcParam})): Promise<LocalGetTLFConversationsLocalResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.getTLFConversationsLocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localGetThreadLocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalGetThreadLocalResult) => void} & {param: LocalGetThreadLocalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.getThreadLocal', request)

export const localGetThreadLocalRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalGetThreadLocalResult) => void} & {param: LocalGetThreadLocalRpcParam})): Promise<LocalGetThreadLocalResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.getThreadLocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localGetThreadNonblockRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalGetThreadNonblockResult) => void} & {param: LocalGetThreadNonblockRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.getThreadNonblock', request)

export const localGetThreadNonblockRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalGetThreadNonblockResult) => void} & {param: LocalGetThreadNonblockRpcParam})): Promise<LocalGetThreadNonblockResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.getThreadNonblock', request, (error, result) => error ? reject(error) : resolve(result)))

export const localHeaderPlaintextVersion = {
  v1: 1,
  v2: 2,
  v3: 3,
  v4: 4,
  v5: 5,
  v6: 6,
  v7: 7,
  v8: 8,
  v9: 9,
  v10: 10,
}

export const localJoinConversationByIDLocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalJoinConversationByIDLocalResult) => void} & {param: LocalJoinConversationByIDLocalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.joinConversationByIDLocal', request)

export const localJoinConversationByIDLocalRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalJoinConversationByIDLocalResult) => void} & {param: LocalJoinConversationByIDLocalRpcParam})): Promise<LocalJoinConversationByIDLocalResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.joinConversationByIDLocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localJoinConversationLocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalJoinConversationLocalResult) => void} & {param: LocalJoinConversationLocalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.joinConversationLocal', request)

export const localJoinConversationLocalRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalJoinConversationLocalResult) => void} & {param: LocalJoinConversationLocalRpcParam})): Promise<LocalJoinConversationLocalResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.joinConversationLocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localLeaveConversationLocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalLeaveConversationLocalResult) => void} & {param: LocalLeaveConversationLocalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.leaveConversationLocal', request)

export const localLeaveConversationLocalRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalLeaveConversationLocalResult) => void} & {param: LocalLeaveConversationLocalRpcParam})): Promise<LocalLeaveConversationLocalResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.leaveConversationLocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localMakePreviewRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalMakePreviewResult) => void} & {param: LocalMakePreviewRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.makePreview', request)

export const localMakePreviewRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalMakePreviewResult) => void} & {param: LocalMakePreviewRpcParam})): Promise<LocalMakePreviewResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.makePreview', request, (error, result) => error ? reject(error) : resolve(result)))

export const localMarkAsReadLocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalMarkAsReadLocalResult) => void} & {param: LocalMarkAsReadLocalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.markAsReadLocal', request)

export const localMarkAsReadLocalRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalMarkAsReadLocalResult) => void} & {param: LocalMarkAsReadLocalRpcParam})): Promise<LocalMarkAsReadLocalResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.markAsReadLocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localMessageSystemType = {
  addedtoteam: 0,
  inviteaddedtoteam: 1,
  complexteam: 2,
}

export const localMessageUnboxedErrorType = {
  misc: 0,
  badversionCritical: 1,
  badversion: 2,
  identify: 3,
}

export const localNewConversationLocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalNewConversationLocalResult) => void} & {param: LocalNewConversationLocalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.newConversationLocal', request)

export const localNewConversationLocalRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalNewConversationLocalResult) => void} & {param: LocalNewConversationLocalRpcParam})): Promise<LocalNewConversationLocalResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.newConversationLocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localOutboxErrorType = {
  misc: 0,
  offline: 1,
  identify: 2,
  toolong: 3,
  duplicate: 4,
}

export const localOutboxStateType = {
  sending: 0,
  error: 1,
}

export const localPostAttachmentLocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalPostAttachmentLocalResult) => void} & {param: LocalPostAttachmentLocalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.postAttachmentLocal', request)

export const localPostAttachmentLocalRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalPostAttachmentLocalResult) => void} & {param: LocalPostAttachmentLocalRpcParam})): Promise<LocalPostAttachmentLocalResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.postAttachmentLocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localPostDeleteNonblockRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalPostDeleteNonblockResult) => void} & {param: LocalPostDeleteNonblockRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.postDeleteNonblock', request)

export const localPostDeleteNonblockRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalPostDeleteNonblockResult) => void} & {param: LocalPostDeleteNonblockRpcParam})): Promise<LocalPostDeleteNonblockResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.postDeleteNonblock', request, (error, result) => error ? reject(error) : resolve(result)))

export const localPostEditNonblockRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalPostEditNonblockResult) => void} & {param: LocalPostEditNonblockRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.postEditNonblock', request)

export const localPostEditNonblockRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalPostEditNonblockResult) => void} & {param: LocalPostEditNonblockRpcParam})): Promise<LocalPostEditNonblockResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.postEditNonblock', request, (error, result) => error ? reject(error) : resolve(result)))

export const localPostFileAttachmentLocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalPostFileAttachmentLocalResult) => void} & {param: LocalPostFileAttachmentLocalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.postFileAttachmentLocal', request)

export const localPostFileAttachmentLocalRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalPostFileAttachmentLocalResult) => void} & {param: LocalPostFileAttachmentLocalRpcParam})): Promise<LocalPostFileAttachmentLocalResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.postFileAttachmentLocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localPostHeadlineNonblockRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalPostHeadlineNonblockResult) => void} & {param: LocalPostHeadlineNonblockRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.postHeadlineNonblock', request)

export const localPostHeadlineNonblockRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalPostHeadlineNonblockResult) => void} & {param: LocalPostHeadlineNonblockRpcParam})): Promise<LocalPostHeadlineNonblockResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.postHeadlineNonblock', request, (error, result) => error ? reject(error) : resolve(result)))

export const localPostHeadlineRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalPostHeadlineResult) => void} & {param: LocalPostHeadlineRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.postHeadline', request)

export const localPostHeadlineRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalPostHeadlineResult) => void} & {param: LocalPostHeadlineRpcParam})): Promise<LocalPostHeadlineResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.postHeadline', request, (error, result) => error ? reject(error) : resolve(result)))

export const localPostLocalNonblockRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalPostLocalNonblockResult) => void} & {param: LocalPostLocalNonblockRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.postLocalNonblock', request)

export const localPostLocalNonblockRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalPostLocalNonblockResult) => void} & {param: LocalPostLocalNonblockRpcParam})): Promise<LocalPostLocalNonblockResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.postLocalNonblock', request, (error, result) => error ? reject(error) : resolve(result)))

export const localPostLocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalPostLocalResult) => void} & {param: LocalPostLocalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.postLocal', request)

export const localPostLocalRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalPostLocalResult) => void} & {param: LocalPostLocalRpcParam})): Promise<LocalPostLocalResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.postLocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localPostMetadataNonblockRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalPostMetadataNonblockResult) => void} & {param: LocalPostMetadataNonblockRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.postMetadataNonblock', request)

export const localPostMetadataNonblockRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalPostMetadataNonblockResult) => void} & {param: LocalPostMetadataNonblockRpcParam})): Promise<LocalPostMetadataNonblockResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.postMetadataNonblock', request, (error, result) => error ? reject(error) : resolve(result)))

export const localPostMetadataRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalPostMetadataResult) => void} & {param: LocalPostMetadataRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.postMetadata', request)

export const localPostMetadataRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalPostMetadataResult) => void} & {param: LocalPostMetadataRpcParam})): Promise<LocalPostMetadataResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.postMetadata', request, (error, result) => error ? reject(error) : resolve(result)))

export const localPostTextNonblockRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalPostTextNonblockResult) => void} & {param: LocalPostTextNonblockRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.postTextNonblock', request)

export const localPostTextNonblockRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalPostTextNonblockResult) => void} & {param: LocalPostTextNonblockRpcParam})): Promise<LocalPostTextNonblockResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.postTextNonblock', request, (error, result) => error ? reject(error) : resolve(result)))

export const localRetryPostRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: LocalRetryPostRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.RetryPost', request)

export const localRetryPostRpcPromise = (request: (RequestCommon & RequestErrorCallback & {param: LocalRetryPostRpcParam})): Promise<void> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.RetryPost', request, (error, result) => error ? reject(error) : resolve(result)))

export const localSetAppNotificationSettingsLocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalSetAppNotificationSettingsLocalResult) => void} & {param: LocalSetAppNotificationSettingsLocalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.setAppNotificationSettingsLocal', request)

export const localSetAppNotificationSettingsLocalRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalSetAppNotificationSettingsLocalResult) => void} & {param: LocalSetAppNotificationSettingsLocalRpcParam})): Promise<LocalSetAppNotificationSettingsLocalResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.setAppNotificationSettingsLocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localSetConversationStatusLocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalSetConversationStatusLocalResult) => void} & {param: LocalSetConversationStatusLocalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.SetConversationStatusLocal', request)

export const localSetConversationStatusLocalRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalSetConversationStatusLocalResult) => void} & {param: LocalSetConversationStatusLocalRpcParam})): Promise<LocalSetConversationStatusLocalResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.SetConversationStatusLocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localSetGlobalAppNotificationSettingsLocalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: LocalSetGlobalAppNotificationSettingsLocalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.setGlobalAppNotificationSettingsLocal', request)

export const localSetGlobalAppNotificationSettingsLocalRpcPromise = (request: (RequestCommon & RequestErrorCallback & {param: LocalSetGlobalAppNotificationSettingsLocalRpcParam})): Promise<void> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.setGlobalAppNotificationSettingsLocal', request, (error, result) => error ? reject(error) : resolve(result)))

export const localUnboxMobilePushNotificationRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: LocalUnboxMobilePushNotificationResult) => void} & {param: LocalUnboxMobilePushNotificationRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.unboxMobilePushNotification', request)

export const localUnboxMobilePushNotificationRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: LocalUnboxMobilePushNotificationResult) => void} & {param: LocalUnboxMobilePushNotificationRpcParam})): Promise<LocalUnboxMobilePushNotificationResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.unboxMobilePushNotification', request, (error, result) => error ? reject(error) : resolve(result)))

export const localUpdateTypingRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: LocalUpdateTypingRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.local.updateTyping', request)

export const localUpdateTypingRpcPromise = (request: (RequestCommon & RequestErrorCallback & {param: LocalUpdateTypingRpcParam})): Promise<void> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.local.updateTyping', request, (error, result) => error ? reject(error) : resolve(result)))

export const notifyChatChatActivityType = {
  reserved: 0,
  incomingMessage: 1,
  readMessage: 2,
  newConversation: 3,
  setStatus: 4,
  failedMessage: 5,
  membersUpdate: 6,
  setAppNotificationSettings: 7,
  teamtype: 8,
}

export const notifyChatStaleUpdateType = {
  clear: 0,
  newactivity: 1,
}

export const remoteChannelMention = {
  none: 0,
  all: 1,
  here: 2,
}

export const remoteDeleteConversationRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemoteDeleteConversationResult) => void} & {param: RemoteDeleteConversationRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.deleteConversation', request)

export const remoteDeleteConversationRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: RemoteDeleteConversationResult) => void} & {param: RemoteDeleteConversationRpcParam})): Promise<RemoteDeleteConversationResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.deleteConversation', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteGetGlobalAppNotificationSettingsRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemoteGetGlobalAppNotificationSettingsResult) => void}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.getGlobalAppNotificationSettings', request)

export const remoteGetGlobalAppNotificationSettingsRpcPromise = (request: ?(RequestCommon & {callback?: ?(err: ?any, response: RemoteGetGlobalAppNotificationSettingsResult) => void})): Promise<RemoteGetGlobalAppNotificationSettingsResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.getGlobalAppNotificationSettings', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteGetInboxRemoteRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemoteGetInboxRemoteResult) => void} & {param: RemoteGetInboxRemoteRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.getInboxRemote', request)

export const remoteGetInboxRemoteRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: RemoteGetInboxRemoteResult) => void} & {param: RemoteGetInboxRemoteRpcParam})): Promise<RemoteGetInboxRemoteResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.getInboxRemote', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteGetInboxVersionRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemoteGetInboxVersionResult) => void} & {param: RemoteGetInboxVersionRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.getInboxVersion', request)

export const remoteGetInboxVersionRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: RemoteGetInboxVersionResult) => void} & {param: RemoteGetInboxVersionRpcParam})): Promise<RemoteGetInboxVersionResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.getInboxVersion', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteGetMessagesRemoteRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemoteGetMessagesRemoteResult) => void} & {param: RemoteGetMessagesRemoteRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.getMessagesRemote', request)

export const remoteGetMessagesRemoteRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: RemoteGetMessagesRemoteResult) => void} & {param: RemoteGetMessagesRemoteRpcParam})): Promise<RemoteGetMessagesRemoteResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.getMessagesRemote', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteGetPublicConversationsRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemoteGetPublicConversationsResult) => void} & {param: RemoteGetPublicConversationsRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.getPublicConversations', request)

export const remoteGetPublicConversationsRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: RemoteGetPublicConversationsResult) => void} & {param: RemoteGetPublicConversationsRpcParam})): Promise<RemoteGetPublicConversationsResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.getPublicConversations', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteGetS3ParamsRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemoteGetS3ParamsResult) => void} & {param: RemoteGetS3ParamsRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.getS3Params', request)

export const remoteGetS3ParamsRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: RemoteGetS3ParamsResult) => void} & {param: RemoteGetS3ParamsRpcParam})): Promise<RemoteGetS3ParamsResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.getS3Params', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteGetTLFConversationsRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemoteGetTLFConversationsResult) => void} & {param: RemoteGetTLFConversationsRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.getTLFConversations', request)

export const remoteGetTLFConversationsRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: RemoteGetTLFConversationsResult) => void} & {param: RemoteGetTLFConversationsRpcParam})): Promise<RemoteGetTLFConversationsResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.getTLFConversations', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteGetThreadRemoteRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemoteGetThreadRemoteResult) => void} & {param: RemoteGetThreadRemoteRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.getThreadRemote', request)

export const remoteGetThreadRemoteRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: RemoteGetThreadRemoteResult) => void} & {param: RemoteGetThreadRemoteRpcParam})): Promise<RemoteGetThreadRemoteResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.getThreadRemote', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteGetUnreadUpdateFullRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemoteGetUnreadUpdateFullResult) => void} & {param: RemoteGetUnreadUpdateFullRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.GetUnreadUpdateFull', request)

export const remoteGetUnreadUpdateFullRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: RemoteGetUnreadUpdateFullResult) => void} & {param: RemoteGetUnreadUpdateFullRpcParam})): Promise<RemoteGetUnreadUpdateFullResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.GetUnreadUpdateFull', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteJoinConversationRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemoteJoinConversationResult) => void} & {param: RemoteJoinConversationRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.joinConversation', request)

export const remoteJoinConversationRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: RemoteJoinConversationResult) => void} & {param: RemoteJoinConversationRpcParam})): Promise<RemoteJoinConversationResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.joinConversation', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteLeaveConversationRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemoteLeaveConversationResult) => void} & {param: RemoteLeaveConversationRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.leaveConversation', request)

export const remoteLeaveConversationRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: RemoteLeaveConversationResult) => void} & {param: RemoteLeaveConversationRpcParam})): Promise<RemoteLeaveConversationResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.leaveConversation', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteMarkAsReadRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemoteMarkAsReadResult) => void} & {param: RemoteMarkAsReadRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.markAsRead', request)

export const remoteMarkAsReadRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: RemoteMarkAsReadResult) => void} & {param: RemoteMarkAsReadRpcParam})): Promise<RemoteMarkAsReadResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.markAsRead', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteMessageBoxedVersion = {
  vnone: 0,
  v1: 1,
  v2: 2,
}

export const remoteNewConversationRemote2RpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemoteNewConversationRemote2Result) => void} & {param: RemoteNewConversationRemote2RpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.newConversationRemote2', request)

export const remoteNewConversationRemote2RpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: RemoteNewConversationRemote2Result) => void} & {param: RemoteNewConversationRemote2RpcParam})): Promise<RemoteNewConversationRemote2Result> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.newConversationRemote2', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteNewConversationRemoteRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemoteNewConversationRemoteResult) => void} & {param: RemoteNewConversationRemoteRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.newConversationRemote', request)

export const remoteNewConversationRemoteRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: RemoteNewConversationRemoteResult) => void} & {param: RemoteNewConversationRemoteRpcParam})): Promise<RemoteNewConversationRemoteResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.newConversationRemote', request, (error, result) => error ? reject(error) : resolve(result)))

export const remotePostRemoteRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemotePostRemoteResult) => void} & {param: RemotePostRemoteRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.postRemote', request)

export const remotePostRemoteRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: RemotePostRemoteResult) => void} & {param: RemotePostRemoteRpcParam})): Promise<RemotePostRemoteResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.postRemote', request, (error, result) => error ? reject(error) : resolve(result)))

export const remotePublishReadMessageRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: RemotePublishReadMessageRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.publishReadMessage', request)

export const remotePublishReadMessageRpcPromise = (request: (RequestCommon & RequestErrorCallback & {param: RemotePublishReadMessageRpcParam})): Promise<void> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.publishReadMessage', request, (error, result) => error ? reject(error) : resolve(result)))

export const remotePublishSetConversationStatusRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: RemotePublishSetConversationStatusRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.publishSetConversationStatus', request)

export const remotePublishSetConversationStatusRpcPromise = (request: (RequestCommon & RequestErrorCallback & {param: RemotePublishSetConversationStatusRpcParam})): Promise<void> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.publishSetConversationStatus', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteRemoteNotificationSuccessfulRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: RemoteRemoteNotificationSuccessfulRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.remoteNotificationSuccessful', request)

export const remoteRemoteNotificationSuccessfulRpcPromise = (request: (RequestCommon & RequestErrorCallback & {param: RemoteRemoteNotificationSuccessfulRpcParam})): Promise<void> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.remoteNotificationSuccessful', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteS3SignRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemoteS3SignResult) => void} & {param: RemoteS3SignRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.s3Sign', request)

export const remoteS3SignRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: RemoteS3SignResult) => void} & {param: RemoteS3SignRpcParam})): Promise<RemoteS3SignResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.s3Sign', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteSetAppNotificationSettingsRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemoteSetAppNotificationSettingsResult) => void} & {param: RemoteSetAppNotificationSettingsRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.setAppNotificationSettings', request)

export const remoteSetAppNotificationSettingsRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: RemoteSetAppNotificationSettingsResult) => void} & {param: RemoteSetAppNotificationSettingsRpcParam})): Promise<RemoteSetAppNotificationSettingsResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.setAppNotificationSettings', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteSetConversationStatusRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemoteSetConversationStatusResult) => void} & {param: RemoteSetConversationStatusRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.SetConversationStatus', request)

export const remoteSetConversationStatusRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: RemoteSetConversationStatusResult) => void} & {param: RemoteSetConversationStatusRpcParam})): Promise<RemoteSetConversationStatusResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.SetConversationStatus', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteSetGlobalAppNotificationSettingsRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: RemoteSetGlobalAppNotificationSettingsRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.setGlobalAppNotificationSettings', request)

export const remoteSetGlobalAppNotificationSettingsRpcPromise = (request: (RequestCommon & RequestErrorCallback & {param: RemoteSetGlobalAppNotificationSettingsRpcParam})): Promise<void> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.setGlobalAppNotificationSettings', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteSyncAllNotificationType = {
  state: 0,
  incremental: 1,
}

export const remoteSyncAllProtVers = {
  v0: 0,
  v1: 1,
}

export const remoteSyncAllRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemoteSyncAllResult) => void} & {param: RemoteSyncAllRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.syncAll', request)

export const remoteSyncAllRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: RemoteSyncAllResult) => void} & {param: RemoteSyncAllRpcParam})): Promise<RemoteSyncAllResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.syncAll', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteSyncChatRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemoteSyncChatResult) => void} & {param: RemoteSyncChatRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.syncChat', request)

export const remoteSyncChatRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: RemoteSyncChatResult) => void} & {param: RemoteSyncChatRpcParam})): Promise<RemoteSyncChatResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.syncChat', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteSyncInboxRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemoteSyncInboxResult) => void} & {param: RemoteSyncInboxRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.syncInbox', request)

export const remoteSyncInboxRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: RemoteSyncInboxResult) => void} & {param: RemoteSyncInboxRpcParam})): Promise<RemoteSyncInboxResult> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.syncInbox', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteTlfFinalizeRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: RemoteTlfFinalizeRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.tlfFinalize', request)

export const remoteTlfFinalizeRpcPromise = (request: (RequestCommon & RequestErrorCallback & {param: RemoteTlfFinalizeRpcParam})): Promise<void> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.tlfFinalize', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteTlfResolveRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: RemoteTlfResolveRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.tlfResolve', request)

export const remoteTlfResolveRpcPromise = (request: (RequestCommon & RequestErrorCallback & {param: RemoteTlfResolveRpcParam})): Promise<void> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.tlfResolve', request, (error, result) => error ? reject(error) : resolve(result)))

export const remoteUpdateTypingRemoteRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: RemoteUpdateTypingRemoteRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'chat.1.remote.updateTypingRemote', request)

export const remoteUpdateTypingRemoteRpcPromise = (request: (RequestCommon & RequestErrorCallback & {param: RemoteUpdateTypingRemoteRpcParam})): Promise<void> => new Promise((resolve, reject) => engineRpcOutgoing('chat.1.remote.updateTypingRemote', request, (error, result) => error ? reject(error) : resolve(result)))

export type AppNotificationSettingLocal = {|deviceType: Keybase1.DeviceType,kind: NotificationKind,enabled: Boolean,|}

export type Asset = {|filename: String,region: String,endpoint: String,bucket: String,path: String,size: Long,mimeType: String,encHash: Hash,key: Bytes,verifyKey: Bytes,title: String,nonce: Bytes,metadata: AssetMetadata,tag: AssetTag,|}

export type AssetMetadata ={ assetType: 1, image: ?AssetMetadataImage } | { assetType: 2, video: ?AssetMetadataVideo } | { assetType: 3, audio: ?AssetMetadataAudio }

export type AssetMetadataAudio = {|durationMs: Int,|}

export type AssetMetadataImage = {|width: Int,height: Int,|}

export type AssetMetadataType =0 // NONE_0
 | 1 // IMAGE_1
 | 2 // VIDEO_2
 | 3 // AUDIO_3


export type AssetMetadataVideo = {|width: Int,height: Int,durationMs: Int,|}

export type AssetTag =0 // PRIMARY_0


export type BodyPlaintext ={ version: 1, v1: ?BodyPlaintextV1 } | { version: 2, v2: ?BodyPlaintextUnsupported } | { version: 3, v3: ?BodyPlaintextUnsupported } | { version: 4, v4: ?BodyPlaintextUnsupported } | { version: 5, v5: ?BodyPlaintextUnsupported } | { version: 6, v6: ?BodyPlaintextUnsupported } | { version: 7, v7: ?BodyPlaintextUnsupported } | { version: 8, v8: ?BodyPlaintextUnsupported } | { version: 9, v9: ?BodyPlaintextUnsupported } | { version: 10, v10: ?BodyPlaintextUnsupported }

export type BodyPlaintextMetaInfo = {|crit: Boolean,|}

export type BodyPlaintextUnsupported = {|mi: BodyPlaintextMetaInfo,|}

export type BodyPlaintextV1 = {|messageBody: MessageBody,|}

export type BodyPlaintextVersion =1 // V1_1
 | 2 // V2_2
 | 3 // V3_3
 | 4 // V4_4
 | 5 // V5_5
 | 6 // V6_6
 | 7 // V7_7
 | 8 // V8_8
 | 9 // V9_9
 | 10 // V10_10


export type ChannelMention =0 // NONE_0
 | 1 // ALL_1
 | 2 // HERE_2


export type ChatActivity ={ activityType: 1, incomingMessage: ?IncomingMessage } | { activityType: 2, readMessage: ?ReadMessageInfo } | { activityType: 3, newConversation: ?NewConversationInfo } | { activityType: 4, setStatus: ?SetStatusInfo } | { activityType: 5, failedMessage: ?FailedMessageInfo } | { activityType: 6, membersUpdate: ?MembersUpdateInfo } | { activityType: 7, setAppNotificationSettings: ?SetAppNotificationSettingsInfo } | { activityType: 8, teamtype: ?TeamTypeInfo }

export type ChatActivityType =0 // RESERVED_0
 | 1 // INCOMING_MESSAGE_1
 | 2 // READ_MESSAGE_2
 | 3 // NEW_CONVERSATION_3
 | 4 // SET_STATUS_4
 | 5 // FAILED_MESSAGE_5
 | 6 // MEMBERS_UPDATE_6
 | 7 // SET_APP_NOTIFICATION_SETTINGS_7
 | 8 // TEAMTYPE_8


export type ChatSyncIncrementalInfo = {|items?: ?Array<UnverifiedInboxUIItem>,|}

export type ChatSyncResult ={ syncType: 0 } | { syncType: 2 } | { syncType: 1, incremental: ?ChatSyncIncrementalInfo }

export type ChatUiChatAttachmentDownloadProgressRpcParam = {|  bytesComplete: Long,
  bytesTotal: Long|}

export type ChatUiChatAttachmentPreviewUploadStartRpcParam = {|  metadata: AssetMetadata|}

export type ChatUiChatAttachmentUploadOutboxIDRpcParam = {|  outboxID: OutboxID|}

export type ChatUiChatAttachmentUploadProgressRpcParam = {|  bytesComplete: Long,
  bytesTotal: Long|}

export type ChatUiChatAttachmentUploadStartRpcParam = {|  metadata: AssetMetadata,
  placeholderMsgID: MessageID|}

export type ChatUiChatConfirmChannelDeleteRpcParam = {|  channel: String|}

export type ChatUiChatInboxConversationRpcParam = {|  conv: String|}

export type ChatUiChatInboxFailedRpcParam = {|  convID: ConversationID,
  error: ConversationErrorLocal|}

export type ChatUiChatInboxUnverifiedRpcParam = {|  inbox: String|}

export type ChatUiChatThreadCachedRpcParam = {|  thread?: ?String|}

export type ChatUiChatThreadFullRpcParam = {|  thread: String|}

export type ConvTypingUpdate = {|convID: ConversationID,typers?: ?Array<TyperInfo>,|}

export type Conversation = {|metadata: ConversationMetadata,readerInfo?: ?ConversationReaderInfo,notifications?: ?ConversationNotificationInfo,maxMsgs?: ?Array<MessageBoxed>,maxMsgSummaries?: ?Array<MessageSummary>,creatorInfo?: ?ConversationCreatorInfo,|}

export type ConversationCreatorInfo = {|ctime: Gregor1.Time,uid: Gregor1.UID,|}

export type ConversationCreatorInfoLocal = {|ctime: Gregor1.Time,username: String,|}

export type ConversationErrorLocal = {|typ: ConversationErrorType,message: String,remoteConv: Conversation,unverifiedTLFName: String,rekeyInfo?: ?ConversationErrorRekey,|}

export type ConversationErrorRekey = {|tlfName: String,tlfPublic: Boolean,rekeyers?: ?Array<String>,writerNames?: ?Array<String>,readerNames?: ?Array<String>,|}

export type ConversationErrorType =0 // PERMANENT_0
 | 1 // MISSINGINFO_1
 | 2 // SELFREKEYNEEDED_2
 | 3 // OTHERREKEYNEEDED_3
 | 4 // IDENTIFY_4
 | 5 // TRANSIENT_5
 | 6 // NONE_6


export type ConversationExistence =0 // ACTIVE_0
 | 1 // ARCHIVED_1
 | 2 // DELETED_2


export type ConversationFinalizeInfo = {|resetUser: String,resetDate: String,resetFull: String,resetTimestamp: Gregor1.Time,|}

export type ConversationID = Bytes

export type ConversationIDMessageIDPair = {|convID: ConversationID,msgID: MessageID,|}

export type ConversationIDMessageIDPairs = {|pairs?: ?Array<ConversationIDMessageIDPair>,|}

export type ConversationIDTriple = {|tlfid: TLFID,topicType: TopicType,topicID: TopicID,|}

export type ConversationInfoLocal = {|id: ConversationID,triple: ConversationIDTriple,tlfName: String,topicName: String,visibility: Keybase1.TLFVisibility,status: ConversationStatus,membersType: ConversationMembersType,memberStatus: ConversationMemberStatus,teamType: TeamType,existence: ConversationExistence,version: ConversationVers,participants?: ?Array<ConversationLocalParticipant>,finalizeInfo?: ?ConversationFinalizeInfo,resetNames?: ?Array<String>,|}

export type ConversationLocal = {|error?: ?ConversationErrorLocal,info: ConversationInfoLocal,readerInfo: ConversationReaderInfo,creatorInfo?: ?ConversationCreatorInfoLocal,notifications?: ?ConversationNotificationInfo,supersedes?: ?Array<ConversationMetadata>,supersededBy?: ?Array<ConversationMetadata>,maxMessages?: ?Array<MessageUnboxed>,isEmpty: Boolean,identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>,|}

export type ConversationLocalParticipant = {|username: String,fullname?: ?String,|}

export type ConversationMember = {|uid: Gregor1.UID,convID: ConversationID,|}

export type ConversationMemberStatus =0 // ACTIVE_0
 | 1 // REMOVED_1
 | 2 // LEFT_2
 | 3 // PREVIEW_3
 | 4 // RESET_4


export type ConversationMembersType =0 // KBFS_0
 | 1 // TEAM_1
 | 2 // IMPTEAM_2


export type ConversationMetadata = {|idTriple: ConversationIDTriple,conversationID: ConversationID,visibility: Keybase1.TLFVisibility,status: ConversationStatus,membersType: ConversationMembersType,teamType: TeamType,existence: ConversationExistence,version: ConversationVers,finalizeInfo?: ?ConversationFinalizeInfo,supersedes?: ?Array<ConversationMetadata>,supersededBy?: ?Array<ConversationMetadata>,activeList?: ?Array<Gregor1.UID>,allList?: ?Array<Gregor1.UID>,resetList?: ?Array<Gregor1.UID>,|}

export type ConversationNotificationInfo = {|channelWide: Boolean,settings: {[key: string]: {[key: string]: Boolean}},|}

export type ConversationReaderInfo = {|mtime: Gregor1.Time,readMsgid: MessageID,maxMsgid: MessageID,status: ConversationMemberStatus,|}

export type ConversationResolveInfo = {|newTLFName: String,|}

export type ConversationStaleUpdate = {|convID: ConversationID,updateType: StaleUpdateType,|}

export type ConversationStatus =0 // UNFILED_0
 | 1 // FAVORITE_1
 | 2 // IGNORED_2
 | 3 // BLOCKED_3
 | 4 // MUTED_4
 | 5 // REPORTED_5


export type ConversationVers = Uint64

export type DeleteConversationLocalRes = {|offline: Boolean,rateLimits?: ?Array<RateLimit>,|}

export type DeleteConversationRemoteRes = {|rateLimit?: ?RateLimit,|}

export type DownloadAttachmentLocalRes = {|offline: Boolean,rateLimits?: ?Array<RateLimit>,identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>,|}

export type EncryptedData = {|v: Int,e: Bytes,n: Bytes,|}

export type FailedMessageInfo = {|outboxRecords?: ?Array<OutboxRecord>,|}

export type FindConversationsLocalRes = {|conversations?: ?Array<ConversationLocal>,offline: Boolean,rateLimits?: ?Array<RateLimit>,identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>,|}

export type GenericPayload = {|Action: String,inboxVers: InboxVers,convID: ConversationID,|}

export type GetConversationForCLILocalQuery = {|markAsRead: Boolean,MessageTypes?: ?Array<MessageType>,Since?: ?String,limit: UnreadFirstNumLimit,conv: ConversationLocal,|}

export type GetConversationForCLILocalRes = {|conversation: ConversationLocal,messages?: ?Array<MessageUnboxed>,offline: Boolean,rateLimits?: ?Array<RateLimit>,|}

export type GetConversationMetadataRemoteRes = {|conv: Conversation,rateLimit?: ?RateLimit,|}

export type GetInboxAndUnboxLocalRes = {|conversations?: ?Array<ConversationLocal>,pagination?: ?Pagination,offline: Boolean,rateLimits?: ?Array<RateLimit>,identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>,|}

export type GetInboxByTLFIDRemoteRes = {|convs?: ?Array<Conversation>,rateLimit?: ?RateLimit,|}

export type GetInboxLocalQuery = {|name?: ?NameQuery,topicName?: ?String,convIDs?: ?Array<ConversationID>,topicType?: ?TopicType,tlfVisibility?: ?Keybase1.TLFVisibility,before?: ?Gregor1.Time,after?: ?Gregor1.Time,oneChatTypePerTLF?: ?Boolean,status?: ?Array<ConversationStatus>,unreadOnly: Boolean,readOnly: Boolean,computeActiveList: Boolean,|}

export type GetInboxLocalRes = {|conversationsUnverified?: ?Array<Conversation>,pagination?: ?Pagination,offline: Boolean,rateLimits?: ?Array<RateLimit>,identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>,|}

export type GetInboxQuery = {|convID?: ?ConversationID,topicType?: ?TopicType,tlfID?: ?TLFID,tlfVisibility?: ?Keybase1.TLFVisibility,before?: ?Gregor1.Time,after?: ?Gregor1.Time,oneChatTypePerTLF?: ?Boolean,status?: ?Array<ConversationStatus>,memberStatus?: ?Array<ConversationMemberStatus>,existences?: ?Array<ConversationExistence>,convIDs?: ?Array<ConversationID>,unreadOnly: Boolean,readOnly: Boolean,computeActiveList: Boolean,summarizeMaxMsgs: Boolean,|}

export type GetInboxRemoteRes = {|inbox: InboxView,rateLimit?: ?RateLimit,|}

export type GetInboxSummaryForCLILocalQuery = {|topicType: TopicType,after: String,before: String,visibility: Keybase1.TLFVisibility,status?: ?Array<ConversationStatus>,unreadFirst: Boolean,unreadFirstLimit: UnreadFirstNumLimit,activitySortedLimit: Int,|}

export type GetInboxSummaryForCLILocalRes = {|conversations?: ?Array<ConversationLocal>,offline: Boolean,rateLimits?: ?Array<RateLimit>,|}

export type GetMessagesLocalRes = {|messages?: ?Array<MessageUnboxed>,offline: Boolean,rateLimits?: ?Array<RateLimit>,identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>,|}

export type GetMessagesRemoteRes = {|msgs?: ?Array<MessageBoxed>,rateLimit?: ?RateLimit,|}

export type GetPublicConversationsRes = {|conversations?: ?Array<Conversation>,rateLimit?: ?RateLimit,|}

export type GetTLFConversationsLocalRes = {|convs?: ?Array<InboxUIItem>,offline: Boolean,rateLimits?: ?Array<RateLimit>,|}

export type GetTLFConversationsRes = {|conversations?: ?Array<Conversation>,rateLimit?: ?RateLimit,|}

export type GetThreadLocalRes = {|thread: ThreadView,offline: Boolean,rateLimits?: ?Array<RateLimit>,identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>,|}

export type GetThreadQuery = {|markAsRead: Boolean,messageTypes?: ?Array<MessageType>,disableResolveSupersedes: Boolean,before?: ?Gregor1.Time,after?: ?Gregor1.Time,messageIDControl?: ?MessageIDControl,|}

export type GetThreadRemoteRes = {|thread: ThreadViewBoxed,membersType: ConversationMembersType,rateLimit?: ?RateLimit,|}

export type GlobalAppNotificationSetting =0 // NEWMESSAGES_0
 | 1 // PLAINTEXTMOBILE_1
 | 2 // PLAINTEXTDESKTOP_2


export type GlobalAppNotificationSettings = {|settings: {[key: string]: Bool},|}

export type Hash = Bytes

export type HeaderPlaintext ={ version: 1, v1: ?HeaderPlaintextV1 } | { version: 2, v2: ?HeaderPlaintextUnsupported } | { version: 3, v3: ?HeaderPlaintextUnsupported } | { version: 4, v4: ?HeaderPlaintextUnsupported } | { version: 5, v5: ?HeaderPlaintextUnsupported } | { version: 6, v6: ?HeaderPlaintextUnsupported } | { version: 7, v7: ?HeaderPlaintextUnsupported } | { version: 8, v8: ?HeaderPlaintextUnsupported } | { version: 9, v9: ?HeaderPlaintextUnsupported } | { version: 10, v10: ?HeaderPlaintextUnsupported }

export type HeaderPlaintextMetaInfo = {|crit: Boolean,|}

export type HeaderPlaintextUnsupported = {|mi: HeaderPlaintextMetaInfo,|}

export type HeaderPlaintextV1 = {|conv: ConversationIDTriple,tlfName: String,tlfPublic: Boolean,messageType: MessageType,prev?: ?Array<MessagePreviousPointer>,sender: Gregor1.UID,senderDevice: Gregor1.DeviceID,bodyHash: Hash,outboxInfo?: ?OutboxInfo,outboxID?: ?OutboxID,headerSignature?: ?SignatureInfo,merkleRoot?: ?MerkleRoot,|}

export type HeaderPlaintextVersion =1 // V1_1
 | 2 // V2_2
 | 3 // V3_3
 | 4 // V4_4
 | 5 // V5_5
 | 6 // V6_6
 | 7 // V7_7
 | 8 // V8_8
 | 9 // V9_9
 | 10 // V10_10


export type InboxResType =0 // VERSIONHIT_0
 | 1 // FULL_1


export type InboxUIItem = {|convID: String,isEmpty: Boolean,name: String,snippet: String,channel: String,headline: String,visibility: Keybase1.TLFVisibility,participants?: ?Array<String>,fullNames: {[key: string]: String},resetParticipants?: ?Array<String>,status: ConversationStatus,membersType: ConversationMembersType,memberStatus: ConversationMemberStatus,teamType: TeamType,time: Gregor1.Time,notifications?: ?ConversationNotificationInfo,creatorInfo?: ?ConversationCreatorInfoLocal,version: ConversationVers,maxMsgID: MessageID,finalizeInfo?: ?ConversationFinalizeInfo,supersedes?: ?Array<ConversationMetadata>,supersededBy?: ?Array<ConversationMetadata>,|}

export type InboxUIItems = {|items?: ?Array<InboxUIItem>,pagination?: ?UIPagination,offline: Boolean,|}

export type InboxVers = Uint64

export type InboxView ={ rtype: 0 } | { rtype: 1, full: ?InboxViewFull }

export type InboxViewFull = {|vers: InboxVers,conversations?: ?Array<Conversation>,pagination?: ?Pagination,|}

export type IncomingMessage = {|message: UIMessage,convID: ConversationID,displayDesktopNotification: Boolean,conv?: ?InboxUIItem,pagination?: ?UIPagination,|}

export type JoinLeaveConversationLocalRes = {|offline: Boolean,rateLimits?: ?Array<RateLimit>,|}

export type JoinLeaveConversationRemoteRes = {|rateLimit?: ?RateLimit,|}

export type LocalCancelPostRpcParam = {|  outboxID: OutboxID|}

export type LocalDeleteConversationLocalRpcParam = {|  convID: ConversationID,
  channelName: String|}

export type LocalDownloadAttachmentLocalRpcParam = {|  conversationID: ConversationID,
  messageID: MessageID,
  sink: Keybase1.Stream,
  preview: Boolean,
  identifyBehavior: Keybase1.TLFIdentifyBehavior|}

export type LocalDownloadFileAttachmentLocalRpcParam = {|  conversationID: ConversationID,
  messageID: MessageID,
  filename: String,
  preview: Boolean,
  identifyBehavior: Keybase1.TLFIdentifyBehavior|}

export type LocalFileSource = {|filename: String,|}

export type LocalFindConversationsLocalRpcParam = {|  tlfName: String,
  membersType: ConversationMembersType,
  visibility: Keybase1.TLFVisibility,
  topicType: TopicType,
  topicName: String,
  oneChatPerTLF?: ?Boolean,
  identifyBehavior: Keybase1.TLFIdentifyBehavior|}

export type LocalGetCachedThreadRpcParam = {|  conversationID: ConversationID,
  query?: ?GetThreadQuery,
  pagination?: ?Pagination,
  identifyBehavior: Keybase1.TLFIdentifyBehavior|}

export type LocalGetConversationForCLILocalRpcParam = {|  query: GetConversationForCLILocalQuery|}

export type LocalGetInboxAndUnboxLocalRpcParam = {|  query?: ?GetInboxLocalQuery,
  pagination?: ?Pagination,
  identifyBehavior: Keybase1.TLFIdentifyBehavior|}

export type LocalGetInboxNonblockLocalRpcParam = {|  maxUnbox?: ?Int,
  skipUnverified: Boolean,
  query?: ?GetInboxLocalQuery,
  pagination?: ?Pagination,
  identifyBehavior: Keybase1.TLFIdentifyBehavior|}

export type LocalGetInboxSummaryForCLILocalRpcParam = {|  query: GetInboxSummaryForCLILocalQuery|}

export type LocalGetMessagesLocalRpcParam = {|  conversationID: ConversationID,
  messageIDs?: ?Array<MessageID>,
  disableResolveSupersedes: Boolean,
  identifyBehavior: Keybase1.TLFIdentifyBehavior|}

export type LocalGetTLFConversationsLocalRpcParam = {|  tlfName: String,
  topicType: TopicType,
  membersType: ConversationMembersType|}

export type LocalGetThreadLocalRpcParam = {|  conversationID: ConversationID,
  query?: ?GetThreadQuery,
  pagination?: ?Pagination,
  identifyBehavior: Keybase1.TLFIdentifyBehavior|}

export type LocalGetThreadNonblockRpcParam = {|  conversationID: ConversationID,
  query?: ?GetThreadQuery,
  pagination?: ?UIPagination,
  identifyBehavior: Keybase1.TLFIdentifyBehavior|}

export type LocalJoinConversationByIDLocalRpcParam = {|  convID: ConversationID|}

export type LocalJoinConversationLocalRpcParam = {|  tlfName: String,
  topicType: TopicType,
  visibility: Keybase1.TLFVisibility,
  topicName: String|}

export type LocalLeaveConversationLocalRpcParam = {|  convID: ConversationID|}

export type LocalMakePreviewRpcParam = {|  attachment: LocalFileSource,
  outputDir: String|}

export type LocalMarkAsReadLocalRpcParam = {|  conversationID: ConversationID,
  msgID: MessageID|}

export type LocalNewConversationLocalRpcParam = {|  tlfName: String,
  topicType: TopicType,
  tlfVisibility: Keybase1.TLFVisibility,
  topicName?: ?String,
  membersType: ConversationMembersType,
  identifyBehavior: Keybase1.TLFIdentifyBehavior|}

export type LocalPostAttachmentLocalRpcParam = {|  conversationID: ConversationID,
  tlfName: String,
  visibility: Keybase1.TLFVisibility,
  attachment: LocalSource,
  preview?: ?MakePreviewRes,
  title: String,
  metadata: Bytes,
  identifyBehavior: Keybase1.TLFIdentifyBehavior|}

export type LocalPostDeleteNonblockRpcParam = {|  conversationID: ConversationID,
  tlfName: String,
  tlfPublic: Boolean,
  supersedes: MessageID,
  clientPrev: MessageID,
  outboxID?: ?OutboxID,
  identifyBehavior: Keybase1.TLFIdentifyBehavior|}

export type LocalPostEditNonblockRpcParam = {|  conversationID: ConversationID,
  tlfName: String,
  tlfPublic: Boolean,
  supersedes: MessageID,
  body: String,
  outboxID?: ?OutboxID,
  clientPrev: MessageID,
  identifyBehavior: Keybase1.TLFIdentifyBehavior|}

export type LocalPostFileAttachmentLocalRpcParam = {|  conversationID: ConversationID,
  tlfName: String,
  visibility: Keybase1.TLFVisibility,
  attachment: LocalFileSource,
  preview?: ?MakePreviewRes,
  title: String,
  metadata: Bytes,
  identifyBehavior: Keybase1.TLFIdentifyBehavior|}

export type LocalPostHeadlineNonblockRpcParam = {|  conversationID: ConversationID,
  tlfName: String,
  tlfPublic: Boolean,
  headline: String,
  outboxID?: ?OutboxID,
  clientPrev: MessageID,
  identifyBehavior: Keybase1.TLFIdentifyBehavior|}

export type LocalPostHeadlineRpcParam = {|  conversationID: ConversationID,
  tlfName: String,
  tlfPublic: Boolean,
  headline: String,
  identifyBehavior: Keybase1.TLFIdentifyBehavior|}

export type LocalPostLocalNonblockRpcParam = {|  conversationID: ConversationID,
  msg: MessagePlaintext,
  clientPrev: MessageID,
  outboxID?: ?OutboxID,
  identifyBehavior: Keybase1.TLFIdentifyBehavior|}

export type LocalPostLocalRpcParam = {|  conversationID: ConversationID,
  msg: MessagePlaintext,
  identifyBehavior: Keybase1.TLFIdentifyBehavior|}

export type LocalPostMetadataNonblockRpcParam = {|  conversationID: ConversationID,
  tlfName: String,
  tlfPublic: Boolean,
  channelName: String,
  outboxID?: ?OutboxID,
  clientPrev: MessageID,
  identifyBehavior: Keybase1.TLFIdentifyBehavior|}

export type LocalPostMetadataRpcParam = {|  conversationID: ConversationID,
  tlfName: String,
  tlfPublic: Boolean,
  channelName: String,
  identifyBehavior: Keybase1.TLFIdentifyBehavior|}

export type LocalPostTextNonblockRpcParam = {|  conversationID: ConversationID,
  tlfName: String,
  tlfPublic: Boolean,
  body: String,
  clientPrev: MessageID,
  outboxID?: ?OutboxID,
  identifyBehavior: Keybase1.TLFIdentifyBehavior|}

export type LocalRetryPostRpcParam = {|  outboxID: OutboxID|}

export type LocalSetAppNotificationSettingsLocalRpcParam = {|  convID: ConversationID,
  channelWide: Boolean,
  settings?: ?Array<AppNotificationSettingLocal>|}

export type LocalSetConversationStatusLocalRpcParam = {|  conversationID: ConversationID,
  status: ConversationStatus,
  identifyBehavior: Keybase1.TLFIdentifyBehavior|}

export type LocalSetGlobalAppNotificationSettingsLocalRpcParam = {|  settings: {[key: string]: Bool}|}

export type LocalSource = {|source: Keybase1.Stream,filename: String,size: Int,|}

export type LocalUnboxMobilePushNotificationRpcParam = {|  payload: String,
  convID: String,
  membersType: ConversationMembersType,
  pushIDs?: ?Array<String>|}

export type LocalUpdateTypingRpcParam = {|  conversationID: ConversationID,
  typing: Boolean|}

export type MakePreviewRes = {|mimeType: String,filename?: ?String,metadata?: ?AssetMetadata,baseMetadata?: ?AssetMetadata,|}

export type MarkAsReadLocalRes = {|offline: Boolean,rateLimits?: ?Array<RateLimit>,|}

export type MarkAsReadRes = {|rateLimit?: ?RateLimit,|}

export type MembersUpdateInfo = {|convID: ConversationID,member: String,status: ConversationMemberStatus,|}

export type MerkleRoot = {|seqno: Long,hash: Bytes,|}

export type MessageAttachment = {|object: Asset,preview?: ?Asset,previews?: ?Array<Asset>,metadata: Bytes,uploaded: Boolean,|}

export type MessageAttachmentUploaded = {|messageID: MessageID,object: Asset,previews?: ?Array<Asset>,metadata: Bytes,|}

export type MessageBody ={ messageType: 1, text: ?MessageText } | { messageType: 2, attachment: ?MessageAttachment } | { messageType: 3, edit: ?MessageEdit } | { messageType: 4, delete: ?MessageDelete } | { messageType: 5, metadata: ?MessageConversationMetadata } | { messageType: 7, headline: ?MessageHeadline } | { messageType: 8, attachmentuploaded: ?MessageAttachmentUploaded } | { messageType: 9, join: ?MessageJoin } | { messageType: 10, leave: ?MessageLeave } | { messageType: 11, system: ?MessageSystem }

export type MessageBoxed = {|version: MessageBoxedVersion,serverHeader?: ?MessageServerHeader,clientHeader: MessageClientHeader,headerCiphertext: SealedData,bodyCiphertext: EncryptedData,verifyKey: Bytes,keyGeneration: Int,|}

export type MessageBoxedVersion =0 // VNONE_0
 | 1 // V1_1
 | 2 // V2_2


export type MessageClientHeader = {|conv: ConversationIDTriple,tlfName: String,tlfPublic: Boolean,messageType: MessageType,supersedes: MessageID,deletes?: ?Array<MessageID>,prev?: ?Array<MessagePreviousPointer>,sender: Gregor1.UID,senderDevice: Gregor1.DeviceID,merkleRoot?: ?MerkleRoot,outboxID?: ?OutboxID,outboxInfo?: ?OutboxInfo,|}

export type MessageClientHeaderVerified = {|conv: ConversationIDTriple,tlfName: String,tlfPublic: Boolean,messageType: MessageType,prev?: ?Array<MessagePreviousPointer>,sender: Gregor1.UID,senderDevice: Gregor1.DeviceID,merkleRoot?: ?MerkleRoot,outboxID?: ?OutboxID,outboxInfo?: ?OutboxInfo,|}

export type MessageConversationMetadata = {|conversationTitle: String,|}

export type MessageDelete = {|messageIDs?: ?Array<MessageID>,|}

export type MessageEdit = {|messageID: MessageID,body: String,|}

export type MessageHeadline = {|headline: String,|}

export type MessageID = Uint

export type MessageIDControl = {|pivot?: ?MessageID,recent: Boolean,num: Int,|}

export type MessageJoin = {||}

export type MessageLeave = {||}

export type MessagePlaintext = {|clientHeader: MessageClientHeader,messageBody: MessageBody,|}

export type MessagePreviousPointer = {|id: MessageID,hash: Hash,|}

export type MessageServerHeader = {|messageID: MessageID,supersededBy: MessageID,ctime: Gregor1.Time,|}

export type MessageSummary = {|msgID: MessageID,messageType: MessageType,tlfName: String,tlfPublic: Boolean,ctime: Gregor1.Time,|}

export type MessageSystem ={ systemType: 0, addedtoteam: ?MessageSystemAddedToTeam } | { systemType: 1, inviteaddedtoteam: ?MessageSystemInviteAddedToTeam } | { systemType: 2, complexteam: ?MessageSystemComplexTeam }

export type MessageSystemAddedToTeam = {|team: String,adder: String,addee: String,owners?: ?Array<String>,admins?: ?Array<String>,writers?: ?Array<String>,readers?: ?Array<String>,|}

export type MessageSystemComplexTeam = {|team: String,|}

export type MessageSystemInviteAddedToTeam = {|team: String,inviter: String,invitee: String,adder: String,inviteType: Keybase1.TeamInviteCategory,|}

export type MessageSystemType =0 // ADDEDTOTEAM_0
 | 1 // INVITEADDEDTOTEAM_1
 | 2 // COMPLEXTEAM_2


export type MessageText = {|body: String,|}

export type MessageType =0 // NONE_0
 | 1 // TEXT_1
 | 2 // ATTACHMENT_2
 | 3 // EDIT_3
 | 4 // DELETE_4
 | 5 // METADATA_5
 | 6 // TLFNAME_6
 | 7 // HEADLINE_7
 | 8 // ATTACHMENTUPLOADED_8
 | 9 // JOIN_9
 | 10 // LEAVE_10
 | 11 // SYSTEM_11


export type MessageUnboxed ={ state: 1, valid: ?MessageUnboxedValid } | { state: 2, error: ?MessageUnboxedError } | { state: 3, outbox: ?OutboxRecord } | { state: 4, placeholder: ?MessageUnboxedPlaceholder }

export type MessageUnboxedError = {|errType: MessageUnboxedErrorType,errMsg: String,messageID: MessageID,messageType: MessageType,ctime: Gregor1.Time,|}

export type MessageUnboxedErrorType =0 // MISC_0
 | 1 // BADVERSION_CRITICAL_1
 | 2 // BADVERSION_2
 | 3 // IDENTIFY_3


export type MessageUnboxedPlaceholder = {|messageID: MessageID,|}

export type MessageUnboxedState =1 // VALID_1
 | 2 // ERROR_2
 | 3 // OUTBOX_3
 | 4 // PLACEHOLDER_4


export type MessageUnboxedValid = {|clientHeader: MessageClientHeaderVerified,serverHeader: MessageServerHeader,messageBody: MessageBody,senderUsername: String,senderDeviceName: String,senderDeviceType: String,bodyHash: Hash,headerHash: Hash,headerSignature?: ?SignatureInfo,verificationKey?: ?Bytes,senderDeviceRevokedAt?: ?Gregor1.Time,atMentionUsernames?: ?Array<String>,atMentions?: ?Array<Gregor1.UID>,channelMention: ChannelMention,|}

export type NameQuery = {|name: String,membersType: ConversationMembersType,|}

export type NewConversationInfo = {|conv: InboxUIItem,|}

export type NewConversationLocalRes = {|conv: ConversationLocal,rateLimits?: ?Array<RateLimit>,identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>,|}

export type NewConversationPayload = {|Action: String,convID: ConversationID,inboxVers: InboxVers,unreadUpdate?: ?UnreadUpdate,|}

export type NewConversationRemoteRes = {|convID: ConversationID,createdComplexTeam: Boolean,rateLimit?: ?RateLimit,|}

export type NewMessagePayload = {|Action: String,convID: ConversationID,message: MessageBoxed,inboxVers: InboxVers,unreadUpdate?: ?UnreadUpdate,|}

export type NonblockFetchRes = {|offline: Boolean,rateLimits?: ?Array<RateLimit>,identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>,|}

export type NotificationKind =0 // GENERIC_0
 | 1 // ATMENTION_1


export type NotifyChatChatIdentifyUpdateRpcParam = {|  update: Keybase1.CanonicalTLFNameAndIDWithBreaks|}

export type NotifyChatChatInboxStaleRpcParam = {|  uid: Keybase1.UID|}

export type NotifyChatChatInboxSyncStartedRpcParam = {|  uid: Keybase1.UID|}

export type NotifyChatChatInboxSyncedRpcParam = {|  uid: Keybase1.UID,
  syncRes: ChatSyncResult|}

export type NotifyChatChatJoinedConversationRpcParam = {|  uid: Keybase1.UID,
  conv: InboxUIItem|}

export type NotifyChatChatLeftConversationRpcParam = {|  uid: Keybase1.UID,
  convID: ConversationID|}

export type NotifyChatChatResetConversationRpcParam = {|  uid: Keybase1.UID,
  convID: ConversationID|}

export type NotifyChatChatTLFFinalizeRpcParam = {|  uid: Keybase1.UID,
  convID: ConversationID,
  finalizeInfo: ConversationFinalizeInfo,
  conv?: ?InboxUIItem|}

export type NotifyChatChatTLFResolveRpcParam = {|  uid: Keybase1.UID,
  convID: ConversationID,
  resolveInfo: ConversationResolveInfo|}

export type NotifyChatChatThreadsStaleRpcParam = {|  uid: Keybase1.UID,
  updates?: ?Array<ConversationStaleUpdate>|}

export type NotifyChatChatTypingUpdateRpcParam = {|  typingUpdates?: ?Array<ConvTypingUpdate>|}

export type NotifyChatNewChatActivityRpcParam = {|  uid: Keybase1.UID,
  activity: ChatActivity|}

export type OutboxErrorType =0 // MISC_0
 | 1 // OFFLINE_1
 | 2 // IDENTIFY_2
 | 3 // TOOLONG_3
 | 4 // DUPLICATE_4


export type OutboxID = Bytes

export type OutboxInfo = {|prev: MessageID,composeTime: Gregor1.Time,|}

export type OutboxRecord = {|state: OutboxState,outboxID: OutboxID,convID: ConversationID,ctime: Gregor1.Time,Msg: MessagePlaintext,identifyBehavior: Keybase1.TLFIdentifyBehavior,|}

export type OutboxState ={ state: 0, sending: ?Int } | { state: 1, error: ?OutboxStateError }

export type OutboxStateError = {|message: String,typ: OutboxErrorType,|}

export type OutboxStateType =0 // SENDING_0
 | 1 // ERROR_1


export type Pagination = {|next: Bytes,previous: Bytes,num: Int,last: Boolean,|}

export type PostLocalNonblockRes = {|rateLimits?: ?Array<RateLimit>,outboxID: OutboxID,identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>,|}

export type PostLocalRes = {|rateLimits?: ?Array<RateLimit>,messageID: MessageID,identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>,|}

export type PostRemoteRes = {|msgHeader: MessageServerHeader,rateLimit?: ?RateLimit,|}

export type RateLimit = {|name: String,callsRemaining: Int,windowReset: Int,maxCalls: Int,|}

export type ReadMessageInfo = {|convID: ConversationID,msgID: MessageID,conv?: ?InboxUIItem,|}

export type ReadMessagePayload = {|Action: String,convID: ConversationID,msgID: MessageID,inboxVers: InboxVers,unreadUpdate?: ?UnreadUpdate,|}

export type RemoteDeleteConversationRpcParam = {|  convID: ConversationID|}

export type RemoteGetInboxRemoteRpcParam = {|  vers: InboxVers,
  query?: ?GetInboxQuery,
  pagination?: ?Pagination|}

export type RemoteGetInboxVersionRpcParam = {|  uid: Gregor1.UID|}

export type RemoteGetMessagesRemoteRpcParam = {|  conversationID: ConversationID,
  messageIDs?: ?Array<MessageID>|}

export type RemoteGetPublicConversationsRpcParam = {|  tlfID: TLFID,
  topicType: TopicType,
  summarizeMaxMsgs: Boolean|}

export type RemoteGetS3ParamsRpcParam = {|  conversationID: ConversationID|}

export type RemoteGetTLFConversationsRpcParam = {|  tlfID: TLFID,
  topicType: TopicType,
  summarizeMaxMsgs: Boolean|}

export type RemoteGetThreadRemoteRpcParam = {|  conversationID: ConversationID,
  query?: ?GetThreadQuery,
  pagination?: ?Pagination|}

export type RemoteGetUnreadUpdateFullRpcParam = {|  inboxVers: InboxVers|}

export type RemoteJoinConversationRpcParam = {|  convID: ConversationID|}

export type RemoteLeaveConversationRpcParam = {|  convID: ConversationID|}

export type RemoteMarkAsReadRpcParam = {|  conversationID: ConversationID,
  msgID: MessageID|}

export type RemoteNewConversationRemote2RpcParam = {|  idTriple: ConversationIDTriple,
  TLFMessage: MessageBoxed,
  membersType: ConversationMembersType,
  topicNameState?: ?TopicNameState|}

export type RemoteNewConversationRemoteRpcParam = {|  idTriple: ConversationIDTriple|}

export type RemotePostRemoteRpcParam = {|  conversationID: ConversationID,
  messageBoxed: MessageBoxed,
  atMentions?: ?Array<Gregor1.UID>,
  channelMention: ChannelMention,
  topicNameState?: ?TopicNameState|}

export type RemotePublishReadMessageRpcParam = {|  uid: Gregor1.UID,
  convID: ConversationID,
  msgID: MessageID|}

export type RemotePublishSetConversationStatusRpcParam = {|  uid: Gregor1.UID,
  convID: ConversationID,
  status: ConversationStatus|}

export type RemoteRemoteNotificationSuccessfulRpcParam = {|  authToken: Gregor1.SessionToken,
  companionPushIDs?: ?Array<String>|}

export type RemoteS3SignRpcParam = {|  version: Int,
  payload: Bytes|}

export type RemoteSetAppNotificationSettingsRpcParam = {|  convID: ConversationID,
  settings: ConversationNotificationInfo|}

export type RemoteSetConversationStatusRpcParam = {|  conversationID: ConversationID,
  status: ConversationStatus|}

export type RemoteSetGlobalAppNotificationSettingsRpcParam = {|  settings: GlobalAppNotificationSettings|}

export type RemoteSyncAllRpcParam = {|  uid: Gregor1.UID,
  deviceID: Gregor1.DeviceID,
  session: Gregor1.SessionToken,
  inboxVers: InboxVers,
  ctime: Gregor1.Time,
  fresh: Boolean,
  protVers: SyncAllProtVers,
  hostName: String|}

export type RemoteSyncChatRpcParam = {|  vers: InboxVers|}

export type RemoteSyncInboxRpcParam = {|  vers: InboxVers|}

export type RemoteTlfFinalizeRpcParam = {|  tlfID: TLFID,
  resetUser: String,
  resetDate: String,
  resetTimestamp: Gregor1.Time,
  resetFull: String|}

export type RemoteTlfResolveRpcParam = {|  tlfID: TLFID,
  resolvedWriters?: ?Array<Gregor1.UID>,
  resolvedReaders?: ?Array<Gregor1.UID>|}

export type RemoteUpdateTypingRemoteRpcParam = {|  uid: Gregor1.UID,
  deviceID: Gregor1.DeviceID,
  convID: ConversationID,
  typing: Boolean|}

export type RemoteUserTypingUpdate = {|uid: Gregor1.UID,deviceID: Gregor1.DeviceID,convID: ConversationID,typing: Boolean,|}

export type S3Params = {|bucket: String,objectKey: String,accessKey: String,acl: String,regionName: String,regionEndpoint: String,regionBucketEndpoint: String,|}

export type SealedData = {|v: Int,e: Bytes,n: Bytes,|}

export type ServerCacheVers = {|inboxVers: Int,bodiesVers: Int,|}

export type SetAppNotificationSettingsInfo = {|convID: ConversationID,settings: ConversationNotificationInfo,|}

export type SetAppNotificationSettingsLocalRes = {|offline: Boolean,rateLimits?: ?Array<RateLimit>,|}

export type SetAppNotificationSettingsPayload = {|Action: String,convID: ConversationID,inboxVers: InboxVers,settings: ConversationNotificationInfo,|}

export type SetAppNotificationSettingsRes = {|rateLimit?: ?RateLimit,|}

export type SetConversationStatusLocalRes = {|rateLimits?: ?Array<RateLimit>,identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>,|}

export type SetConversationStatusRes = {|rateLimit?: ?RateLimit,|}

export type SetStatusInfo = {|convID: ConversationID,status: ConversationStatus,conv?: ?InboxUIItem,|}

export type SetStatusPayload = {|Action: String,convID: ConversationID,status: ConversationStatus,inboxVers: InboxVers,unreadUpdate?: ?UnreadUpdate,|}

export type SignEncryptedData = {|v: Int,e: Bytes,n: Bytes,|}

export type SignatureInfo = {|v: Int,s: Bytes,k: Bytes,|}

export type StaleUpdateType =0 // CLEAR_0
 | 1 // NEWACTIVITY_1


export type SyncAllNotificationRes ={ typ: 0, state: ?Gregor1.State } | { typ: 1, incremental: ?Gregor1.SyncResult }

export type SyncAllNotificationType =0 // STATE_0
 | 1 // INCREMENTAL_1


export type SyncAllProtVers =0 // V0_0
 | 1 // V1_1


export type SyncAllResult = {|auth: Gregor1.AuthResult,chat: SyncChatRes,notification: SyncAllNotificationRes,badge: UnreadUpdateFull,|}

export type SyncChatRes = {|cacheVers: ServerCacheVers,inboxRes: SyncInboxRes,|}

export type SyncInboxRes ={ typ: 0 } | { typ: 1, incremental: ?SyncIncrementalRes } | { typ: 2 }

export type SyncInboxResType =0 // CURRENT_0
 | 1 // INCREMENTAL_1
 | 2 // CLEAR_2


export type SyncIncrementalRes = {|vers: InboxVers,convs?: ?Array<Conversation>,|}

export type TLFConvOrdinal = Uint

export type TLFFinalizeUpdate = {|finalizeInfo: ConversationFinalizeInfo,convIDs?: ?Array<ConversationID>,inboxVers: InboxVers,|}

export type TLFID = Bytes

export type TLFResolveUpdate = {|convID: ConversationID,inboxVers: InboxVers,|}

export type TeamChannelUpdate = {|teamID: TLFID,|}

export type TeamType =0 // NONE_0
 | 1 // SIMPLE_1
 | 2 // COMPLEX_2


export type TeamTypeInfo = {|convID: ConversationID,teamType: TeamType,conv?: ?InboxUIItem,|}

export type TeamTypePayload = {|Action: String,convID: ConversationID,teamType: TeamType,inboxVers: InboxVers,unreadUpdate?: ?UnreadUpdate,|}

export type ThreadID = Bytes

export type ThreadView = {|messages?: ?Array<MessageUnboxed>,pagination?: ?Pagination,|}

export type ThreadViewBoxed = {|messages?: ?Array<MessageBoxed>,pagination?: ?Pagination,|}

export type TopicID = Bytes

export type TopicNameState = Bytes

export type TopicType =0 // NONE_0
 | 1 // CHAT_1
 | 2 // DEV_2


export type TyperInfo = {|uid: Keybase1.UID,username: String,deviceID: Keybase1.DeviceID,deviceName: String,deviceType: String,|}

export type UIMessage ={ state: 1, valid: ?UIMessageValid } | { state: 2, error: ?MessageUnboxedError } | { state: 3, outbox: ?UIMessageOutbox } | { state: 4, placeholder: ?MessageUnboxedPlaceholder }

export type UIMessageOutbox = {|state: OutboxState,outboxID: String,messageType: MessageType,body: String,ctime: Gregor1.Time,|}

export type UIMessageValid = {|messageID: MessageID,ctime: Gregor1.Time,outboxID?: ?String,messageBody: MessageBody,senderUsername: String,senderDeviceName: String,senderDeviceType: String,superseded: Boolean,senderDeviceRevokedAt?: ?Gregor1.Time,atMentions?: ?Array<String>,channelMention: ChannelMention,channelNameMentions?: ?Array<String>,|}

export type UIMessages = {|messages?: ?Array<UIMessage>,pagination?: ?UIPagination,|}

export type UIPagination = {|next: String,previous: String,num: Int,last: Boolean,|}

export type UnreadFirstNumLimit = {|NumRead: Int,AtLeast: Int,AtMost: Int,|}

export type UnreadUpdate = {|convID: ConversationID,unreadMessages: Int,unreadNotifyingMessages: {[key: string]: Int},|}

export type UnreadUpdateFull = {|ignore: Boolean,inboxVers: InboxVers,inboxSyncStatus: SyncInboxResType,updates?: ?Array<UnreadUpdate>,|}

export type UnverifiedInboxUIItem = {|convID: String,name: String,visibility: Keybase1.TLFVisibility,status: ConversationStatus,membersType: ConversationMembersType,memberStatus: ConversationMemberStatus,teamType: TeamType,notifications?: ?ConversationNotificationInfo,time: Gregor1.Time,version: ConversationVers,maxMsgID: MessageID,localMetadata?: ?UnverifiedInboxUIItemMetadata,|}

export type UnverifiedInboxUIItemMetadata = {|channelName: String,headline: String,snippet: String,writerNames?: ?Array<String>,resetParticipants?: ?Array<String>,|}

export type UnverifiedInboxUIItems = {|items?: ?Array<UnverifiedInboxUIItem>,pagination?: ?UIPagination,offline: Boolean,|}

export type UpdateConversationMembership = {|inboxVers: InboxVers,joined?: ?Array<ConversationMember>,removed?: ?Array<ConversationMember>,reset?: ?Array<ConversationMember>,unreadUpdate?: ?UnreadUpdate,unreadUpdates?: ?Array<UnreadUpdate>,|}
type ChatUiChatConfirmChannelDeleteResult = Boolean
type LocalDeleteConversationLocalResult = DeleteConversationLocalRes
type LocalDownloadAttachmentLocalResult = DownloadAttachmentLocalRes
type LocalDownloadFileAttachmentLocalResult = DownloadAttachmentLocalRes
type LocalFindConversationsLocalResult = FindConversationsLocalRes
type LocalGenerateOutboxIDResult = OutboxID
type LocalGetCachedThreadResult = GetThreadLocalRes
type LocalGetConversationForCLILocalResult = GetConversationForCLILocalRes
type LocalGetGlobalAppNotificationSettingsLocalResult = GlobalAppNotificationSettings
type LocalGetInboxAndUnboxLocalResult = GetInboxAndUnboxLocalRes
type LocalGetInboxNonblockLocalResult = NonblockFetchRes
type LocalGetInboxSummaryForCLILocalResult = GetInboxSummaryForCLILocalRes
type LocalGetMessagesLocalResult = GetMessagesLocalRes
type LocalGetTLFConversationsLocalResult = GetTLFConversationsLocalRes
type LocalGetThreadLocalResult = GetThreadLocalRes
type LocalGetThreadNonblockResult = NonblockFetchRes
type LocalJoinConversationByIDLocalResult = JoinLeaveConversationLocalRes
type LocalJoinConversationLocalResult = JoinLeaveConversationLocalRes
type LocalLeaveConversationLocalResult = JoinLeaveConversationLocalRes
type LocalMakePreviewResult = MakePreviewRes
type LocalMarkAsReadLocalResult = MarkAsReadLocalRes
type LocalNewConversationLocalResult = NewConversationLocalRes
type LocalPostAttachmentLocalResult = PostLocalRes
type LocalPostDeleteNonblockResult = PostLocalNonblockRes
type LocalPostEditNonblockResult = PostLocalNonblockRes
type LocalPostFileAttachmentLocalResult = PostLocalRes
type LocalPostHeadlineNonblockResult = PostLocalNonblockRes
type LocalPostHeadlineResult = PostLocalRes
type LocalPostLocalNonblockResult = PostLocalNonblockRes
type LocalPostLocalResult = PostLocalRes
type LocalPostMetadataNonblockResult = PostLocalNonblockRes
type LocalPostMetadataResult = PostLocalRes
type LocalPostTextNonblockResult = PostLocalNonblockRes
type LocalSetAppNotificationSettingsLocalResult = SetAppNotificationSettingsLocalRes
type LocalSetConversationStatusLocalResult = SetConversationStatusLocalRes
type LocalUnboxMobilePushNotificationResult = String
type RemoteDeleteConversationResult = DeleteConversationRemoteRes
type RemoteGetGlobalAppNotificationSettingsResult = GlobalAppNotificationSettings
type RemoteGetInboxRemoteResult = GetInboxRemoteRes
type RemoteGetInboxVersionResult = InboxVers
type RemoteGetMessagesRemoteResult = GetMessagesRemoteRes
type RemoteGetPublicConversationsResult = GetPublicConversationsRes
type RemoteGetS3ParamsResult = S3Params
type RemoteGetTLFConversationsResult = GetTLFConversationsRes
type RemoteGetThreadRemoteResult = GetThreadRemoteRes
type RemoteGetUnreadUpdateFullResult = UnreadUpdateFull
type RemoteJoinConversationResult = JoinLeaveConversationRemoteRes
type RemoteLeaveConversationResult = JoinLeaveConversationRemoteRes
type RemoteMarkAsReadResult = MarkAsReadRes
type RemoteNewConversationRemote2Result = NewConversationRemoteRes
type RemoteNewConversationRemoteResult = NewConversationRemoteRes
type RemotePostRemoteResult = PostRemoteRes
type RemoteS3SignResult = Bytes
type RemoteSetAppNotificationSettingsResult = SetAppNotificationSettingsRes
type RemoteSetConversationStatusResult = SetConversationStatusRes
type RemoteSyncAllResult = SyncAllResult
type RemoteSyncChatResult = SyncChatRes
type RemoteSyncInboxResult = SyncInboxRes

export type IncomingCallMapType = {|  'keybase.1.chatUi.chatAttachmentUploadOutboxID'?: (params: {|      sessionID: Int,
      outboxID: OutboxID    |},response: CommonResponseHandler) => void,  'keybase.1.chatUi.chatAttachmentUploadStart'?: (params: {|      sessionID: Int,
      metadata: AssetMetadata,
      placeholderMsgID: MessageID    |},response: CommonResponseHandler) => void,  'keybase.1.chatUi.chatAttachmentUploadProgress'?: (params: {|      sessionID: Int,
      bytesComplete: Long,
      bytesTotal: Long    |},response: CommonResponseHandler) => void,  'keybase.1.chatUi.chatAttachmentUploadDone'?: (params: {|      sessionID: Int    |},response: CommonResponseHandler) => void,  'keybase.1.chatUi.chatAttachmentPreviewUploadStart'?: (params: {|      sessionID: Int,
      metadata: AssetMetadata    |},response: CommonResponseHandler) => void,  'keybase.1.chatUi.chatAttachmentPreviewUploadDone'?: (params: {|      sessionID: Int    |},response: CommonResponseHandler) => void,  'keybase.1.chatUi.chatAttachmentDownloadStart'?: (params: {|      sessionID: Int    |},response: CommonResponseHandler) => void,  'keybase.1.chatUi.chatAttachmentDownloadProgress'?: (params: {|      sessionID: Int,
      bytesComplete: Long,
      bytesTotal: Long    |},response: CommonResponseHandler) => void,  'keybase.1.chatUi.chatAttachmentDownloadDone'?: (params: {|      sessionID: Int    |},response: CommonResponseHandler) => void,  'keybase.1.chatUi.chatInboxUnverified'?: (params: {|      sessionID: Int,
      inbox: String    |},response: CommonResponseHandler) => void,  'keybase.1.chatUi.chatInboxConversation'?: (params: {|      sessionID: Int,
      conv: String    |},response: CommonResponseHandler) => void,  'keybase.1.chatUi.chatInboxFailed'?: (params: {|      sessionID: Int,
      convID: ConversationID,
      error: ConversationErrorLocal    |},response: CommonResponseHandler) => void,  'keybase.1.chatUi.chatThreadCached'?: (params: {|      sessionID: Int,
      thread?: ?String    |},response: CommonResponseHandler) => void,  'keybase.1.chatUi.chatThreadFull'?: (params: {|      sessionID: Int,
      thread: String    |},response: CommonResponseHandler) => void,  'keybase.1.chatUi.chatConfirmChannelDelete'?: (params: {|      sessionID: Int,
      channel: String    |},response: {error: RPCErrorHandler, result: (result: ChatUiChatConfirmChannelDeleteResult) => void}) => void,  'keybase.1.NotifyChat.NewChatActivity'?: (params: {|      uid: Keybase1.UID,
      activity: ChatActivity    |} /* , response: {} // Notify call
    */) => void,  'keybase.1.NotifyChat.ChatIdentifyUpdate'?: (params: {|      update: Keybase1.CanonicalTLFNameAndIDWithBreaks    |} /* , response: {} // Notify call
    */) => void,  'keybase.1.NotifyChat.ChatTLFFinalize'?: (params: {|      uid: Keybase1.UID,
      convID: ConversationID,
      finalizeInfo: ConversationFinalizeInfo,
      conv?: ?InboxUIItem    |} /* , response: {} // Notify call
    */) => void,  'keybase.1.NotifyChat.ChatTLFResolve'?: (params: {|      uid: Keybase1.UID,
      convID: ConversationID,
      resolveInfo: ConversationResolveInfo    |} /* , response: {} // Notify call
    */) => void,  'keybase.1.NotifyChat.ChatInboxStale'?: (params: {|      uid: Keybase1.UID    |} /* , response: {} // Notify call
    */) => void,  'keybase.1.NotifyChat.ChatThreadsStale'?: (params: {|      uid: Keybase1.UID,
      updates?: ?Array<ConversationStaleUpdate>    |} /* , response: {} // Notify call
    */) => void,  'keybase.1.NotifyChat.ChatTypingUpdate'?: (params: {|      typingUpdates?: ?Array<ConvTypingUpdate>    |} /* , response: {} // Notify call
    */) => void,  'keybase.1.NotifyChat.ChatJoinedConversation'?: (params: {|      uid: Keybase1.UID,
      conv: InboxUIItem    |} /* , response: {} // Notify call
    */) => void,  'keybase.1.NotifyChat.ChatLeftConversation'?: (params: {|      uid: Keybase1.UID,
      convID: ConversationID    |} /* , response: {} // Notify call
    */) => void,  'keybase.1.NotifyChat.ChatResetConversation'?: (params: {|      uid: Keybase1.UID,
      convID: ConversationID    |} /* , response: {} // Notify call
    */) => void,  'keybase.1.NotifyChat.ChatInboxSyncStarted'?: (params: {|      uid: Keybase1.UID    |} /* , response: {} // Notify call
    */) => void,  'keybase.1.NotifyChat.ChatInboxSynced'?: (params: {|      uid: Keybase1.UID,
      syncRes: ChatSyncResult    |} /* , response: {} // Notify call
    */) => void|}
