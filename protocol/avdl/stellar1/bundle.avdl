@namespace("stellar.1")
protocol bundle {
  import idl "common.avdl";
  import idl "github.com/keybase/client/go/protocol/keybase1" as keybase1;

  @typedef("uint64") @lint("ignore") record BundleRevision {}

  // The same format as in chat1.EncryptedData (and KBFS, Git)
  record EncryptedBundle {
    int   v;              // version = 1
    bytes e;              // encrypted msgpacked BundleSecretVersioned (output of secretbox)
    keybase1.BoxNonce n;  // nonce
    keybase1.PerUserKeyGeneration gen; // PUK generation that was used
  }

  enum BundleVersion {
    V1_1
  }

  variant BundleSecretVersioned switch (BundleVersion version) {
    case V1 : BundleSecretV1;
  }

  // There is no versioned form of BundleVisible because it is versioned
  // by BundleSecret's version field.
  record BundleVisibleV1 {
    BundleRevision revision;
    Hash prev; // SHA256 of previous msgpack(EncryptedBundle)
    array<BundleVisibleEntry> accounts;
  }

  record BundleSecretV1 {
    Hash visibleHash; // SHA256 of msgpack(BundleVisibleV1)
    array<BundleSecretEntry> accounts;
  }

  enum AccountMode {
    NONE_0,
    USER_1 // Each of the user's devices has access to the keys
  }

  // Server-visible attributes of an account.
  record BundleVisibleEntry {
    AccountID accountID;
    AccountMode mode;
    boolean isPrimary; // whether this is the primary account (public)
  }

  // Secret attributes of an account.
  record BundleSecretEntry {
    AccountID accountID;
    array<SecretKey> signers;
    string name;
  }

  // Unversioned struct for local use only.
  record Bundle {
    BundleRevision revision;
    Hash prev;
    // SHA256 of this msgpack(EncryptedBundle)
    // Not serialized. Only set if this bundle was decrypted.
    Hash ownHash;
    // AccountID and name should be unique.
    // At most one account should be primary.
    array<BundleEntry> accounts;
  }

  // Combined account entry for local use only.
  record BundleEntry {
    AccountID accountID;
    AccountMode mode;
    boolean isPrimary; // whether this is the primary account
    array<SecretKey> signers;
    string name;
  }

}
