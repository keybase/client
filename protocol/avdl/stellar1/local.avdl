@namespace("stellar.1")
protocol local {
  import idl "common.avdl";

  // -------------------------------------------------------
  // frontend protocol
  // -------------------------------------------------------

  record WalletAccountLocal {
    AccountID accountID;        // string "GCKLHXC22222252UOISFKYZQX7YIVDBPSZ7UUYDFK6URTG6VDRANPC5K"
    boolean isDefault;          // true if this is the default sending/receiving account
    string name;                // the user-given name for the account
    string balanceDescription;  // example: "56.0227002 XLM + more"
  }
  array<WalletAccountLocal> getWalletAccountsLocal(int sessionID);

  record AccountAssetLocal {
    string name;                    // "Lumens" for native. AssetCode like "BTC" for non-native.
    string assetCode;               // "XLM", "BTC"
    string issuerName;              // "Stellar network" for native. Blank or like "stronghold.com" for non-native.
    string issuerAccountID;         // "" for native. Like "GCKLHXC22222252UOISFKYZQX7YIVDBPSZ7UUYDFK6URTG6VDRANPC5K" for non-native.

    string balanceTotal;            // "280.9192933"
    string balanceAvailableToSend;  // Available to send. Like "279.9192933". Same as balanceTotal for non-native.

    string worthCurrency;           // "USD", "CAD", etc. If it is "ERR" then an exchange rate error occurred. Blank for non-native.
    string worth;                   // "$98.13" or error string if worthCurrency == "ERR". Blank for non-native.
    // Available to send in worthCurrency.
    // Like $97.83"" for native.
    // Blank for non-native.
    // Error string when worthCurrency is "ERR".
    string availableToSendWorth;
  }
  array<AccountAssetLocal> getAccountAssetsLocal(int sessionID, AccountID accountID);

  enum BalanceDelta {
    NONE_0,
    INCREASE_1,
    DECREASE_2
  }

  enum PaymentStatus {
    NONE_0,
    PENDING_1,
    CLAIMABLE_2,
    COMPLETED_3,
    ERROR_4,
    UNKNOWN_5
  }

  enum ParticipantType {
    NONE_0,
    KEYBASE_1,
    STELLAR_2,
    SBS_3
  }

  record PaymentID {
    TransactionID txID;
  }

  // Summary of a payment.
  // Keep in sync with PaymentDetailsLocal.
  record PaymentLocal {
    PaymentID id;                   // For relay payments, the funding tx.
    TimeMs time;
    PaymentStatus statusSimplified; // we are working on making this correct for relay payments...
    string statusDescription;       // "pending", "completed", "error"
    string statusDetail;
    string amountDescription;       // "1,323.1234567 XLM"
    BalanceDelta delta;             // NONE/INCREASE/DECREASE (e.g. INCREASE for "+ 1,323.1234567 XLM" amount above)
    string worth;                   // "$123.23"
    string worthCurrency;           // "USD", "CAD", etc. (the symbols can be ambiguous)

    string source;                  // keybase username or stellar public key
    ParticipantType sourceType;     // keybase or stellar
    string target;                  // keybase username, stellar public key, or sbs assertion
    ParticipantType targetType;     // keybase, stellar, or sbs

    string note;                    // secret note
    string noteErr;
  }

  record PaymentOrErrorLocal {
    union { null, PaymentLocal } payment;
    union { null, string } err;
  }

  record PaymentsPageLocal {
    array<PaymentOrErrorLocal> payments;
    union { null, PageCursor } cursor;
  }

  PaymentsPageLocal getPaymentsLocal(int sessionID, AccountID accountID, union { null, PageCursor } cursor);

  // Details of a payment.
  // Keep in sync with PaymentLocal.
  record PaymentDetailsLocal {
    PaymentID id;
    TransactionID txID;             // For relay payments, the funding tx.
    TimeMs time;
    PaymentStatus statusSimplified; // we are working on making this correct for relay payments...
    string statusDescription;       // "pending", "completed", "error"
    string statusDetail;
    string amountDescription;       // "1,323.1234567 XLM"
    BalanceDelta delta;             // NONE/INCREASE/DECREASE (e.g. INCREASE for "+ 1,323.1234567 XLM" amount above)
    string worth;                   // "$123.23"
    string worthCurrency;           // "USD", "CAD", etc. (the symbols can be ambiguous)

    string source;                  // keybase username or stellar public key
    ParticipantType sourceType;     // keybase or stellar
    string target;                  // keybase username, stellar public key, or sbs assertion
    ParticipantType targetType;     // keybase, stellar, or sbs

    string note;                    // secret note
    string noteErr;

    string publicNote;              // public memo for the payment
    string publicNoteType;          // public memo type: "text", "id", "hash", "return"
  }

  // accountID should be the accountID that you want the details for.
  // This is used for formatting the amountDescription to know if it is a payment that
  // increases or decreases the balance.
  PaymentDetailsLocal getPaymentDetailsLocal(int sessionID, AccountID accountID, PaymentID id);

  record CurrencyLocal {
    string description;  // "USD ($)", "CAD ($)", etc.
    OutsideCurrencyCode code;         // "USD", "CAD", etc.
    string symbol;       // "$"
    string name;         // "US Dollar", "Thai Baht", etc.
  }
  array<CurrencyLocal> getDisplayCurrenciesLocal(int sessionID);

  void validateAccountIDLocal(int sessionID, AccountID accountID);
  void validateSecretKeyLocal(int sessionID, SecretKey secretKey);
  // Validates a name for a new account. Checks if any accounts have the same name.
  // If there is an error getting account names, the error is suppressed.
  void validateAccountNameLocal(int sessionID, string name);

  void changeWalletAccountNameLocal(int sessionID, AccountID accountID, string newName);
  void setWalletAccountAsDefaultLocal(int sessionID, AccountID accountID);

  // Deleting an account is irreversible, even with Keybase, Inc. help.
  // Consumer of this API should always prompt the user and warn that if
  // their secret key is not backed up, they will not be able to access
  // funds on that account.
  // This RPC checks if `userAcknowledged` string is equal to "yes".
  void deleteWalletAccountLocal(int sessionID, AccountID accountID, string userAcknowledged);

  AccountID linkNewWalletAccountLocal(int sessionID, SecretKey secretKey, string name);
  AccountID createWalletAccountLocal(int sessionID, string name);

  // OutsideCurrencyCode examples: "USD", "EUR". Has to be one of
  // supported currencies, returned from getDisplayCurrenciesLocal.
  void changeDisplayCurrencyLocal(int sessionID, AccountID accountID, OutsideCurrencyCode currency);
  CurrencyLocal getDisplayCurrencyLocal(int sessionID, AccountID accountID);

  record WalletSettings {
    boolean acceptedDisclaimer; // whether the user has accepted the usage disclaimer
  }
  WalletSettings getWalletSettingsLocal(int sessionID);

  void setAcceptedDisclaimerLocal(int sessionID);

  string getWalletAccountPublicKeyLocal(int sessionID, AccountID accountID);
  SecretKey getWalletAccountSecretKeyLocal(int sessionID, AccountID accountID);

  // Not implemented. CORE-8087
  // Get the non-XLM assets for sending.
  array<SendAssetChoiceLocal> getSendAssetChoicesLocal(
    int sessionID,
    AccountID from,
    string to // Optional. Username, acctID, or assertion.
  );
  record SendAssetChoiceLocal {
    Asset asset;
    // Enable the row. True means the recipient accepts this asset.
    // False if there's no recipient, or an error loading them, or they don't accept.
    boolean enabled;
    string left; // Example: "BTC"
    string right; // Examples: "Stronghold.com", "GBSTRH4QOTWNSVA6E4HFERETX4ZLSR3CIUBLK7AXYII277PFJC4BBYOG"
    string subtext; // Examples: "", "max doesn't accept HUGZ"
  }

  // Check but do not send a payment.
  // Opt  - Optional field.
  // Opt* - Optional for this RPC but required for res.readyToSend to be set.
  BuildPaymentResLocal buildPaymentLocal(
    int sessionID,
    AccountID from,
    // Opt. Stellar seqno of the sender when the user started the form.
    // If it is old, the payment will be blocked blocked.
    string fromSeqno,
    // Opt*. Recipient username, acctID, or assertion.
    // Examples: "", "russel", "GBQTE2V7Y356TFBZL6YZ2PA3KIILNSAAQRV5C7MVWS22KQTS4EMK7I46"
    string to,
    boolean toIsAccountID,
    string amount, // Opt*. Amount of the asset OR outside currency being sent. Example: "3.005"
    // Zero or one of `asset` and `currency` should be set.
    // If both are null or `asset` is native XLM then XLM are being sent.
    // If `currency` is set then XLM is being sent after converting `amount`.
    // Note: Sending non-XLM assets is not yet supported.
    union { null, OutsideCurrencyCode } currency,
    union { null, Asset } asset,
    string secretNote,   // Opt. Encrypted for the sender, and recipient if possible.
    string publicMemo    // Opt. Public stellar memo field.
  );
  record BuildPaymentResLocal {
    boolean readyToSend;

    // Optional. Error to show with the To field.
    // All errMsg fields are in 'keybase chat language' markdown.
    // Example: "This stellar address is incorrect"
    string toErrMsg;

    // Optional. Error to show with the amount field.
    // Example: "russel doesn't accept *BTC/Stronghold.com*\nPlease pick another asset."
    // Example: "Your available to send is *128.4567890 XLM*."
    string amountErrMsg;

    // Optional. Error to show with the encrypted note field.
    // Example: "Note is too long"
    string secretNoteErrMsg;

    // Optional. Error to show with the public memo field.
    // Example: "Public memo is too long"
    string publicMemoErrMsg;

    // Optional. Blank if non-native assets are being sent or if there is a global error.
    // Example: "This is *96.5634762 XLM*."
    // Example: "This is *$246.47*."
    string worthDescription;
    // Set with `worthDescription`
    // Example: "$1 = 5.0992345 XLM\nSource: coinmarketcap.com"
    string worthInfo;
    array<SendBannerLocal> banners;
  }
  record SendBannerLocal {
    string level; // One of: "info", "warning", "error"
    // Example (info): "Because it’s russel’s first transaction, you must send at least 1 XLM."
    // Example (warning): "You are not following russel. Are you sure this is the right person?"
    string message;
    // Set if this banner means the user's proofs have changed and that is blocking the payment.
    // `message` may be blank in this case.
    boolean proofsChanged;
  }

  // Send a payment
  SendPaymentResLocal sendPaymentLocal(
    int sessionID,
    AccountID from,
    // Optional. Stellar seqno of the sender when the user started the form.
    // If it is old, the payment will be blocked.
    string fromSeqno,
    string to,                             // Username, acctID, or assertion. Examples: "russel", "GBQTE2V7Y356TFBZL6YZ2PA3KIILNSAAQRV5C7MVWS22KQTS4EMK7I46"
    boolean toIsAccountID,
    string amount,                         // Amount of the Stellar asset. Example: "30.005"
    Asset asset,                           // Asset to send.
    string worthAmount,                    // Optional. Example: "2.00"
    union { null, OutsideCurrencyCode } worthCurrency, // Set with `worthAmount`.
    string secretNote,                     // Optional. Encrypted for the sender, and recipient if possible.
    string publicMemo,                     // Optional. Public stellar memo field.
    // If quickReturn == true then the RPC can return success
    //   while the payment is still pending on the stellar network.
    boolean quickReturn
  );
  record SendPaymentResLocal {
    KeybaseTransactionID kbTxID;
    // If (arg.quickReturn && result.pending) then the payment
    //   was recorded but may still be pending on the stellar network
    //   and could still fail.
    // If arg.quickReturn == false then result.pending should be ignored.
    boolean pending;
  }

  record RequestDetailsLocal {
    KeybaseRequestID id;

    // User asking for payment - creator of the request.
    string fromAssertion; // creator username
    boolean fromCurrentUser; // is this request coming from us?

    // User being asked for payment.
    ParticipantType toUserType; // keybase or SBS
    string toAssertion; // keybase username or sbs assertion.

    string amount;
    union { null, Asset } asset;
    union { null, OutsideCurrencyCode } currency;

    // Formatted amount of either outside currency or stellar lumens.
    string amountDescription; // "123.23 CAD"

    // Amount of Stellar lumens and formatted amount of Stellar
    // lumens. It's either same as amountDescription, or amount of
    // stellars after converting from outside currency.
    string amountStellar; // "123.23"
    string amountStellarDescription; // "123.23 XLM"

    // Payment ID if funded, empty if not funded.
    boolean completed;
    KeybaseTransactionID fundingKbTxID;
  }
  RequestDetailsLocal getRequestDetailsLocal(KeybaseRequestID reqID);

  // -------------------------------------------------------
  // CLI protocol
  // -------------------------------------------------------

  array<Balance> balancesLocal(AccountID accountID);

  SendResultCLILocal sendCLILocal(string recipient, string amount, Asset asset, string note,
                                  string displayAmount, string displayCurrency, boolean forceRelay,
                                  string publicNote, AccountID fromAccountID);

  record SendResultCLILocal {
    KeybaseTransactionID kbTxID;
    // Direct: tx ID of the payment tx
    // Relay : tx ID of the funding payment tx
    TransactionID txID;
  }

  // Claim a relay payment
  // `txID` is the kbTxID of the relay payment. Can also be the txID of the funding tx.
  // `into` is the account into which to claim. Null will default to the user's primary account.
  RelayClaimResult claimCLILocal(string txID, union { null, AccountID } into);

  record PaymentOrErrorCLILocal {
    union { null, PaymentCLILocal } payment;
    union { null, string } err;
  }

  record PaymentCLILocal {
    TransactionID txID; // For relay payments, the funding tx.
    TimeMs time;
    string status;
    string statusDetail;
    string amount;
    Asset asset;
    union { null, string } displayAmount;
    union { null, string } displayCurrency;

    AccountID fromStellar;
    union { null, AccountID } toStellar;
    union { null, string } fromUsername;
    union { null, string } toUsername;
    union { null, string } toAssertion;
    string note;
    string noteErr;
  }
  array<PaymentOrErrorCLILocal> recentPaymentsCLILocal(union { null, AccountID } accountID);

  // txID can be either a keybase or stellar transaction ID.
  PaymentCLILocal paymentDetailCLILocal(string txID);

  void walletInitLocal();

  Bundle walletDumpLocal();

  // Account balance and its current value in selected currency.
  record OwnAccountCLILocal {
    AccountID accountID;
    boolean isPrimary;
    string name;
    array<Balance> balance;
    union { null, OutsideExchangeRate } exchangeRate;
  }

  array<OwnAccountCLILocal> walletGetAccountsCLILocal();

  // Whether this account is one of this user's.
  boolean ownAccountLocal(AccountID accountID);

  void importSecretKeyLocal(SecretKey secretKey, boolean makePrimary);

  // prompts for passphrase
  SecretKey exportSecretKeyLocal(AccountID accountID);

  void setDisplayCurrency(AccountID accountID, string currency);

  OutsideExchangeRate exchangeRateLocal(OutsideCurrencyCode currency);

  map<OutsideCurrencyCode, OutsideCurrencyDefinition> getAvailableLocalCurrencies();
  string formatLocalCurrencyString(string amount, OutsideCurrencyCode code);

  void makeRequestCLILocal(string recipient, union { null, Asset } asset, 
    union { null, OutsideCurrencyCode } currency, string amount, string note);
}
