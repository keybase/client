@namespace("stellar.1")
protocol local {
  import idl "common.avdl";

  array<Balance> balancesLocal(AccountID accountID);

  PaymentResult sendLocal(string recipient, string amount, Asset asset, string note);

  record PaymentCLILocal {
    TransactionID stellarTxID;
    TimeMs time;
    string status;
    string statusDetail;
    string amount;
    Asset asset;
    union { null, string } displayAmount;
    union { null, string } displayCurrency;

    AccountID fromStellar;
    AccountID toStellar;
    union { null, string } fromUsername;
    union { null, string } toUsername;
    string note;
    string noteErr;
  }
  array<PaymentCLILocal> recentPaymentsCLILocal(union { null, AccountID } accountID);

  // txID can be either a keybase or stellar transaction ID.
  PaymentCLILocal paymentDetailCLILocal(string txID);

  void walletInitLocal();

  Bundle walletDumpLocal();

  // Account balance and its current value in selected currency.
  record LocalOwnAccount {
    AccountID accountID;
    boolean isPrimary;
    string name;
    array<Balance> balance;
    union { null, OutsideExchangeRate } exchangeRate;
  }

  array<LocalOwnAccount> walletGetLocalAccounts();

  // Whether this account is one of this user's.
  boolean ownAccountLocal(AccountID accountID);

  void importSecretKeyLocal(SecretKey secretKey, boolean makePrimary);

  // prompts for passphrase
  SecretKey exportSecretKeyLocal(AccountID accountID);

  void setDisplayCurrency(AccountID accountID, string currency);

  OutsideExchangeRate exchangeRateLocal(OutsideCurrencyCode currency);

  map<OutsideCurrencyCode, OutsideCurrencyDefinition> getAvailableLocalCurrencies();
  string formatLocalCurrencyString(string amount, OutsideCurrencyCode code);
}
