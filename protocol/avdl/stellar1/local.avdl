@namespace("stellar.1")
protocol local {
  import idl "github.com/keybase/client/go/protocol/keybase1" as keybase1;
  import idl "common.avdl";

  // -------------------------------------------------------
  // frontend protocol
  // -------------------------------------------------------

  record WalletAccountLocal {
    AccountID accountID;        // string "GCKLHXC22222252UOISFKYZQX7YIVDBPSZ7UUYDFK6URTG6VDRANPC5K"
    boolean isDefault;          // true if this is the default sending/receiving account
    string name;                // the user-given name for the account
    string balanceDescription;  // example: "56.0227002 XLM"
  }
  array<WalletAccountLocal> GetWalletAccountsLocal(int sessionID);

  record AccountAssetLocal {
    string name;                    // "Lumens"
    string balanceTotal;            // "280.9192933"
    string balanceAvailableToSend;  // "279.9192933"
    string assetCode;               // "XLM"
    string issuer;                  // "Stellar"
    string worth;                   // "$98.13" or error string if worthCurrency == "ERR"
    string worthCurrency;           // "USD", "CAD", etc.  if it is "ERR" then an exchange rate error occurred
  }
  array<AccountAssetLocal> GetAccountAssetsLocal(int sessionID, AccountID accountID);

  // -------------------------------------------------------
  // CLI protocol
  // -------------------------------------------------------

  array<Balance> balancesLocal(AccountID accountID);

  SendResultCLILocal sendCLILocal(string recipient, string amount, Asset asset, string note, string displayAmount, string displayCurrency);

  record SendResultCLILocal {
    KeybaseTransactionID KbTxID;
    // Direct: tx ID of the payment tx
    // Relay : tx ID of the funding payment tx
    TransactionID TxID;
    union { null, SendRelayResultCLILocal } relay;
  }
  record SendRelayResultCLILocal {
    // Implicit team that the relay secret is encrypted for.
    keybase1.TeamID teamID;
  }

  // Claim a relay payment
  // `txID` is the kbTxID of the relay payment. Can also be the txID of the funding tx.
  // `into` is the account into which to claim. Null will default to the user's primary account.
  RelayClaimResult claimCLILocal(string txID, union { null, AccountID } into);

  record PaymentCLIOptionLocal {
    // Pointer or error
    union { null, PaymentCLILocal } payment;
    string err;
  }

  record PaymentCLILocal {
    TransactionID txID; // For relay payments, the funding tx.
    TimeMs time;
    string status;
    string statusDetail;
    string amount;
    Asset asset;
    union { null, string } displayAmount;
    union { null, string } displayCurrency;

    AccountID fromStellar;
    union { null, AccountID } toStellar;
    union { null, string } fromUsername;
    union { null, string } toUsername;
    string note;
    string noteErr;
  }
  array<PaymentCLIOptionLocal> recentPaymentsCLILocal(union { null, AccountID } accountID);

  // txID can be either a keybase or stellar transaction ID.
  PaymentCLILocal paymentDetailCLILocal(string txID);

  void walletInitLocal();

  Bundle walletDumpLocal();

  // Account balance and its current value in selected currency.
  record OwnAccountCLILocal {
    AccountID accountID;
    boolean isPrimary;
    string name;
    array<Balance> balance;
    union { null, OutsideExchangeRate } exchangeRate;
  }

  array<OwnAccountCLILocal> walletGetAccountsCLILocal();

  // Whether this account is one of this user's.
  boolean ownAccountLocal(AccountID accountID);

  void importSecretKeyLocal(SecretKey secretKey, boolean makePrimary);

  // prompts for passphrase
  SecretKey exportSecretKeyLocal(AccountID accountID);

  void setDisplayCurrency(AccountID accountID, string currency);

  OutsideExchangeRate exchangeRateLocal(OutsideCurrencyCode currency);

  map<OutsideCurrencyCode, OutsideCurrencyDefinition> getAvailableLocalCurrencies();
  string formatLocalCurrencyString(string amount, OutsideCurrencyCode code);
}
