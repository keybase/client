@namespace("stellar.1")
protocol remote {

  import idl "github.com/keybase/client/go/protocol/keybase1" as keybase1;
  import idl "common.avdl";

  record EncryptedNote {
    int v;             // version 
    bytes e;           // encrypted data
    bytes n;           // nonce
    keybase1.KID KID;  // public key data was encrypted for
  }

  record Members {
    AccountID fromStellar;
    string fromKeybase;
    keybase1.UID fromUID;
    keybase1.DeviceID fromDeviceID;
    AccountID toStellar;
    string toKeybase;
    keybase1.UID toUID;
  }

  record TransactionSummary {
    TransactionID stellarID;
    KeybaseTransactionID keybaseID;
    TransactionStatus status;
    string errMsg;

    EncryptedNote note;

    Asset asset;
    string amount;
    string displayAmount;
    string displayCurrency;

    Members members;

    TimeMs ctime;
    TimeMs rtime;
  }

  record Operation {
    string ID;
    string opType;
    int createdAt;
    string TransactionHash;

    Asset asset;
    string amount;
  }

  record TransactionDetails {
    TransactionID stellarID;
    KeybaseTransactionID keybaseID;
    string Hash;
    int ledger;
    int ledgerCloseTime;
    AccountID sourceAccount;
    string sourceAccountSequence;
    int feePaid;

    Members members;
    EncryptedNote note;
    array<string> signatures;
    array<Operation> operations;

    TimeMs ctime;
  }

  record PaymentPost {
    uint64 stellarAccountSeqno;

    Members members;

    string displayAmount;
    string displayCurrency;

    EncryptedNote note;

    string signedTransaction;
  }

  record PaymentSummary {
    // One or the other or both.
    union { null, PaymentSummaryStellar } stellar; // Info from stellar network
    union { null, PaymentSummaryKeybase } keybase; // Info from keybase storage

    // Common values
    TransactionID stellarTxID;
    AccountID from;
    AccountID to;
    string amount; // amount of asset transfered
    Asset asset;
  }

  record PaymentSummaryKeybase {
    KeybaseTransactionID kbTxID;
    TransactionStatus status;
    string submitErrMsg;
    TimeMs ctime;
    TimeMs rtime; // time of last status update
    keybase1.UID fromUID;
    keybase1.DeviceID fromDeviceID;
    union { null, keybase1.UID } toUID;
    // union { null, EncryptedNote }  note; // TODO
    union { null, string } displayAmount;
    union { null, string } displayCurrency;
  }

  record PaymentSummaryStellar {
    uint64 operationID;
    TimeMs ctime;
  }

  array<Balance> balances(keybase1.UID uid, AccountID accountID);
  array<PaymentSummary> recentPayments(keybase1.UID uid, AccountID accountID, int limit);
  TransactionDetails transaction(keybase1.UID uid, TransactionID id);

  // js can't handle uint64, so returning a string
  string accountSeqno(keybase1.UID uid, AccountID accountID);
  PaymentResult submitPayment(keybase1.UID uid, PaymentPost payment);
}
