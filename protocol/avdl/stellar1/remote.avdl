@namespace("stellar.1")
protocol remote {

  import idl "github.com/keybase/client/go/protocol/keybase1" as keybase1;
  import idl "common.avdl";

  record PaymentDirectPost {
    keybase1.DeviceID fromDeviceID;
    union { null, keybase1.UserVersion } to; // Nil for payments to stellar addresses
    string displayAmount;
    string displayCurrency;
    string noteB64; // b64-encoded EncryptedNote or empty string.
    string signedTransaction;
  }

  record PaymentRelayPost {
    keybase1.DeviceID fromDeviceID;
    union { null, keybase1.UserVersion } to; // Nil for SBS
    string toAssertion; // Ex: 'mlsteele' or 'maxtaco@reddit'
    AccountID relayAccount; // Address where the funds will be held
    keybase1.TeamID teamID; // Impteam ID
    string displayAmount;
    string displayCurrency;
    string boxB64; // b64-encoded EncryptedRelaySecret
    string signedTransaction; // Funding tx
  }

  record RelayClaimPost {
    KeybaseTransactionID keybaseID;
    RelayDirection dir;
    string signedTransaction; // Claim or yank tx
  }

  record PaymentSummary {
    // One or the other or both.
    union { null, PaymentSummaryStellar } stellar; // Info from stellar network
    union { null, PaymentSummaryKeybase } keybase; // Info from keybase storage

    // Common values
    TransactionID stellarTxID;
    AccountID from;
    AccountID to;
    string amount; // amount of asset transfered
    Asset asset;
  }

  record PaymentSummaryKeybase {
    KeybaseTransactionID kbTxID;
    TransactionStatus status;
    string submitErrMsg;
    TimeMs ctime;
    TimeMs rtime; // time of last status update
    keybase1.UserVersion from;
    keybase1.DeviceID fromDeviceID;
    union { null, keybase1.UserVersion } to;
    union { null, string } displayAmount;
    union { null, string } displayCurrency;
    string noteB64; // b64-encoded EncryptedNote or empty string.
  }

  record PaymentSummaryStellar {
    uint64 operationID;
    TimeMs ctime;
  }

  array<Balance> balances(keybase1.UserVersion caller, AccountID accountID);

  array<PaymentSummary> recentPayments(keybase1.UserVersion caller, AccountID accountID, int limit);

  // txID can be either a keybase or stellar transaction ID.
  PaymentSummary paymentDetail(keybase1.UserVersion caller, string txID);

  // js can't handle uint64, so returning a string
  string accountSeqno(keybase1.UserVersion caller, AccountID accountID);

  PaymentResult submitPayment(keybase1.UserVersion caller, PaymentDirectPost payment);

  PaymentResult submitRelayPayment(keybase1.UserVersion caller, PaymentRelayPost payment);

  RelayClaimResult submitRelayClaim(keybase1.UserVersion caller, RelayClaimPost claim);

  // ask the stellar network whether the master key for the account has power
  boolean isMasterKeyActive(keybase1.UserVersion caller, AccountID accountID);

  string ping();
}
