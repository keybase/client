@namespace("keybase.1")
protocol doctorUi {

	import idl "common.avdl";

	// if doctor runs and login is needed, it will call this to give the
	// user the option of which user to log in as.  The login will be
	// different from a standard login as it won't try to fix the user's
	// keys immediately.
	string loginSelect(int sessionID, string currentUser, array<string> otherUsers);


	enum DoctorFixType {
		NONE_0,
		ADD_ELDEST_DEVICE_1,
		ADD_SIBLING_DEVICE_2
	}

	// any of these can be set
	record DoctorSignerOpts {
		boolean otherDevice;  // an existing device can be used to sign new device
		boolean pgp;          // pgp can be used to sign new device
		boolean internal;     // if they have no keys, or if this is the eldest device and they have a detkey
	}

	record DoctorStatus {
		DoctorFixType fix;
		DoctorSignerOpts signerOpts;
		array<Device> devices;
		union { null, Device } currentDevice;
	}

	// once the user is logged in, the status of their account will
	// be evaluated and displayStatus() will be called with info about it.
	// Return true to proceed and do any necessary fixes.  Return false to cancel.
	boolean displayStatus(int sessionID, DoctorStatus status);

	// if a fix is performed, displayResult() will be called after the
	// fix is done.
	void displayResult(int sessionID, string message);
}
