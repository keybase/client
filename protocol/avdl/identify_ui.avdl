
@namespace("keybase.1")
protocol identifyUi {
  import idl "common.avdl";
  import idl "identify_common.avdl";

  record ProofResult {
    ProofState state;
    ProofStatus status;
    string desc;
  }

  record IdentifyRow {
    int rowId;
    RemoteProof proof;
    union { null, TrackDiff } trackDiff;
  }

  // XXX when FOKID goes away, remove pgpFingerprint from this
  record IdentifyKey {
    bytes pgpFingerprint;
    KID KID;
    union { null, TrackDiff } trackDiff;
  }

  record Cryptocurrency {
    int rowId;
    bytes pkhash;
    string address;
  }

  record Identity {
    union { null, Status } status;
    int whenLastTracked;
    array<IdentifyRow> proofs;
    array<Cryptocurrency> cryptocurrency;
    array<TrackDiff> revoked;
  }

  record SigHint {
    string remoteId;
    string humanUrl;
    string apiUrl;
    string checkText;
  }

  record CheckResult {
    ProofResult proofResult;
    Time time;
    string displayMarkup;
  }

  record LinkCheckResult {
    int proofId;
    ProofResult proofResult;
    boolean torWarning;
    union { null, CheckResult } cached;
    union { null, TrackDiff } diff;
    union { null, TrackDiff } remoteDiff;
    union { null, SigHint } hint;
  }

  record ConfirmResult {
    boolean identityConfirmed; // true if the user answers yes to "Is this the user you wanted?"
    boolean remoteConfirmed;   // true if the user answers yes to "Publicly write tracking statement to server?"
  }

  // The IdentifyUI can be delegated to another process.  Call this function
  // to initialize the delegated UI; it returns the sessionID to use in the
  // following exchange. Return 0 on failure.
  int delegateIdentifyUI();

  void start(int sessionID, string username);
  void displayKey(int sessionID, IdentifyKey key);
  void reportLastTrack(int sessionID, union { null, TrackSummary } track);
  void launchNetworkChecks(int sessionID, Identity identity, User user);
  void displayTrackStatement(int sessionID, string stmt);

  void finishWebProofCheck(int sessionID, RemoteProof rp, LinkCheckResult lcr);
  void finishSocialProofCheck(int sessionID, RemoteProof rp, LinkCheckResult lcr);
  void displayCryptocurrency(int sessionID, Cryptocurrency c);
  void reportTrackToken(int sessionID, string trackToken);
  ConfirmResult confirm(int sessionID, IdentifyOutcome outcome);
  void finish(int sessionID);
}
