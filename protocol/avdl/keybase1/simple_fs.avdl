@namespace("keybase.1")

protocol SimpleFS {

  import idl "common.avdl";

/*
  File manipulation interface
  
  Caller provides OpID to one of these methods to begin an operation:
    sfList
    sfListRecursive
    sfCopy
    sfOpen
    sfMove
    sfRemove
  then calls one of the following until until status is no longer pending
  or operation is cancelled:
    sfReadList (after list or listRecursive)
    sfRead (after open)
    sfWrite (after open)
    sfCheck (after copy, move or remove)
  Caller can optionally block by calling wait()
  Operation must be closed by calling close
*/

  // Random GUID provided by caller 
  fixed OpID(16);
  
  enum PathType {
    LOCAL_0,
    KBFS_1
  }  

  variant Path switch (PathType PathType) {
    case LOCAL: string;
    case KBFS: string;
  }

  enum DirentType {
    FILE_0,
    DIR_1,
    SYM_2,
    EXEC_3
  }
  
  record Dirent {
    Time time;
    int size;   // size of file or count of dir entries (TBD - mmay be expensive/unnecessary)
    DirentType direntType;
  }

  @typedef("int")
  record ErrorNum {}

  enum OpenFlags {
    READ_0,         // exclusive of other flags
    REPLACE_1,      // overwrite
    EXISTING_2,     // fail if not present already
    WRITE_4,        // read is implied if not write, executable, or directory
    EXECUTABLE_8,
    DIRECTORY_16
  }

  @typedef("int")
  record Progress {}

  record SfListResult {
    array<Path> paths;
    Progress progress;
  }
  
  record FileContent {
    bytes data;         // Zero bytes when read is complete
    Progress progress;  // Amount of data copied so far during this and previous reads
  }                     // (TBD: should this be percentage?)

  enum AsyncOps {
    LIST_0,
    LIST_RECURSIVE_1,
    READ_2,
    WRITE_3,
    COPY_4,
    MOVE_5,
    REMOVE_6
  }

  record ListRemoveArgs {
    OpID opID;
    Path path;
  }

  record ReadWriteArgs {
    OpID opID;
    Path path;
    int offset;
  }

  record CopyMoveArgs {
    OpID opID;
    Path src;
    Path dest;
  }

  variant OpDescription switch (AsyncOps asyncOp) {
    case LIST: ListRemoveArgs;
    case LIST_RECURSIVE: ListRemoveArgs;
    case READ: ReadWriteArgs;
    case WRITE: ReadWriteArgs;
    case COPY: CopyMoveArgs;
    case MOVE: CopyMoveArgs;
    case REMOVE: ListRemoveArgs;
  }

  /**
   Begin list of items in directory at path
   Retrieve results with readList()
   Can be a single file to get flags/status
   */
  void sfList(OpID opID, Path path);

  /**
   Begin recursive list of items in directory at path
   */
  void sfListRecursive(OpID opID, Path path);

  /**
   Get list of Paths in progress. Can indicate status of pending
   to get more entries.
   */
  SfListResult sfReadList(OpID opID);

  /**
   Begin copy of file or directory 
   */
  void sfCopy(OpID opID, Path src, Path dest);

  /**
   Begin recursive copy of directory 
   */
  void sfCopyRecursive(OpID opID, Path src, Path dest);

  /**
   Begin move of file or directory, from/to KBFS only
   */
  void sfMove(OpID opID, Path src, Path dest);

  /**
   Rename file or directory, KBFS side only
   */
  void sfRename(Path src, Path dest);

  /**
   Create/open a file and leave it open
   or create a directory
   or set the executable bit on an existing file.
   Files must be closed afterwards.
   */
  void sfOpen(OpID opID, Path dest, OpenFlags flags);

  /**
   Read (possibly partial) contents of open file,
   up to the amount specified by size.
   Repeat until zero bytes are returned or error.
   If size is zero, read an arbitrary amount.
   */
  FileContent sfRead(OpID opID, int offset, int size);

  /**
   Append content to opened file.
   May be repeated until OpID is closed.
   */
  void sfWrite(OpID opID, int offset, bytes content);

  /**
   Remove file or directory from filesystem
   */
  void sfRemove(OpID opID, Path path);

  /**
   Get info about file
   */
  Dirent sfStat(Path path);

  /**
   Convenience helper for generating new random value
   */
  OpID sfMakeOpid();

  /**
   Close OpID, cancels any pending operation.
   Must be called after list/copy/remove
   */
  void sfClose(OpID opID);

  /**
   Check progress of pending operation
   */
  Progress sfCheck(OpID opID);

  /**
   Get all the outstanding operations
   */
  array<OpDescription> sfGetOps();

  /**
   Blocking wait for the pending operation to finish
   */
  void sfWait(OpID opID);
}
