@namespace("keybase.1")

protocol GuiFileAccess {

  import idl "common.avdl";

/*
  File manipulation interface
  
  Caller provides OpID to one of these methods to begin an operation:
    list
    listRecursive
    copy
    open
    move
    remove
  then calls one of the following until until status is no longer pending
  or operation is cancelled:
    readList (after list or listRecursive)
    read (after open)
    write (after open)
    check (after copy, move or remove)
  Caller can optionally block by calling wait()
  Operation must be closed by calling close
 
*/

  // Random GUID provided by caller 
  fixed OpID(16);
  
  enum ItemType {
    FILE,
    DIR,
    SYM,
    EXEC
  }

  record Item {
    string path;
    Time time;
    int size;   // size of file or count of dir entries (TBD - mmay be expensive/unnecessary)
    ItemType itemType;
  }

  @typedef("int")
  record ErrorNum {}

  enum Status {
    finished_0,
    pending_1,
    invalidated_2,
    error_3
  }

  enum openFlags {
    READ_0,         // exclusive of other flags
    REPLACE_1,      // overwrite
    EXISTING_2,     // fail if not present already
    WRITE_4,        // read is implied if not write, executable, or directory
    EXECUTABLE_8,
    DIRECTORY_16
  }

  record Result {
    Status status;
    int progress;       // if status == pending
    ErrorNum errnum;    // if status == error
    string description; // if status == error
  }

  record ListResult {
    array<Item> items;
    Result result;
  }

  record FileContent {
    bytes data
    Result result;
  }

  /**
   Begin list if items in directory at path
   Retrieve results with getList()
   Can be a single file to get flags/status
   */
  void list(OpID opID, string path);

  /**
   Begin recursive list if items in directory at path
   */
  void listRecursive(OpID opID, string path);

  /**
   Get list if items in progress. Can indicate status of pending
   to get more items.
   */
  ListResult readList(OpID opID);

  /**
   Begin copy of file or directory 
   */
  void copy(OpID opID, string src, string dest);

  /**
   Begin recursive copy of directory 
   */
  void copyRecursive(OpID opID, string src, string dest);

  /**
   Begin move of file or directory 
   */
  void move(OpID opID, string src, string dest);

  /**
   Rename file or directory
   */
  void rename(string src, string dest);

  /**
   Create/open a file and leave it open
   or create a directory
   or set the executable bit on an existing file.
   Files must be closed afterwards.
   */
  void open(OpID opID, string dest, openFlags Flags);

  /**
   Read contents of open file
   */
  FileContent read(OpID opID);

  /**
   Append content to opened file
   */
  Result write(OpID opID, FileContent content);

  /**
   Remove file or directory from filesystem
   */
  Result remove(OpID opID, string path);

  /**
   Convenience helper for generating new random value
   */
  Result makeOpID();

  /**
   Close OpID, cancels any pending operation.
   Must be called after list/copy/remove
   */
  Result close(OpID opID);

  /**
   Check progress of pending operation
   */
  Result check(OpID opID);

  /**
   Get all the outstanding operations
   */
  array<OpID> getOps();

  /**
   Blocking wait for the pending operation to finish
   */
  Result wait(OpID opID);
}
