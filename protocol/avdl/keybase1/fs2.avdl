@namespace("keybase.1")

protocol fs2 {

  import idl "common.avdl";

/*
  File manipulation interface
  
  Caller provides handle to asynchronous method call, repeats until status is no
  longer pending or operation is cancelled.
 
  KBFS paths are expected to start with "private" or "public" - mount name is implied.
*/

  // Random GUID provided by caller 
  fixed Handle(16);
  
  enum ItemType {
    FILE,
    DIR
  }

  record Item {
    string path;
    Time time;
    int size;   // size of file or count of dir entries
    ItemType itemType;
  }

  enum Status {
    finished,
    pending,
    invalidated,
    error
  }

  record Result {
    Status status;
    int errno;          // if status == error
    string description; // if status == error
  }

  record ListResult {
    array<Item> items;
    Result result;
  }

  /**
   Get list if items in directory at path
   Can call repeatedly until status is no longer pending 
   */
  ListResult list(Handle handle, string path);

  /**
   Copy file or directory into filesystem
   */
  Result copyIn(Handle handle, string src, string dest);

  /**
   Copy file or directory out of filesystem
   */
  Result copyOut(Handle handle, string src, string dest);

  /**
   Remove file or directory from filesystem
   */
  Result remove(Handle handle, string path);

  /**
   Convenience helper for generating new random value
   */
  Result makeHandle();

  /**
   Close handle, cancels any pending operation.
   Must be called after list/copy/remove
   */
  Result closeHandle(Handle handle);
}
