@namespace("keybase.1")

protocol identify {
  import idl "common.avdl";
  import idl "identify_common.avdl";


  /**
    Resolve an assertion to a (UID,username) or (TeamID,teamname). On failure, returns an error.
   */
  @lint("ignore")
  UserOrTeamLite Resolve3(string assertion);

  record IdentifyProofBreak {
    RemoteProof remoteProof;
    LinkCheckResult lcr;
  }

  record IdentifyTrackBreaks {
    array<IdentifyKey> keys;
    array<IdentifyProofBreak> proofs;
  }

  record Identify2Res {
    UserPlusKeys upk;
    Time identifiedAt;
    union { null, IdentifyTrackBreaks } trackBreaks;
  }

  /*
   * Note that UID can be empty, in which case a resolution is also forced.
   */
  Identify2Res identify2(
    int sessionID,
    UID uid,
    string userAssertion,
    IdentifyReason reason,
    boolean useDelegateUI=false,
    boolean alwaysBlock=false,
    boolean noErrorOnTrackFailure=false,
    boolean forceRemoteCheck=false,
    boolean needProofSet=false,
    boolean allowEmptySelfID=false,
    boolean noSkipSelf=true,
    boolean canSuppressUI=false,
    TLFIdentifyBehavior identifyBehavior=0,
    boolean forceDisplay=false
  );
  record IdentifyLiteRes {
    UserOrTeamLite ul;
    union { null, IdentifyTrackBreaks } trackBreaks;
  }

  /*
   * Note that UID can be empty, in which case a resolution is also forced.
   */
  IdentifyLiteRes identifyLite(
    int sessionID,
    UserOrTeamID id,
    string assertion, IdentifyReason reason,
    boolean useDelegateUI=false,
    boolean alwaysBlock=false,
    boolean noErrorOnTrackFailure=false,
    boolean forceRemoteCheck=false,
    boolean needProofSet=false,
    boolean allowEmptySelfID=false,
    boolean noSkipSelf=true,
    boolean canSuppressUI=false,
    TLFIdentifyBehavior identifyBehavior=0,
    boolean forceDisplay=false
  );

  /*
   * Resolve a set of assertions to an implicit team, optionally creating the team and identifying the members.
   */
  ResolveIdentifyImplicitTeamRes resolveIdentifyImplicitTeam(
    int sessionID,
    string assertions,
    string suffix,
    boolean isPublic,
    boolean doIdentifies,  // Whether core runs identifies on all the people or assertions
    boolean create,        // Whether to create the team if none exists
    IdentifyReason reason, // Displayed in the header of the tracker popup
    TLFIdentifyBehavior identifyBehavior
  );
  record ResolveIdentifyImplicitTeamRes {
    // Display name possibly updated by resolutions and conflicts.
    // With the logged-in user first (so not a canonical CORE display name).
    string displayName; // example: "alice,bob,zed#bot (conflicted copy 2017-05-08 #3)"
    TeamID teamID;
    array<UserVersion> writers; // Members of the team that can write. The team OWNERs.
    map<UserVersion,IdentifyTrackBreaks> trackBreaks;
  }

}
