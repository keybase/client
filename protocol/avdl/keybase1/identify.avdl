@namespace("keybase.1")

protocol identify {
  import idl "common.avdl";
  import idl "identify_common.avdl";


  /**
    Resolve an assertion to a (UID,username) or (TeamID,teamname). On failure, returns an error.
   */
  @lint("ignore")
  UserOrTeamLite Resolve3(string assertion);

  record IdentifyProofBreak {
    RemoteProof remoteProof;
    LinkCheckResult lcr;
  }

  record IdentifyTrackBreaks {
    array<IdentifyKey> keys;
    array<IdentifyProofBreak> proofs;
  }

  record Identify2Res {
    UserPlusKeys upk;
    Time identifiedAt;
    union { null, IdentifyTrackBreaks } trackBreaks;
  }

  /*
   * Note that UID can be empty, in which case a resolution is also forced.
   */
  Identify2Res identify2(int sessionID, UID uid, string userAssertion, IdentifyReason reason, boolean useDelegateUI=false, boolean alwaysBlock=false, boolean noErrorOnTrackFailure=false, boolean forceRemoteCheck=false, boolean needProofSet=false, boolean allowEmptySelfID=false, boolean noSkipSelf=true, boolean canSuppressUI=false, TLFIdentifyBehavior identifyBehavior=0, boolean forceDisplay=false);

  record IdentifyLiteRes {
    UserOrTeamLite ul;
    union { null, IdentifyTrackBreaks } trackBreaks;
  }

  /*
   * Note that UID can be empty, in which case a resolution is also forced.
   */
  IdentifyLiteRes identifyLite(int sessionID, UserOrTeamID id, string assertion, IdentifyReason reason, boolean useDelegateUI=false, boolean alwaysBlock=false, boolean noErrorOnTrackFailure=false, boolean forceRemoteCheck=false, boolean needProofSet=false, boolean allowEmptySelfID=false, boolean noSkipSelf=true, boolean canSuppressUI=false, TLFIdentifyBehavior identifyBehavior=0, boolean forceDisplay=false);


}
