
@namespace("keybase.1")
protocol account {
  import idl "passphrase_common.avdl";

  /**
    Change the passphrase from old to new. If old isn't set, and force is false,
    then prompt at the UI for it. If old isn't set and force is true, then we'll
    try to force a passphrase change.
   */
  void passphraseChange(int sessionID, string oldPassphrase, string passphrase, boolean force);

  GetPassphraseRes passphrasePrompt(int sessionID, GUIEntryArg guiArg);

  /**
   * change email to the new given email by signing a statement.
   */
  void emailChange(int sessionID, string newEmail);

  /**
   * Whether the logged-in user has uploaded private keys
   * Will error if not logged in.
   */
  HasServerKeysRes hasServerKeys(int sessionID);
  record HasServerKeysRes {
    boolean hasServerKeys;
  }

  /**
   resetAccount resets the user's account; it's meant only for devel and tests.
   passphrase is optional and will be prompted for if not supplied.
  */
  void resetAccount(int sessionID, string passphrase);

  record LockdownHistory {
    @jsonkey("status")
    boolean status;
    @jsonkey("ctime")
    Time creationTime;
    @jsonkey("device_id")
    DeviceID deviceID;
    string deviceName;
  }

  record GetLockdownResponse {
    array<LockdownHistory> history;
    boolean status;
  }
  
  GetLockdownResponse getLockdownMode(int sessionID);
  void setLockdownMode(int sessionID, boolean enabled);
}
