@namespace("keybase.1")

protocol chatLocal {

  import idl "github.com/keybase/client/go/protocol/chat1" as chat1;
  import idl "common.avdl";

  record MessageText {
    string body;
  }

  record MessageConversationMetadata {
    string conversationTitle;
  }

  record MessageEdit {
    chat1.MessageID messageID;
    string body;
  }

  record MessageDelete {
    chat1.MessageID messageID;
  }

  record MessageAttachment {
    string path;
  }

  variant MessageBody switch (chat1.MessageType messageType) {
    case TEXT: MessageText;
    case ATTACHMENT: MessageAttachment;
    case EDIT: MessageEdit;
    case DELETE: MessageDelete;
    case METADATA: MessageConversationMetadata;
  }

  // This is what is encrypted and sent over as bodyCiphertext.
  record MessagePlaintext {
    chat1.MessageClientHeader clientHeader;
    array<MessageBody> messageBodies;
  }

  record MessageInfoLocal {
    boolean isNew;
    string senderUsername;
    string senderDeviceName;
  }

  record Message {
    chat1.MessageServerHeader serverHeader;
    MessagePlaintext messagePlaintext;

    union { null, MessageInfoLocal } info;
  }

  record ThreadView {
    array<Message> messages;
    union { null, chat1.Pagination } pagination;
  }

  record MessageSelector {
    array<chat1.MessageType> MessageTypes;

    union { null, string } Since;
    boolean onlyNew;

    int limit;

    array<chat1.ConversationID> conversations;

    boolean markAsRead;
  }

  record ConversationInfoLocal {
    string tlfName;
    string topicName;
    chat1.TopicType topicType;
  }

  record ConversationLocal {
    chat1.ConversationID id;
    union { null, ConversationInfoLocal } info;
    array<Message> messages;
  }

  chat1.InboxView getInboxLocal(union { null, chat1.Pagination } pagination);
  ThreadView getThreadLocal(chat1.ConversationID conversationID, boolean markAsRead, union { null, chat1.Pagination } pagination);
  void postLocal(chat1.ConversationID conversationID, MessagePlaintext messagePlaintext);
  chat1.ConversationID newConversationLocal(chat1.ConversationIDTriple conversationTriple);

  array<chat1.ConversationID> resolveConversationLocal(ConversationInfoLocal conversation);
  array<ConversationLocal> getMessagesLocal(MessageSelector selector);

  // The tlfName can be either complete or partial. If the user's username is
  // not present in tlfName, it gets appended automatically. The canonical TLF
  // name is returned.
  CanonicalTlfName completeAndCanonicalizeTlfName(string tlfName);
}
