@namespace("keybase.1")

protocol chatLocal {

  import idl "github.com/keybase/client/go/protocol/chat1" as chat1;
  import idl "common.avdl";

  record MessageText {
    string body;
  }

  record MessageConversationMetadata {
    string conversationTitle;
  }

  record MessageEdit {
    chat1.MessageID messageID;
    string body;
  }

  record MessageDelete {
    chat1.MessageID messageID;
  }

  record MessageAttachment {
    string path;
  }

  record MessageBody {
    chat1.MessageType type;
    union { null, MessageText } text;
    union { null, MessageAttachment } attachment;
    union { null, MessageEdit } edit;
    union { null, MessageDelete } delete;
    union { null, MessageConversationMetadata } conversationMetadata;
  }

  // This is what is encrypted and sent over as bodyCiphertext.
  record MessagePlaintext {
    chat1.MessageClientHeader clientHeader;
    array<MessageBody> messageBodies;
  }

  record MessageInfoLocal {
    boolean isNew;
    string senderUsername;
    string senderDeviceName;
  }

  record Message {
    chat1.MessageServerHeader serverHeader;
    MessagePlaintext messagePlaintext;

    union { null, MessageInfoLocal } info;
  }

  record ThreadView {
    array<Message> messages;
    union { null, chat1.Pagination } pagination;
  }

  record MessageSelector {
    array<chat1.MessageType> MessageTypes;

    union { null, string } Since;
    boolean onlyNew;
    
    int limit;

    array<chat1.ConversationID> conversations;

    boolean markAsRead;
  }

  record ConversationInfoLocal {
    chat1.ConversationID id;
    string tlfName;
    string topicName;
    chat1.TopicType topicType;
  }

  record ResolvedConversationLocal {
    ConversationInfoLocal conversation;
    Time timestamp;
  }

  record ConversationLocal {
    chat1.ConversationID id;
    union { null, ConversationInfoLocal } info;
    array<Message> messages;
  }

  chat1.InboxView getInboxLocal(union { null, chat1.Pagination } pagination);
  ThreadView getThreadLocal(chat1.ConversationID conversationID, boolean markAsRead, union { null, chat1.Pagination } pagination);
  void postLocal(chat1.ConversationID conversationID, MessagePlaintext messagePlaintext);

  // resolveConversationLocal resolves information related to a conversation.
  // If conversation.id is given (non-zero), it is used to locate the
  // conversation. Otherwise, tlfName, topicName, and topicType, if any of
  // which are non zero value, are used to search for conversation. Any
  // matching conversation is added to a list and returned to the caller.
  array<ResolvedConversationLocal> resolveConversationLocal(ConversationInfoLocal conversation);

  // newConversationLocal creates a new conversation. conversation.id field is
  // ignored. tlfName and topicType fields are required. topicName, if not
  // empty, causes a follow-up call to set the topic name for the conversation.
  // Calling newConversationLocal with a topic name is same to calling with an
  // empty topic name and following-up with an updateTopicName call. The
  // returned ConversationInfoLocal has all fields populated.
  ConversationInfoLocal newConversationLocal(ConversationInfoLocal conversation);

  void updateTopicNameLocal(chat1.ConversationID conversationID, string newTopicName);

  array<ConversationLocal> getMessagesLocal(MessageSelector selector);

  // The tlfName can be either complete or partial. If the user's username is
  // not present in tlfName, it gets appended automatically. The canonical TLF
  // name is returned.
  CanonicalTlfName completeAndCanonicalizeTlfName(string tlfName);
}
