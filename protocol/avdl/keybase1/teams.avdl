@namespace("keybase.1")

protocol teams {

  enum TeamRole {
    NONE_0,
    READER_1,
    WRITER_2,
    ADMIN_3,
    OWNER_4
  }

  enum TeamApplication {
    KBFS_1,
    CHAT_2,
    SALTPACK_3
  }

  // PerTeamKeyGeneration describes the generation of the secret.
  // The sequence starts at 1.
  @typedef("int")
  record PerTeamKeyGeneration {}

  record TeamApplicationKey {
    TeamApplication application;
    PerTeamKeyGeneration keyGeneration;
    Bytes32 key;
  }

  @typedef("bytes")
  record MaskB64 {}

  @typedef("string")
  record TeamInviteID {}

  record ReaderKeyMask {
    TeamApplication application;
    PerTeamKeyGeneration generation;
    MaskB64 mask;
  }

  @lint("ignore")
  record PerTeamKey {
      PerTeamKeyGeneration gen;
      Seqno seqno;
      KID sigKID;
      KID encKID;
  }

  fixed PerTeamKeySeed(32);

  // Secret from which team keys are derived
  record PerTeamKeySeedItem {
    PerTeamKeySeed seed;
    PerTeamKeyGeneration generation;
    Seqno seqno;
  }

  record TeamMember {
    UID uid;
    TeamRole role;
    Seqno eldestSeqno;
  }

  record TeamMembers {
    array<UserVersion> owners;
    array<UserVersion> admins;
    array<UserVersion> writers;
    array<UserVersion> readers;
  }

  record TeamMemberDetails {
    UserVersion uv;
    string username;
    boolean active;
  }

  record TeamMembersDetails {
    array<TeamMemberDetails> owners;
    array<TeamMemberDetails> admins;
    array<TeamMemberDetails> writers;
    array<TeamMemberDetails> readers;
  }

  record TeamDetails {
    TeamMembersDetails members;
    PerTeamKeyGeneration keyGeneration;
  }

  record TeamChangeReq {
    array<UserVersion> owners;
    array<UserVersion> admins;
    array<UserVersion> writers;
    array<UserVersion> readers;
    array<UserVersion> none;
  }

  record UserVersion {
    UID uid;
    Seqno eldestSeqno;
  }

  record TeamPlusApplicationKeys {
      TeamID id;
      string name;
      TeamApplication application;

      array<UserVersion> writers;
      array<UserVersion> onlyReaders;

      array<TeamApplicationKey> applicationKeys;
  }

  // Snapshot of a loaded team.
  record TeamData {
    TeamSigChainState chain;
    // generation -> seed
    map<PerTeamKeyGeneration,PerTeamKeySeedItem> perTeamKeySeeds;
    // application -> generation -> mask
    map<TeamApplication,map<PerTeamKeyGeneration,MaskB64>> readerKeyMasks;
    // Should only be used by TeamLoader
    // because it is the only mutated field, and thus is not threadsafe to read.
    Time cachedAt;
  }

  enum TypeInviteCategory {
    NONE_0,
    UNKNOWN_1,
    KEYBASE_2,
    EMAIL_3,
    SBS_4
  }

  variant TeamInviteType switch (TypeInviteCategory c) {
    case UNKNOWN: string;
    case SBS: TeamInviteSocialNetwork;
    default: void;
  }

  @typedef("string")
  record TeamInviteSocialNetwork {}
  @typedef("string")
  record TeamInviteName {}

  record TeamInvite {
    TeamRole role;
    TeamInviteID id;
    TeamInviteType type;
    TeamInviteName name;
  }

  // State of a parsed team sigchain.
  // Should be treated as immutable when outside TeamSigChainPlayer.
  // Modified internally to TeamSigChainPlayer.
  record TeamSigChainState {
    // The user who loaded this sigchain
    UserVersion reader;

    TeamID id;
    // Latest name of the team
    TeamName name;
    // The last link procesed
    Seqno lastSeqno;
    LinkID lastLinkID;

    // Present if a subteam
    union { null, TeamID } parentID;

    // For each user; the timeline of their role status.
    // The role checkpoints are always ordered by seqno.
    // The latest role of the user is the role of their last checkpoint.
    // When a user leaves the team a NONE checkpoint appears in their list.
    map<UserVersion,array<UserLogPoint>> userLog;

    // For each subteam; the timeline of its name.
    // The checkpoints are always ordered by seqno.
    // The latest name of the subteam is the role of its last checkpoint.
    map<TeamID,array<SubteamLogPoint>> subteamLog;

    // Keyed by per-team-key generation
    map<PerTeamKeyGeneration, PerTeamKey> perTeamKeys;

    // This is filled up to lastSeqno.
    map<Seqno, LinkID> linkIDs;

    // Set of links that are stubbed-out and whose contents are missing.
    // Keyed by seqno
    map<Seqno, boolean> stubbedLinks;

    // All invitations that are currently active.
    map<TeamInviteID,TeamInvite> activeInvites;
  }

  // A user became this role at a point in time
  record UserLogPoint {
    // The new role. Including NONE if the user left the team.
    TeamRole role;
    // The seqno at which the user became this role, and other imporant
    // details, like the last known MerkleRoot at that time.
    SignatureMetadata sigMeta;
  }

  // A subteam got this name at this point in time.
  record SubteamLogPoint {
  // The new subteam name.
    TeamName name;
    // The seqno at which the subteam got this name.
    Seqno seqno;
  }

  @typedef("string")
  record TeamNamePart {}

  // matches the team name struct from api server
  record TeamName {
    array<TeamNamePart> parts;
  }

  // team.clkr gregor message body
  @lint("ignore")
  record TeamCLKRMsg {
    @jsonkey("team_id")
    TeamID teamID;
    PerTeamKeyGeneration generation;
    int score;
  }


  /**
   * TeamRefreshData are needed or wanted data requirements that, if unmet, will cause
   * a refresh of the cached.
   */
  record TeamRefreshers {
    // Load at least up to the keygen. Returns an error if the keygen is not loaded.
    PerTeamKeyGeneration needKeyGeneration;
    // Refresh if these members are not current writers or above of the team in the cache.
    // Does not guarantee these members will be present in the returned team. This is especially
    // relevant in the case of deleted users, who won't be there after the refresh.
    // Does not work on implicit admins.
    array<UserVersion> wantMembers;
  }

  record LoadTeamArg {
    // One of these must be specified.
    // ID is preferred. Name will always hit the server.
    // If both are specified ID will be used and Name will be checked.
    @lint("ignore")
    TeamID ID;
    string name;

    // Whether we need to be an admin.
    // Will fail unless we are an admin in the returned Team.
    // If this is false, looking at invites or listing subteams in the response
    // may not work even if the loading user is an admin.
    boolean needAdmin;

    TeamRefreshers refreshers;

    boolean forceFullReload; // Ignore local data and fetch from the server.
    boolean forceRepoll;     // Force a sync with merkle.
    boolean staleOK;         // If a very stale cache hit is OK.
  }

  record ImplicitRole {
    TeamRole role;
    TeamID ancestor;
  }

  record MemberInfo {
    @jsonkey("team_id")
    TeamID teamID;
    @jsonkey("fq_name")
    string fqName;
    TeamRole role;
    union{null, ImplicitRole} implicit;
  }

  record TeamList {
    UID uid;
    string username;
    string fullName;
    array<MemberInfo> teams;
  }

  void teamCreate(int sessionID, string name);
  TeamDetails teamGet(int sessionID, string name, boolean forceRepoll);
  TeamList teamList(int sessionID, string userAssertion);
  void teamChangeMembership(int sessionID, string name, TeamChangeReq req);
  void teamAddMember(int sessionID, string name, string username, TeamRole role, boolean sendChatNotification);
  void teamRemoveMember(int sessionID, string name, string username);
  void teamLeave(int sessionID, string name, boolean permanent);
  void teamEditMember(int sessionID, string name, string username, TeamRole role);

  /**
   * loadTeamPlusApplicationKeys loads team information for applications like KBFS and Chat.
   * If refreshers are non-empty, then force a refresh of the cache if the requirements
   * of the refreshers aren't met.
   */
  TeamPlusApplicationKeys loadTeamPlusApplicationKeys(int sessionID, TeamID id, TeamApplication application, TeamRefreshers refreshers);
}
