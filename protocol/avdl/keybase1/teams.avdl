@namespace("keybase.1")

protocol teams {

  enum TeamRole {
    NONE_0,
    OWNER_1,
    ADMIN_2,
    WRITER_3,
    READER_4
  }

  enum TeamApplication {
    KBFS_1,
    CHAT_2,
    SALTPACK_3
  }

  record TeamApplicationKey {
    TeamApplication application;
    int keyGeneration;
    Bytes32 key;
  }

  @typedef("bytes")
  record MaskB64 {}

  record ReaderKeyMask {
    TeamApplication application;
    int generation;
    MaskB64 mask;
  }

  @lint("ignore")
  record PerTeamKey {
      int gen;
      Seqno seqno;
      KID sigKID;
      KID encKID;
  }

  fixed PerTeamKeySeed(32);

  // Secret from which team keys are derived
  record PerTeamKeySeedItem {
    PerTeamKeySeed seed;
    int generation;
    Seqno seqno;
  }

  record TeamMember {
    UID uid;
    TeamRole role;
    Seqno eldestSeqno;
  }

  record TeamMembers {
    array<UserVersion> owners;
    array<UserVersion> admins;
    array<UserVersion> writers;
    array<UserVersion> readers;
  }

  record TeamMembersUsernames {
    array<string> owners;
    array<string> admins;
    array<string> writers;
    array<string> readers;
  }

  record TeamChangeReq {
    array<UID> owners;
    array<UID> admins;
    array<UID> writers;
    array<UID> readers;
    array<UID> none;
  }

  record UserVersion {
    UID uid;
    Seqno eldestSeqno;
  }

  record TeamPlusApplicationKeys {
      TeamID id;
      string name;
      TeamApplication application;

      array<UserVersion> writers;
      array<UserVersion> onlyReaders;

      array<TeamApplicationKey> applicationKeys;
  }

  // This type is not really used yet.
  // It is under the umbrella of the team loader refactor.
  record TeamData {
    TeamSigChainState chain;
    // Sorted by generation ascending.
    array<PerTeamKeySeedItem> perTeamKeySeeds;
    array<ReaderKeyMask> readerKeyMasks;

    // Should only be used by TeamLoader
    // because it is the only mutated field, and thus is not threadsafe to read.
    Time cachedAt;
  }

  // State of a parsed team sigchain.
  // Should be treated as immutable when outside TeamSigChainPlayer.
  // Modified internally to TeamSigChainPlayer.
  record TeamSigChainState {
    // The user who loaded this sigchain
    UserVersion reader;

    TeamID id;
    // Latest name of the team
    string name;
    // The last link procesed
    Seqno lastSeqno;
    LinkID lastLinkID;

    // Present if a subteam
    union { null, TeamID } parentID;

    // For each user; the timeline of their role status.
    // The role checkpoints are always ordered by seqno.
    // The latest role of the user is the role of their last checkpoint.
    // When a user leaves the team a NONE checkpoint appears in their list.
    map<UserVersion,array<UserLogPoint>> userLog;

    // Keyed by per-team-key generation
    map<int, PerTeamKey> perTeamKeys;

    // Set of types that were loaded stubbed-out and whose contents are missing.
    // Keyed by libkb.SigchainV2Type
    map<int, boolean> stubbedTypes;
  }

  // A user became this role at a point in time
  record UserLogPoint {
    // The new role. Including NONE if the user left the team.
    TeamRole role;
    // The seqno at which the user became this role.
    Seqno seqno;
  }

  // matches the team name struct from api server
  record TeamNameParts {
    array<string> parts;
  }

  // team.clkr gregor message body
  @lint("ignore")
  record TeamCLKRMsg {
    @jsonkey("team_id")
    TeamID teamID;
    int generation;
    int score;
  }


  record LoadTeamArg {
    // One of these must be specified.
    // ID is preferred. Name will always hit the server.
    // If both are specified ID will be used and Name will be checked.
    @lint("ignore")
    TeamID ID;
    string name;

    // Whether we need to be an admin.
    // Will fail unless we are an admin in the returned Team.
    // It is unreasonable to look at invites or list subteams with this set to false.
    boolean needAdmin;
    // Load at least up to the keygen. Returns an error if the keygen is not loaded.
    int needKeyGeneration;
    // Refresh if these members are not current members of the team in the cache.
    // Does not guarantee these members will be present in the returned team.
    array<UserVersion> needMembers;

    boolean forceFullReload; // Ignore local data and fetch from the server.
    boolean forceRepoll;     // Force a sync with merkle.
    boolean staleOK;         // If a very stale cache hit is OK.
  }

  void teamCreate(int sessionID, string name);
  TeamMembersUsernames teamGet(int sessionID, string name);
  void teamChangeMembership(int sessionID, string name, TeamChangeReq req);
  void teamAddMember(int sessionID, string name, string username, TeamRole role, boolean sendChatNotification);
  void teamRemoveMember(int sessionID, string name, string username);
  void teamEditMember(int sessionID, string name, string username, TeamRole role);
  TeamPlusApplicationKeys loadTeamPlusApplicationKeys(int sessionID, TeamID id, TeamApplication application);
}
