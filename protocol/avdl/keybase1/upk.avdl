@namespace("keybase.1")
protocol UPK {
  import idl "common.avdl";

  enum KeyType {
      NONE_0,
      NACL_1,
      PGP_2
  }

  @typedef("bytes")
  record HashMeta {}

  enum UPK2MinorVersion {
    V0_0,
    V1_1,
    V2_2,
    V3_3,
    V4_4,
    V5_5,
    V6_6
  }

  record MerkleRootV2 {
      Seqno seqno;
      HashMeta hashMeta;
  }

  record SigChainLocation {
      Seqno seqno;
      SeqType seqType;
  }

  record MerkleTreeLocation {
    UserOrTeamID leaf;
    SigChainLocation loc;
  }

  record SignatureMetadata {
      KID signingKID;  // For an eldest key, the signing KID is itself.
      MerkleRootV2 prevMerkleRootSigned;
      Seqno firstAppearedUnverified;
      Time time;
      SigChainLocation sigChainLocation; // Where this appeared in the user's sigchain
  }

  record PublicKeyV2Base {
      KID kid;
      boolean isSibkey;
      boolean isEldest;
      Time cTime;
      Time eTime;
      SignatureMetadata provisioning;
      union { null, SignatureMetadata } revocation;
  }

  record PublicKeyV2NaCl {
      PublicKeyV2Base base;
      union { null, KID } parent;
      DeviceID deviceID;
      string deviceDescription;
      string deviceType;
  }

  fixed PGPFingerprint(20);

  record PublicKeyV2PGPSummary {
      PublicKeyV2Base base;
      PGPFingerprint fingerprint;
      array<PGPIdentity> identities;
  }

  variant PublicKeyV2 switch (KeyType keyType) {
      case NACL: PublicKeyV2NaCl;
      case PGP : PublicKeyV2PGPSummary;
      default  : void;
  }

  record UserPlusKeysV2 {
      UID uid;
      string username;
      Seqno eldestSeqno;
      // =0 for healty users, and 216 for deleted users
      StatusCode status;
      // Sorted by generation ascending
      array<PerUserKey> perUserKeys;
      map<KID, PublicKeyV2NaCl> deviceKeys;
      map<KID, PublicKeyV2PGPSummary> pgpKeys;
      map<UID, RemoteTrack> remoteTracks;
      union { null, ResetSummary } reset;
  }

  record UserPlusKeysV2AllIncarnations {
      UserPlusKeysV2 current;
      // Sorted by account version ascending, could be empty.
      array<UserPlusKeysV2> pastIncarnations;
      UserVersionVector uvv;
      map<Seqno, LinkID> seqnoLinkIDs;
      // When we bump the minor version, bust the cache, and force a refresh
      UPK2MinorVersion minorVersion;
  }

  enum UPAKVersion {
      V1_1,
      V2_2
  }

  /**
   * What we're storing for each user. At first it was UPAKs, as defined
   * in common.avdl. But going forward, we're going to use UserPlusKeysV2AllIncarnations.
   */
  variant UPAKVersioned switch (UPAKVersion v) {
      case V1: UserPlusAllKeys;
      case V2: UserPlusKeysV2AllIncarnations;
  }


}
