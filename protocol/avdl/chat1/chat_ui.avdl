@namespace("chat.1")

protocol chatUi {

  import idl "github.com/keybase/client/go/protocol/keybase1" as keybase1;
  import idl "github.com/keybase/client/go/protocol/gregor1" as gregor1;
  import idl "common.avdl";

  record UIPagination {
    string next;
    string previous;
    int num;
    boolean last;
  }

  record UnverifiedInboxUIItemMetadata {
    string channelName;
    string headline;
    string snippet;
    array<string> writerNames;
    array<string> resetParticipants;
  }

  record UnverifiedInboxUIItem {
    string convID;
    string name;
    keybase1.TLFVisibility visibility;
    ConversationStatus status;
    ConversationMembersType membersType;
    ConversationMemberStatus memberStatus;
    TeamType teamType;
    union{ null, ConversationNotificationInfo } notifications;
    gregor1.Time time;
    ConversationVers version;
    MessageID maxMsgID;
    union { null , UnverifiedInboxUIItemMetadata } localMetadata;

    union { null, ConversationFinalizeInfo } finalizeInfo;
    array<ConversationMetadata> supersedes;
    array<ConversationMetadata> supersededBy;
  }

  record UnverifiedInboxUIItems {
    array<UnverifiedInboxUIItem> items;
    union { null, UIPagination } pagination;
    boolean offline;
  }

  record InboxUIItem {
    string convID;
    boolean isEmpty;
    string name;
    string snippet;
    string channel;
    string headline;
    keybase1.TLFVisibility visibility;
    array<string> participants;
    map<string, string> fullNames;
    array<string> resetParticipants;
    ConversationStatus status;
    ConversationMembersType membersType;
    ConversationMemberStatus memberStatus;
    TeamType teamType;
    gregor1.Time time;
    union { null, ConversationNotificationInfo } notifications;
    union { null, ConversationCreatorInfoLocal } creatorInfo;
    ConversationVers version;
    MessageID maxMsgID;
    union { null, RetentionPolicy } convRetention;
    union { null, RetentionPolicy } teamRetention;

    // Finalized convo stuff (KBFS only)
    union { null, ConversationFinalizeInfo } finalizeInfo;
    array<ConversationMetadata> supersedes;
    array<ConversationMetadata> supersededBy;
  }

  record InboxUIItemError {
    ConversationErrorType typ;
    string message;
    string unverifiedTLFName;
    // Only set if typ is for rekeying.
    union { null, ConversationErrorRekey} rekeyInfo;
    UnverifiedInboxUIItem remoteConv;
  }

  record InboxUIItems {
    array<InboxUIItem> items;
    union { null, UIPagination } pagination;
    boolean offline;
  }

  record UIChannelNameMention {
    string name;
    string convID;
  }

  record UIAssetUrlInfo {
    string previewUrl;
    string fullUrl;
    string mimeType;
  }

  record UIMessageValid {
    MessageID messageID;
    gregor1.Time ctime;
    union { null, string } outboxID;
    MessageBody messageBody;
    string senderUsername;
    string senderDeviceName;
    string senderDeviceType;
    boolean superseded;
    union { null, UIAssetUrlInfo } assetUrlInfo;
    union { null, gregor1.Time } senderDeviceRevokedAt;
    array<string> atMentions;
    ChannelMention channelMention;
    array<UIChannelNameMention> channelNameMentions;
    union { null, MsgEphemeralMetadata } ephemeralMetadata;
  }

  record UIMessageOutbox {
    OutboxState state;
    string outboxID;
    MessageType messageType;
    string body;
    gregor1.Time ctime;
    double ordinal;
  }

  enum MessageUnboxedState {
    VALID_1,
    ERROR_2,
    OUTBOX_3,
    PLACEHOLDER_4
  }

  variant UIMessage switch (MessageUnboxedState state) {
    case VALID: UIMessageValid;
    case ERROR: MessageUnboxedError;
    case OUTBOX: UIMessageOutbox;
    case PLACEHOLDER: MessageUnboxedPlaceholder;
  }

  record UIMessages {
    array<UIMessage> messages;
    union { null, UIPagination } pagination;
  }

  void chatAttachmentUploadOutboxID(int sessionID, OutboxID outboxID);
  void chatAttachmentUploadStart(int sessionID, AssetMetadata metadata, MessageID placeholderMsgID) oneway;
  void chatAttachmentUploadProgress(int sessionID, long bytesComplete, long bytesTotal) oneway;
  void chatAttachmentUploadDone(int sessionID);

  void chatAttachmentPreviewUploadStart(int sessionID, AssetMetadata metadata) oneway;
  void chatAttachmentPreviewUploadDone(int sessionID);

  void chatAttachmentDownloadStart(int sessionID);
  void chatAttachmentDownloadProgress(int sessionID, long bytesComplete, long bytesTotal) oneway;
  void chatAttachmentDownloadDone(int sessionID);

  void chatInboxUnverified(int sessionID, string inbox);
  void chatInboxConversation(int sessionID, string conv);
  void chatInboxFailed(int sessionID, ConversationID convID, InboxUIItemError error);

  void chatThreadCached(int sessionID, union { null, string } thread) oneway;
  void chatThreadFull(int sessionID, string thread) oneway;

  record ChatSearchHit {
    union{ null, UIMessage } prevMessage;
    union{ null, UIMessage } hitMessage;
    union{ null, UIMessage } nextMessage;
    array<string>  matches;
  }

  void chatSearchHit(int sessionID, ChatSearchHit searchHit);
  void chatSearchDone(int sessionID, int numHits);

  boolean chatConfirmChannelDelete(int sessionID, string channel);
}
