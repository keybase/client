@namespace("chat.1")
protocol remote {

  record MessageBoxed {
    // Only set when returned from the server; on the way up to the
    // server, they are null.
    union { null, MessageServerHeader } serverHeader;

    // MessageClientHeader is needed by clients to get keys via TLF name.
    // The server needs it as well for sender uid, device id.
    MessageClientHeader clientHeader;

    EncryptedData headerCiphertext;
    EncryptedData bodyCiphertext;

    int keyGeneration;
  }

  record ThreadViewBoxed {
    array<MessageBoxed> messages;
    union { null, Pagination } pagination;
  }

  record GetInboxRemoteRes {
    InboxView inbox;
    union { null, RateLimit } rateLimit;
  }

  record GetInboxByTLFIDRemoteRes {
    array<Conversation> convs;
    union { null, RateLimit } rateLimit;
  }

  record GetThreadRemoteRes {
    ThreadViewBoxed thread;
    union { null, RateLimit } rateLimit;
  }

  record GetConversationMetadataRemoteRes {
    Conversation conv;
    union { null, RateLimit } rateLimit;
  }

  record PostRemoteRes {
    MessageServerHeader msgHeader;
    union { null, RateLimit } rateLimit;
  }

  record NewConversationRemoteRes {
    ConversationID convID;
    union { null, RateLimit } rateLimit;
  }

  record GetMessagesRemoteRes {
    array<MessageBoxed> msgs;
    union { null, RateLimit } rateLimit;
  }

  record MarkAsReadRes {
    union { null, RateLimit } rateLimit;
  }

  record SetConversationStatusRes {
    union { null, RateLimit } rateLimit;
  }

  GetInboxRemoteRes getInboxRemote(InboxVers vers, union { null, GetInboxQuery } query, union { null, Pagination } pagination);
  GetThreadRemoteRes getThreadRemote(ConversationID conversationID, union { null, GetThreadQuery } query, union { null, Pagination } pagination);

  PostRemoteRes postRemote(ConversationID conversationID, MessageBoxed messageBoxed);
  NewConversationRemoteRes newConversationRemote(ConversationIDTriple idTriple);

  // on duplication of idTriple, and error is returned and the conversation ID of the existing conversation is returned.
  NewConversationRemoteRes newConversationRemote2(ConversationIDTriple idTriple, MessageBoxed TLFMessage);
  GetMessagesRemoteRes getMessagesRemote(ConversationID conversationID, array<MessageID> messageIDs);

  MarkAsReadRes markAsRead(ConversationID conversationID, MessageID msgID);

  SetConversationStatusRes SetConversationStatus(ConversationID conversationID, ConversationStatus status);

  // tlfFinalize is an endpoint for kbfstlfd to notify Gregor that a TLF ID has been finalized.
  // Gregor keeps an internal record of these TLF IDs, so that it can always return the latest
  // conversation per TLF ID on GetInboxRemote.
  void tlfFinalize(TLFID tlfID);

  record S3Params {
    string bucket;
    string objectKey;
    string accessKey;
    string acl;
    string regionName;
    string regionEndpoint;
    string regionBucketEndpoint;
  }

  // getS3Params returns S3 params that the client needs to make S3
  // requests.
  S3Params getS3Params(ConversationID conversationID);
  
  // s3Sign signs a payload for S3 requests.
  bytes s3Sign(int version, bytes payload);
}
