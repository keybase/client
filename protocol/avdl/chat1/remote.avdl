@namespace("chat.1")
protocol remote {

  record MessageBoxed {
    // Only set when returned from the server; on the way up to the
    // server, it's null.
    union { null, MessageServerHeader } serverHeader;

    // Sent as plaintext so that if the message is ever deleted, we can still
    // validate that metadata.
    MessageClientHeader clientHeader;
    // The signature of the above.
    SignatureInfo headerSignature;

    EncryptedData bodyCiphertext;
    SignatureInfo bodySignature;
    int keyGeneration;
  }

  record ThreadViewBoxed {
    array<MessageBoxed> messages;
    union { null, Pagination } pagination;
  }

  record GetInboxRemoteRes {
    InboxView inbox;
    union { null, RateLimit } rateLimit;
  }

  record GetInboxByTLFIDRemoteRes {
    array<Conversation> convs;
    union { null, RateLimit } rateLimit;
  }

  record GetThreadRemoteRes {
    ThreadViewBoxed thread;
    union { null, RateLimit } rateLimit;
  }

  record GetConversationMetadataRemoteRes {
    Conversation conv;
    union { null, RateLimit } rateLimit;
  }

  record PostRemoteRes {
    MessageID msgID;
    union { null, RateLimit } rateLimit;
  }

  record NewConversationRemoteRes {
    ConversationID convID;
    union { null, RateLimit } rateLimit;
  }

  record GetMessagesRemoteRes {
    array<MessageBoxed> msgs;
    union { null, RateLimit } rateLimit;
  }

  record MarkAsReadRes {
    union { null, RateLimit } rateLimit;
  }

  GetInboxRemoteRes getInboxRemote(union { null, Pagination } pagination);
  GetInboxByTLFIDRemoteRes getInboxByTLFIDRemote(TLFID TLFID);
  GetThreadRemoteRes getThreadRemote(ConversationID conversationID, boolean markAsRead, union { null, Pagination } pagination);
  GetConversationMetadataRemoteRes getConversationMetadataRemote(ConversationID conversationID);

  PostRemoteRes postRemote(ConversationID conversationID, MessageBoxed messageBoxed);
  NewConversationRemoteRes newConversationRemote(ConversationIDTriple idTriple);
  NewConversationRemoteRes newConversationRemote2(ConversationIDTriple idTriple, MessageBoxed TLFMessage);
  GetMessagesRemoteRes getMessagesRemote(ConversationID conversationID, array<MessageID> messageIDs);

  MarkAsReadRes markAsRead(ConversationID conversationID, MessageID msgID);
}
