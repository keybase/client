@namespace("chat.1")
protocol remote {

  record MessageBoxed {
    // Only set when returned from the server; on the way up to the
    // server, it's null.
    union { null, MessageServerHeader } serverHeader;

    // Sent as plaintext so that if the message is ever deleted, we can still
    // validate that metadata.
    MessageClientHeader clientHeader;
    // The signature of the above.
    SignatureInfo headerSignature;

    EncryptedData bodyCiphertext;
    SignatureInfo bodySignature;
    int keyGeneration;
  }

  record ThreadViewBoxed {
    array<MessageBoxed> messages;
    union { null, Pagination } pagination;
  }

  InboxView getInboxRemote(union { null, Pagination } pagination);
  ThreadViewBoxed getThreadRemote(ConversationID conversationID, boolean markAsRead, union { null, Pagination } pagination);

  MessageID postRemote(ConversationID conversationID, MessageBoxed messageBoxed);
  ConversationID newConversationRemote(ConversationIDTriple idTriple);

  void markAsRead(ConversationID conversationID, MessageID msgID);
}
