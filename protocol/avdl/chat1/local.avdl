@namespace("chat.1")

protocol local {
  import idl "github.com/keybase/client/go/protocol/gregor1" as gregor1;
  import idl "github.com/keybase/client/go/protocol/keybase1" as keybase1;
  import idl "common.avdl";

  record MessageText {
    string body;
  }

  record MessageConversationMetadata {
    string conversationTitle;
  }

  record MessageEdit {
    MessageID messageID;
    string body;
  }

  record MessageDelete {
    MessageID messageID;
  }

  record MessageHeadline {
    string headline;
  }

  record Asset {
    string filename;           // original filename of the object
    string region;             // storage region name
    string endpoint;           // storage endpoint
    string bucket;             // storage bucket
    string path;               // path to the object in bucket
    int size;                  // size of the object
    string mimeType;           // mime type of the object
    Hash encHash;              // hash of ciphertext object 
    bytes key;                 // encryption key
    bytes verifyKey;           // signature verification key
    string title;              // title of the asset (defaults to filename if not provided)
  }

  record MessageAttachment {
    Asset object;                // the primary attachment object
    union {null, Asset} preview; // the (optional) preview of object
    bytes metadata;              // generic metadata (msgpack)
  }

  variant MessageBody switch (MessageType messageType) {
    case TEXT: MessageText;
    case ATTACHMENT: MessageAttachment;
    case EDIT: MessageEdit;
    case DELETE: MessageDelete;
    case METADATA: MessageConversationMetadata;
    case HEADLINE: MessageHeadline;
  }

  enum OutboxStateType {
    SENDING_0,
    ERROR_1
  }

  variant OutboxState switch (OutboxStateType state) {
    case SENDING: int; // # of attempts
    case ERROR: string; // err msg
  }

  record OutboxRecord {
    OutboxState state; 
    OutboxID outboxID;
    ConversationID convID;
    MessagePlaintext Msg;
  }   
  
  enum HeaderPlaintextVersion {
    V1_1
  }

  // HeaderPlaintextV1 is version 1 of HeaderPlaintext.
  // The fields here cannot change.  To modify, 
  // create a new record type with a new version.
  record HeaderPlaintextV1 {
    ConversationIDTriple conv;
    string tlfName;
    boolean tlfPublic;
    MessageType messageType;
    array<MessagePreviousPointer> prev;
    gregor1.UID sender;
    gregor1.DeviceID senderDevice;
    Hash bodyHash;
    union { null, OutboxInfo } outboxInfo;
    union {null, SignatureInfo} headerSignature;
  }

  // HeaderPlaintext is a variant container for all the
  // versions of HeaderPlaintext.
  variant HeaderPlaintext switch (HeaderPlaintextVersion version) {
    case V1: HeaderPlaintextV1;
  }
  
  enum BodyPlaintextVersion {
    V1_1
  }

  // BodyPlaintextV1 is version 1 of BodyPlaintext.
  // The fields here cannot change.  To modify,
  // create a new record type with a new version.
  record BodyPlaintextV1 {
    MessageBody messageBody;
  }

  // BodyPlaintext is a variant container for all the
  // versions of BodyPlaintext.
  variant BodyPlaintext switch (BodyPlaintextVersion version) {
    case V1: BodyPlaintextV1;
  }

  record MessagePlaintext {
    MessageClientHeader clientHeader;
    MessageBody messageBody;
  }

  enum MessageUnboxedState {
    VALID_1,
    ERROR_2,
    OUTBOX_3
  }

  record MessageUnboxedValid {
    MessageClientHeader clientHeader;
    MessageServerHeader serverHeader;
    MessageBody messageBody;
    string senderUsername;
    string senderDeviceName;
    Hash headerHash;
  }

  record MessageUnboxedError {
    string errMsg;
    MessageID messageID;
    MessageType messageType;
  } 

  variant MessageUnboxed switch (MessageUnboxedState state) {
    case VALID: MessageUnboxedValid;
    case ERROR: MessageUnboxedError;
    case OUTBOX: OutboxRecord;
  }

  // This causes fetching to return N items, where N = IdeallyGetUnreadPlus +
  // Unread, if AtLeast <= N <= AtMost, or one of the bounds if there are too
  // many / too few unread items. i.e. (derived from chris's comment)
  // collar(AtLeast, (IdeallyGetUnreadPlus + Unread), AtMost)
  //
  // By definition, one could use a same non-zero number for both AtLeast and
  // AtMost to precisely control the number of items returned.
  record UnreadFirstNumLimit {
    int NumRead;

    int AtLeast;
    int AtMost;
  }

  record ConversationInfoLocal {
    ConversationID id;
    ConversationIDTriple triple;

    string tlfName;
    string topicName;
    TLFVisibility visibility;
    // Lists of usernames, always complete, optionally sorted by activity.
    array<string> writerNames;
    array<string> readerNames;
  }

  record ConversationLocal {
    union { null, string } error;
    ConversationInfoLocal info;
    ConversationReaderInfo readerInfo;
    array<MessageUnboxed> maxMessages; // the latest message for each message type
  } 

  record ThreadView {
    array<MessageUnboxed> messages;
    union { null, Pagination } pagination;
  }

  GetThreadLocalRes getThreadLocal(ConversationID conversationID, union { null, GetThreadQuery} query, union { null, Pagination } pagination);
  record GetThreadQuery {
    boolean markAsRead;
    array<MessageType> messageTypes;
    union { null, gregor1.Time } before;
    union { null, gregor1.Time } after;
  }
  record GetThreadLocalRes {
    ThreadView thread;
    array<RateLimit> rateLimits;
  }

  // topicName in GetInboxLocalQuery is ignored
  GetInboxLocalRes getInboxLocal(union { null, GetInboxLocalQuery} query, union { null, Pagination } pagination);
  record GetInboxLocalRes {
    array<Conversation> conversationsUnverified;
    union { null, Pagination } pagination;
    array<RateLimit> rateLimits;
  }

  GetInboxAndUnboxLocalRes getInboxAndUnboxLocal(union { null, GetInboxLocalQuery} query, union { null, Pagination } pagination);

  record GetInboxLocalQuery {
    // Local analog of common:GetInboxQuery

    union { null, string } tlfName;
    union { null, string } topicName;

    union { null, ConversationID } convID;
    union { null, TopicType } topicType;
    union { null, TLFVisibility } tlfVisibility;
    union { null, gregor1.Time } before;
    union { null, gregor1.Time } after;
    union { null, boolean } oneChatTypePerTLF;

    // If left empty, default is to show all.
    array<ConversationStatus> status;

    boolean unreadOnly;
    boolean readOnly;
    boolean computeActiveList;
  }
  record GetInboxAndUnboxLocalRes {
    array<ConversationLocal> conversations;
    union { null, Pagination } pagination;
    array<RateLimit> rateLimits;
  }

  PostLocalRes postLocal(ConversationID conversationID, MessagePlaintext msg);
  record PostLocalRes {
    array<RateLimit> rateLimits;
  }

  record PostLocalNonblockRes {
    array<RateLimit> rateLimits;
    OutboxID outboxID;
  }
  PostLocalNonblockRes postLocalNonblock(ConversationID conversationID, MessagePlaintext msg, MessageID clientPrev);

  SetConversationStatusLocalRes SetConversationStatusLocal(ConversationID conversationID, ConversationStatus status);
  record SetConversationStatusLocalRes {
    array<RateLimit> rateLimits;
  }

  record LocalSource {
    keybase1.Stream source;
    string filename;
    int size;
  }

  // Post an attachment in source to conversationID.
  PostLocalRes postAttachmentLocal(int sessionID, ConversationID conversationID, MessageClientHeader clientHeader, LocalSource attachment, union { null, LocalSource } preview, string title, bytes metadata);

  NewConversationLocalRes newConversationLocal(string tlfName, TopicType topicType, TLFVisibility tlfVisibility, union { null, string } topicName);
  record NewConversationLocalRes {
    ConversationLocal conv;
    array<RateLimit> rateLimits;
  }


  // if since is given, limit is ignored
  GetInboxSummaryForCLILocalRes getInboxSummaryForCLILocal(GetInboxSummaryForCLILocalQuery query);
  record GetInboxSummaryForCLILocalQuery {
    TopicType topicType;
    string after;
    string before;
    TLFVisibility visibility;

    // If left empty, default is to show all.
    array<ConversationStatus> status;

    boolean unreadFirst;
    UnreadFirstNumLimit unreadFirstLimit;
    int activitySortedLimit;
  }
  record GetInboxSummaryForCLILocalRes {
    array<ConversationLocal> conversations;
    array<RateLimit> rateLimits;
  }


  GetConversationForCLILocalRes getConversationForCLILocal(GetConversationForCLILocalQuery query);
  record GetConversationForCLILocalQuery {
    boolean markAsRead;
    array<MessageType> MessageTypes;

    union { null, string } Since;

    UnreadFirstNumLimit limit;

    ConversationID conversationId;
  }
  record GetConversationForCLILocalRes {
    ConversationLocal conversation;
    array<MessageUnboxed> messages;
    array<RateLimit> rateLimits;
  }

  // Get messages by ID.
  GetMessagesLocalRes GetMessagesLocal(ConversationID conversationID, array<MessageID> messageIDs);
  record GetMessagesLocalRes {
    array<MessageUnboxed> messages;
    array<RateLimit> rateLimits;
  }

  // Download an attachment from a message into sink.
  record DownloadAttachmentLocalRes {
    array<RateLimit> rateLimits;
  }
  DownloadAttachmentLocalRes DownloadAttachmentLocal(int sessionID, ConversationID conversationID, MessageID messageID, keybase1.Stream sink, boolean preview);
}
