@namespace("chat.1")

protocol local {
  import idl "github.com/keybase/client/go/protocol/gregor1" as gregor1;
  import idl "common.avdl";

  record MessageText {
    string body;
  }

  record MessageConversationMetadata {
    string conversationTitle;
  }

  record MessageEdit {
    MessageID messageID;
    string body;
  }

  record MessageDelete {
    MessageID messageID;
  }

  record MessageAttachment {
    string path;
  }

  variant MessageBody switch (MessageType messageType) {
    case TEXT: MessageText;
    case ATTACHMENT: MessageAttachment;
    case EDIT: MessageEdit;
    case DELETE: MessageDelete;
    case METADATA: MessageConversationMetadata;
  }

  enum MessagePlaintextVersion {
    V1_1
  }

  // MessagePlaintextV1 is version 1 of MessagePlaintext.
  // The fields here cannot change.  To modify,
  // create a new record type with a new version.
  record MessagePlaintextV1 {
    MessageClientHeader clientHeader;
    MessageBody messageBody;
  }

  // MessagePlaintext is a variant container for all the 
  // versions of MessagePlaintext.
  variant MessagePlaintext switch (MessagePlaintextVersion version) {
    case V1: MessagePlaintextV1;
  }

  enum HeaderPlaintextVersion {
    V1_1
  }

  // HeaderPlaintextV1 is version 1 of HeaderPlaintext.
  // The fields here cannot change.  To modify, 
  // create a new record type with a new version.
  record HeaderPlaintextV1 {
    ConversationIDTriple conv;
    string tlfName;
    boolean tlfPublic;
    MessageType messageType;
    array<MessagePreviousPointer> prev;
    gregor1.UID sender;
    gregor1.DeviceID senderDevice;
    Hash bodyHash;
    union {null, SignatureInfo} headerSignature;
  }

  // HeaderPlaintext is a variant container for all the
  // versions of HeaderPlaintext.
  variant HeaderPlaintext switch (HeaderPlaintextVersion version) {
    case V1: HeaderPlaintextV1;
  }
  
  enum BodyPlaintextVersion {
    V1_1
  }

  // BodyPlaintextV1 is version 1 of BodyPlaintext.
  // The fields here cannot change.  To modify,
  // create a new record type with a new version.
  record BodyPlaintextV1 {
    MessageBody messageBody;
  }

  // BodyPlaintext is a variant container for all the
  // versions of BodyPlaintext.
  variant BodyPlaintext switch (BodyPlaintextVersion version) {
    case V1: BodyPlaintextV1;
  }

  record MessageFromServer {
    MessageServerHeader serverHeader;
    MessagePlaintext messagePlaintext;
    string senderUsername;
    string senderDeviceName;
  }

  record MessageFromServerOrError {
    union { null, string } unboxingError;
    union { null, MessageFromServer } message;
  }

  record ThreadView {
    array<MessageFromServerOrError> messages;
    union { null, Pagination } pagination;
  }

  record MessageSelector {
    array<MessageType> MessageTypes;

    union { null, string } Since;
    boolean onlyNew;

    int limit;

    array<ConversationID> conversations;

    boolean markAsRead;
  }

  record ConversationInfoLocal {
    ConversationID id;
    ConversationIDTriple triple;

    string tlfName;
    string topicName;
    TopicType topicType;
    TLFVisibility visibility;
  }

  record ConversationLocal {
    union { null, ConversationInfoLocal } info;
    array<MessageFromServerOrError> messages;
    MessageID readUpTo;
  }

  record GetInboxLocalRes {
    InboxView inbox;
    array<RateLimit> rateLimits;
  }

  record GetThreadLocalRes {
    ThreadView thread;
    array<RateLimit> rateLimits;
  }

  record PostLocalRes {
    array<RateLimit> rateLimits;
  }

  record ResolveConversationLocalRes {
    array<ConversationInfoLocal> convs;
    array<RateLimit> rateLimits;
  }

  record NewConversationLocalRes {
    ConversationInfoLocal conv;
    array<RateLimit> rateLimits;
  }

  record UpdateTopicNameLocalRes {
    array<RateLimit> rateLimits;
  }

  record GetMessagesLocalRes {
    array<ConversationLocal> msgs;
    array<RateLimit> rateLimits;
  }

  record GetInboxSummaryLocalRes {
    array<ConversationLocal> conversations;
    array<ConversationLocal> more;
    int moreTotal;
    array<RateLimit> rateLimits;
  }

  GetInboxLocalRes getInboxLocal(union { null, GetInboxQuery} query, union { null, Pagination } pagination);
  GetThreadLocalRes getThreadLocal(ConversationID conversationID, union { null, GetThreadQuery} query, union { null, Pagination } pagination);
  PostLocalRes postLocal(ConversationID conversationID, MessagePlaintext messagePlaintext);

  // resolveConversationLocal resolves information related to a conversation.
  // If conversation.id is given (non-zero), it is used to locate the
  // conversation. Otherwise, tlfName, topicName, and topicType, if any of
  // which are non zero value, are used to search for conversation. Any
  // matching conversation is added to a list and returned to the caller.
  ResolveConversationLocalRes resolveConversationLocal(ConversationInfoLocal conversation);

  // newConversationLocal creates a new conversation. conversation.id field is
  // ignored. tlfName and topicType fields are required. topicName, if not
  // empty, causes a follow-up call to set the topic name for the conversation.
  // Calling newConversationLocal with a topic name is same to calling with an
  // empty topic name and following-up with an updateTopicName call. The
  // returned ConversationInfoLocal has all fields populated.
  NewConversationLocalRes newConversationLocal(ConversationInfoLocal conversation);

  UpdateTopicNameLocalRes updateTopicNameLocal(ConversationID conversationID, string newTopicName);

  // selector.conversations is required
  GetMessagesLocalRes getMessagesLocal(MessageSelector selector);

  // if since is given, limit is ignored
  GetInboxSummaryLocalRes getInboxSummaryLocal(TopicType topicType, string after, string before, int limit, TLFVisibility visibility);
}
