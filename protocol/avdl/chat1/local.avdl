@namespace("chat.1")

protocol local {
  import idl "github.com/keybase/client/go/protocol/gregor1" as gregor1;
  import idl "common.avdl";

  record MessageText {
    string body;
  }

  record MessageConversationMetadata {
    string conversationTitle;
  }

  record MessageEdit {
    MessageID messageID;
    string body;
  }

  record MessageDelete {
    MessageID messageID;
  }

  enum MessageAttachmentVersion {
    V1_1
  }

  // MessageAttachmentV1 is version 1 of MessageAttachment.
  // This record is immutable.  To modify, create a new
  // record type with a new version.
  record MessageAttachmentV1 {
    string path;         // path to the attachment object
    bytes key;           // encryption key
  }

  // MessageAttachment is a variant container for all the versions
  // of MessageAttachment.
  variant MessageAttachment switch (MessageAttachmentVersion version ) {
    case V1: MessageAttachmentV1;   
  }

  variant MessageBody switch (MessageType messageType) {
    case TEXT: MessageText;
    case ATTACHMENT: MessageAttachment;
    case EDIT: MessageEdit;
    case DELETE: MessageDelete;
    case METADATA: MessageConversationMetadata;
  }

  enum MessagePlaintextVersion {
    V1_1
  }

  // MessagePlaintextV1 is version 1 of MessagePlaintext.
  // The fields here cannot change.  To modify,
  // create a new record type with a new version.
  record MessagePlaintextV1 {
    MessageClientHeader clientHeader;
    MessageBody messageBody;
  }

  // MessagePlaintext is a variant container for all the 
  // versions of MessagePlaintext.
  variant MessagePlaintext switch (MessagePlaintextVersion version) {
    case V1: MessagePlaintextV1;
  }

  enum HeaderPlaintextVersion {
    V1_1
  }

  // HeaderPlaintextV1 is version 1 of HeaderPlaintext.
  // The fields here cannot change.  To modify, 
  // create a new record type with a new version.
  record HeaderPlaintextV1 {
    ConversationIDTriple conv;
    string tlfName;
    boolean tlfPublic;
    MessageType messageType;
    array<MessagePreviousPointer> prev;
    gregor1.UID sender;
    gregor1.DeviceID senderDevice;
    Hash bodyHash;
    union {null, SignatureInfo} headerSignature;
  }

  // HeaderPlaintext is a variant container for all the
  // versions of HeaderPlaintext.
  variant HeaderPlaintext switch (HeaderPlaintextVersion version) {
    case V1: HeaderPlaintextV1;
  }
  
  enum BodyPlaintextVersion {
    V1_1
  }

  // BodyPlaintextV1 is version 1 of BodyPlaintext.
  // The fields here cannot change.  To modify,
  // create a new record type with a new version.
  record BodyPlaintextV1 {
    MessageBody messageBody;
  }

  // BodyPlaintext is a variant container for all the
  // versions of BodyPlaintext.
  variant BodyPlaintext switch (BodyPlaintextVersion version) {
    case V1: BodyPlaintextV1;
  }

  record MessageFromServer {
    MessageServerHeader serverHeader;
    MessagePlaintext messagePlaintext;
    string senderUsername;
    string senderDeviceName;
  }

  record MessageFromServerOrError {
    union { null, string } unboxingError;
    union { null, MessageFromServer } message;
  }

  record ThreadView {
    array<MessageFromServerOrError> messages;
    union { null, Pagination } pagination;
  }

  // This causes fetching to return N items, where N = IdeallyGetUnreadPlus +
  // Unread, if AtLeast <= N <= AtMost, or one of the bounds if there are too
  // many / too few unread items. i.e. (derived from chris's comment)
  // collar(AtLeast, (IdeallyGetUnreadPlus + Unread), AtMost)
  //
  // By definition, one could use a same non-zero number for both AtLeast and
  // AtMost to precisely control the number of items returned.
  record UnreadFirstNumLimit {
    int NumRead;

    int AtLeast;
    int AtMost;
  }

  record ConversationInfoLocal {
    ConversationID id;
    ConversationIDTriple triple;

    string tlfName;
    string topicName;
    TLFVisibility visibility;
  }

  record ConversationLocal {
    union { null, string } error;
    ConversationInfoLocal info;
    ConversationReaderInfo readerInfo;
    array<MessageFromServerOrError> maxMessages;
  }


  GetThreadLocalRes getThreadLocal(ConversationID conversationID, union { null, GetThreadQuery} query, union { null, Pagination } pagination);
  record GetThreadQuery {
    boolean markAsRead;
    array<MessageType> messageTypes;
    union { null, gregor1.Time } before;
    union { null, gregor1.Time } after;
  }
  record GetThreadLocalRes {
    ThreadView thread;
    array<RateLimit> rateLimits;
  }


  GetInboxLocalRes getInboxLocal(union { null, GetInboxLocalQuery} query, union { null, Pagination } pagination);
  record GetInboxLocalQuery {
    union { null, string } tlfName;
    union { null, string } topicName;

    union { null, ConversationID } convID;
    union { null, TopicType } topicType;
    union { null, TLFVisibility } tlfVisibility;
    union { null, gregor1.Time } before;
    union { null, gregor1.Time } after;
    union { null, boolean } oneChatTypePerTLF;
    boolean unreadOnly;
    boolean readOnly;
  }
  record GetInboxLocalRes {
    array<ConversationLocal> conversations;
    union { null, Pagination } pagination;
    array<RateLimit> rateLimits;
  }


  PostLocalRes postLocal(ConversationID conversationID, MessagePlaintext messagePlaintext);
  record PostLocalRes {
    array<RateLimit> rateLimits;
  }


  NewConversationLocalRes newConversationLocal(string tlfName, TopicType topicType, TLFVisibility tlfVisibility, union { null, string } topicName);
  record NewConversationLocalRes {
    ConversationLocal conv;
    array<RateLimit> rateLimits;
  }


  // if since is given, limit is ignored
  GetInboxSummaryForCLILocalRes getInboxSummaryForCLILocal(GetInboxSummaryForCLILocalQuery query);
  record GetInboxSummaryForCLILocalQuery {
    TopicType topicType;
    string after;
    string before;
    TLFVisibility visibility;

    boolean unreadFirst;
    UnreadFirstNumLimit unreadFirstLimit;
    int activitySortedLimit;
  }
  record GetInboxSummaryForCLILocalRes {
    array<ConversationLocal> conversations;
    array<RateLimit> rateLimits;
  }


  GetConversationForCLILocalRes getConversationForCLILocal(GetConversationForCLILocalQuery query);
  record GetConversationForCLILocalQuery {
    boolean markAsRead;
    array<MessageType> MessageTypes;

    union { null, string } Since;

    UnreadFirstNumLimit limit;

    ConversationID conversationId;
  }
  record GetConversationForCLILocalRes {
    ConversationLocal conversation;
    array<MessageFromServerOrError> messages;
    array<RateLimit> rateLimits;
  }
}
