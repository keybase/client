import java.nio.file.Paths

def REACT_NATIVE_DIR = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).parent
def RN_BUILD_FROM_SOURCE = findProject(":ReactAndroid") != null
def RN_SO_DIR = RN_BUILD_FROM_SOURCE
    ? Paths.get(findProject(":ReactAndroid").getProjectDir().toString(), "build", "intermediates", "library_*", "*", "jni")
    : "${buildDir}/react-native-0*/jni"
def RN_AAR_DIR = "${REACT_NATIVE_DIR}/android"
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

buildscript {
  repositories {
      google()
      mavenCentral()
  }

  dependencies {
    classpath("com.android.tools.build:gradle:7.2.1")
  }
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") &&  rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: 'com.android.library'

if (isNewArchitectureEnabled()) {
  apply plugin: 'com.facebook.react'
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['Kb_' + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['Kb_' + name]).toInteger()
}

def prebuiltDir = "$buildDir/react-native-0*/jni"

android {
  ndkVersion getExtOrDefault('ndkVersion')
  compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault('minSdkVersion')
    targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
    externalNativeBuild {
      cmake {
        cppFlags "-O2 -frtti -fexceptions -Wall -fstack-protector-all"
        abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
arguments "-DANDROID_STL=c++_shared",
            "-DREACT_NATIVE_DIR=${REACT_NATIVE_DIR}",
            "-DRN_SO_DIR=${RN_SO_DIR}"
      }
    }
  }


  packagingOptions {
    excludes = ["**/libc++_shared.so", "**/libfbjni.so", "**/libreactnativejni.so", "**/libjsi.so", "**/MANIFEST.MF"]
  }

  buildFeatures {
    prefab true
  }

  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }
  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable 'GradleCompatible'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  sourceSets {
    main {
      if (isNewArchitectureEnabled()) {
          java.srcDirs += ['src/turbo']
      } else {
          java.srcDirs += ['src/legacy']
      }
    }
  }
}


repositories {
  mavenCentral()
  google()

  def defaultDir = null
  def found = false
  def androidSourcesName = 'React Native sources'

  if (rootProject.ext.has('reactNativeAndroidRoot')) {
    defaultDir = rootProject.ext.get('reactNativeAndroidRoot')
  } else {
    defaultDir = new File(
      projectDir,
      '/../../../shared/node_modules/react-native/android'
    )
  }

  if (defaultDir.exists()) {
    maven {
      url defaultDir.toString()
      name androidSourcesName
    }

    logger.info(":${project.name}:reactNativeAndroidRoot ${defaultDir.canonicalPath}")
    found = true
  } else {
    def parentDir = rootProject.projectDir

    1.upto(5, {
      if (found) return true
      parentDir = parentDir.parentFile

      def androidSourcesDir = new File(
        parentDir,
        'node_modules/react-native'
      )

      def androidPrebuiltBinaryDir = new File(
        parentDir,
        'node_modules/react-native/android'
      )

      if (androidPrebuiltBinaryDir.exists()) {
        maven {
          url androidPrebuiltBinaryDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidPrebuiltBinaryDir.canonicalPath}")
        found = true
      } else if (androidSourcesDir.exists()) {
        maven {
          url androidSourcesDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidSourcesDir.canonicalPath}")
        found = true
      }
    })
  }

  if (!found) {
    throw new GradleException(
      "${project.name}: unable to locate React Native android sources. " +
      "Ensure you have you installed React Native as a dependency in your project and try again."
    )
  }

    configurations {
        extractHeaders
        extractJNI
    }
}

dependencies {
    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+"
    implementation "com.google.firebase:firebase-messaging:17.3.0"
    implementation "me.leolin:ShortcutBadger:1.1.22@aar"
    implementation project(':keybaselib')

  compileOnly 'com.facebook.fbjni:fbjni:0.2.2'
  extractHeaders 'com.facebook.fbjni:fbjni:0.2.2:headers'
  extractJNI 'com.facebook.fbjni:fbjni:0.2.2'
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "Kb"
    codegenJavaPackageName = "com.reactnativekb"
  }
}

def extractReactNativeAAR = { buildType ->
  def suffix = buildType == 'Debug' ? '-debug' : '-release'
  def rnAARs = fileTree(RN_AAR_DIR).matching { include "**/react-native/**/*${suffix}.aar" }
  if (rnAARs.isEmpty()) {
    rnAARs = fileTree(RN_AAR_DIR).matching { include "**/react-native/**/*.aar" }
  }
  if (rnAARs.any()) {
    // node_modules/react-native has a .aar, extract headers
    if (rnAARs.size() > 1) {
      logger.error("More than one React Native AAR file has been found:")
      rnAARs.each {println(it) }
      throw new GradleException("Multiple React Native AARs found:\n${rnAARs.join("\n")}" +
          "\nRemove the old ones and try again")
    }
  }
  def rnAAR = rnAARs.singleFile
  def file = rnAAR.absoluteFile
  def packageName = file.name.tokenize('-')[0]
  copy {
    from zipTree(file)
    into "$buildDir/$file.name"
    include "jni/**/*"
  }
}

task extractReactNativeAARRelease {
  doLast {
    extractReactNativeAAR('Release')
  }
}

task extractReactNativeAARDebug {
  doLast {
    extractReactNativeAAR('Debug')
  }
}

task extractAARHeaders {
  doLast {
    configurations.extractHeaders.files.each {
      def file = it.absoluteFile
      copy {
        from zipTree(file)
        into "$buildDir/$file.name"
        include "**/*.h"
      }
    }
  }
}

task extractJNIFiles {
  doLast {
    configurations.extractJNI.files.each {
      def file = it.absoluteFile
      copy {
        from zipTree(file)
        into "$buildDir/$file.name"
        include "jni/**/*"
      }
    }
  }
}

tasks.whenTaskAdded { task ->
  if (!task.name.contains("Clean") && (task.name.contains('externalNativeBuild') || task.name.startsWith('configureCMake'))) {
    def buildType = task.name.endsWith('Debug') ? 'Debug' : 'Release'
    task.dependsOn(extractAARHeaders)
    task.dependsOn(extractJNIFiles)
    if (RN_BUILD_FROM_SOURCE) {
      task.dependsOn(":ReactAndroid:copy${buildType}JniLibsProjectOnly")
    } else {
      task.dependsOn("extractReactNativeAAR${buildType}")
    }
  } else if (task.name.startsWith('generateJsonModel') && RN_BUILD_FROM_SOURCE) {
    def buildType = task.name.endsWith('Debug') ? 'Debug' : 'Release'
    task.dependsOn(":ReactAndroid:copy${buildType}JniLibsProjectOnly")
  }
}
