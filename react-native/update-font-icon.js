// Generate our react-native icons from the fonticon stylesheet and images
import fs from 'fs'
import path from 'path'

const css = fs.readFileSync('../desktop/renderer/fonticon.css', {encoding: 'utf8'})
const stream = fs.createWriteStream('../shared/common-adapters/icon.paths.native.js')

function writeIconTypes (imageNames, glyphNames) {
  const imageNamesEnum = imageNames.map(i => `'${path.basename(i, path.extname(i))}'`)
  const iconTypeStream = fs.createWriteStream('../shared/common-adapters/icon-type.js.flow')

  const glyphNamesQuoted = glyphNames.map(g => `'${g}'`)
  const kbGlyphs = glyphNamesQuoted.filter(g => g.indexOf('fa-kb-iconfont') !== -1).sort()
  const faGlyphs = glyphNamesQuoted.filter(g => g.indexOf('fa-kb-iconfont') === -1).sort()

  iconTypeStream.write('// @flow\n')
  iconTypeStream.write('// This file is generated by update-font-icon.js, DO NOT HAND EDIT!\n')
  iconTypeStream.write('\n')

  iconTypeStream.write('export type Icons = ')
  iconTypeStream.write(imageNamesEnum.sort().join('\n  | '))
  iconTypeStream.write('\n')
  iconTypeStream.write('\n')

  iconTypeStream.write('export type FontIcons = ')
  iconTypeStream.write(kbGlyphs.join('\n  | '))
  iconTypeStream.write('\n')
  iconTypeStream.write('\n')

  iconTypeStream.write('export type FontAwesome = ')
  iconTypeStream.write(faGlyphs.join('\n  | '))
  iconTypeStream.write('\n')
  iconTypeStream.write('\n')

  iconTypeStream.write('export type IconType = Icons | FontIcons | FontAwesome \n')

  iconTypeStream.end()
}

stream.once('open', () => {
  stream.write('// This file is generated by update-font-icon.js, DO NOT HAND EDIT!\n')
  stream.write('\n')

  stream.write('export const fontIcons = {\n')

  const glyphs = []
  const glyphNames = []
  let glyph = null
  css.split('\n').forEach(line => {
    if (glyph) {
      const val = line.match(/content: "\\(.*)";/)[1]
      glyphs.push(`  '${glyph}': String.fromCharCode(0x${val})`)
      glyphNames.push(glyph)
      glyph = null
    } else {
      glyph = line.match(/^\.(.*):before/)
      if (glyph) {
        glyph = glyph[1]
      }
    }
  })

  stream.write(glyphs.join(',\n'))
  stream.write(',\n}\n\n')

  stream.write('export const images = {\n')
  let images = fs.readdirSync('../shared/images/icons/')

  const imageNames = images.filter(i => i.endsWith('.png') && i.indexOf('@') === -1)
  images = imageNames.map(i => {
    return `  '${path.basename(i, path.extname(i))}': require('../images/icons/${i}')`
  })

  stream.write(images.join(',\n'))
  stream.write(',\n}\n')

  stream.end()

  writeIconTypes(imageNames, glyphNames)
})
