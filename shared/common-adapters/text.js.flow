// @flow
import {Component} from 'react'
import type {Context} from './terminal'

export type Background = 'Normal' | 'Announcements' | 'Success' | 'Information' | 'HighRisk' | 'Documentation' | 'Terminal'

export type TextType =
  'HeaderBig'
  | 'Header' | 'HeaderLink'
  | 'BodyBig' | 'BodyBigLink'
  | 'Body' | 'BodySemibold' | 'BodyPrimaryLink' | 'BodySecondaryLink' | 'BodyError' | 'BodySuccess'
  | 'BodySmall' | 'BodySmallSemibold' | 'BodySmallPrimaryLink' | 'BodySmallSecondaryLink' | 'BodySmallError' | 'BodySmallSuccess'
  | 'BodySemiboldItalic'
  | 'BodySmallItalic' | 'BodySmallInlineLink' | 'BodySmallSemiboldInlineLink'
  | 'Terminal' | 'TerminalInline' | 'TerminalComment' | 'TerminalEmpty'

export type Props = {
  type: TextType,
  backgroundMode?: Background,
  inline?: boolean,
  link?: boolean,
  reversed?: boolean,
  onClick?: ?(e: SyntheticEvent) => void,
  onPress?: void,
  lineClamp?: number,
  style?: Object,
  children?: React$Element<*>,
  className?: string,
  contentEditable?: boolean,
  onKeyDown?: (e: SyntheticEvent) => void,
  onKeyUp?: (e: SyntheticEvent) => void,
}

declare export default class Text extends Component<void, Props, void> { }

export type MetaType = {
  fontSize: number,
  colorForBackgroundMode: {[key: Background]: ?string},
  isLink?: true,
  styleOverride?: ?Object,
  isTerminal?: true,
}

export function getStyle (type: TextType, backgroundMode?: ?Background, lineClamp?: ?number, clickable?: ?boolean): Object {
  return {}
}
