// @flow
import * as React from 'react'
import {type StylesCrossPlatform} from '../styles'
import type {TextType} from './text'

export type KeyboardType =
  | 'default'
  | 'email-address'
  | 'numeric'
  | 'phone-pad'
  // iOS only
  | 'ascii-capable'
  | 'numbers-and-punctuation'
  | 'url'
  | 'number-pad'
  | 'name-phone-pad'
  | 'decimal-pad'
  | 'twitter'
  | 'web-search'
  // Android Only
  | 'visible-password'

export type Props = {
  autoFocus?: boolean,
  className?: string,
  disabled?: boolean,
  // Resize in a flexbox-like fashion
  flexable?: boolean,
  maxLength?: number,
  multiline?: boolean,
  onBlur?: () => void,
  onChangeText?: (text: string) => void,
  onFocus?: () => void,
  placeholder?: string,
  rowsMin?: number,
  rowsMax?: number,
  style?: StylesCrossPlatform,
  textType: TextType,
  type?: 'password' | 'text' | 'number',

  // NOTE: Setting this prop will make the input controlled, which
  // can impair performance badly on some platforms
  value?: ?string,

  /* Platform discrepancies */
  // Maps to onSubmitEditing on native
  onEnterKeyDown?: () => void,

  // Desktop only
  onClick?: (event: Event) => void,
  onKeyDown?: (event: SyntheticKeyboardEvent<>, isComposingIME: boolean) => void,
  onKeyUp?: (event: SyntheticKeyboardEvent<>, isComposingIME: boolean) => void,

  // Mobile only
  autoCapitalize?: 'none' | 'sentences' | 'words' | 'characters',
  autoCorrect?: boolean,
  keyboardType: KeyboardType,
  returnKeyType?: 'done' | 'go' | 'next' | 'search' | 'send',
  selectTextOnFocus?: boolean,
  onEndEditing?: () => void,
}

type MixProps = {|
  ...$Exact<Props>,
  keyboardType?: $PropertyType<Props, 'keyboardType'>,
  textType?: $PropertyType<Props, 'textType'>,
|}
// Use this to mix your props with input props like type Props = PropsWithInput<{foo: number}>
export type PropsWithInput<P> = {|
  ...$Exact<P>,
  ...$Exact<MixProps>,
|}

/**
 * Flow requires changing type Props when using defaultProps.
 * This complicates things for PropsWithInput because in order to
 * effectively use it we have to either:
 * 1. Set the same defaultProps on components with props that use
 *    PropsWithInput to pass props to this component. This is because
 *    Props has to be changed to make the defaultProps non-nullable
 *    as far as Flow is concerned.
 * 2. Setting the defaultProps keys as optional and sticking $ FlowIssues
 *    everywhere in these implementations to defy the way Flow has
 *    decided to handle this.
 *
 * I chose option 1 because it preserves the most typing and makes this
 * whole fiasco opaque to users of the API.
 * See more discussion here: https://github.com/facebook/flow/issues/1660
 */
export type DefaultProps = {|
  keyboardType: $PropertyType<Props, 'keyboardType'>,
  textType: $PropertyType<Props, 'textType'>,
|}
declare export default class PlainInput extends React.Component<Props> {
  static defaultProps: DefaultProps;
  blur: () => void;
  focus: () => void;
  setValue: string => void;
}
