// @flow
import {Component} from 'react'
import {type StylesCrossPlatform} from '../styles'

export type KeyboardType =
  | 'default'
  | 'email-address'
  | 'numeric'
  | 'phone-pad'
  // iOS only
  | 'ascii-capable'
  | 'numbers-and-punctuation'
  | 'url'
  | 'number-pad'
  | 'name-phone-pad'
  | 'decimal-pad'
  | 'twitter'
  | 'web-search'
  // Android Only
  | 'visible-password'

export type Props = {
  // if true we use a smarter algorithm to decide when we need to recalculate our height
  // might be safe to use this everywhere but I wanted to limit it to just chat short term
  smartAutoresize?: boolean,
  autoFocus?: boolean,
  className?: string,
  editable?: boolean,
  errorStyle?: StylesCrossPlatform,
  errorText?: ?string,
  floatingHintTextOverride?: ?string, // if undefined will use hintText. Use this to override hintText
  hideUnderline?: boolean,
  hintText?: ?string,
  inputStyle?: StylesCrossPlatform,
  multiline?: boolean,
  onBlur?: () => void,
  onClick?: (event: Event) => void,
  onChangeText?: (text: string) => void,
  onFocus?: () => void,
  // TODO: Implement this for desktop.
  onSelectionChange?: ({selectionStart: number, selectionEnd: number}) => void,
  rowsMax?: number,
  maxLength?: number,
  rowsMin?: number,
  small?: boolean,
  smallLabel?: string,
  smallLabelStyle?: StylesCrossPlatform,
  style?: StylesCrossPlatform,
  type?: 'password' | 'text' | 'passwordVisible',
  value?: ?string,

  // Desktop only.
  onKeyDown?: (event: SyntheticKeyboardEvent<>, isComposingIME: boolean) => void,
  onKeyUp?: (event: SyntheticKeyboardEvent<>, isComposingIME: boolean) => void,
  onEnterKeyDown?: (event: SyntheticKeyboardEvent<>) => void,

  // Mobile only
  onEndEditing?: ?() => void,
  autoCapitalize?: 'none' | 'sentences' | 'words' | 'characters',
  autoCorrect?: boolean,
  // If keyboardType is set, it overrides type.
  keyboardType?: KeyboardType,
  returnKeyType?: 'done' | 'go' | 'next' | 'search' | 'send',
  selectTextOnFocus?: boolean,
  // TODO this is a short term hack to have this be uncontrolled. I think likely by default we would want this to be uncontrolled but
  // i'm afraid of touching this now while I'm fixing a crash.
  // If true it won't use its internal value to drive its rendering
  uncontrolled?: boolean,
}

declare export default class Input extends Component<Props> {
  blur: () => void;
  focus: () => void;
  select: () => void;
  moveCursorToEnd: () => void;
  getValue: () => string;
  selections: () => ?{selectionStart: number, selectionEnd: number};
  replaceText: (
    text: string,
    startIdx: number,
    endIdx: number,
    // The selection parameters are desktop-only, for now.
    newSelectionStart: number,
    newSelectionEnd: number
  ) => void;
}
