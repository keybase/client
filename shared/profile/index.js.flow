// @flow
import {Component} from 'react'
import * as Types from '../constants/types/profile'
import type {SimpleProofState, UserInfo, Proof} from '../constants/types/tracker'
import type {BioEditFns} from '../common-adapters/user-bio'
import type {MissingProof} from '../common-adapters/user-proofs'
import type {Folder} from '../constants/types/folders'

export type Props = {
  addUserToTeamsResults: string,
  isYou: boolean,
  loading: boolean,
  bioEditFns: ?BioEditFns,
  trackerState: SimpleProofState,
  currentlyFollowing: boolean,
  currentFriendshipsTab: Types.FriendshipsTab,
  refresh: () => void,
  serverActive: boolean,
  onAvatarLoaded?: () => void,
  onBack: ?() => void,
  onChat: () => void,
  onCopyStellarAddress: () => void,
  onFollow: () => void,
  onUnfollow: () => void,
  onAcceptProofs: () => void,
  onAddToTeam: () => void,
  onBrowsePublicFolder: () => void,
  onChangeFriendshipsTab: (currentFriendshipsTab: Types.FriendshipsTab) => void,
  onClickShowcaseOffer: () => void,
  onClearAddUserToTeamsResults: () => void,
  onMissingProofClick: (missingProof: MissingProof) => void,
  onFolderClick: (folder: Folder) => void,
  onOpenPrivateFolder: () => void,
  onUserClick: (username: string) => void,
  onViewProof: (proof: Proof) => void,
  onRecheckProof: (proof: Proof) => void,
  onRevokeProof: (proof: Proof) => void,
  onSearch: () => void,
  onSendLumens: () => void,
  onSendOrRequestStellarAddress: (isRequest: boolean) =>void,
  onRequestLumens: () => void,
  username: string,
  userInfo: UserInfo,
  proofs: Array<Proof>,
  followersLoaded: boolean,
  followers: Array<Types.FriendshipUserInfo>,
  following: Array<Types.FriendshipUserInfo>,
  reason: ?string,
  stellarAddress?: string,
  error: ?string,
  onEditAvatar: (image?: any) => void,
  onFilePickerError: (error: Error) => void,
  onClickAvatar: () => void,
  waiting: boolean,
  youAreInTeams: boolean,
}

export default class Render extends Component<Props> {}
