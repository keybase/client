// @flow
import type {TypedActions} from '../actions/typed-actions-gen'
import type {TypedState} from '../constants/reducer'
import type {ComponentType} from 'react'

declare type MapStateToProps<A, B> = (state: TypedState, ownProps: A) => B
declare type MapDispatchToProps<A, B> = (dispatch: (action: TypedActions) => void, ownProps: A) => B
declare type MergeProps<A, B, C, D> = (stateProps: A, dispatchProps: B, ownProps: C) => D

// OP = OwnProps
// RMP = Return from mergeProps
// RSP = Return from mapStateToProps
// RDP = Return from mapDispatchToProps
// Com: Wrapped component
// prettier-ignore
declare export default function connect<
  RMP,
  Com: ComponentType<RMP>,
  RSP,
  RDP,
  OP>(
  mapStateToProps: MapStateToProps<OP, RSP>,
  mapDispatchToProps: MapDispatchToProps<OP, RDP>,
  mergeProps: MergeProps<RSP, RDP, OP, RMP>
): (component: Com) => ComponentType<OP>

// convenience for compose(connect, setDisplayName)
// prettier-ignore
declare export function namedConnect<
  RMP,
  Com: ComponentType<RMP>,
  RSP,
  RDP,
  OP>(
  mapStateToProps: MapStateToProps<OP, RSP>,
  mapDispatchToProps: MapDispatchToProps<OP, RDP>,
  mergeProps: MergeProps<RSP, RDP, OP, RMP>,
  displayName: string
): (component: Com) => ComponentType<OP>
// See how spread is currently broken https://github.com/facebook/flow/issues/6526
// type SpreadWorkaround<A, B> = $Rest<A, B> & B
//
//
// So. Ideally we could type this form of connect BUT flow is REALLY messed up in regards to definitions that are in different modules.
// The above definition works fine so lets just use that for now
//
//
// OP = OwnProps
// RSP = Return from mapStateToProps
// RDP = Return from mapDispatchToProps
// Com = Wrapped component
// eslint-disable-next-line no-redeclare
// declare export default function connect<
// OP,
// RSP,
// RDP,
// RMP: SpreadWorkaround<SpreadWorkaround<RSP, RDP>, OP>,
// Com: ComponentType<RMP>
// >(
// mapStateToProps: MapStateToProps<OP, RSP>,
// mapDispatchToProps: MapDispatchToProps<OP, RDP>
// ): (component: Com) => ComponentType<OP>
