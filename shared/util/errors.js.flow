// @flow strict
// Proxy so we don't get import loops. We need rpc gen but it also needs us

type Fields = ?Array<{key: string, value: string | boolean}>
declare export class RPCError {
  // Fields to make RPCError 'look' like Error, since we don't want to
  // inherit from Error.
  message: string;
  name: string;
  stack: string;

  code: number; // Consult type StatusCode in rpc-gen.js for what this means
  fields: Fields;
  desc: string;
  name: string;
  details: string; // Details w/ error code & method if it's present

  constructor(message: string, code: number, fields: Fields, name: ?string, method: ?string): RPCError;
}

declare export function niceError(e: RPCError): string
declare export function logError(error: RPCError): void
declare export function convertToRPCError(
  err: {code: number, desc: string, fields?: Fields, name?: string},
  method?: ?string
): RPCError
declare export function convertToError<A>(err: A, method?: string): Error | RPCError
declare export function isErrorTransient(error: RPCError | Error): boolean
