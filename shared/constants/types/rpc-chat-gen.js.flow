// @flow strict
/* eslint-disable */

// This file is auto-generated by client/protocol/Makefile.
import type {CallEffect, Effect} from 'redux-saga'
import * as Gregor1 from './rpc-gregor-gen'
import * as Keybase1 from './rpc-gen'
import * as Stellar1 from './rpc-stellar-gen'
export type {Gregor1}
export type {Keybase1}
export type {Stellar1}
export type Bool = boolean
export type Boolean = boolean
export type Bytes = Buffer
export type Double = number
export type Int = number
export type Int64 = number
export type Long = number
export type String = string
export type Uint = number
export type Uint64 = number
type IncomingErrorCallback = (?{code?: number, desc?: string}) => void
type IncomingReturn = Effect | null | void | false | Array<Effect | null | void | false>

export type MessageTypes = {|
  'chat.1.NotifyChat.ChatAttachmentUploadProgress': {|
    inParam: $ReadOnly<{|uid: Keybase1.UID, convID: ConversationID, outboxID: OutboxID, bytesComplete: Long, bytesTotal: Long|}>,
    outParam: void,
  |},
  'chat.1.NotifyChat.ChatAttachmentUploadStart': {|
    inParam: $ReadOnly<{|uid: Keybase1.UID, convID: ConversationID, outboxID: OutboxID|}>,
    outParam: void,
  |},
  'chat.1.NotifyChat.ChatIdentifyUpdate': {|
    inParam: $ReadOnly<{|update: Keybase1.CanonicalTLFNameAndIDWithBreaks|}>,
    outParam: void,
  |},
  'chat.1.NotifyChat.ChatInboxStale': {|
    inParam: $ReadOnly<{|uid: Keybase1.UID|}>,
    outParam: void,
  |},
  'chat.1.NotifyChat.ChatInboxSyncStarted': {|
    inParam: $ReadOnly<{|uid: Keybase1.UID|}>,
    outParam: void,
  |},
  'chat.1.NotifyChat.ChatInboxSynced': {|
    inParam: $ReadOnly<{|uid: Keybase1.UID, syncRes: ChatSyncResult|}>,
    outParam: void,
  |},
  'chat.1.NotifyChat.ChatJoinedConversation': {|
    inParam: $ReadOnly<{|uid: Keybase1.UID, convID: ConversationID, conv?: ?InboxUIItem|}>,
    outParam: void,
  |},
  'chat.1.NotifyChat.ChatKBFSToImpteamUpgrade': {|
    inParam: $ReadOnly<{|uid: Keybase1.UID, convID: ConversationID|}>,
    outParam: void,
  |},
  'chat.1.NotifyChat.ChatLeftConversation': {|
    inParam: $ReadOnly<{|uid: Keybase1.UID, convID: ConversationID|}>,
    outParam: void,
  |},
  'chat.1.NotifyChat.ChatPaymentInfo': {|
    inParam: $ReadOnly<{|uid: Keybase1.UID, convID: ConversationID, msgID: MessageID, info: UIPaymentInfo|}>,
    outParam: void,
  |},
  'chat.1.NotifyChat.ChatRequestInfo': {|
    inParam: $ReadOnly<{|uid: Keybase1.UID, convID: ConversationID, msgID: MessageID, info: UIRequestInfo|}>,
    outParam: void,
  |},
  'chat.1.NotifyChat.ChatResetConversation': {|
    inParam: $ReadOnly<{|uid: Keybase1.UID, convID: ConversationID|}>,
    outParam: void,
  |},
  'chat.1.NotifyChat.ChatSetConvRetention': {|
    inParam: $ReadOnly<{|uid: Keybase1.UID, convID: ConversationID, conv?: ?InboxUIItem|}>,
    outParam: void,
  |},
  'chat.1.NotifyChat.ChatSetConvSettings': {|
    inParam: $ReadOnly<{|uid: Keybase1.UID, convID: ConversationID, conv?: ?InboxUIItem|}>,
    outParam: void,
  |},
  'chat.1.NotifyChat.ChatSetTeamRetention': {|
    inParam: $ReadOnly<{|uid: Keybase1.UID, teamID: Keybase1.TeamID, convs?: ?Array<InboxUIItem>|}>,
    outParam: void,
  |},
  'chat.1.NotifyChat.ChatSubteamRename': {|
    inParam: $ReadOnly<{|uid: Keybase1.UID, convs?: ?Array<InboxUIItem>|}>,
    outParam: void,
  |},
  'chat.1.NotifyChat.ChatTLFFinalize': {|
    inParam: $ReadOnly<{|uid: Keybase1.UID, convID: ConversationID, finalizeInfo: ConversationFinalizeInfo, conv?: ?InboxUIItem|}>,
    outParam: void,
  |},
  'chat.1.NotifyChat.ChatTLFResolve': {|
    inParam: $ReadOnly<{|uid: Keybase1.UID, convID: ConversationID, resolveInfo: ConversationResolveInfo|}>,
    outParam: void,
  |},
  'chat.1.NotifyChat.ChatThreadsStale': {|
    inParam: $ReadOnly<{|uid: Keybase1.UID, updates?: ?Array<ConversationStaleUpdate>|}>,
    outParam: void,
  |},
  'chat.1.NotifyChat.ChatTypingUpdate': {|
    inParam: $ReadOnly<{|typingUpdates?: ?Array<ConvTypingUpdate>|}>,
    outParam: void,
  |},
  'chat.1.NotifyChat.NewChatActivity': {|
    inParam: $ReadOnly<{|uid: Keybase1.UID, activity: ChatActivity, source: ChatActivitySource|}>,
    outParam: void,
  |},
  'chat.1.chatUi.chatAttachmentDownloadDone': {|
    inParam: void,
    outParam: void,
  |},
  'chat.1.chatUi.chatAttachmentDownloadProgress': {|
    inParam: $ReadOnly<{|bytesComplete: Long, bytesTotal: Long|}>,
    outParam: void,
  |},
  'chat.1.chatUi.chatAttachmentDownloadStart': {|
    inParam: void,
    outParam: void,
  |},
  'chat.1.chatUi.chatConfirmChannelDelete': {|
    inParam: $ReadOnly<{|channel: String|}>,
    outParam: Boolean,
  |},
  'chat.1.chatUi.chatInboxConversation': {|
    inParam: $ReadOnly<{|conv: String|}>,
    outParam: void,
  |},
  'chat.1.chatUi.chatInboxFailed': {|
    inParam: $ReadOnly<{|convID: ConversationID, error: InboxUIItemError|}>,
    outParam: void,
  |},
  'chat.1.chatUi.chatInboxUnverified': {|
    inParam: $ReadOnly<{|inbox: String|}>,
    outParam: void,
  |},
  'chat.1.chatUi.chatSearchDone': {|
    inParam: $ReadOnly<{|numHits: Int|}>,
    outParam: void,
  |},
  'chat.1.chatUi.chatSearchHit': {|
    inParam: $ReadOnly<{|searchHit: ChatSearchHit|}>,
    outParam: void,
  |},
  'chat.1.chatUi.chatThreadCached': {|
    inParam: $ReadOnly<{|thread?: ?String|}>,
    outParam: void,
  |},
  'chat.1.chatUi.chatThreadFull': {|
    inParam: $ReadOnly<{|thread: String|}>,
    outParam: void,
  |},
  'chat.1.local.CancelPost': {|
    inParam: $ReadOnly<{|outboxID: OutboxID|}>,
    outParam: void,
  |},
  'chat.1.local.DownloadFileAttachmentLocal': {|
    inParam: $ReadOnly<{|conversationID: ConversationID, messageID: MessageID, filename: String, preview: Boolean, identifyBehavior: Keybase1.TLFIdentifyBehavior|}>,
    outParam: DownloadAttachmentLocalRes,
  |},
  'chat.1.local.RetryPost': {|
    inParam: $ReadOnly<{|outboxID: OutboxID, identifyBehavior?: ?Keybase1.TLFIdentifyBehavior|}>,
    outParam: void,
  |},
  'chat.1.local.SetConversationStatusLocal': {|
    inParam: $ReadOnly<{|conversationID: ConversationID, status: ConversationStatus, identifyBehavior: Keybase1.TLFIdentifyBehavior|}>,
    outParam: SetConversationStatusLocalRes,
  |},
  'chat.1.local.addTeamMemberAfterReset': {|
    inParam: $ReadOnly<{|username: String, convID: ConversationID|}>,
    outParam: void,
  |},
  'chat.1.local.deleteConversationLocal': {|
    inParam: $ReadOnly<{|convID: ConversationID, channelName: String, confirmed: Boolean|}>,
    outParam: DeleteConversationLocalRes,
  |},
  'chat.1.local.findConversationsLocal': {|
    inParam: $ReadOnly<{|tlfName: String, membersType: ConversationMembersType, visibility: Keybase1.TLFVisibility, topicType: TopicType, topicName: String, oneChatPerTLF?: ?Boolean, identifyBehavior: Keybase1.TLFIdentifyBehavior|}>,
    outParam: FindConversationsLocalRes,
  |},
  'chat.1.local.getGlobalAppNotificationSettingsLocal': {|
    inParam: void,
    outParam: GlobalAppNotificationSettings,
  |},
  'chat.1.local.getInboxAndUnboxUILocal': {|
    inParam: $ReadOnly<{|query?: ?GetInboxLocalQuery, pagination?: ?Pagination, identifyBehavior: Keybase1.TLFIdentifyBehavior|}>,
    outParam: GetInboxAndUnboxUILocalRes,
  |},
  'chat.1.local.getInboxNonblockLocal': {|
    inParam: $ReadOnly<{|maxUnbox?: ?Int, skipUnverified: Boolean, query?: ?GetInboxLocalQuery, pagination?: ?Pagination, identifyBehavior: Keybase1.TLFIdentifyBehavior|}>,
    outParam: NonblockFetchRes,
  |},
  'chat.1.local.getStaticConfig': {|
    inParam: void,
    outParam: StaticConfig,
  |},
  'chat.1.local.getTLFConversationsLocal': {|
    inParam: $ReadOnly<{|tlfName: String, topicType: TopicType, membersType: ConversationMembersType|}>,
    outParam: GetTLFConversationsLocalRes,
  |},
  'chat.1.local.getTeamRetentionLocal': {|
    inParam: $ReadOnly<{|teamID: Keybase1.TeamID|}>,
    outParam: ?RetentionPolicy,
  |},
  'chat.1.local.getThreadNonblock': {|
    inParam: $ReadOnly<{|conversationID: ConversationID, cbMode: GetThreadNonblockCbMode, reason: GetThreadReason, pgmode: GetThreadNonblockPgMode, query?: ?GetThreadQuery, pagination?: ?UIPagination, identifyBehavior: Keybase1.TLFIdentifyBehavior|}>,
    outParam: NonblockFetchRes,
  |},
  'chat.1.local.joinConversationByIDLocal': {|
    inParam: $ReadOnly<{|convID: ConversationID|}>,
    outParam: JoinLeaveConversationLocalRes,
  |},
  'chat.1.local.leaveConversationLocal': {|
    inParam: $ReadOnly<{|convID: ConversationID|}>,
    outParam: JoinLeaveConversationLocalRes,
  |},
  'chat.1.local.makePreview': {|
    inParam: $ReadOnly<{|filename: String, outboxID: OutboxID|}>,
    outParam: MakePreviewRes,
  |},
  'chat.1.local.markAsReadLocal': {|
    inParam: $ReadOnly<{|conversationID: ConversationID, msgID: MessageID|}>,
    outParam: MarkAsReadLocalRes,
  |},
  'chat.1.local.newConversationLocal': {|
    inParam: $ReadOnly<{|tlfName: String, topicType: TopicType, tlfVisibility: Keybase1.TLFVisibility, topicName?: ?String, membersType: ConversationMembersType, identifyBehavior: Keybase1.TLFIdentifyBehavior|}>,
    outParam: NewConversationLocalRes,
  |},
  'chat.1.local.postDeleteHistoryByAge': {|
    inParam: $ReadOnly<{|conversationID: ConversationID, tlfName: String, tlfPublic: Boolean, identifyBehavior: Keybase1.TLFIdentifyBehavior, age: Gregor1.DurationSec|}>,
    outParam: PostLocalRes,
  |},
  'chat.1.local.postDeleteNonblock': {|
    inParam: $ReadOnly<{|conversationID: ConversationID, tlfName: String, tlfPublic: Boolean, supersedes: MessageID, clientPrev: MessageID, outboxID?: ?OutboxID, identifyBehavior: Keybase1.TLFIdentifyBehavior|}>,
    outParam: PostLocalNonblockRes,
  |},
  'chat.1.local.postEditNonblock': {|
    inParam: $ReadOnly<{|conversationID: ConversationID, tlfName: String, tlfPublic: Boolean, supersedes: MessageID, body: String, outboxID?: ?OutboxID, clientPrev: MessageID, identifyBehavior: Keybase1.TLFIdentifyBehavior|}>,
    outParam: PostLocalNonblockRes,
  |},
  'chat.1.local.postFileAttachmentMessageLocalNonblock': {|
    inParam: $ReadOnly<{|convID: ConversationID, tlfName: String, visibility: Keybase1.TLFVisibility, clientPrev: MessageID, filename: String, title: String, metadata: Bytes, ephemeralLifetime?: ?Gregor1.DurationSec, identifyBehavior: Keybase1.TLFIdentifyBehavior|}>,
    outParam: PostLocalNonblockRes,
  |},
  'chat.1.local.postFileAttachmentUploadLocalNonblock': {|
    inParam: $ReadOnly<{|convID: ConversationID, outboxID: OutboxID, filename: String, title: String, metadata: Bytes, callerPreview?: ?MakePreviewRes, identifyBehavior: Keybase1.TLFIdentifyBehavior|}>,
    outParam: void,
  |},
  'chat.1.local.postHeadline': {|
    inParam: $ReadOnly<{|conversationID: ConversationID, tlfName: String, tlfPublic: Boolean, headline: String, identifyBehavior: Keybase1.TLFIdentifyBehavior|}>,
    outParam: PostLocalRes,
  |},
  'chat.1.local.postHeadlineNonblock': {|
    inParam: $ReadOnly<{|conversationID: ConversationID, tlfName: String, tlfPublic: Boolean, headline: String, outboxID?: ?OutboxID, clientPrev: MessageID, identifyBehavior: Keybase1.TLFIdentifyBehavior|}>,
    outParam: PostLocalNonblockRes,
  |},
  'chat.1.local.postMetadata': {|
    inParam: $ReadOnly<{|conversationID: ConversationID, tlfName: String, tlfPublic: Boolean, channelName: String, identifyBehavior: Keybase1.TLFIdentifyBehavior|}>,
    outParam: PostLocalRes,
  |},
  'chat.1.local.postReactionNonblock': {|
    inParam: $ReadOnly<{|conversationID: ConversationID, tlfName: String, tlfPublic: Boolean, supersedes: MessageID, body: String, outboxID?: ?OutboxID, clientPrev: MessageID, identifyBehavior: Keybase1.TLFIdentifyBehavior|}>,
    outParam: PostLocalNonblockRes,
  |},
  'chat.1.local.postTextNonblock': {|
    inParam: $ReadOnly<{|conversationID: ConversationID, tlfName: String, tlfPublic: Boolean, body: String, clientPrev: MessageID, outboxID?: ?OutboxID, identifyBehavior: Keybase1.TLFIdentifyBehavior, ephemeralLifetime?: ?Gregor1.DurationSec|}>,
    outParam: PostLocalNonblockRes,
  |},
  'chat.1.local.previewConversationByIDLocal': {|
    inParam: $ReadOnly<{|convID: ConversationID|}>,
    outParam: JoinLeaveConversationLocalRes,
  |},
  'chat.1.local.setAppNotificationSettingsLocal': {|
    inParam: $ReadOnly<{|convID: ConversationID, channelWide: Boolean, settings?: ?Array<AppNotificationSettingLocal>|}>,
    outParam: SetAppNotificationSettingsLocalRes,
  |},
  'chat.1.local.setConvMinWriterRoleLocal': {|
    inParam: $ReadOnly<{|convID: ConversationID, role: Keybase1.TeamRole|}>,
    outParam: void,
  |},
  'chat.1.local.setConvRetentionLocal': {|
    inParam: $ReadOnly<{|convID: ConversationID, policy: RetentionPolicy|}>,
    outParam: void,
  |},
  'chat.1.local.setGlobalAppNotificationSettingsLocal': {|
    inParam: $ReadOnly<{|settings: {[key: string]: Bool}|}>,
    outParam: void,
  |},
  'chat.1.local.setTeamRetentionLocal': {|
    inParam: $ReadOnly<{|teamID: Keybase1.TeamID, policy: RetentionPolicy|}>,
    outParam: void,
  |},
  'chat.1.local.unboxMobilePushNotification': {|
    inParam: $ReadOnly<{|payload: String, convID: String, membersType: ConversationMembersType, pushIDs?: ?Array<String>, shouldAck: Boolean|}>,
    outParam: String,
  |},
  'chat.1.local.updateTyping': {|
    inParam: $ReadOnly<{|conversationID: ConversationID, typing: Boolean|}>,
    outParam: void,
  |},
|}

export const chatUiMessageUnboxedState = {
  valid: 1,
  error: 2,
  outbox: 3,
  placeholder: 4,
}

export const commonConversationExistence = {
  active: 0,
  archived: 1,
  deleted: 2,
  abandoned: 3,
}

export const commonConversationMemberStatus = {
  active: 0,
  removed: 1,
  left: 2,
  preview: 3,
  reset: 4,
}

export const commonConversationMembersType = {
  kbfs: 0,
  team: 1,
  impteamnative: 2,
  impteamupgrade: 3,
}

export const commonConversationStatus = {
  unfiled: 0,
  favorite: 1,
  ignored: 2,
  blocked: 3,
  muted: 4,
  reported: 5,
}

export const commonGetThreadReason = {
  general: 0,
  push: 1,
  foreground: 2,
  backgroundconvload: 3,
  fixretry: 4,
  prepare: 5,
  searcher: 6,
}

export const commonGlobalAppNotificationSetting = {
  newmessages: 0,
  plaintextmobile: 1,
  plaintextdesktop: 2,
  defaultsoundmobile: 3,
}

export const commonInboxResType = {
  versionhit: 0,
  full: 1,
}

export const commonMessageType = {
  none: 0,
  text: 1,
  attachment: 2,
  edit: 3,
  delete: 4,
  metadata: 5,
  tlfname: 6,
  headline: 7,
  attachmentuploaded: 8,
  join: 9,
  leave: 10,
  system: 11,
  deletehistory: 12,
  reaction: 13,
  sendpayment: 14,
  requestpayment: 15,
}

export const commonNotificationKind = {
  generic: 0,
  atmention: 1,
}

export const commonRetentionPolicyType = {
  none: 0,
  retain: 1,
  expire: 2,
  inherit: 3,
  ephemeral: 4,
}

export const commonSyncInboxResType = {
  current: 0,
  incremental: 1,
  clear: 2,
}

export const commonTeamType = {
  none: 0,
  simple: 1,
  complex: 2,
}

export const commonTopicType = {
  none: 0,
  chat: 1,
  dev: 2,
  kbfsfileedit: 3,
}

export const localAssetMetadataType = {
  none: 0,
  image: 1,
  video: 2,
  audio: 3,
}

export const localAssetTag = {
  primary: 0,
}

export const localBodyPlaintextVersion = {
  v1: 1,
  v2: 2,
  v3: 3,
  v4: 4,
  v5: 5,
  v6: 6,
  v7: 7,
  v8: 8,
  v9: 9,
  v10: 10,
}

export const localConversationErrorType = {
  permanent: 0,
  missinginfo: 1,
  selfrekeyneeded: 2,
  otherrekeyneeded: 3,
  identify: 4,
  transient: 5,
  none: 6,
}

export const localGetThreadNonblockCbMode = {
  full: 0,
  incremental: 1,
}

export const localGetThreadNonblockPgMode = {
  default: 0,
  server: 1,
}

export const localHeaderPlaintextVersion = {
  v1: 1,
  v2: 2,
  v3: 3,
  v4: 4,
  v5: 5,
  v6: 6,
  v7: 7,
  v8: 8,
  v9: 9,
  v10: 10,
}

export const localMessageSystemType = {
  addedtoteam: 0,
  inviteaddedtoteam: 1,
  complexteam: 2,
  createteam: 3,
  gitpush: 4,
  changeavatar: 5,
}

export const localMessageUnboxedErrorType = {
  misc: 0,
  badversionCritical: 1,
  badversion: 2,
  identify: 3,
  ephemeral: 4,
  pairwiseMissing: 5,
}

export const localOutboxErrorType = {
  misc: 0,
  offline: 1,
  identify: 2,
  toolong: 3,
  duplicate: 4,
  expired: 5,
  toomanyattempts: 6,
  alreadyDeleted: 7,
  uploadfailed: 8,
}

export const localOutboxStateType = {
  sending: 0,
  error: 1,
}

export const localPreviewLocationTyp = {
  url: 0,
  file: 1,
  bytes: 2,
}

export const notifyChatChatActivitySource = {
  local: 0,
  remote: 1,
}

export const notifyChatChatActivityType = {
  reserved: 0,
  incomingMessage: 1,
  readMessage: 2,
  newConversation: 3,
  setStatus: 4,
  failedMessage: 5,
  membersUpdate: 6,
  setAppNotificationSettings: 7,
  teamtype: 8,
  expunge: 9,
  ephemeralPurge: 10,
  reactionUpdate: 11,
}

export const notifyChatStaleUpdateType = {
  clear: 0,
  newactivity: 1,
}

export const remoteChannelMention = {
  none: 0,
  all: 1,
  here: 2,
}

export const remoteMessageBoxedVersion = {
  vnone: 0,
  v1: 1,
  v2: 2,
  v3: 3,
  v4: 4,
}

export const remoteSyncAllNotificationType = {
  state: 0,
  incremental: 1,
}

export const remoteSyncAllProtVers = {
  v0: 0,
  v1: 1,
}
export type AppNotificationSettingLocal = $ReadOnly<{deviceType: Keybase1.DeviceType, kind: NotificationKind, enabled: Boolean}>
export type Asset = $ReadOnly<{filename: String, region: String, endpoint: String, bucket: String, path: String, size: Long, mimeType: String, encHash: Hash, key: Bytes, verifyKey: Bytes, title: String, nonce: Bytes, metadata: AssetMetadata, tag: AssetTag}>
export type AssetMetadata = {assetType: 1, image: ?AssetMetadataImage} | {assetType: 2, video: ?AssetMetadataVideo} | {assetType: 3, audio: ?AssetMetadataAudio}
export type AssetMetadataAudio = $ReadOnly<{durationMs: Int}>
export type AssetMetadataImage = $ReadOnly<{width: Int, height: Int}>
export type AssetMetadataType =
  | 0 // NONE_0
  | 1 // IMAGE_1
  | 2 // VIDEO_2
  | 3 // AUDIO_3

export type AssetMetadataVideo = $ReadOnly<{width: Int, height: Int, durationMs: Int}>
export type AssetTag = 0 // PRIMARY_0

export type BodyPlaintext = {version: 1, v1: ?BodyPlaintextV1} | {version: 2, v2: ?BodyPlaintextUnsupported} | {version: 3, v3: ?BodyPlaintextUnsupported} | {version: 4, v4: ?BodyPlaintextUnsupported} | {version: 5, v5: ?BodyPlaintextUnsupported} | {version: 6, v6: ?BodyPlaintextUnsupported} | {version: 7, v7: ?BodyPlaintextUnsupported} | {version: 8, v8: ?BodyPlaintextUnsupported} | {version: 9, v9: ?BodyPlaintextUnsupported} | {version: 10, v10: ?BodyPlaintextUnsupported}
export type BodyPlaintextMetaInfo = $ReadOnly<{crit: Boolean}>
export type BodyPlaintextUnsupported = $ReadOnly<{mi: BodyPlaintextMetaInfo}>
export type BodyPlaintextV1 = $ReadOnly<{messageBody: MessageBody}>
export type BodyPlaintextVersion =
  | 1 // V1_1
  | 2 // V2_2
  | 3 // V3_3
  | 4 // V4_4
  | 5 // V5_5
  | 6 // V6_6
  | 7 // V7_7
  | 8 // V8_8
  | 9 // V9_9
  | 10 // V10_10

export type ChannelMention =
  | 0 // NONE_0
  | 1 // ALL_1
  | 2 // HERE_2

export type ChannelNameMention = $ReadOnly<{convID: ConversationID, topicName: String}>
export type ChatActivity = {activityType: 1, incomingMessage: ?IncomingMessage} | {activityType: 2, readMessage: ?ReadMessageInfo} | {activityType: 3, newConversation: ?NewConversationInfo} | {activityType: 4, setStatus: ?SetStatusInfo} | {activityType: 5, failedMessage: ?FailedMessageInfo} | {activityType: 6, membersUpdate: ?MembersUpdateInfo} | {activityType: 7, setAppNotificationSettings: ?SetAppNotificationSettingsInfo} | {activityType: 8, teamtype: ?TeamTypeInfo} | {activityType: 9, expunge: ?ExpungeInfo} | {activityType: 10, ephemeralPurge: ?EphemeralPurgeNotifInfo} | {activityType: 11, reactionUpdate: ?ReactionUpdateNotif}
export type ChatActivitySource =
  | 0 // LOCAL_0
  | 1 // REMOTE_1

export type ChatActivityType =
  | 0 // RESERVED_0
  | 1 // INCOMING_MESSAGE_1
  | 2 // READ_MESSAGE_2
  | 3 // NEW_CONVERSATION_3
  | 4 // SET_STATUS_4
  | 5 // FAILED_MESSAGE_5
  | 6 // MEMBERS_UPDATE_6
  | 7 // SET_APP_NOTIFICATION_SETTINGS_7
  | 8 // TEAMTYPE_8
  | 9 // EXPUNGE_9
  | 10 // EPHEMERAL_PURGE_10
  | 11 // REACTION_UPDATE_11

export type ChatSearchHit = $ReadOnly<{beforeMessages?: ?Array<UIMessage>, hitMessage: UIMessage, afterMessages?: ?Array<UIMessage>, matches?: ?Array<String>}>
export type ChatSyncIncrementalInfo = $ReadOnly<{items?: ?Array<UnverifiedInboxUIItem>}>
export type ChatSyncResult = {syncType: 0} | {syncType: 2} | {syncType: 1, incremental: ?ChatSyncIncrementalInfo}
export type ConvTypingUpdate = $ReadOnly<{convID: ConversationID, typers?: ?Array<TyperInfo>}>
export type Conversation = $ReadOnly<{metadata: ConversationMetadata, readerInfo?: ?ConversationReaderInfo, notifications?: ?ConversationNotificationInfo, maxMsgs?: ?Array<MessageBoxed>, maxMsgSummaries?: ?Array<MessageSummary>, creatorInfo?: ?ConversationCreatorInfo, expunge: Expunge, convRetention?: ?RetentionPolicy, teamRetention?: ?RetentionPolicy, cs /* convSettings */?: ?ConversationSettings}>
export type ConversationCreatorInfo = $ReadOnly<{ctime: Gregor1.Time, uid: Gregor1.UID}>
export type ConversationCreatorInfoLocal = $ReadOnly<{ctime: Gregor1.Time, username: String}>
export type ConversationErrorLocal = $ReadOnly<{typ: ConversationErrorType, message: String, remoteConv: Conversation, unverifiedTLFName: String, rekeyInfo?: ?ConversationErrorRekey}>
export type ConversationErrorRekey = $ReadOnly<{tlfName: String, tlfPublic: Boolean, rekeyers?: ?Array<String>, writerNames?: ?Array<String>, readerNames?: ?Array<String>}>
export type ConversationErrorType =
  | 0 // PERMANENT_0
  | 1 // MISSINGINFO_1
  | 2 // SELFREKEYNEEDED_2
  | 3 // OTHERREKEYNEEDED_3
  | 4 // IDENTIFY_4
  | 5 // TRANSIENT_5
  | 6 // NONE_6

export type ConversationExistence =
  | 0 // ACTIVE_0
  | 1 // ARCHIVED_1
  | 2 // DELETED_2
  | 3 // ABANDONED_3

export type ConversationFinalizeInfo = $ReadOnly<{resetUser: String, resetDate: String, resetFull: String, resetTimestamp: Gregor1.Time}>
export type ConversationID = Bytes
export type ConversationIDMessageIDPair = $ReadOnly<{convID: ConversationID, msgID: MessageID}>
export type ConversationIDMessageIDPairs = $ReadOnly<{pairs?: ?Array<ConversationIDMessageIDPair>}>
export type ConversationIDTriple = $ReadOnly<{tlfid: TLFID, topicType: TopicType, topicID: TopicID}>
export type ConversationInfoLocal = $ReadOnly<{id: ConversationID, triple: ConversationIDTriple, tlfName: String, topicName: String, visibility: Keybase1.TLFVisibility, status: ConversationStatus, membersType: ConversationMembersType, memberStatus: ConversationMemberStatus, teamType: TeamType, existence: ConversationExistence, version: ConversationVers, participants?: ?Array<ConversationLocalParticipant>, finalizeInfo?: ?ConversationFinalizeInfo, resetNames?: ?Array<String>}>
export type ConversationLocal = $ReadOnly<{error?: ?ConversationErrorLocal, info: ConversationInfoLocal, readerInfo: ConversationReaderInfo, creatorInfo?: ?ConversationCreatorInfoLocal, notifications?: ?ConversationNotificationInfo, supersedes?: ?Array<ConversationMetadata>, supersededBy?: ?Array<ConversationMetadata>, maxMessages?: ?Array<MessageUnboxed>, isEmpty: Boolean, identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>, expunge: Expunge, convRetention?: ?RetentionPolicy, teamRetention?: ?RetentionPolicy, convSettings?: ?ConversationSettingsLocal}>
export type ConversationLocalParticipant = $ReadOnly<{username: String, fullname?: ?String}>
export type ConversationMember = $ReadOnly<{uid: Gregor1.UID, convID: ConversationID, topicType: TopicType}>
export type ConversationMemberStatus =
  | 0 // ACTIVE_0
  | 1 // REMOVED_1
  | 2 // LEFT_2
  | 3 // PREVIEW_3
  | 4 // RESET_4

export type ConversationMembersType =
  | 0 // KBFS_0
  | 1 // TEAM_1
  | 2 // IMPTEAMNATIVE_2
  | 3 // IMPTEAMUPGRADE_3

export type ConversationMetadata = $ReadOnly<{idTriple: ConversationIDTriple, conversationID: ConversationID, visibility: Keybase1.TLFVisibility, status: ConversationStatus, membersType: ConversationMembersType, teamType: TeamType, existence: ConversationExistence, version: ConversationVers, finalizeInfo?: ?ConversationFinalizeInfo, supersedes?: ?Array<ConversationMetadata>, supersededBy?: ?Array<ConversationMetadata>, activeList?: ?Array<Gregor1.UID>, allList?: ?Array<Gregor1.UID>, resetList?: ?Array<Gregor1.UID>}>
export type ConversationMinWriterRoleInfo = $ReadOnly<{uid: Gregor1.UID, role: Keybase1.TeamRole}>
export type ConversationMinWriterRoleInfoLocal = $ReadOnly<{username: String, role: Keybase1.TeamRole}>
export type ConversationNotificationInfo = $ReadOnly<{channelWide: Boolean, settings: {[key: string]: {[key: string]: Boolean}}}>
export type ConversationReaderInfo = $ReadOnly<{mtime: Gregor1.Time, readMsgid: MessageID, maxMsgid: MessageID, status: ConversationMemberStatus}>
export type ConversationResolveInfo = $ReadOnly<{newTLFName: String}>
export type ConversationSettings = $ReadOnly<{mwr /* minWriterRoleInfo */?: ?ConversationMinWriterRoleInfo}>
export type ConversationSettingsLocal = $ReadOnly<{minWriterRoleInfo?: ?ConversationMinWriterRoleInfoLocal}>
export type ConversationStaleUpdate = $ReadOnly<{convID: ConversationID, updateType: StaleUpdateType}>
export type ConversationStatus =
  | 0 // UNFILED_0
  | 1 // FAVORITE_1
  | 2 // IGNORED_2
  | 3 // BLOCKED_3
  | 4 // MUTED_4
  | 5 // REPORTED_5

export type ConversationVers = Uint64
export type DeleteConversationLocalRes = $ReadOnly<{offline: Boolean, rateLimits?: ?Array<RateLimit>}>
export type DeleteConversationRemoteRes = $ReadOnly<{rateLimit?: ?RateLimit}>
export type DownloadAttachmentLocalRes = $ReadOnly<{offline: Boolean, rateLimits?: ?Array<RateLimit>, identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>}>
export type EncryptedData = $ReadOnly<{v: Int, e: Bytes, n: Bytes}>
export type EphemeralPurgeInfo = $ReadOnly<{c /* convID */: ConversationID, a /* isActive */: Boolean, n /* nextPurgeTime */: Gregor1.Time, e /* minUnexplodedID */: MessageID}>
export type EphemeralPurgeNotifInfo = $ReadOnly<{convID: ConversationID, msgs?: ?Array<UIMessage>, conv?: ?InboxUIItem}>
export type Expunge = $ReadOnly<{upto: MessageID, basis: MessageID}>
export type ExpungeInfo = $ReadOnly<{convID: ConversationID, expunge: Expunge, conv?: ?InboxUIItem}>
export type ExpungePayload = $ReadOnly<{Action: String, convID: ConversationID, inboxVers: InboxVers, expunge: Expunge, maxMsgs?: ?Array<MessageSummary>, topicType: TopicType, unreadUpdate?: ?UnreadUpdate}>
export type FailedMessageInfo = $ReadOnly<{outboxRecords?: ?Array<OutboxRecord>, isEphemeralPurge: Boolean}>
export type FindConversationsLocalRes = $ReadOnly<{conversations?: ?Array<ConversationLocal>, offline: Boolean, rateLimits?: ?Array<RateLimit>, identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>}>
export type GenericPayload = $ReadOnly<{Action: String, inboxVers: InboxVers, convID: ConversationID, topicType: TopicType, unreadUpdate?: ?UnreadUpdate}>
export type GetConversationForCLILocalQuery = $ReadOnly<{markAsRead: Boolean, MessageTypes?: ?Array<MessageType>, Since?: ?String, limit: UnreadFirstNumLimit, conv: ConversationLocal}>
export type GetConversationForCLILocalRes = $ReadOnly<{conversation: ConversationLocal, messages?: ?Array<MessageUnboxed>, offline: Boolean, rateLimits?: ?Array<RateLimit>}>
export type GetConversationMetadataRemoteRes = $ReadOnly<{conv: Conversation, rateLimit?: ?RateLimit}>
export type GetInboxAndUnboxLocalRes = $ReadOnly<{conversations?: ?Array<ConversationLocal>, pagination?: ?Pagination, offline: Boolean, rateLimits?: ?Array<RateLimit>, identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>}>
export type GetInboxAndUnboxUILocalRes = $ReadOnly<{conversations?: ?Array<InboxUIItem>, pagination?: ?Pagination, offline: Boolean, rateLimits?: ?Array<RateLimit>, identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>}>
export type GetInboxByTLFIDRemoteRes = $ReadOnly<{convs?: ?Array<Conversation>, rateLimit?: ?RateLimit}>
export type GetInboxLocalQuery = $ReadOnly<{name?: ?NameQuery, topicName?: ?String, convIDs?: ?Array<ConversationID>, topicType?: ?TopicType, tlfVisibility?: ?Keybase1.TLFVisibility, before?: ?Gregor1.Time, after?: ?Gregor1.Time, oneChatTypePerTLF?: ?Boolean, status?: ?Array<ConversationStatus>, unreadOnly: Boolean, readOnly: Boolean, computeActiveList: Boolean}>
export type GetInboxLocalRes = $ReadOnly<{conversationsUnverified?: ?Array<Conversation>, pagination?: ?Pagination, offline: Boolean, rateLimits?: ?Array<RateLimit>, identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>}>
export type GetInboxQuery = $ReadOnly<{convID?: ?ConversationID, topicType?: ?TopicType, tlfID?: ?TLFID, tlfVisibility?: ?Keybase1.TLFVisibility, before?: ?Gregor1.Time, after?: ?Gregor1.Time, oneChatTypePerTLF?: ?Boolean, status?: ?Array<ConversationStatus>, memberStatus?: ?Array<ConversationMemberStatus>, existences?: ?Array<ConversationExistence>, membersTypes?: ?Array<ConversationMembersType>, convIDs?: ?Array<ConversationID>, unreadOnly: Boolean, readOnly: Boolean, computeActiveList: Boolean, summarizeMaxMsgs: Boolean}>
export type GetInboxRemoteRes = $ReadOnly<{inbox: InboxView, rateLimit?: ?RateLimit}>
export type GetInboxSummaryForCLILocalQuery = $ReadOnly<{topicType: TopicType, after: String, before: String, visibility: Keybase1.TLFVisibility, status?: ?Array<ConversationStatus>, unreadFirst: Boolean, unreadFirstLimit: UnreadFirstNumLimit, activitySortedLimit: Int}>
export type GetInboxSummaryForCLILocalRes = $ReadOnly<{conversations?: ?Array<ConversationLocal>, offline: Boolean, rateLimits?: ?Array<RateLimit>}>
export type GetMessageBeforeRes = $ReadOnly<{msgID: MessageID, rateLimit?: ?RateLimit}>
export type GetMessagesLocalRes = $ReadOnly<{messages?: ?Array<MessageUnboxed>, offline: Boolean, rateLimits?: ?Array<RateLimit>, identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>}>
export type GetMessagesRemoteRes = $ReadOnly<{msgs?: ?Array<MessageBoxed>, rateLimit?: ?RateLimit}>
export type GetPublicConversationsRes = $ReadOnly<{conversations?: ?Array<Conversation>, rateLimit?: ?RateLimit}>
export type GetSearchRegexpRes = $ReadOnly<{hits?: ?Array<ChatSearchHit>, rateLimits?: ?Array<RateLimit>, identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>}>
export type GetTLFConversationsLocalRes = $ReadOnly<{convs?: ?Array<InboxUIItem>, offline: Boolean, rateLimits?: ?Array<RateLimit>}>
export type GetTLFConversationsRes = $ReadOnly<{conversations?: ?Array<Conversation>, rateLimit?: ?RateLimit}>
export type GetThreadLocalRes = $ReadOnly<{thread: ThreadView, offline: Boolean, rateLimits?: ?Array<RateLimit>, identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>}>
export type GetThreadNonblockCbMode =
  | 0 // FULL_0
  | 1 // INCREMENTAL_1

export type GetThreadNonblockPgMode =
  | 0 // DEFAULT_0
  | 1 // SERVER_1

export type GetThreadQuery = $ReadOnly<{markAsRead: Boolean, messageTypes?: ?Array<MessageType>, disableResolveSupersedes: Boolean, enableDeletePlaceholders: Boolean, before?: ?Gregor1.Time, after?: ?Gregor1.Time, messageIDControl?: ?MessageIDControl}>
export type GetThreadReason =
  | 0 // GENERAL_0
  | 1 // PUSH_1
  | 2 // FOREGROUND_2
  | 3 // BACKGROUNDCONVLOAD_3
  | 4 // FIXRETRY_4
  | 5 // PREPARE_5
  | 6 // SEARCHER_6

export type GetThreadRemoteRes = $ReadOnly<{thread: ThreadViewBoxed, membersType: ConversationMembersType, visibility: Keybase1.TLFVisibility, rateLimit?: ?RateLimit}>
export type GlobalAppNotificationSetting =
  | 0 // NEWMESSAGES_0
  | 1 // PLAINTEXTMOBILE_1
  | 2 // PLAINTEXTDESKTOP_2
  | 3 // DEFAULTSOUNDMOBILE_3

export type GlobalAppNotificationSettings = $ReadOnly<{settings: {[key: string]: Bool}}>
export type Hash = Bytes
export type HeaderPlaintext = {version: 1, v1: ?HeaderPlaintextV1} | {version: 2, v2: ?HeaderPlaintextUnsupported} | {version: 3, v3: ?HeaderPlaintextUnsupported} | {version: 4, v4: ?HeaderPlaintextUnsupported} | {version: 5, v5: ?HeaderPlaintextUnsupported} | {version: 6, v6: ?HeaderPlaintextUnsupported} | {version: 7, v7: ?HeaderPlaintextUnsupported} | {version: 8, v8: ?HeaderPlaintextUnsupported} | {version: 9, v9: ?HeaderPlaintextUnsupported} | {version: 10, v10: ?HeaderPlaintextUnsupported}
export type HeaderPlaintextMetaInfo = $ReadOnly<{crit: Boolean}>
export type HeaderPlaintextUnsupported = $ReadOnly<{mi: HeaderPlaintextMetaInfo}>
export type HeaderPlaintextV1 = $ReadOnly<{conv: ConversationIDTriple, tlfName: String, tlfPublic: Boolean, messageType: MessageType, prev?: ?Array<MessagePreviousPointer>, sender: Gregor1.UID, senderDevice: Gregor1.DeviceID, kbfsCryptKeysUsed?: ?Boolean, bodyHash: Hash, outboxInfo?: ?OutboxInfo, outboxID?: ?OutboxID, headerSignature?: ?SignatureInfo, merkleRoot?: ?MerkleRoot, em /* ephemeralMetadata */?: ?MsgEphemeralMetadata}>
export type HeaderPlaintextVersion =
  | 1 // V1_1
  | 2 // V2_2
  | 3 // V3_3
  | 4 // V4_4
  | 5 // V5_5
  | 6 // V6_6
  | 7 // V7_7
  | 8 // V8_8
  | 9 // V9_9
  | 10 // V10_10

export type InboxResType =
  | 0 // VERSIONHIT_0
  | 1 // FULL_1

export type InboxUIItem = $ReadOnly<{convID: String, topicType: TopicType, isEmpty: Boolean, name: String, snippet: String, snippetDecoration: String, channel: String, headline: String, visibility: Keybase1.TLFVisibility, participants?: ?Array<String>, fullNames: {[key: string]: String}, resetParticipants?: ?Array<String>, status: ConversationStatus, membersType: ConversationMembersType, memberStatus: ConversationMemberStatus, teamType: TeamType, time: Gregor1.Time, notifications?: ?ConversationNotificationInfo, creatorInfo?: ?ConversationCreatorInfoLocal, version: ConversationVers, maxMsgID: MessageID, readMsgID: MessageID, convRetention?: ?RetentionPolicy, teamRetention?: ?RetentionPolicy, convSettings?: ?ConversationSettingsLocal, finalizeInfo?: ?ConversationFinalizeInfo, supersedes?: ?Array<ConversationMetadata>, supersededBy?: ?Array<ConversationMetadata>}>
export type InboxUIItemError = $ReadOnly<{typ: ConversationErrorType, message: String, unverifiedTLFName: String, rekeyInfo?: ?ConversationErrorRekey, remoteConv: UnverifiedInboxUIItem}>
export type InboxUIItems = $ReadOnly<{items?: ?Array<InboxUIItem>, pagination?: ?UIPagination, offline: Boolean}>
export type InboxVers = Uint64
export type InboxVersInfo = $ReadOnly<{uid: Gregor1.UID, vers: InboxVers}>
export type InboxView = {rtype: 0} | {rtype: 1, full: ?InboxViewFull}
export type InboxViewFull = $ReadOnly<{vers: InboxVers, conversations?: ?Array<Conversation>, pagination?: ?Pagination}>
export type IncomingMessage = $ReadOnly<{message: UIMessage, convID: ConversationID, displayDesktopNotification: Boolean, desktopNotificationSnippet: String, conv?: ?InboxUIItem, pagination?: ?UIPagination}>
export type JoinLeaveConversationLocalRes = $ReadOnly<{offline: Boolean, rateLimits?: ?Array<RateLimit>}>
export type JoinLeaveConversationRemoteRes = $ReadOnly<{rateLimit?: ?RateLimit}>
export type KBFSImpteamUpgradeUpdate = $ReadOnly<{convID: ConversationID, inboxVers: InboxVers, topicType: TopicType}>
export type MakePreviewRes = $ReadOnly<{mimeType: String, previewMimeType?: ?String, location?: ?PreviewLocation, metadata?: ?AssetMetadata, baseMetadata?: ?AssetMetadata}>
export type MarkAsReadLocalRes = $ReadOnly<{offline: Boolean, rateLimits?: ?Array<RateLimit>}>
export type MarkAsReadRes = $ReadOnly<{rateLimit?: ?RateLimit}>
export type MemberInfo = $ReadOnly<{member: String, status: ConversationMemberStatus}>
export type MembersUpdateInfo = $ReadOnly<{convID: ConversationID, members?: ?Array<MemberInfo>}>
export type MerkleRoot = $ReadOnly<{seqno: Long, hash: Bytes}>
export type MessageAttachment = $ReadOnly<{object: Asset, preview?: ?Asset, previews?: ?Array<Asset>, metadata: Bytes, uploaded: Boolean}>
export type MessageAttachmentUploaded = $ReadOnly<{messageID: MessageID, object: Asset, previews?: ?Array<Asset>, metadata: Bytes}>
export type MessageBody = {messageType: 1, text: ?MessageText} | {messageType: 2, attachment: ?MessageAttachment} | {messageType: 3, edit: ?MessageEdit} | {messageType: 4, delete: ?MessageDelete} | {messageType: 5, metadata: ?MessageConversationMetadata} | {messageType: 7, headline: ?MessageHeadline} | {messageType: 8, attachmentuploaded: ?MessageAttachmentUploaded} | {messageType: 9, join: ?MessageJoin} | {messageType: 10, leave: ?MessageLeave} | {messageType: 11, system: ?MessageSystem} | {messageType: 12, deletehistory: ?MessageDeleteHistory} | {messageType: 13, reaction: ?MessageReaction} | {messageType: 14, sendpayment: ?MessageSendPayment} | {messageType: 15, requestpayment: ?MessageRequestPayment}
export type MessageBoxed = $ReadOnly<{version: MessageBoxedVersion, serverHeader?: ?MessageServerHeader, clientHeader: MessageClientHeader, headerCiphertext: SealedData, bodyCiphertext: EncryptedData, verifyKey: Bytes, keyGeneration: Int}>
export type MessageBoxedVersion =
  | 0 // VNONE_0
  | 1 // V1_1
  | 2 // V2_2
  | 3 // V3_3
  | 4 // V4_4

export type MessageClientHeader = $ReadOnly<{conv: ConversationIDTriple, tlfName: String, tlfPublic: Boolean, messageType: MessageType, supersedes: MessageID, kbfsCryptKeysUsed?: ?Boolean, deletes?: ?Array<MessageID>, prev?: ?Array<MessagePreviousPointer>, deleteHistory?: ?MessageDeleteHistory, sender: Gregor1.UID, senderDevice: Gregor1.DeviceID, merkleRoot?: ?MerkleRoot, outboxID?: ?OutboxID, outboxInfo?: ?OutboxInfo, em /* ephemeralMetadata */?: ?MsgEphemeralMetadata, pm /* pairwiseMacs */: {[key: string]: Bytes}}>
export type MessageClientHeaderVerified = $ReadOnly<{conv: ConversationIDTriple, tlfName: String, tlfPublic: Boolean, messageType: MessageType, prev?: ?Array<MessagePreviousPointer>, sender: Gregor1.UID, senderDevice: Gregor1.DeviceID, kbfsCryptKeysUsed?: ?Boolean, merkleRoot?: ?MerkleRoot, outboxID?: ?OutboxID, outboxInfo?: ?OutboxInfo, em /* ephemeralMetadata */?: ?MsgEphemeralMetadata, rt /* rtime */: Gregor1.Time, pm /* hasPairwiseMacs */: Boolean}>
export type MessageConversationMetadata = $ReadOnly<{conversationTitle: String}>
export type MessageDelete = $ReadOnly<{messageIDs?: ?Array<MessageID>}>
export type MessageDeleteHistory = $ReadOnly<{upto: MessageID}>
export type MessageEdit = $ReadOnly<{messageID: MessageID, body: String}>
export type MessageHeadline = $ReadOnly<{headline: String}>
export type MessageID = Uint
export type MessageIDControl = $ReadOnly<{pivot?: ?MessageID, recent: Boolean, num: Int}>
export type MessageJoin = $ReadOnly<{}>
export type MessageLeave = $ReadOnly<{}>
export type MessagePlaintext = $ReadOnly<{clientHeader: MessageClientHeader, messageBody: MessageBody}>
export type MessagePreviousPointer = $ReadOnly<{id: MessageID, hash: Hash}>
export type MessageReaction = $ReadOnly<{m /* messageID */: MessageID, b /* body */: String}>
export type MessageRequestPayment = $ReadOnly<{requestID: Stellar1.KeybaseRequestID, note: String}>
export type MessageSendPayment = $ReadOnly<{paymentID: Stellar1.PaymentID}>
export type MessageServerHeader = $ReadOnly<{messageID: MessageID, supersededBy: MessageID, r /* reactionIDs */?: ?Array<MessageID>, ctime: Gregor1.Time, n /* now */: Gregor1.Time, rt /* rtime */?: ?Gregor1.Time}>
export type MessageSummary = $ReadOnly<{msgID: MessageID, messageType: MessageType, tlfName: String, tlfPublic: Boolean, ctime: Gregor1.Time}>
export type MessageSystem = {systemType: 0, addedtoteam: ?MessageSystemAddedToTeam} | {systemType: 1, inviteaddedtoteam: ?MessageSystemInviteAddedToTeam} | {systemType: 2, complexteam: ?MessageSystemComplexTeam} | {systemType: 3, createteam: ?MessageSystemCreateTeam} | {systemType: 4, gitpush: ?MessageSystemGitPush} | {systemType: 5, changeavatar: ?MessageSystemChangeAvatar}
export type MessageSystemAddedToTeam = $ReadOnly<{team: String, adder: String, addee: String, owners?: ?Array<String>, admins?: ?Array<String>, writers?: ?Array<String>, readers?: ?Array<String>}>
export type MessageSystemChangeAvatar = $ReadOnly<{team: String, user: String}>
export type MessageSystemComplexTeam = $ReadOnly<{team: String}>
export type MessageSystemCreateTeam = $ReadOnly<{team: String, creator: String}>
export type MessageSystemGitPush = $ReadOnly<{team: String, pusher: String, repoName: String, repoID: Keybase1.RepoID, refs?: ?Array<Keybase1.GitRefMetadata>, pushType: Keybase1.GitPushType, previousRepoName: String}>
export type MessageSystemInviteAddedToTeam = $ReadOnly<{team: String, inviter: String, invitee: String, adder: String, inviteType: Keybase1.TeamInviteCategory}>
export type MessageSystemType =
  | 0 // ADDEDTOTEAM_0
  | 1 // INVITEADDEDTOTEAM_1
  | 2 // COMPLEXTEAM_2
  | 3 // CREATETEAM_3
  | 4 // GITPUSH_4
  | 5 // CHANGEAVATAR_5

export type MessageText = $ReadOnly<{body: String}>
export type MessageType =
  | 0 // NONE_0
  | 1 // TEXT_1
  | 2 // ATTACHMENT_2
  | 3 // EDIT_3
  | 4 // DELETE_4
  | 5 // METADATA_5
  | 6 // TLFNAME_6
  | 7 // HEADLINE_7
  | 8 // ATTACHMENTUPLOADED_8
  | 9 // JOIN_9
  | 10 // LEAVE_10
  | 11 // SYSTEM_11
  | 12 // DELETEHISTORY_12
  | 13 // REACTION_13
  | 14 // SENDPAYMENT_14
  | 15 // REQUESTPAYMENT_15

export type MessageUnboxed = {state: 1, valid: ?MessageUnboxedValid} | {state: 2, error: ?MessageUnboxedError} | {state: 3, outbox: ?OutboxRecord} | {state: 4, placeholder: ?MessageUnboxedPlaceholder}
export type MessageUnboxedError = $ReadOnly<{errType: MessageUnboxedErrorType, errMsg: String, internalErrMsg: String, versionKind: VersionKind, versionNumber: Int, isCritical: Boolean, senderUsername: String, senderDeviceName: String, senderDeviceType: String, messageID: MessageID, messageType: MessageType, ctime: Gregor1.Time, isEphemeral: Boolean, isEphemeralExpired: Boolean, etime: Gregor1.Time}>
export type MessageUnboxedErrorType =
  | 0 // MISC_0
  | 1 // BADVERSION_CRITICAL_1
  | 2 // BADVERSION_2
  | 3 // IDENTIFY_3
  | 4 // EPHEMERAL_4
  | 5 // PAIRWISE_MISSING_5

export type MessageUnboxedPlaceholder = $ReadOnly<{messageID: MessageID, hidden: Boolean}>
export type MessageUnboxedState =
  | 1 // VALID_1
  | 2 // ERROR_2
  | 3 // OUTBOX_3
  | 4 // PLACEHOLDER_4

export type MessageUnboxedValid = $ReadOnly<{clientHeader: MessageClientHeaderVerified, serverHeader: MessageServerHeader, messageBody: MessageBody, senderUsername: String, senderDeviceName: String, senderDeviceType: String, bodyHash: Hash, headerHash: Hash, headerSignature?: ?SignatureInfo, verificationKey?: ?Bytes, senderDeviceRevokedAt?: ?Gregor1.Time, atMentionUsernames?: ?Array<String>, atMentions?: ?Array<Gregor1.UID>, channelMention: ChannelMention, channelNameMentions?: ?Array<ChannelNameMention>, reactions: ReactionMap}>
export type MsgEphemeralMetadata = $ReadOnly<{l /* lifetime */: Gregor1.DurationSec, g /* generation */: Keybase1.EkGeneration, u /* explodedBy */?: ?String}>
export type NameQuery = $ReadOnly<{name: String, membersType: ConversationMembersType}>
export type NewConversationInfo = $ReadOnly<{convID: ConversationID, conv?: ?InboxUIItem}>
export type NewConversationLocalRes = $ReadOnly<{conv: ConversationLocal, rateLimits?: ?Array<RateLimit>, identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>}>
export type NewConversationPayload = $ReadOnly<{Action: String, convID: ConversationID, inboxVers: InboxVers, topicType: TopicType, unreadUpdate?: ?UnreadUpdate}>
export type NewConversationRemoteRes = $ReadOnly<{convID: ConversationID, createdComplexTeam: Boolean, rateLimit?: ?RateLimit}>
export type NewMessagePayload = $ReadOnly<{Action: String, convID: ConversationID, message: MessageBoxed, inboxVers: InboxVers, topicType: TopicType, unreadUpdate?: ?UnreadUpdate, maxMsgs?: ?Array<MessageSummary>}>
export type NonblockFetchRes = $ReadOnly<{offline: Boolean, rateLimits?: ?Array<RateLimit>, identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>}>
export type NotificationKind =
  | 0 // GENERIC_0
  | 1 // ATMENTION_1

export type OutboxErrorType =
  | 0 // MISC_0
  | 1 // OFFLINE_1
  | 2 // IDENTIFY_2
  | 3 // TOOLONG_3
  | 4 // DUPLICATE_4
  | 5 // EXPIRED_5
  | 6 // TOOMANYATTEMPTS_6
  | 7 // ALREADY_DELETED_7
  | 8 // UPLOADFAILED_8

export type OutboxID = Bytes
export type OutboxInfo = $ReadOnly<{prev: MessageID, composeTime: Gregor1.Time}>
export type OutboxRecord = $ReadOnly<{state: OutboxState, outboxID: OutboxID, convID: ConversationID, ctime: Gregor1.Time, Msg: MessagePlaintext, identifyBehavior: Keybase1.TLFIdentifyBehavior, ordinal: Int, preview?: ?MakePreviewRes}>
export type OutboxState = {state: 0, sending: ?Int} | {state: 1, error: ?OutboxStateError}
export type OutboxStateError = $ReadOnly<{message: String, typ: OutboxErrorType}>
export type OutboxStateType =
  | 0 // SENDING_0
  | 1 // ERROR_1

export type Pagination = $ReadOnly<{next: Bytes, previous: Bytes, num: Int, last: Boolean}>
export type PostFileAttachmentArg = $ReadOnly<{conversationID: ConversationID, tlfName: String, visibility: Keybase1.TLFVisibility, filename: String, title: String, metadata: Bytes, identifyBehavior: Keybase1.TLFIdentifyBehavior, callerPreview?: ?MakePreviewRes, outboxID?: ?OutboxID, ephemeralLifetime?: ?Gregor1.DurationSec}>
export type PostLocalNonblockRes = $ReadOnly<{rateLimits?: ?Array<RateLimit>, outboxID: OutboxID, identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>}>
export type PostLocalRes = $ReadOnly<{rateLimits?: ?Array<RateLimit>, messageID: MessageID, identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>}>
export type PostRemoteRes = $ReadOnly<{msgHeader: MessageServerHeader, rateLimit?: ?RateLimit}>
export type PreviewLocation = {ltyp: 0, url: ?String} | {ltyp: 1, file: ?String} | {ltyp: 2, bytes: ?Bytes}
export type PreviewLocationTyp =
  | 0 // URL_0
  | 1 // FILE_1
  | 2 // BYTES_2

export type RateLimit = $ReadOnly<{name: String, callsRemaining: Int, windowReset: Int, maxCalls: Int}>
export type Reaction = $ReadOnly<{ctime: Gregor1.Time, reactionMsgID: MessageID}>
export type ReactionMap = $ReadOnly<{reactions: {[key: string]: {[key: string]: Reaction}}}>
export type ReactionUpdate = $ReadOnly<{reactions: ReactionMap, targetMsgID: MessageID}>
export type ReactionUpdateNotif = $ReadOnly<{convID: ConversationID, reactionUpdates?: ?Array<ReactionUpdate>}>
export type ReadMessageInfo = $ReadOnly<{convID: ConversationID, msgID: MessageID, conv?: ?InboxUIItem}>
export type ReadMessagePayload = $ReadOnly<{Action: String, convID: ConversationID, msgID: MessageID, inboxVers: InboxVers, topicType: TopicType, unreadUpdate?: ?UnreadUpdate}>
export type RemoteUserTypingUpdate = $ReadOnly<{uid: Gregor1.UID, deviceID: Gregor1.DeviceID, convID: ConversationID, typing: Boolean}>
export type RetentionPolicy = {typ: 1, retain: ?RpRetain} | {typ: 2, expire: ?RpExpire} | {typ: 3, inherit: ?RpInherit} | {typ: 4, ephemeral: ?RpEphemeral}
export type RetentionPolicyType =
  | 0 // NONE_0
  | 1 // RETAIN_1
  | 2 // EXPIRE_2
  | 3 // INHERIT_3
  | 4 // EPHEMERAL_4

export type RpEphemeral = $ReadOnly<{age: Gregor1.DurationSec}>
export type RpExpire = $ReadOnly<{age: Gregor1.DurationSec}>
export type RpInherit = $ReadOnly<{}>
export type RpRetain = $ReadOnly<{}>
export type S3Params = $ReadOnly<{bucket: String, objectKey: String, accessKey: String, acl: String, regionName: String, regionEndpoint: String, regionBucketEndpoint: String}>
export type SealedData = $ReadOnly<{v: Int, e: Bytes, n: Bytes}>
export type ServerCacheVers = $ReadOnly<{inboxVers: Int, bodiesVers: Int}>
export type SetAppNotificationSettingsInfo = $ReadOnly<{convID: ConversationID, settings: ConversationNotificationInfo}>
export type SetAppNotificationSettingsLocalRes = $ReadOnly<{offline: Boolean, rateLimits?: ?Array<RateLimit>}>
export type SetAppNotificationSettingsPayload = $ReadOnly<{Action: String, convID: ConversationID, inboxVers: InboxVers, settings: ConversationNotificationInfo, topicType: TopicType, unreadUpdate?: ?UnreadUpdate}>
export type SetAppNotificationSettingsRes = $ReadOnly<{rateLimit?: ?RateLimit}>
export type SetConvMinWriterRoleRes = $ReadOnly<{rateLimit?: ?RateLimit}>
export type SetConvRetentionUpdate = $ReadOnly<{inboxVers: InboxVers, convID: ConversationID, policy: RetentionPolicy}>
export type SetConvSettingsUpdate = $ReadOnly<{inboxVers: InboxVers, convID: ConversationID, convSettings?: ?ConversationSettings}>
export type SetConversationStatusLocalRes = $ReadOnly<{rateLimits?: ?Array<RateLimit>, identifyFailures?: ?Array<Keybase1.TLFIdentifyFailure>}>
export type SetConversationStatusRes = $ReadOnly<{rateLimit?: ?RateLimit}>
export type SetRetentionRes = $ReadOnly<{rateLimit?: ?RateLimit}>
export type SetStatusInfo = $ReadOnly<{convID: ConversationID, status: ConversationStatus, conv?: ?InboxUIItem}>
export type SetStatusPayload = $ReadOnly<{Action: String, convID: ConversationID, status: ConversationStatus, inboxVers: InboxVers, topicType: TopicType, unreadUpdate?: ?UnreadUpdate}>
export type SetTeamRetentionUpdate = $ReadOnly<{inboxVers: InboxVers, teamID: Keybase1.TeamID, policy: RetentionPolicy}>
export type SignEncryptedData = $ReadOnly<{v: Int, e: Bytes, n: Bytes}>
export type SignatureInfo = $ReadOnly<{v: Int, s: Bytes, k: Bytes}>
export type StaleUpdateType =
  | 0 // CLEAR_0
  | 1 // NEWACTIVITY_1

export type StaticConfig = $ReadOnly<{deletableByDeleteHistory?: ?Array<MessageType>}>
export type SubteamRenameUpdate = $ReadOnly<{convIDs?: ?Array<ConversationID>, inboxVers: InboxVers}>
export type SweepRes = $ReadOnly<{foundTask: Boolean, deletedMessages: Boolean, expunge: Expunge}>
export type SyncAllNotificationRes = {typ: 0, state: ?Gregor1.State} | {typ: 1, incremental: ?Gregor1.SyncResult}
export type SyncAllNotificationType =
  | 0 // STATE_0
  | 1 // INCREMENTAL_1

export type SyncAllProtVers =
  | 0 // V0_0
  | 1 // V1_1

export type SyncAllResult = $ReadOnly<{auth: Gregor1.AuthResult, chat: SyncChatRes, notification: SyncAllNotificationRes, badge: UnreadUpdateFull}>
export type SyncChatRes = $ReadOnly<{cacheVers: ServerCacheVers, inboxRes: SyncInboxRes}>
export type SyncInboxRes = {typ: 0} | {typ: 1, incremental: ?SyncIncrementalRes} | {typ: 2}
export type SyncInboxResType =
  | 0 // CURRENT_0
  | 1 // INCREMENTAL_1
  | 2 // CLEAR_2

export type SyncIncrementalRes = $ReadOnly<{vers: InboxVers, convs?: ?Array<Conversation>}>
export type TLFConvOrdinal = Uint
export type TLFFinalizeUpdate = $ReadOnly<{finalizeInfo: ConversationFinalizeInfo, convIDs?: ?Array<ConversationID>, inboxVers: InboxVers}>
export type TLFID = Bytes
export type TLFResolveUpdate = $ReadOnly<{convID: ConversationID, inboxVers: InboxVers}>
export type TeamChannelUpdate = $ReadOnly<{teamID: TLFID}>
export type TeamType =
  | 0 // NONE_0
  | 1 // SIMPLE_1
  | 2 // COMPLEX_2

export type TeamTypeInfo = $ReadOnly<{convID: ConversationID, teamType: TeamType, conv?: ?InboxUIItem}>
export type TeamTypePayload = $ReadOnly<{Action: String, convID: ConversationID, teamType: TeamType, inboxVers: InboxVers, topicType: TopicType, unreadUpdate?: ?UnreadUpdate}>
export type ThreadID = Bytes
export type ThreadView = $ReadOnly<{messages?: ?Array<MessageUnboxed>, pagination?: ?Pagination}>
export type ThreadViewBoxed = $ReadOnly<{messages?: ?Array<MessageBoxed>, pagination?: ?Pagination}>
export type TopicID = Bytes
export type TopicNameState = Bytes
export type TopicType =
  | 0 // NONE_0
  | 1 // CHAT_1
  | 2 // DEV_2
  | 3 // KBFSFILEEDIT_3

export type TyperInfo = $ReadOnly<{uid: Keybase1.UID, username: String, deviceID: Keybase1.DeviceID, deviceName: String, deviceType: String}>
export type UIAssetUrlInfo = $ReadOnly<{previewUrl: String, fullUrl: String, fullUrlCached: Boolean, mimeType: String, videoDuration?: ?String, inlineVideoPlayable: Boolean}>
export type UIChannelNameMention = $ReadOnly<{name: String, convID: String}>
export type UIMessage = {state: 1, valid: ?UIMessageValid} | {state: 2, error: ?MessageUnboxedError} | {state: 3, outbox: ?UIMessageOutbox} | {state: 4, placeholder: ?MessageUnboxedPlaceholder}
export type UIMessageOutbox = $ReadOnly<{state: OutboxState, outboxID: String, messageType: MessageType, body: String, ctime: Gregor1.Time, ordinal: Double, filename: String, title: String, preview?: ?MakePreviewRes}>
export type UIMessageValid = $ReadOnly<{messageID: MessageID, ctime: Gregor1.Time, outboxID?: ?String, messageBody: MessageBody, senderUsername: String, senderDeviceName: String, senderDeviceType: String, superseded: Boolean, assetUrlInfo?: ?UIAssetUrlInfo, senderDeviceRevokedAt?: ?Gregor1.Time, atMentions?: ?Array<String>, channelMention: ChannelMention, channelNameMentions?: ?Array<UIChannelNameMention>, isEphemeral: Boolean, isEphemeralExpired: Boolean, explodedBy?: ?String, etime: Gregor1.Time, reactions: ReactionMap, hasPairwiseMacs: Boolean, paymentInfo?: ?UIPaymentInfo, requestInfo?: ?UIRequestInfo}>
export type UIMessages = $ReadOnly<{messages?: ?Array<UIMessage>, pagination?: ?UIPagination}>
export type UIPagination = $ReadOnly<{next: String, previous: String, num: Int, last: Boolean}>
export type UIPaymentInfo = $ReadOnly<{amountDescription: String, worth: String, delta: Stellar1.BalanceDelta, note: String, status: Stellar1.PaymentStatus, statusDescription: String}>
export type UIRequestInfo = $ReadOnly<{amount: String, amountDescription: String, asset?: ?Stellar1.Asset, currency?: ?Stellar1.OutsideCurrencyCode, status: Stellar1.RequestStatus}>
export type UnreadFirstNumLimit = $ReadOnly<{NumRead: Int, AtLeast: Int, AtMost: Int}>
export type UnreadUpdate = $ReadOnly<{convID: ConversationID, unreadMessages: Int, unreadNotifyingMessages: {[key: string]: Int}, UnreadMessages /* compatUnreadMessages */: Int, diff: Boolean}>
export type UnreadUpdateFull = $ReadOnly<{ignore: Boolean, inboxVers: InboxVers, inboxSyncStatus: SyncInboxResType, updates?: ?Array<UnreadUpdate>}>
export type UnverifiedInboxUIItem = $ReadOnly<{convID: String, topicType: TopicType, name: String, visibility: Keybase1.TLFVisibility, status: ConversationStatus, membersType: ConversationMembersType, memberStatus: ConversationMemberStatus, teamType: TeamType, notifications?: ?ConversationNotificationInfo, time: Gregor1.Time, version: ConversationVers, maxMsgID: MessageID, readMsgID: MessageID, localMetadata?: ?UnverifiedInboxUIItemMetadata, finalizeInfo?: ?ConversationFinalizeInfo, supersedes?: ?Array<ConversationMetadata>, supersededBy?: ?Array<ConversationMetadata>}>
export type UnverifiedInboxUIItemMetadata = $ReadOnly<{channelName: String, headline: String, snippet: String, snippetDecoration: String, writerNames?: ?Array<String>, resetParticipants?: ?Array<String>}>
export type UnverifiedInboxUIItems = $ReadOnly<{items?: ?Array<UnverifiedInboxUIItem>, pagination?: ?UIPagination, offline: Boolean}>
export type UpdateConversationMembership = $ReadOnly<{inboxVers: InboxVers, joined?: ?Array<ConversationMember>, removed?: ?Array<ConversationMember>, reset?: ?Array<ConversationMember>, previewed?: ?Array<ConversationID>, unreadUpdate?: ?UnreadUpdate, unreadUpdates?: ?Array<UnreadUpdate>}>
export type VersionKind = String

export type IncomingCallMapType = {|'chat.1.chatUi.chatAttachmentDownloadStart'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatAttachmentDownloadStart'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.chatUi.chatAttachmentDownloadProgress'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatAttachmentDownloadProgress'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.chatUi.chatAttachmentDownloadDone'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatAttachmentDownloadDone'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.chatUi.chatInboxUnverified'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatInboxUnverified'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.chatUi.chatInboxConversation'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatInboxConversation'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.chatUi.chatInboxFailed'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatInboxFailed'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.chatUi.chatThreadCached'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatThreadCached'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.chatUi.chatThreadFull'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatThreadFull'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.chatUi.chatSearchHit'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatSearchHit'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.chatUi.chatSearchDone'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatSearchDone'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.chatUi.chatConfirmChannelDelete'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatConfirmChannelDelete'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.NotifyChat.NewChatActivity'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.NotifyChat.NewChatActivity'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.NotifyChat.ChatIdentifyUpdate'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.NotifyChat.ChatIdentifyUpdate'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.NotifyChat.ChatTLFFinalize'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.NotifyChat.ChatTLFFinalize'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.NotifyChat.ChatTLFResolve'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.NotifyChat.ChatTLFResolve'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.NotifyChat.ChatInboxStale'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.NotifyChat.ChatInboxStale'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.NotifyChat.ChatThreadsStale'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.NotifyChat.ChatThreadsStale'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.NotifyChat.ChatTypingUpdate'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.NotifyChat.ChatTypingUpdate'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.NotifyChat.ChatJoinedConversation'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.NotifyChat.ChatJoinedConversation'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.NotifyChat.ChatLeftConversation'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.NotifyChat.ChatLeftConversation'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.NotifyChat.ChatResetConversation'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.NotifyChat.ChatResetConversation'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.NotifyChat.ChatInboxSyncStarted'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.NotifyChat.ChatInboxSyncStarted'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.NotifyChat.ChatInboxSynced'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.NotifyChat.ChatInboxSynced'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.NotifyChat.ChatSetConvRetention'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.NotifyChat.ChatSetConvRetention'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.NotifyChat.ChatSetTeamRetention'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.NotifyChat.ChatSetTeamRetention'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.NotifyChat.ChatSetConvSettings'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.NotifyChat.ChatSetConvSettings'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.NotifyChat.ChatSubteamRename'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.NotifyChat.ChatSubteamRename'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.NotifyChat.ChatKBFSToImpteamUpgrade'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.NotifyChat.ChatKBFSToImpteamUpgrade'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.NotifyChat.ChatAttachmentUploadStart'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.NotifyChat.ChatAttachmentUploadStart'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.NotifyChat.ChatAttachmentUploadProgress'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.NotifyChat.ChatAttachmentUploadProgress'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.NotifyChat.ChatPaymentInfo'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.NotifyChat.ChatPaymentInfo'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'chat.1.NotifyChat.ChatRequestInfo'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.NotifyChat.ChatRequestInfo'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn|}

export type CustomResponseIncomingCallMap = {|'chat.1.chatUi.chatAttachmentDownloadStart'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatAttachmentDownloadStart'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatAttachmentDownloadStart'>, 'outParam'>) => void}) => IncomingReturn, 'chat.1.chatUi.chatAttachmentDownloadProgress'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatAttachmentDownloadProgress'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatAttachmentDownloadProgress'>, 'outParam'>) => void}) => IncomingReturn, 'chat.1.chatUi.chatAttachmentDownloadDone'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatAttachmentDownloadDone'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatAttachmentDownloadDone'>, 'outParam'>) => void}) => IncomingReturn, 'chat.1.chatUi.chatInboxUnverified'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatInboxUnverified'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatInboxUnverified'>, 'outParam'>) => void}) => IncomingReturn, 'chat.1.chatUi.chatInboxConversation'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatInboxConversation'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatInboxConversation'>, 'outParam'>) => void}) => IncomingReturn, 'chat.1.chatUi.chatInboxFailed'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatInboxFailed'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatInboxFailed'>, 'outParam'>) => void}) => IncomingReturn, 'chat.1.chatUi.chatThreadCached'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatThreadCached'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatThreadCached'>, 'outParam'>) => void}) => IncomingReturn, 'chat.1.chatUi.chatThreadFull'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatThreadFull'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatThreadFull'>, 'outParam'>) => void}) => IncomingReturn, 'chat.1.chatUi.chatSearchHit'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatSearchHit'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatSearchHit'>, 'outParam'>) => void}) => IncomingReturn, 'chat.1.chatUi.chatSearchDone'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatSearchDone'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatSearchDone'>, 'outParam'>) => void}) => IncomingReturn, 'chat.1.chatUi.chatConfirmChannelDelete'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatConfirmChannelDelete'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'chat.1.chatUi.chatConfirmChannelDelete'>, 'outParam'>) => void}) => IncomingReturn|}
declare export function localAddTeamMemberAfterResetRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.addTeamMemberAfterReset'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.addTeamMemberAfterReset'>, 'outParam'>>
declare export function localCancelPostRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.CancelPost'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.CancelPost'>, 'outParam'>>
declare export function localDeleteConversationLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.deleteConversationLocal'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.deleteConversationLocal'>, 'outParam'>>
declare export function localDownloadFileAttachmentLocalRpcSaga(p: {params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.DownloadFileAttachmentLocal'>, 'inParam'>, incomingCallMap: IncomingCallMapType, customResponseIncomingCallMap?: CustomResponseIncomingCallMap, waitingKey?: string}): CallEffect<void>
declare export function localFindConversationsLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.findConversationsLocal'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.findConversationsLocal'>, 'outParam'>>
declare export function localGetGlobalAppNotificationSettingsLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.getGlobalAppNotificationSettingsLocal'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.getGlobalAppNotificationSettingsLocal'>, 'outParam'>>
declare export function localGetInboxAndUnboxUILocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.getInboxAndUnboxUILocal'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.getInboxAndUnboxUILocal'>, 'outParam'>>
declare export function localGetInboxNonblockLocalRpcSaga(p: {params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.getInboxNonblockLocal'>, 'inParam'>, incomingCallMap: IncomingCallMapType, customResponseIncomingCallMap?: CustomResponseIncomingCallMap, waitingKey?: string}): CallEffect<void>
declare export function localGetStaticConfigRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.getStaticConfig'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.getStaticConfig'>, 'outParam'>>
declare export function localGetTLFConversationsLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.getTLFConversationsLocal'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.getTLFConversationsLocal'>, 'outParam'>>
declare export function localGetTeamRetentionLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.getTeamRetentionLocal'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.getTeamRetentionLocal'>, 'outParam'>>
declare export function localGetThreadNonblockRpcSaga(p: {params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.getThreadNonblock'>, 'inParam'>, incomingCallMap: IncomingCallMapType, customResponseIncomingCallMap?: CustomResponseIncomingCallMap, waitingKey?: string}): CallEffect<void>
declare export function localJoinConversationByIDLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.joinConversationByIDLocal'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.joinConversationByIDLocal'>, 'outParam'>>
declare export function localLeaveConversationLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.leaveConversationLocal'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.leaveConversationLocal'>, 'outParam'>>
declare export function localMakePreviewRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.makePreview'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.makePreview'>, 'outParam'>>
declare export function localMarkAsReadLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.markAsReadLocal'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.markAsReadLocal'>, 'outParam'>>
declare export function localNewConversationLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.newConversationLocal'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.newConversationLocal'>, 'outParam'>>
declare export function localPostDeleteHistoryByAgeRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.postDeleteHistoryByAge'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.postDeleteHistoryByAge'>, 'outParam'>>
declare export function localPostDeleteNonblockRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.postDeleteNonblock'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.postDeleteNonblock'>, 'outParam'>>
declare export function localPostEditNonblockRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.postEditNonblock'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.postEditNonblock'>, 'outParam'>>
declare export function localPostFileAttachmentMessageLocalNonblockRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.postFileAttachmentMessageLocalNonblock'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.postFileAttachmentMessageLocalNonblock'>, 'outParam'>>
declare export function localPostFileAttachmentUploadLocalNonblockRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.postFileAttachmentUploadLocalNonblock'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.postFileAttachmentUploadLocalNonblock'>, 'outParam'>>
declare export function localPostHeadlineNonblockRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.postHeadlineNonblock'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.postHeadlineNonblock'>, 'outParam'>>
declare export function localPostHeadlineRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.postHeadline'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.postHeadline'>, 'outParam'>>
declare export function localPostMetadataRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.postMetadata'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.postMetadata'>, 'outParam'>>
declare export function localPostReactionNonblockRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.postReactionNonblock'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.postReactionNonblock'>, 'outParam'>>
declare export function localPostTextNonblockRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.postTextNonblock'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.postTextNonblock'>, 'outParam'>>
declare export function localPreviewConversationByIDLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.previewConversationByIDLocal'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.previewConversationByIDLocal'>, 'outParam'>>
declare export function localRetryPostRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.RetryPost'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.RetryPost'>, 'outParam'>>
declare export function localSetAppNotificationSettingsLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.setAppNotificationSettingsLocal'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.setAppNotificationSettingsLocal'>, 'outParam'>>
declare export function localSetConvMinWriterRoleLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.setConvMinWriterRoleLocal'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.setConvMinWriterRoleLocal'>, 'outParam'>>
declare export function localSetConvRetentionLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.setConvRetentionLocal'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.setConvRetentionLocal'>, 'outParam'>>
declare export function localSetConversationStatusLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.SetConversationStatusLocal'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.SetConversationStatusLocal'>, 'outParam'>>
declare export function localSetGlobalAppNotificationSettingsLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.setGlobalAppNotificationSettingsLocal'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.setGlobalAppNotificationSettingsLocal'>, 'outParam'>>
declare export function localSetTeamRetentionLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.setTeamRetentionLocal'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.setTeamRetentionLocal'>, 'outParam'>>
declare export function localUnboxMobilePushNotificationRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.unboxMobilePushNotification'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.unboxMobilePushNotification'>, 'outParam'>>
declare export function localUpdateTypingRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'chat.1.local.updateTyping'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'chat.1.local.updateTyping'>, 'outParam'>>
// Not enabled calls. To enable add to enabled-calls.json: 'chat.1.chatUi.chatAttachmentDownloadStart' 'chat.1.chatUi.chatAttachmentDownloadProgress' 'chat.1.chatUi.chatAttachmentDownloadDone' 'chat.1.chatUi.chatInboxUnverified' 'chat.1.chatUi.chatInboxConversation' 'chat.1.chatUi.chatInboxFailed' 'chat.1.chatUi.chatThreadCached' 'chat.1.chatUi.chatThreadFull' 'chat.1.chatUi.chatSearchHit' 'chat.1.chatUi.chatSearchDone' 'chat.1.chatUi.chatConfirmChannelDelete' 'chat.1.local.getThreadLocal' 'chat.1.local.getCachedThread' 'chat.1.local.getInboxAndUnboxLocal' 'chat.1.local.postLocal' 'chat.1.local.generateOutboxID' 'chat.1.local.postLocalNonblock' 'chat.1.local.postMetadataNonblock' 'chat.1.local.postDeleteHistoryUpto' 'chat.1.local.postDeleteHistoryThrough' 'chat.1.local.getInboxSummaryForCLILocal' 'chat.1.local.getConversationForCLILocal' 'chat.1.local.GetMessagesLocal' 'chat.1.local.postFileAttachmentLocal' 'chat.1.local.DownloadAttachmentLocal' 'chat.1.local.joinConversationLocal' 'chat.1.local.upgradeKBFSConversationToImpteam' 'chat.1.local.getSearchRegexp' 'chat.1.NotifyChat.NewChatActivity' 'chat.1.NotifyChat.ChatIdentifyUpdate' 'chat.1.NotifyChat.ChatTLFFinalize' 'chat.1.NotifyChat.ChatTLFResolve' 'chat.1.NotifyChat.ChatInboxStale' 'chat.1.NotifyChat.ChatThreadsStale' 'chat.1.NotifyChat.ChatTypingUpdate' 'chat.1.NotifyChat.ChatJoinedConversation' 'chat.1.NotifyChat.ChatLeftConversation' 'chat.1.NotifyChat.ChatResetConversation' 'chat.1.NotifyChat.ChatInboxSyncStarted' 'chat.1.NotifyChat.ChatInboxSynced' 'chat.1.NotifyChat.ChatSetConvRetention' 'chat.1.NotifyChat.ChatSetTeamRetention' 'chat.1.NotifyChat.ChatSetConvSettings' 'chat.1.NotifyChat.ChatSubteamRename' 'chat.1.NotifyChat.ChatKBFSToImpteamUpgrade' 'chat.1.NotifyChat.ChatAttachmentUploadStart' 'chat.1.NotifyChat.ChatAttachmentUploadProgress' 'chat.1.NotifyChat.ChatPaymentInfo' 'chat.1.NotifyChat.ChatRequestInfo' 'chat.1.remote.getInboxRemote' 'chat.1.remote.getThreadRemote' 'chat.1.remote.getPublicConversations' 'chat.1.remote.postRemote' 'chat.1.remote.newConversationRemote' 'chat.1.remote.newConversationRemote2' 'chat.1.remote.getMessagesRemote' 'chat.1.remote.markAsRead' 'chat.1.remote.SetConversationStatus' 'chat.1.remote.GetUnreadUpdateFull' 'chat.1.remote.getS3Params' 'chat.1.remote.s3Sign' 'chat.1.remote.getInboxVersion' 'chat.1.remote.syncInbox' 'chat.1.remote.syncChat' 'chat.1.remote.syncAll' 'chat.1.remote.tlfFinalize' 'chat.1.remote.tlfResolve' 'chat.1.remote.updateTypingRemote' 'chat.1.remote.joinConversation' 'chat.1.remote.leaveConversation' 'chat.1.remote.previewConversation' 'chat.1.remote.deleteConversation' 'chat.1.remote.getMessageBefore' 'chat.1.remote.getTLFConversations' 'chat.1.remote.setAppNotificationSettings' 'chat.1.remote.setGlobalAppNotificationSettings' 'chat.1.remote.getGlobalAppNotificationSettings' 'chat.1.remote.remoteNotificationSuccessful' 'chat.1.remote.setConvRetention' 'chat.1.remote.setTeamRetention' 'chat.1.remote.setConvMinWriterRole' 'chat.1.remote.retentionSweepConv' 'chat.1.remote.upgradeKBFSToImpteam' 'chat.1.remote.registerSharePost' 'chat.1.remote.failSharePost'
