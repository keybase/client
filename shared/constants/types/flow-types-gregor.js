// @flow
/* eslint-disable */

// This file is auto-generated by client/protocol/Makefile.

import engine, {EngineChannel} from '../../engine'
import {RPCError} from '../../util/errors'
import {putOnChannelMap, createChannelMap, closeChannelMap} from '../../util/saga'
import {Buffer} from 'buffer'
import type {ChannelConfig, ChannelMap} from './saga'

type Bool = boolean;
type Boolean = boolean
type Bytes = Buffer
type Double = number
type Int = number
type Int64 = number
type Long = number
type String = string
type Uint = number
type Uint64 = number
type WaitingHandlerType = (waiting: boolean) => void

const engineRpcOutgoing = (method: string, params: any, callbackOverride: any, incomingCallMapOverride: any) => engine()._rpcOutgoing(method, params, callbackOverride, incomingCallMapOverride)

type RequestCommon = { waitingHandler?: WaitingHandlerType, incomingCallMap?: any }
type RequestErrorCallback = { callback?: ?(err: ?RPCError) => void }
type RPCErrorHandler = (err: RPCError) => void
type CommonResponseHandler = { error: RPCErrorHandler, result: (...rest: Array<void>) => void }

function _channelMapRpcHelper(channelConfig: ChannelConfig<*>, partialRpcCall: (incomingCallMap: any, callback: Function) => void): ChannelMap<*> {
  const channelMap = createChannelMap(channelConfig)
  const incomingCallMap = Object.keys(channelMap).reduce((acc, k) => {
    acc[k] = (params, response) => {
      putOnChannelMap(channelMap, k, {params, response})
    }
    return acc
  }, {})
  const callback = (error, params) => {
    channelMap['finished'] && putOnChannelMap(channelMap, 'finished', {error, params})
    closeChannelMap(channelMap)
  }
  partialRpcCall(incomingCallMap, callback)
  return channelMap
}


export const authAuthenticateSessionTokenRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: AuthAuthenticateSessionTokenResult) => void} & {param: AuthAuthenticateSessionTokenRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'gregor.1.auth.authenticateSessionToken', request)

export const authAuthenticateSessionTokenRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: AuthAuthenticateSessionTokenResult) => void} & {param: AuthAuthenticateSessionTokenRpcParam})): Promise<AuthAuthenticateSessionTokenResult> => new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.auth.authenticateSessionToken', request, (error, result) => error ? reject(error) : resolve(result)))

export const authInternalCreateGregorSuperUserSessionTokenRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: AuthInternalCreateGregorSuperUserSessionTokenResult) => void}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'gregor.1.authInternal.createGregorSuperUserSessionToken', request)

export const authInternalCreateGregorSuperUserSessionTokenRpcPromise = (request: ?(RequestCommon & {callback?: ?(err: ?any, response: AuthInternalCreateGregorSuperUserSessionTokenResult) => void})): Promise<AuthInternalCreateGregorSuperUserSessionTokenResult> => new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.authInternal.createGregorSuperUserSessionToken', request, (error, result) => error ? reject(error) : resolve(result)))

export const authUpdateRevokeSessionIDsRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: AuthUpdateRevokeSessionIDsRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'gregor.1.authUpdate.revokeSessionIDs', request)

export const authUpdateRevokeSessionIDsRpcPromise = (request: (RequestCommon & RequestErrorCallback & {param: AuthUpdateRevokeSessionIDsRpcParam})): Promise<void> => new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.authUpdate.revokeSessionIDs', request, (error, result) => error ? reject(error) : resolve(result)))

export const incomingConsumeMessageMultiRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: IncomingConsumeMessageMultiRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'gregor.1.incoming.consumeMessageMulti', request)

export const incomingConsumeMessageMultiRpcPromise = (request: (RequestCommon & RequestErrorCallback & {param: IncomingConsumeMessageMultiRpcParam})): Promise<void> => new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.incoming.consumeMessageMulti', request, (error, result) => error ? reject(error) : resolve(result)))

export const incomingConsumeMessageRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: IncomingConsumeMessageRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'gregor.1.incoming.consumeMessage', request)

export const incomingConsumeMessageRpcPromise = (request: (RequestCommon & RequestErrorCallback & {param: IncomingConsumeMessageRpcParam})): Promise<void> => new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.incoming.consumeMessage', request, (error, result) => error ? reject(error) : resolve(result)))

export const incomingConsumePublishMessageRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: IncomingConsumePublishMessageRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'gregor.1.incoming.consumePublishMessage', request)

export const incomingConsumePublishMessageRpcPromise = (request: (RequestCommon & RequestErrorCallback & {param: IncomingConsumePublishMessageRpcParam})): Promise<void> => new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.incoming.consumePublishMessage', request, (error, result) => error ? reject(error) : resolve(result)))

export const incomingDescribeConnectedUsersInternalRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: IncomingDescribeConnectedUsersInternalResult) => void} & {param: IncomingDescribeConnectedUsersInternalRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'gregor.1.incoming.describeConnectedUsersInternal', request)

export const incomingDescribeConnectedUsersInternalRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: IncomingDescribeConnectedUsersInternalResult) => void} & {param: IncomingDescribeConnectedUsersInternalRpcParam})): Promise<IncomingDescribeConnectedUsersInternalResult> => new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.incoming.describeConnectedUsersInternal', request, (error, result) => error ? reject(error) : resolve(result)))

export const incomingDescribeConnectedUsersRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: IncomingDescribeConnectedUsersResult) => void} & {param: IncomingDescribeConnectedUsersRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'gregor.1.incoming.describeConnectedUsers', request)

export const incomingDescribeConnectedUsersRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: IncomingDescribeConnectedUsersResult) => void} & {param: IncomingDescribeConnectedUsersRpcParam})): Promise<IncomingDescribeConnectedUsersResult> => new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.incoming.describeConnectedUsers', request, (error, result) => error ? reject(error) : resolve(result)))

export const incomingPingRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: IncomingPingResult) => void}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'gregor.1.incoming.ping', request)

export const incomingPingRpcPromise = (request: ?(RequestCommon & {callback?: ?(err: ?any, response: IncomingPingResult) => void})): Promise<IncomingPingResult> => new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.incoming.ping', request, (error, result) => error ? reject(error) : resolve(result)))

export const incomingStateByCategoryPrefixRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: IncomingStateByCategoryPrefixResult) => void} & {param: IncomingStateByCategoryPrefixRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'gregor.1.incoming.stateByCategoryPrefix', request)

export const incomingStateByCategoryPrefixRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: IncomingStateByCategoryPrefixResult) => void} & {param: IncomingStateByCategoryPrefixRpcParam})): Promise<IncomingStateByCategoryPrefixResult> => new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.incoming.stateByCategoryPrefix', request, (error, result) => error ? reject(error) : resolve(result)))

export const incomingStateRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: IncomingStateResult) => void} & {param: IncomingStateRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'gregor.1.incoming.state', request)

export const incomingStateRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: IncomingStateResult) => void} & {param: IncomingStateRpcParam})): Promise<IncomingStateResult> => new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.incoming.state', request, (error, result) => error ? reject(error) : resolve(result)))

export const incomingSyncRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: IncomingSyncResult) => void} & {param: IncomingSyncRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'gregor.1.incoming.sync', request)

export const incomingSyncRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: IncomingSyncResult) => void} & {param: IncomingSyncRpcParam})): Promise<IncomingSyncResult> => new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.incoming.sync', request, (error, result) => error ? reject(error) : resolve(result)))

export const incomingVersionRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: IncomingVersionResult) => void} & {param: IncomingVersionRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'gregor.1.incoming.version', request)

export const incomingVersionRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: IncomingVersionResult) => void} & {param: IncomingVersionRpcParam})): Promise<IncomingVersionResult> => new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.incoming.version', request, (error, result) => error ? reject(error) : resolve(result)))

export const outgoingBroadcastMessageRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: OutgoingBroadcastMessageRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'gregor.1.outgoing.broadcastMessage', request)

export const outgoingBroadcastMessageRpcPromise = (request: (RequestCommon & RequestErrorCallback & {param: OutgoingBroadcastMessageRpcParam})): Promise<void> => new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.outgoing.broadcastMessage', request, (error, result) => error ? reject(error) : resolve(result)))

export const remindDeleteRemindersRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: RemindDeleteRemindersRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'gregor.1.remind.deleteReminders', request)

export const remindDeleteRemindersRpcPromise = (request: (RequestCommon & RequestErrorCallback & {param: RemindDeleteRemindersRpcParam})): Promise<void> => new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.remind.deleteReminders', request, (error, result) => error ? reject(error) : resolve(result)))

export const remindGetRemindersRpcChannelMap = (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemindGetRemindersResult) => void} & {param: RemindGetRemindersRpcParam}): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'gregor.1.remind.getReminders', request)

export const remindGetRemindersRpcPromise = (request: (RequestCommon & {callback?: ?(err: ?any, response: RemindGetRemindersResult) => void} & {param: RemindGetRemindersRpcParam})): Promise<RemindGetRemindersResult> => new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.remind.getReminders', request, (error, result) => error ? reject(error) : resolve(result)))

export type AuthAuthenticateSessionTokenRpcParam = {|  session: SessionToken|}

export type AuthResult = {|uid: UID,username: String,sid: SessionID,isAdmin: Boolean,|}

export type AuthUpdateRevokeSessionIDsRpcParam = {|  sessionIDs?: ?Array<SessionID>|}

export type Body = Bytes

export type Category = String

export type ConnectedDevice = {|deviceID: DeviceID,deviceType: String,devicePlatform: String,userAgent: String,|}

export type ConnectedUser = {|uid: UID,devices?: ?Array<ConnectedDevice>,|}

export type DeviceID = Bytes

export type Dismissal = {|msgIDs?: ?Array<MsgID>,ranges?: ?Array<MsgRange>,|}

export type DurationMsec = Int64

export type InBandMessage = {|stateUpdate?: ?StateUpdateMessage,stateSync?: ?StateSyncMessage,|}

export type IncomingConsumeMessageMultiRpcParam = {|  msg: Message,
  uids?: ?Array<UID>|}

export type IncomingConsumeMessageRpcParam = {|  m: Message|}

export type IncomingConsumePublishMessageRpcParam = {|  m: Message|}

export type IncomingDescribeConnectedUsersInternalRpcParam = {|  uids?: ?Array<UID>|}

export type IncomingDescribeConnectedUsersRpcParam = {|  uids?: ?Array<UID>|}

export type IncomingStateByCategoryPrefixRpcParam = {|  uid: UID,
  deviceid: DeviceID,
  timeOrOffset: TimeOrOffset,
  categoryPrefix: Category|}

export type IncomingStateRpcParam = {|  uid: UID,
  deviceid: DeviceID,
  timeOrOffset: TimeOrOffset|}

export type IncomingSyncRpcParam = {|  uid: UID,
  deviceid: DeviceID,
  ctime: Time|}

export type IncomingVersionRpcParam = {|  uid: UID|}

export type Item = {|category: Category,dtime: TimeOrOffset,remindTimes?: ?Array<TimeOrOffset>,body: Body,|}

export type ItemAndMetadata = {|md?: ?Metadata,item?: ?Item,|}

export type Message = {|oobm?: ?OutOfBandMessage,ibm?: ?InBandMessage,|}

export type Metadata = {|uid: UID,msgID: MsgID,ctime: Time,deviceID: DeviceID,inBandMsgType: Int,|}

export type MsgID = Bytes

export type MsgRange = {|endTime: TimeOrOffset,category: Category,|}

export type OutOfBandMessage = {|uid: UID,system: System,body: Body,|}

export type OutgoingBroadcastMessageRpcParam = {|  m: Message|}

export type RemindDeleteRemindersRpcParam = {|  reminderIDs?: ?Array<ReminderID>|}

export type RemindGetRemindersRpcParam = {|  maxReminders: Int|}

export type Reminder = {|item: ItemAndMetadata,seqno: Int,remindTime: Time,|}

export type ReminderID = {|uid: UID,msgID: MsgID,seqno: Int,|}

export type ReminderSet = {|reminders?: ?Array<Reminder>,moreRemindersReady: Boolean,|}

export type SessionID = String

export type SessionToken = String

export type State = {|items?: ?Array<ItemAndMetadata>,|}

export type StateSyncMessage = {|md: Metadata,|}

export type StateUpdateMessage = {|md: Metadata,creation?: ?Item,dismissal?: ?Dismissal,|}

export type SyncResult = {|msgs?: ?Array<InBandMessage>,hash: Bytes,|}

export type System = String

export type Time = Long

export type TimeOrOffset = {|time: Time,offset: DurationMsec,|}

export type UID = Bytes
type AuthAuthenticateSessionTokenResult = AuthResult
type AuthInternalCreateGregorSuperUserSessionTokenResult = SessionToken
type IncomingDescribeConnectedUsersInternalResult = ?Array<ConnectedUser>
type IncomingDescribeConnectedUsersResult = ?Array<ConnectedUser>
type IncomingPingResult = String
type IncomingStateByCategoryPrefixResult = State
type IncomingStateResult = State
type IncomingSyncResult = SyncResult
type IncomingVersionResult = String
type RemindGetRemindersResult = ReminderSet

export type IncomingCallMapType = {||}
