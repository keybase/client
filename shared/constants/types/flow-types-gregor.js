/* @flow */

// This file is auto-generated by client/protocol/Makefile.

import type {$Exact} from './more'
export type int = number
export type int64 = number
export type long = number
export type double = number
export type bytes = any
export type RPCError = {
  code: number,
  desc: string
}

export type AuthResult = {
  uid: UID;
  sid: SessionID;
}

export type Body = bytes

export type Category = string

export type DeviceID = bytes

export type Dismissal = {
  msgIDs?: ?Array<MsgID>;
  ranges?: ?Array<MsgRange>;
}

export type DurationMsec = int64

export type InBandMessage = {
  stateUpdate?: ?StateUpdateMessage;
  stateSync?: ?StateSyncMessage;
}

export type Item = {
  category: Category;
  dtime: TimeOrOffset;
  remindTimes?: ?Array<TimeOrOffset>;
  body: Body;
}

export type ItemAndMetadata = {
  md?: ?Metadata;
  item?: ?Item;
}

export type Message = {
  oobm?: ?OutOfBandMessage;
  ibm?: ?InBandMessage;
}

export type Metadata = {
  uid: UID;
  msgID: MsgID;
  ctime: Time;
  deviceID: DeviceID;
  inBandMsgType: int;
}

export type MsgID = bytes

export type MsgRange = {
  endTime: TimeOrOffset;
  category: Category;
}

export type OutOfBandMessage = {
  uid: UID;
  system: System;
  body: Body;
}

export type Reminder = {
  item: ItemAndMetadata;
  seqno: int;
  remindTime: Time;
}

export type ReminderID = {
  uid: UID;
  msgID: MsgID;
  seqno: int;
}

export type ReminderSet = {
  reminders?: ?Array<Reminder>;
  moreRemindersReady: bool;
}

export type SessionID = string

export type SessionToken = string

export type State = {
  items?: ?Array<ItemAndMetadata>;
}

export type StateSyncMessage = {
  md: Metadata;
}

export type StateUpdateMessage = {
  md: Metadata;
  creation?: ?Item;
  dismissal?: ?Dismissal;
}

export type SyncResult = {
  msgs?: ?Array<InBandMessage>;
  hash: bytes;
}

export type System = string

export type Time = long

export type TimeOrOffset = {
  time: Time;
  offset: DurationMsec;
}

export type UID = bytes

export type authAuthenticateSessionTokenResult = AuthResult

export type authAuthenticateSessionTokenRpc = $Exact<{
  method: 'auth.authenticateSessionToken',
  param: {
    session: SessionToken
  },
  waitingHandler?: (waiting: boolean, method: string, sessionID: string) => void,
  incomingCallMap?: incomingCallMapType,
  callback: (null | (err: ?any, response: authAuthenticateSessionTokenResult) => void)
}>

export type authInternalCreateGregorSuperUserSessionTokenResult = SessionToken

export type authInternalCreateGregorSuperUserSessionTokenRpc = $Exact<{
  method: 'authInternal.createGregorSuperUserSessionToken',
  waitingHandler?: (waiting: boolean, method: string, sessionID: string) => void,
  incomingCallMap?: incomingCallMapType,
  callback: (null | (err: ?any, response: authInternalCreateGregorSuperUserSessionTokenResult) => void)
}>

export type authUpdateRevokeSessionIDsResult = void

export type authUpdateRevokeSessionIDsRpc = $Exact<{
  method: 'authUpdate.revokeSessionIDs',
  param: {
    sessionIDs?: ?Array<SessionID>
  },
  waitingHandler?: (waiting: boolean, method: string, sessionID: string) => void,
  incomingCallMap?: incomingCallMapType,
  callback: (null | (err: ?any) => void)
}>

export type incomingConsumeMessageResult = void

export type incomingConsumeMessageRpc = $Exact<{
  method: 'incoming.consumeMessage',
  param: {
    m: Message
  },
  waitingHandler?: (waiting: boolean, method: string, sessionID: string) => void,
  incomingCallMap?: incomingCallMapType,
  callback: (null | (err: ?any) => void)
}>

export type incomingConsumePublishMessageResult = void

export type incomingConsumePublishMessageRpc = $Exact<{
  method: 'incoming.consumePublishMessage',
  param: {
    m: Message
  },
  waitingHandler?: (waiting: boolean, method: string, sessionID: string) => void,
  incomingCallMap?: incomingCallMapType,
  callback: (null | (err: ?any) => void)
}>

export type incomingPingResult = string

export type incomingPingRpc = $Exact<{
  method: 'incoming.ping',
  waitingHandler?: (waiting: boolean, method: string, sessionID: string) => void,
  incomingCallMap?: incomingCallMapType,
  callback: (null | (err: ?any, response: incomingPingResult) => void)
}>

export type incomingStateByCategoryPrefixResult = State

export type incomingStateByCategoryPrefixRpc = $Exact<{
  method: 'incoming.stateByCategoryPrefix',
  param: {
    uid: UID,
    deviceid: DeviceID,
    timeOrOffset: TimeOrOffset,
    categoryPrefix: Category
  },
  waitingHandler?: (waiting: boolean, method: string, sessionID: string) => void,
  incomingCallMap?: incomingCallMapType,
  callback: (null | (err: ?any, response: incomingStateByCategoryPrefixResult) => void)
}>

export type incomingStateResult = State

export type incomingStateRpc = $Exact<{
  method: 'incoming.state',
  param: {
    uid: UID,
    deviceid: DeviceID,
    timeOrOffset: TimeOrOffset
  },
  waitingHandler?: (waiting: boolean, method: string, sessionID: string) => void,
  incomingCallMap?: incomingCallMapType,
  callback: (null | (err: ?any, response: incomingStateResult) => void)
}>

export type incomingSyncResult = SyncResult

export type incomingSyncRpc = $Exact<{
  method: 'incoming.sync',
  param: {
    uid: UID,
    deviceid: DeviceID,
    ctime: Time
  },
  waitingHandler?: (waiting: boolean, method: string, sessionID: string) => void,
  incomingCallMap?: incomingCallMapType,
  callback: (null | (err: ?any, response: incomingSyncResult) => void)
}>

export type outgoingBroadcastMessageResult = void

export type outgoingBroadcastMessageRpc = $Exact<{
  method: 'outgoing.broadcastMessage',
  param: {
    m: Message
  },
  waitingHandler?: (waiting: boolean, method: string, sessionID: string) => void,
  incomingCallMap?: incomingCallMapType,
  callback: (null | (err: ?any) => void)
}>

export type remindDeleteRemindersResult = void

export type remindDeleteRemindersRpc = $Exact<{
  method: 'remind.deleteReminders',
  param: {
    reminderIDs?: ?Array<ReminderID>
  },
  waitingHandler?: (waiting: boolean, method: string, sessionID: string) => void,
  incomingCallMap?: incomingCallMapType,
  callback: (null | (err: ?any) => void)
}>

export type remindGetRemindersResult = ReminderSet

export type remindGetRemindersRpc = $Exact<{
  method: 'remind.getReminders',
  param: {
    maxReminders: int
  },
  waitingHandler?: (waiting: boolean, method: string, sessionID: string) => void,
  incomingCallMap?: incomingCallMapType,
  callback: (null | (err: ?any, response: remindGetRemindersResult) => void)
}>

export type rpc =
    authAuthenticateSessionTokenRpc
  | authInternalCreateGregorSuperUserSessionTokenRpc
  | authUpdateRevokeSessionIDsRpc
  | incomingConsumeMessageRpc
  | incomingConsumePublishMessageRpc
  | incomingPingRpc
  | incomingStateByCategoryPrefixRpc
  | incomingStateRpc
  | incomingSyncRpc
  | outgoingBroadcastMessageRpc
  | remindDeleteRemindersRpc
  | remindGetRemindersRpc

export type incomingCallMapType = {
  'keybase.1.auth.authenticateSessionToken'?: (
    params: {
      session: SessionToken
    },
    response: {
      error: (err: RPCError) => void,
      result: (result: authAuthenticateSessionTokenResult) => void
    }
  ) => void,
  'keybase.1.authInternal.createGregorSuperUserSessionToken'?: (
    params: {},
    response: {
      error: (err: RPCError) => void,
      result: (result: authInternalCreateGregorSuperUserSessionTokenResult) => void
    }
  ) => void,
  'keybase.1.authUpdate.revokeSessionIDs'?: (
    params: {
      sessionIDs?: ?Array<SessionID>
    },
    response: {
      error: (err: RPCError) => void,
      result: () => void
    }
  ) => void,
  'keybase.1.incoming.sync'?: (
    params: {
      uid: UID,
      deviceid: DeviceID,
      ctime: Time
    },
    response: {
      error: (err: RPCError) => void,
      result: (result: incomingSyncResult) => void
    }
  ) => void,
  'keybase.1.incoming.consumeMessage'?: (
    params: {
      m: Message
    },
    response: {
      error: (err: RPCError) => void,
      result: () => void
    }
  ) => void,
  'keybase.1.incoming.consumePublishMessage'?: (
    params: {
      m: Message
    },
    response: {
      error: (err: RPCError) => void,
      result: () => void
    }
  ) => void,
  'keybase.1.incoming.ping'?: (
    params: {},
    response: {
      error: (err: RPCError) => void,
      result: (result: incomingPingResult) => void
    }
  ) => void,
  'keybase.1.incoming.state'?: (
    params: {
      uid: UID,
      deviceid: DeviceID,
      timeOrOffset: TimeOrOffset
    },
    response: {
      error: (err: RPCError) => void,
      result: (result: incomingStateResult) => void
    }
  ) => void,
  'keybase.1.incoming.stateByCategoryPrefix'?: (
    params: {
      uid: UID,
      deviceid: DeviceID,
      timeOrOffset: TimeOrOffset,
      categoryPrefix: Category
    },
    response: {
      error: (err: RPCError) => void,
      result: (result: incomingStateByCategoryPrefixResult) => void
    }
  ) => void,
  'keybase.1.outgoing.broadcastMessage'?: (
    params: {
      m: Message
    },
    response: {
      error: (err: RPCError) => void,
      result: () => void
    }
  ) => void,
  'keybase.1.remind.getReminders'?: (
    params: {
      maxReminders: int
    },
    response: {
      error: (err: RPCError) => void,
      result: (result: remindGetRemindersResult) => void
    }
  ) => void,
  'keybase.1.remind.deleteReminders'?: (
    params: {
      reminderIDs?: ?Array<ReminderID>
    },
    response: {
      error: (err: RPCError) => void,
      result: () => void
    }
  ) => void
}

