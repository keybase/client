// @flow
/* eslint-disable */

// This file is auto-generated by client/protocol/Makefile.

import engine, {EngineChannel} from '../../engine'
import {RPCError} from '../../util/errors'
import {putOnChannelMap, createChannelMap, closeChannelMap} from '../../util/saga'
import {Buffer} from 'buffer'
import type {ChannelConfig, ChannelMap} from './saga'

type Bool = boolean
type Boolean = boolean
type Bytes = Buffer
type Double = number
type Int = number
type Int64 = number
type Long = number
type String = string
type Uint = number
type Uint64 = number
type WaitingHandlerType = (waiting: boolean) => void

const engineRpcOutgoing = (method: string, params: any, callbackOverride: any, incomingCallMapOverride: any) => engine()._rpcOutgoing(method, params, callbackOverride, incomingCallMapOverride)

type RequestCommon = {
  waitingHandler?: WaitingHandlerType,
  incomingCallMap?: any,
}

type RequestErrorCallback = {
  callback?: ?(err: ?RPCError) => void
}

type RPCErrorHandler = (err: RPCError) => void

type CommonResponseHandler = {
  error: RPCErrorHandler,
  result: (...rest: Array<void>) => void,
}

function _channelMapRpcHelper(channelConfig: ChannelConfig<*>, partialRpcCall: (incomingCallMap: any, callback: Function) => void): ChannelMap<*> {
  const channelMap = createChannelMap(channelConfig)
  const incomingCallMap = Object.keys(channelMap).reduce((acc, k) => {
    acc[k] = (params, response) => {
      putOnChannelMap(channelMap, k, {params, response})
    }
    return acc
  }, {})
  const callback = (error, params) => {
    channelMap['finished'] && putOnChannelMap(channelMap, 'finished', {error, params})
    closeChannelMap(channelMap)
  }
  partialRpcCall(incomingCallMap, callback)
  return channelMap
}


export function authAuthenticateSessionTokenRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: AuthAuthenticateSessionTokenResult) => void} & {param: AuthAuthenticateSessionTokenRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'gregor.1.auth.authenticateSessionToken', request)
}

export function authAuthenticateSessionTokenRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: AuthAuthenticateSessionTokenResult) => void} & {param: AuthAuthenticateSessionTokenRpcParam})): Promise<AuthAuthenticateSessionTokenResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.auth.authenticateSessionToken', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function authInternalCreateGregorSuperUserSessionTokenRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: AuthInternalCreateGregorSuperUserSessionTokenResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'gregor.1.authInternal.createGregorSuperUserSessionToken', request)
}

export function authInternalCreateGregorSuperUserSessionTokenRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: AuthInternalCreateGregorSuperUserSessionTokenResult) => void})): Promise<AuthInternalCreateGregorSuperUserSessionTokenResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.authInternal.createGregorSuperUserSessionToken', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function authUpdateRevokeSessionIDsRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: AuthUpdateRevokeSessionIDsRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'gregor.1.authUpdate.revokeSessionIDs', request)
}

export function authUpdateRevokeSessionIDsRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: AuthUpdateRevokeSessionIDsRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.authUpdate.revokeSessionIDs', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function incomingConsumeMessageMultiRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: IncomingConsumeMessageMultiRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'gregor.1.incoming.consumeMessageMulti', request)
}

export function incomingConsumeMessageMultiRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: IncomingConsumeMessageMultiRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.incoming.consumeMessageMulti', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function incomingConsumeMessageRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: IncomingConsumeMessageRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'gregor.1.incoming.consumeMessage', request)
}

export function incomingConsumeMessageRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: IncomingConsumeMessageRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.incoming.consumeMessage', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function incomingConsumePublishMessageRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: IncomingConsumePublishMessageRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'gregor.1.incoming.consumePublishMessage', request)
}

export function incomingConsumePublishMessageRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: IncomingConsumePublishMessageRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.incoming.consumePublishMessage', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function incomingDescribeConnectedUsersInternalRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: IncomingDescribeConnectedUsersInternalResult) => void} & {param: IncomingDescribeConnectedUsersInternalRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'gregor.1.incoming.describeConnectedUsersInternal', request)
}

export function incomingDescribeConnectedUsersInternalRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: IncomingDescribeConnectedUsersInternalResult) => void} & {param: IncomingDescribeConnectedUsersInternalRpcParam})): Promise<IncomingDescribeConnectedUsersInternalResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.incoming.describeConnectedUsersInternal', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function incomingDescribeConnectedUsersRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: IncomingDescribeConnectedUsersResult) => void} & {param: IncomingDescribeConnectedUsersRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'gregor.1.incoming.describeConnectedUsers', request)
}

export function incomingDescribeConnectedUsersRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: IncomingDescribeConnectedUsersResult) => void} & {param: IncomingDescribeConnectedUsersRpcParam})): Promise<IncomingDescribeConnectedUsersResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.incoming.describeConnectedUsers', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function incomingPingRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: IncomingPingResult) => void}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'gregor.1.incoming.ping', request)
}

export function incomingPingRpcPromise (request: ?(RequestCommon & {callback?: ?(err: ?any, response: IncomingPingResult) => void})): Promise<IncomingPingResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.incoming.ping', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function incomingStateByCategoryPrefixRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: IncomingStateByCategoryPrefixResult) => void} & {param: IncomingStateByCategoryPrefixRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'gregor.1.incoming.stateByCategoryPrefix', request)
}

export function incomingStateByCategoryPrefixRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: IncomingStateByCategoryPrefixResult) => void} & {param: IncomingStateByCategoryPrefixRpcParam})): Promise<IncomingStateByCategoryPrefixResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.incoming.stateByCategoryPrefix', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function incomingStateRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: IncomingStateResult) => void} & {param: IncomingStateRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'gregor.1.incoming.state', request)
}

export function incomingStateRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: IncomingStateResult) => void} & {param: IncomingStateRpcParam})): Promise<IncomingStateResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.incoming.state', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function incomingSyncRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: IncomingSyncResult) => void} & {param: IncomingSyncRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'gregor.1.incoming.sync', request)
}

export function incomingSyncRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: IncomingSyncResult) => void} & {param: IncomingSyncRpcParam})): Promise<IncomingSyncResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.incoming.sync', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function incomingVersionRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: IncomingVersionResult) => void} & {param: IncomingVersionRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'gregor.1.incoming.version', request)
}

export function incomingVersionRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: IncomingVersionResult) => void} & {param: IncomingVersionRpcParam})): Promise<IncomingVersionResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.incoming.version', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function outgoingBroadcastMessageRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: OutgoingBroadcastMessageRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'gregor.1.outgoing.broadcastMessage', request)
}

export function outgoingBroadcastMessageRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: OutgoingBroadcastMessageRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.outgoing.broadcastMessage', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function remindDeleteRemindersRpcChannelMap (configKeys: Array<string>, request: RequestCommon & RequestErrorCallback & {param: RemindDeleteRemindersRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'gregor.1.remind.deleteReminders', request)
}

export function remindDeleteRemindersRpcPromise (request: (RequestCommon & RequestErrorCallback & {param: RemindDeleteRemindersRpcParam})): Promise<void> {
  return new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.remind.deleteReminders', request, (error, result) => error ? reject(error) : resolve(result)))
}

export function remindGetRemindersRpcChannelMap (configKeys: Array<string>, request: RequestCommon & {callback?: ?(err: ?any, response: RemindGetRemindersResult) => void} & {param: RemindGetRemindersRpcParam}): EngineChannel {
  return engine()._channelMapRpcHelper(configKeys, 'gregor.1.remind.getReminders', request)
}

export function remindGetRemindersRpcPromise (request: (RequestCommon & {callback?: ?(err: ?any, response: RemindGetRemindersResult) => void} & {param: RemindGetRemindersRpcParam})): Promise<RemindGetRemindersResult> {
  return new Promise((resolve, reject) => engineRpcOutgoing('gregor.1.remind.getReminders', request, (error, result) => error ? reject(error) : resolve(result)))
}

export type AuthAuthenticateSessionTokenRpcParam = {|
  session: SessionToken
|}

export type AuthResult = {
  uid: UID,
  username: String,
  sid: SessionID,
  isAdmin: Boolean,
}

export type AuthUpdateRevokeSessionIDsRpcParam = {|
  sessionIDs?: ?Array<SessionID>
|}

export type Body = Bytes

export type Category = String

export type ConnectedDevice = {
  deviceID: DeviceID,
  deviceType: String,
  devicePlatform: String,
  userAgent: String,
}

export type ConnectedUser = {
  uid: UID,
  devices?: ?Array<ConnectedDevice>,
}

export type DeviceID = Bytes

export type Dismissal = {
  msgIDs?: ?Array<MsgID>,
  ranges?: ?Array<MsgRange>,
}

export type DurationMsec = Int64

export type InBandMessage = {
  stateUpdate?: ?StateUpdateMessage,
  stateSync?: ?StateSyncMessage,
}

export type IncomingConsumeMessageMultiRpcParam = {|
  msg: Message,
  uids?: ?Array<UID>
|}

export type IncomingConsumeMessageRpcParam = {|
  m: Message
|}

export type IncomingConsumePublishMessageRpcParam = {|
  m: Message
|}

export type IncomingDescribeConnectedUsersInternalRpcParam = {|
  uids?: ?Array<UID>
|}

export type IncomingDescribeConnectedUsersRpcParam = {|
  uids?: ?Array<UID>
|}

export type IncomingStateByCategoryPrefixRpcParam = {|
  uid: UID,
  deviceid: DeviceID,
  timeOrOffset: TimeOrOffset,
  categoryPrefix: Category
|}

export type IncomingStateRpcParam = {|
  uid: UID,
  deviceid: DeviceID,
  timeOrOffset: TimeOrOffset
|}

export type IncomingSyncRpcParam = {|
  uid: UID,
  deviceid: DeviceID,
  ctime: Time
|}

export type IncomingVersionRpcParam = {|
  uid: UID
|}

export type Item = {
  category: Category,
  dtime: TimeOrOffset,
  remindTimes?: ?Array<TimeOrOffset>,
  body: Body,
}

export type ItemAndMetadata = {
  md?: ?Metadata,
  item?: ?Item,
}

export type Message = {
  oobm?: ?OutOfBandMessage,
  ibm?: ?InBandMessage,
}

export type Metadata = {
  uid: UID,
  msgID: MsgID,
  ctime: Time,
  deviceID: DeviceID,
  inBandMsgType: Int,
}

export type MsgID = Bytes

export type MsgRange = {
  endTime: TimeOrOffset,
  category: Category,
}

export type OutOfBandMessage = {
  uid: UID,
  system: System,
  body: Body,
}

export type OutgoingBroadcastMessageRpcParam = {|
  m: Message
|}

export type RemindDeleteRemindersRpcParam = {|
  reminderIDs?: ?Array<ReminderID>
|}

export type RemindGetRemindersRpcParam = {|
  maxReminders: Int
|}

export type Reminder = {
  item: ItemAndMetadata,
  seqno: Int,
  remindTime: Time,
}

export type ReminderID = {
  uid: UID,
  msgID: MsgID,
  seqno: Int,
}

export type ReminderSet = {
  reminders?: ?Array<Reminder>,
  moreRemindersReady: Boolean,
}

export type SessionID = String

export type SessionToken = String

export type State = {
  items?: ?Array<ItemAndMetadata>,
}

export type StateSyncMessage = {
  md: Metadata,
}

export type StateUpdateMessage = {
  md: Metadata,
  creation?: ?Item,
  dismissal?: ?Dismissal,
}

export type SyncResult = {
  msgs?: ?Array<InBandMessage>,
  hash: Bytes,
}

export type System = String

export type Time = Long

export type TimeOrOffset = {
  time: Time,
  offset: DurationMsec,
}

export type UID = Bytes
type AuthAuthenticateSessionTokenResult = AuthResult
type AuthInternalCreateGregorSuperUserSessionTokenResult = SessionToken
type IncomingDescribeConnectedUsersInternalResult = ?Array<ConnectedUser>
type IncomingDescribeConnectedUsersResult = ?Array<ConnectedUser>
type IncomingPingResult = String
type IncomingStateByCategoryPrefixResult = State
type IncomingStateResult = State
type IncomingSyncResult = SyncResult
type IncomingVersionResult = String
type RemindGetRemindersResult = ReminderSet

export type IncomingCallMapType = {|

|}
