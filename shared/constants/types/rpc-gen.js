// @flow
/* eslint-disable */

// This file is auto-generated by client/protocol/Makefile.
// Not enabled: calls need to be turned on in enabled-calls.json
import * as Gregor1 from './rpc-gregor-gen'

import engine, {EngineChannel} from '../../engine'
import engineSaga from '../../engine/saga'
import * as Saga from '../../util/saga'
import type {Action} from '../../constants/types/flux'
import type {Boolean, Bool, Bytes, Double, Int, Int64, Long, String, Uint, Uint64, WaitingHandlerType, RPCErrorHandler, RPCError} from '../../engine/types'
import type {TypedState} from '../../constants/reducer'

export const appStateAppState = {
  foreground: 0,
  background: 1,
  inactive: 2,
  backgroundactive: 3,
  backgroundfinal: 4,
}

export const backendCommonBlockType = {
  data: 0,
  md: 1,
  git: 2,
}

export const commonClientType = {
  none: 0,
  cli: 1,
  guiMain: 2,
  kbfs: 3,
  guiHelper: 4,
}

export const commonDeviceType = {
  desktop: 0,
  mobile: 1,
}

export const commonFullNamePackageVersion = {
  v0: 0,
  v1: 1,
  v2: 2,
}

export const commonLogLevel = {
  none: 0,
  debug: 1,
  info: 2,
  notice: 3,
  warn: 4,
  error: 5,
  critical: 6,
  fatal: 7,
}

export const commonMerkleTreeID = {
  master: 0,
  kbfsPublic: 1,
  kbfsPrivate: 2,
  kbfsPrivateteam: 3,
}

export const commonSeqType = {
  public: 1,
  private: 2,
  semiprivate: 3,
}

export const commonTLFVisibility = {
  any: 0,
  public: 1,
  private: 2,
}

export const commonTeamType = {
  none: 0,
  legacy: 1,
  modern: 2,
}

export const commonUserOrTeamResult = {
  user: 1,
  team: 2,
}

export const configForkType = {
  none: 0,
  auto: 1,
  watchdog: 2,
  launchd: 3,
  systemd: 4,
}

export const constantsStatusCode = {
  scok: 0,
  scinputerror: 100,
  scloginrequired: 201,
  scbadsession: 202,
  scbadloginusernotfound: 203,
  scbadloginpassword: 204,
  scnotfound: 205,
  scthrottlecontrol: 210,
  scdeleted: 216,
  scgeneric: 218,
  scalreadyloggedin: 235,
  scexists: 230,
  sccanceled: 237,
  scinputcanceled: 239,
  screloginrequired: 274,
  scresolutionfailed: 275,
  scprofilenotpublic: 276,
  scidentifyfailed: 277,
  sctrackingbroke: 278,
  scwrongcryptoformat: 279,
  scdecryptionerror: 280,
  scinvalidaddress: 281,
  scnosession: 283,
  scaccountreset: 290,
  scidentifiesfailed: 295,
  scnospaceondevice: 297,
  scbademail: 472,
  scbadsignupusernametaken: 701,
  scbadinvitationcode: 707,
  scmissingresult: 801,
  sckeynotfound: 901,
  sckeycorrupted: 905,
  sckeyinuse: 907,
  sckeybadgen: 913,
  sckeynosecret: 914,
  sckeybaduids: 915,
  sckeynoactive: 916,
  sckeynosig: 917,
  sckeybadsig: 918,
  sckeybadeldest: 919,
  sckeynoeldest: 920,
  sckeyduplicateupdate: 921,
  scsibkeyalreadyexists: 922,
  scdecryptionkeynotfound: 924,
  sckeynopgpencryption: 927,
  sckeynonaclencryption: 928,
  sckeysyncedpgpnotfound: 929,
  sckeynomatchinggpg: 930,
  sckeyrevoked: 931,
  scsigwrongkey: 1008,
  scsigoldseqno: 1010,
  scbadtracksession: 1301,
  scdevicebadname: 1404,
  scdevicenameinuse: 1408,
  scdevicenotfound: 1409,
  scdevicemismatch: 1410,
  scdevicerequired: 1411,
  scdeviceprevprovisioned: 1413,
  scdevicenoprovision: 1414,
  scdeviceprovisionviadevice: 1415,
  screvokecurrentdevice: 1416,
  screvokelastdevice: 1417,
  scdeviceprovisionoffline: 1418,
  screvokelastdevicepgp: 1419,
  scstreamexists: 1501,
  scstreamnotfound: 1502,
  scstreamwrongkind: 1503,
  scstreameof: 1504,
  scgenericapierror: 1600,
  scapinetworkerror: 1601,
  sctimeout: 1602,
  scprooferror: 1701,
  scidentificationexpired: 1702,
  scselfnotfound: 1703,
  scbadkexphrase: 1704,
  scnouidelegation: 1705,
  scnoui: 1706,
  scgpgunavailable: 1707,
  scinvalidversionerror: 1800,
  scoldversionerror: 1801,
  scinvalidlocationerror: 1802,
  scservicestatuserror: 1803,
  scinstallerror: 1804,
  scloadkexterror: 1810,
  scloadkextpermerror: 1811,
  scgitinternal: 2300,
  scgitrepoalreadyexists: 2301,
  scgitinvalidreponame: 2302,
  scgitcannotdelete: 2303,
  scgitrepodoesntexist: 2304,
  scloginstatetimeout: 2400,
  scchatinternal: 2500,
  scchatratelimit: 2501,
  scchatconvexists: 2502,
  scchatunknowntlfid: 2503,
  scchatnotinconv: 2504,
  scchatbadmsg: 2505,
  scchatbroadcast: 2506,
  scchatalreadysuperseded: 2507,
  scchatalreadydeleted: 2508,
  scchattlffinalized: 2509,
  scchatcollision: 2510,
  scidentifysummaryerror: 2511,
  scneedselfrekey: 2512,
  scneedotherrekey: 2513,
  scchatmessagecollision: 2514,
  scchatduplicatemessage: 2515,
  scchatclienterror: 2516,
  scchatnotinteam: 2517,
  scchatstalepreviousstate: 2518,
  scteambadmembership: 2604,
  scteamselfnotowner: 2607,
  scteamnotfound: 2614,
  scteamexists: 2619,
  scteamreaderror: 2623,
  scnoop: 2638,
  scteaminvitebadtoken: 2646,
  scteamtarduplicate: 2663,
  scteamtarnotfound: 2664,
  scteammemberexists: 2665,
  scteamnotreleased: 2666,
  scteampermanentlyleft: 2667,
  scteamneedrootid: 2668,
  scteamhaslivechildren: 2669,
  scteamdeleteerror: 2670,
  scteambadrootteam: 2671,
  scteamnameconflictswithuser: 2672,
  scteamdeletenouppointer: 2673,
  scteamneedowner: 2674,
  scteamnoownerallowed: 2675,
  scteamimplicitnononsbs: 2676,
  scteamimplicitbadhash: 2677,
  scteamimplicitbadname: 2678,
  scteamimplicitclash: 2679,
  scteamimplicitduplicate: 2680,
  scteamimplicitbadop: 2681,
  scteamimplicitbadrole: 2682,
  scteamimplicitnotfound: 2683,
  scteambadadminseqnotype: 2684,
  scteamimplicitbadadd: 2685,
  scteamimplicitbadremove: 2686,
  scteaminvitetokenreused: 2696,
  scteamkeymasknotfound: 2697,
  scteambanned: 2702,
  scteaminvalidban: 2703,
  scteamshowcasepermdenied: 2711,
  scteamprovisionalcankey: 2721,
  scteamprovisionalcannotkey: 2722,
  scephemeralkeybadgeneration: 2900,
  scephemeralkeyunexpectedbox: 2901,
  scephemeralkeymissingbox: 2902,
  scephemeralkeywrongnumberofkeys: 2903,
  scephemeralkeymismatchedkey: 2904,
  scephemeralpairwisemacsmissinguids: 2905,
  scstellarerror: 3100,
  scstellarbadinput: 3101,
  scstellarwrongrevision: 3102,
  scstellarmissingbundle: 3103,
  scstellarbadpuk: 3104,
  scstellarmissingaccount: 3105,
  scstellarbadprev: 3106,
  scstellarwrongprimary: 3107,
  scstellarunsupportedcurrency: 3108,
  scnistwrongsize: 3201,
  scnistbadmode: 3202,
  scnisthashwrongsize: 3203,
  scnistsigwrongsize: 3204,
  scnistsigbadinput: 3205,
  scnistsigbaduid: 3206,
  scnistsigbaddeviceid: 3207,
  scnistsigbadnonce: 3208,
  scnistnosigorhash: 3209,
  scnistexpired: 3210,
  scnistsigrevoked: 3211,
  scnistkeyrevoked: 3212,
  scnistuserdeleted: 3213,
  scnistnodevice: 3214,
  scnistsigcannotVerify: 3215,
  scnistreplay: 3216,
  scnistsigbadlifetime: 3217,
  scnistnotfound: 3218,
  scnistbadclock: 3219,
  scnistsigbadctime: 3220,
  scbadsignupusernamedeleted: 3221,
}

export const ctlDbType = {
  main: 0,
  chat: 1,
}

export const ctlExitCode = {
  ok: 0,
  notok: 2,
  restart: 4,
}

export const favoriteFolderType = {
  unknown: 0,
  private: 1,
  public: 2,
  team: 3,
}

export const gitGitLocalMetadataVersion = {
  v1: 1,
}

export const gitGitPushType = {
  default: 0,
  createrepo: 1,
  renamerepo: 3,
}

export const gitGitRepoResultState = {
  err: 0,
  ok: 1,
}

export const gregorUIPushReason = {
  none: 0,
  reconnected: 1,
  newData: 2,
}

export const homeHomeScreenItemType = {
  todo: 1,
  people: 2,
}

export const homeHomeScreenPeopleNotificationType = {
  followed: 1,
  followedMulti: 2,
}

export const homeHomeScreenTodoType = {
  none: 0,
  bio: 1,
  proof: 2,
  device: 3,
  follow: 4,
  chat: 5,
  paperkey: 6,
  team: 7,
  folder: 8,
  gitRepo: 9,
  teamShowcase: 10,
}

export const identifyCommonIdentifyReasonType = {
  none: 0,
  id: 1,
  track: 2,
  encrypt: 3,
  decrypt: 4,
  verify: 5,
  resource: 6,
  background: 7,
}

export const identifyCommonTrackDiffType = {
  none: 0,
  error: 1,
  clash: 2,
  revoked: 3,
  upgraded: 4,
  new: 5,
  remoteFail: 6,
  remoteWorking: 7,
  remoteChanged: 8,
  newEldest: 9,
  noneViaTemporary: 10,
}

export const identifyCommonTrackStatus = {
  newOk: 1,
  newZeroProofs: 2,
  newFailProofs: 3,
  updateBrokenFailedProofs: 4,
  updateNewProofs: 5,
  updateOk: 6,
  updateBrokenRevoked: 7,
}

export const identifyUiCheckResultFreshness = {
  fresh: 0,
  aged: 1,
  rancid: 2,
}

export const identifyUiDismissReasonType = {
  none: 0,
  handledElsewhere: 1,
}

export const installInstallAction = {
  unknown: 0,
  none: 1,
  upgrade: 2,
  reinstall: 3,
  install: 4,
}

export const installInstallStatus = {
  unknown: 0,
  error: 1,
  notInstalled: 2,
  installed: 4,
}

export const kbfsCommonFSErrorType = {
  accessDenied: 0,
  userNotFound: 1,
  revokedDataDetected: 2,
  notLoggedIn: 3,
  timeout: 4,
  rekeyNeeded: 5,
  badFolder: 6,
  notImplemented: 7,
  oldVersion: 8,
  overQuota: 9,
  noSigChain: 10,
  tooManyFolders: 11,
  exdevNotSupported: 12,
  diskLimitReached: 13,
  diskCacheErrorLogSend: 14,
}

export const kbfsCommonFSNotificationType = {
  encrypting: 0,
  decrypting: 1,
  signing: 2,
  verifying: 3,
  rekeying: 4,
  connection: 5,
  mdReadSuccess: 6,
  fileCreated: 7,
  fileModified: 8,
  fileDeleted: 9,
  fileRenamed: 10,
  initialized: 11,
}

export const kbfsCommonFSStatusCode = {
  start: 0,
  finish: 1,
  error: 2,
}

export const passphraseCommonPassphraseType = {
  none: 0,
  paperKey: 1,
  passPhrase: 2,
  verifyPassPhrase: 3,
}

export const pgpSignMode = {
  attached: 0,
  detached: 1,
  clear: 2,
}

export const processFileType = {
  unknown: 0,
  directory: 1,
  file: 2,
}

export const proveCommonProofState = {
  none: 0,
  ok: 1,
  tempFailure: 2,
  permFailure: 3,
  looking: 4,
  superseded: 5,
  posted: 6,
  revoked: 7,
  deleted: 8,
  unknownType: 9,
  sigHintMissing: 10,
  unchecked: 11,
}

export const proveCommonProofStatus = {
  none: 0,
  ok: 1,
  local: 2,
  found: 3,
  baseError: 100,
  hostUnreachable: 101,
  permissionDenied: 103,
  failedParse: 106,
  dnsError: 107,
  authFailed: 108,
  http429: 129,
  http500: 150,
  timeout: 160,
  internalError: 170,
  unchecked: 171,
  missingPvl: 172,
  baseHardError: 200,
  notFound: 201,
  contentFailure: 202,
  badUsername: 203,
  badRemoteId: 204,
  textNotFound: 205,
  badArgs: 206,
  contentMissing: 207,
  titleNotFound: 208,
  serviceError: 209,
  torSkipped: 210,
  torIncompatible: 211,
  http300: 230,
  http400: 240,
  httpOther: 260,
  emptyJson: 270,
  deleted: 301,
  serviceDead: 302,
  badSignature: 303,
  badApiUrl: 304,
  unknownType: 305,
  noHint: 306,
  badHintText: 307,
  invalidPvl: 308,
}

export const proveCommonProofType = {
  none: 0,
  keybase: 1,
  twitter: 2,
  github: 3,
  reddit: 4,
  coinbase: 5,
  hackernews: 6,
  facebook: 8,
  genericWebSite: 1000,
  dns: 1001,
  pgp: 1002,
  rooter: 100001,
}

export const proveUiPromptOverwriteType = {
  social: 0,
  site: 1,
}

export const provisionUiChooseType = {
  existingDevice: 0,
  newDevice: 1,
}

export const provisionUiGPGMethod = {
  gpgNone: 0,
  gpgImport: 1,
  gpgSign: 2,
}

export const provisionUiProvisionMethod = {
  device: 0,
  paperKey: 1,
  passphrase: 2,
  gpgImport: 3,
  gpgSign: 4,
}

export const reachabilityReachable = {
  unknown: 0,
  yes: 1,
  no: 2,
}

export const rekeyOutcome = {
  none: 0,
  fixed: 1,
  ignored: 2,
}

export const rekeyUIRekeyEventType = {
  none: 0,
  notLoggedIn: 1,
  apiError: 2,
  noProblems: 3,
  loadMeError: 4,
  currentDeviceCanRekey: 5,
  deviceLoadError: 6,
  harass: 7,
  noGregorMessages: 8,
}

export const resetResetType = {
  none: 0,
  reset: 1,
  delete: 2,
}

export const saltpackUiSaltpackSenderType = {
  notTracked: 0,
  unknown: 1,
  anonymous: 2,
  trackingBroke: 3,
  trackingOk: 4,
  self: 5,
  revoked: 6,
  expired: 7,
}

export const simpleFSAsyncOps = {
  list: 0,
  listRecursive: 1,
  read: 2,
  write: 3,
  copy: 4,
  move: 5,
  remove: 6,
  listRecursiveToDepth: 7,
}

export const simpleFSDirentType = {
  file: 0,
  dir: 1,
  sym: 2,
  exec: 3,
}

export const simpleFSListFilter = {
  noFilter: 0,
  filterAllHidden: 1,
}

export const simpleFSOpenFlags = {
  read: 0,
  replace: 1,
  existing: 2,
  write: 4,
  append: 8,
  directory: 16,
}

export const simpleFSPathType = {
  local: 0,
  kbfs: 1,
}

export const teamsSeitanKeyAndLabelVersion = {
  v1: 1,
  v2: 2,
}

export const teamsSeitanKeyLabelType = {
  sms: 1,
}

export const teamsTeamApplication = {
  kbfs: 1,
  chat: 2,
  saltpack: 3,
  gitMetadata: 4,
  seitanInviteToken: 5,
  stellarRelay: 6,
}

export const teamsTeamInviteCategory = {
  none: 0,
  unknown: 1,
  keybase: 2,
  email: 3,
  sbs: 4,
  seitan: 5,
}

export const teamsTeamMemberStatus = {
  active: 0,
  reset: 1,
  deleted: 2,
}

export const teamsTeamRole = {
  none: 0,
  reader: 1,
  writer: 2,
  admin: 3,
  owner: 4,
}

export const teamsTeamStatus = {
  none: 0,
  live: 1,
  deleted: 2,
  abandoned: 3,
}

export const tlfKeysTLFIdentifyBehavior = {
  unset: 0,
  chatCli: 1,
  chatGui: 2,
  chatGuiStrict: 3,
  kbfsRekey: 4,
  kbfsQr: 5,
  chatSkip: 6,
  saltpack: 7,
  cli: 8,
  gui: 9,
  defaultKbfs: 10,
  kbfsChat: 11,
}

export const uPKKeyType = {
  none: 0,
  nacl: 1,
  pgp: 2,
}

export const uPKUPAKVersion = {
  v1: 1,
  v2: 2,
}

export const uPKUPK2MinorVersion = {
  v0: 0,
  v1: 1,
  v2: 2,
  v3: 3,
  v4: 4,
  v5: 5,
  v6: 6,
}

export const uiPromptDefault = {
  none: 0,
  yes: 1,
  no: 2,
}
export const SimpleFSSimpleFSCancelRpcPromise = (params: SimpleFSSimpleFSCancelRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.SimpleFS.simpleFSCancel', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const SimpleFSSimpleFSCheckRpcPromise = (params: SimpleFSSimpleFSCheckRpcParam, waitingKey?: string): Promise<SimpleFSSimpleFSCheckResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.SimpleFS.simpleFSCheck', params, callback: (error: RPCError, result: SimpleFSSimpleFSCheckResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const SimpleFSSimpleFSCopyRecursiveRpcPromise = (params: SimpleFSSimpleFSCopyRecursiveRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.SimpleFS.simpleFSCopyRecursive', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const SimpleFSSimpleFSGetHTTPAddressAndTokenRpcPromise = (params: SimpleFSSimpleFSGetHTTPAddressAndTokenRpcParam, waitingKey?: string): Promise<SimpleFSSimpleFSGetHTTPAddressAndTokenResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.SimpleFS.SimpleFSGetHTTPAddressAndToken', params, callback: (error: RPCError, result: SimpleFSSimpleFSGetHTTPAddressAndTokenResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const SimpleFSSimpleFSListRecursiveToDepthRpcPromise = (params: SimpleFSSimpleFSListRecursiveToDepthRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.SimpleFS.simpleFSListRecursiveToDepth', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const SimpleFSSimpleFSListRpcPromise = (params: SimpleFSSimpleFSListRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.SimpleFS.simpleFSList', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const SimpleFSSimpleFSOpenRpcPromise = (params: SimpleFSSimpleFSOpenRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.SimpleFS.simpleFSOpen', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const SimpleFSSimpleFSReadListRpcPromise = (params: SimpleFSSimpleFSReadListRpcParam, waitingKey?: string): Promise<SimpleFSSimpleFSReadListResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.SimpleFS.simpleFSReadList', params, callback: (error: RPCError, result: SimpleFSSimpleFSReadListResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const SimpleFSSimpleFSStatRpcPromise = (params: SimpleFSSimpleFSStatRpcParam, waitingKey?: string): Promise<SimpleFSSimpleFSStatResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.SimpleFS.simpleFSStat', params, callback: (error: RPCError, result: SimpleFSSimpleFSStatResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const SimpleFSSimpleFSSuppressNotificationsRpcPromise = (params: SimpleFSSimpleFSSuppressNotificationsRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.SimpleFS.simpleFSSuppressNotifications', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const SimpleFSSimpleFSSyncStatusRpcPromise = (params: SimpleFSSimpleFSSyncStatusRpcParam, waitingKey?: string): Promise<SimpleFSSimpleFSSyncStatusResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.SimpleFS.simpleFSSyncStatus', params, callback: (error: RPCError, result: SimpleFSSimpleFSSyncStatusResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const SimpleFSSimpleFSWaitRpcPromise = (params: SimpleFSSimpleFSWaitRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.SimpleFS.simpleFSWait', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const accountEmailChangeRpcPromise = (params: AccountEmailChangeRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.account.emailChange', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const accountHasServerKeysRpcPromise = (params: AccountHasServerKeysRpcParam, waitingKey?: string): Promise<AccountHasServerKeysResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.account.hasServerKeys', params, callback: (error: RPCError, result: AccountHasServerKeysResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const accountPassphraseChangeRpcPromise = (params: AccountPassphraseChangeRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.account.passphraseChange', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const apiserverDeleteRpcPromise = (params: ApiserverDeleteRpcParam, waitingKey?: string): Promise<ApiserverDeleteResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.apiserver.Delete', params, callback: (error: RPCError, result: ApiserverDeleteResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const apiserverGetRpcPromise = (params: ApiserverGetRpcParam, waitingKey?: string): Promise<ApiserverGetResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.apiserver.Get', params, callback: (error: RPCError, result: ApiserverGetResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const apiserverGetWithSessionRpcPromise = (params: ApiserverGetWithSessionRpcParam, waitingKey?: string): Promise<ApiserverGetWithSessionResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.apiserver.GetWithSession', params, callback: (error: RPCError, result: ApiserverGetWithSessionResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const apiserverPostJSONRpcPromise = (params: ApiserverPostJSONRpcParam, waitingKey?: string): Promise<ApiserverPostJSONResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.apiserver.PostJSON', params, callback: (error: RPCError, result: ApiserverPostJSONResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const apiserverPostRpcPromise = (params: ApiserverPostRpcParam, waitingKey?: string): Promise<ApiserverPostResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.apiserver.Post', params, callback: (error: RPCError, result: ApiserverPostResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const avatarsLoadTeamAvatarsRpcPromise = (params: AvatarsLoadTeamAvatarsRpcParam, waitingKey?: string): Promise<AvatarsLoadTeamAvatarsResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.avatars.loadTeamAvatars', params, callback: (error: RPCError, result: AvatarsLoadTeamAvatarsResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const avatarsLoadUserAvatarsRpcPromise = (params: AvatarsLoadUserAvatarsRpcParam, waitingKey?: string): Promise<AvatarsLoadUserAvatarsResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.avatars.loadUserAvatars', params, callback: (error: RPCError, result: AvatarsLoadUserAvatarsResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const configGetBootstrapStatusRpcPromise = (params: ConfigGetBootstrapStatusRpcParam, waitingKey?: string): Promise<ConfigGetBootstrapStatusResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.config.getBootstrapStatus', params, callback: (error: RPCError, result: ConfigGetBootstrapStatusResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const configGetConfigRpcPromise = (params: ConfigGetConfigRpcParam, waitingKey?: string): Promise<ConfigGetConfigResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.config.getConfig', params, callback: (error: RPCError, result: ConfigGetConfigResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const configGetExtendedStatusRpcPromise = (params: ConfigGetExtendedStatusRpcParam, waitingKey?: string): Promise<ConfigGetExtendedStatusResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.config.getExtendedStatus', params, callback: (error: RPCError, result: ConfigGetExtendedStatusResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const configGetRememberPassphraseRpcPromise = (params: ConfigGetRememberPassphraseRpcParam, waitingKey?: string): Promise<ConfigGetRememberPassphraseResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.config.getRememberPassphrase', params, callback: (error: RPCError, result: ConfigGetRememberPassphraseResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const configHelloIAmRpcPromise = (params: ConfigHelloIAmRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.config.helloIAm', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const configSetRememberPassphraseRpcPromise = (params: ConfigSetRememberPassphraseRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.config.setRememberPassphrase', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const configWaitForClientRpcPromise = (params: ConfigWaitForClientRpcParam, waitingKey?: string): Promise<ConfigWaitForClientResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.config.waitForClient', params, callback: (error: RPCError, result: ConfigWaitForClientResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const cryptocurrencyRegisterAddressRpcPromise = (params: CryptocurrencyRegisterAddressRpcParam, waitingKey?: string): Promise<CryptocurrencyRegisterAddressResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.cryptocurrency.registerAddress', params, callback: (error: RPCError, result: CryptocurrencyRegisterAddressResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const ctlDbNukeRpcPromise = (params: CtlDbNukeRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.ctl.dbNuke', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const delegateUiCtlRegisterGregorFirehoseFilteredRpcPromise = (params: DelegateUiCtlRegisterGregorFirehoseFilteredRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.delegateUiCtl.registerGregorFirehoseFiltered', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const delegateUiCtlRegisterHomeUIRpcPromise = (params: DelegateUiCtlRegisterHomeUIRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.delegateUiCtl.registerHomeUI', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const delegateUiCtlRegisterIdentifyUIRpcPromise = (params: DelegateUiCtlRegisterIdentifyUIRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.delegateUiCtl.registerIdentifyUI', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const delegateUiCtlRegisterRekeyUIRpcPromise = (params: DelegateUiCtlRegisterRekeyUIRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.delegateUiCtl.registerRekeyUI', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const delegateUiCtlRegisterSecretUIRpcPromise = (params: DelegateUiCtlRegisterSecretUIRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.delegateUiCtl.registerSecretUI', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const deviceCheckDeviceNameFormatRpcPromise = (params: DeviceCheckDeviceNameFormatRpcParam, waitingKey?: string): Promise<DeviceCheckDeviceNameFormatResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.device.checkDeviceNameFormat', params, callback: (error: RPCError, result: DeviceCheckDeviceNameFormatResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const deviceDeviceAddRpcChannelMap = (configKeys: Array<string>, request: DeviceDeviceAddRpcParam): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'keybase.1.device.deviceAdd', request)
export const deviceDeviceHistoryListRpcPromise = (params: DeviceDeviceHistoryListRpcParam, waitingKey?: string): Promise<DeviceDeviceHistoryListResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.device.deviceHistoryList', params, callback: (error: RPCError, result: DeviceDeviceHistoryListResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const favoriteFavoriteAddRpcPromise = (params: FavoriteFavoriteAddRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.favorite.favoriteAdd', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const favoriteFavoriteIgnoreRpcPromise = (params: FavoriteFavoriteIgnoreRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.favorite.favoriteIgnore', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const gitCreatePersonalRepoRpcPromise = (params: GitCreatePersonalRepoRpcParam, waitingKey?: string): Promise<GitCreatePersonalRepoResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.git.createPersonalRepo', params, callback: (error: RPCError, result: GitCreatePersonalRepoResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const gitCreateTeamRepoRpcPromise = (params: GitCreateTeamRepoRpcParam, waitingKey?: string): Promise<GitCreateTeamRepoResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.git.createTeamRepo', params, callback: (error: RPCError, result: GitCreateTeamRepoResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const gitDeletePersonalRepoRpcPromise = (params: GitDeletePersonalRepoRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.git.deletePersonalRepo', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const gitDeleteTeamRepoRpcPromise = (params: GitDeleteTeamRepoRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.git.deleteTeamRepo', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const gitGetAllGitMetadataRpcPromise = (params: GitGetAllGitMetadataRpcParam, waitingKey?: string): Promise<GitGetAllGitMetadataResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.git.getAllGitMetadata', params, callback: (error: RPCError, result: GitGetAllGitMetadataResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const gitGetGitMetadataRpcPromise = (params: GitGetGitMetadataRpcParam, waitingKey?: string): Promise<GitGetGitMetadataResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.git.getGitMetadata', params, callback: (error: RPCError, result: GitGetGitMetadataResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const gitSetTeamRepoSettingsRpcPromise = (params: GitSetTeamRepoSettingsRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.git.setTeamRepoSettings', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const gregorDismissCategoryRpcPromise = (params: GregorDismissCategoryRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.gregor.dismissCategory', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const gregorDismissItemRpcPromise = (params: GregorDismissItemRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.gregor.dismissItem', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const gregorGetStateRpcPromise = (params: GregorGetStateRpcParam, waitingKey?: string): Promise<GregorGetStateResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.gregor.getState', params, callback: (error: RPCError, result: GregorGetStateResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const gregorInjectItemRpcPromise = (params: GregorInjectItemRpcParam, waitingKey?: string): Promise<GregorInjectItemResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.gregor.injectItem', params, callback: (error: RPCError, result: GregorInjectItemResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const gregorUpdateCategoryRpcPromise = (params: GregorUpdateCategoryRpcParam, waitingKey?: string): Promise<GregorUpdateCategoryResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.gregor.updateCategory', params, callback: (error: RPCError, result: GregorUpdateCategoryResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const gregorUpdateItemRpcPromise = (params: GregorUpdateItemRpcParam, waitingKey?: string): Promise<GregorUpdateItemResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.gregor.updateItem', params, callback: (error: RPCError, result: GregorUpdateItemResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const homeHomeGetScreenRpcPromise = (params: HomeHomeGetScreenRpcParam, waitingKey?: string): Promise<HomeHomeGetScreenResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.home.homeGetScreen', params, callback: (error: RPCError, result: HomeHomeGetScreenResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const homeHomeMarkViewedRpcPromise = (params: HomeHomeMarkViewedRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.home.homeMarkViewed', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const homeHomeSkipTodoTypeRpcPromise = (params: HomeHomeSkipTodoTypeRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.home.homeSkipTodoType', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const identifyIdentify2RpcPromise = (params: IdentifyIdentify2RpcParam, waitingKey?: string): Promise<IdentifyIdentify2Result> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.identify.identify2', params, callback: (error: RPCError, result: IdentifyIdentify2Result) => (error ? reject(error) : resolve(result)), waitingKey}))
export const installFuseStatusRpcPromise = (params: InstallFuseStatusRpcParam, waitingKey?: string): Promise<InstallFuseStatusResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.install.fuseStatus', params, callback: (error: RPCError, result: InstallFuseStatusResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const installInstallFuseRpcPromise = (params: InstallInstallFuseRpcParam, waitingKey?: string): Promise<InstallInstallFuseResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.install.installFuse', params, callback: (error: RPCError, result: InstallInstallFuseResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const installInstallKBFSRpcPromise = (params: InstallInstallKBFSRpcParam, waitingKey?: string): Promise<InstallInstallKBFSResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.install.installKBFS', params, callback: (error: RPCError, result: InstallInstallKBFSResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const installUninstallKBFSRpcPromise = (params: InstallUninstallKBFSRpcParam, waitingKey?: string): Promise<InstallUninstallKBFSResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.install.uninstallKBFS', params, callback: (error: RPCError, result: InstallUninstallKBFSResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const kbfsMountGetCurrentMountDirRpcPromise = (params: KbfsMountGetCurrentMountDirRpcParam, waitingKey?: string): Promise<KbfsMountGetCurrentMountDirResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.kbfsMount.GetCurrentMountDir', params, callback: (error: RPCError, result: KbfsMountGetCurrentMountDirResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const loginAccountDeleteRpcPromise = (params: LoginAccountDeleteRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.login.accountDelete', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const loginDeprovisionRpcPromise = (params: LoginDeprovisionRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.login.deprovision', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const loginGetConfiguredAccountsRpcPromise = (params: LoginGetConfiguredAccountsRpcParam, waitingKey?: string): Promise<LoginGetConfiguredAccountsResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.login.getConfiguredAccounts', params, callback: (error: RPCError, result: LoginGetConfiguredAccountsResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const loginLoginRpcChannelMap = (configKeys: Array<string>, request: LoginLoginRpcParam): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'keybase.1.login.login', request)
export const loginLogoutRpcChannelMap = (configKeys: Array<string>, request: LoginLogoutRpcParam): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'keybase.1.login.logout', request)
export const loginPaperKeyRpcChannelMap = (configKeys: Array<string>, request: LoginPaperKeyRpcParam): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'keybase.1.login.paperKey', request)
export const loginPaperKeySubmitRpcPromise = (params: LoginPaperKeySubmitRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.login.paperKeySubmit', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const notifyCtlSetNotificationsRpcPromise = (params: NotifyCtlSetNotificationsRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.notifyCtl.setNotifications', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const pgpPgpKeyGenDefaultRpcChannelMap = (configKeys: Array<string>, request: PgpPgpKeyGenDefaultRpcParam): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'keybase.1.pgp.pgpKeyGenDefault', request)
export const pgpPgpStorageDismissRpcPromise = (params: PgpPgpStorageDismissRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.pgp.pgpStorageDismiss', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const pprofLogProcessorProfileRpcPromise = (params: PprofLogProcessorProfileRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.pprof.logProcessorProfile', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const pprofLogTraceRpcPromise = (params: PprofLogTraceRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.pprof.logTrace', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const proveCheckProofRpcPromise = (params: ProveCheckProofRpcParam, waitingKey?: string): Promise<ProveCheckProofResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.prove.checkProof', params, callback: (error: RPCError, result: ProveCheckProofResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const proveStartProofRpcChannelMap = (configKeys: Array<string>, request: ProveStartProofRpcParam): EngineChannel => engine()._channelMapRpcHelper(configKeys, 'keybase.1.prove.startProof', request)
export const reachabilityCheckReachabilityRpcPromise = (params: ReachabilityCheckReachabilityRpcParam, waitingKey?: string): Promise<ReachabilityCheckReachabilityResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.reachability.checkReachability', params, callback: (error: RPCError, result: ReachabilityCheckReachabilityResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const reachabilityStartReachabilityRpcPromise = (params: ReachabilityStartReachabilityRpcParam, waitingKey?: string): Promise<ReachabilityStartReachabilityResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.reachability.startReachability', params, callback: (error: RPCError, result: ReachabilityStartReachabilityResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const rekeyGetRevokeWarningRpcPromise = (params: RekeyGetRevokeWarningRpcParam, waitingKey?: string): Promise<RekeyGetRevokeWarningResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.rekey.getRevokeWarning', params, callback: (error: RPCError, result: RekeyGetRevokeWarningResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const rekeyRekeyStatusFinishRpcPromise = (params: RekeyRekeyStatusFinishRpcParam, waitingKey?: string): Promise<RekeyRekeyStatusFinishResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.rekey.rekeyStatusFinish', params, callback: (error: RPCError, result: RekeyRekeyStatusFinishResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const rekeyShowPendingRekeyStatusRpcPromise = (params: RekeyShowPendingRekeyStatusRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.rekey.showPendingRekeyStatus', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const revokeRevokeDeviceRpcPromise = (params: RevokeRevokeDeviceRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.revoke.revokeDevice', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const revokeRevokeKeyRpcPromise = (params: RevokeRevokeKeyRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.revoke.revokeKey', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const revokeRevokeSigsRpcPromise = (params: RevokeRevokeSigsRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.revoke.revokeSigs', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const signupCheckInvitationCodeRpcPromise = (params: SignupCheckInvitationCodeRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.signup.checkInvitationCode', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const signupCheckUsernameAvailableRpcPromise = (params: SignupCheckUsernameAvailableRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.signup.checkUsernameAvailable', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const signupGetInvitationCodeRpcPromise = (params: SignupGetInvitationCodeRpcParam, waitingKey?: string): Promise<SignupGetInvitationCodeResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.signup.getInvitationCode', params, callback: (error: RPCError, result: SignupGetInvitationCodeResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const signupInviteRequestRpcPromise = (params: SignupInviteRequestRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.signup.inviteRequest', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const signupSignupRpcSaga = (p: {params: SignupSignupRpcParam, incomingCallMap: IncomingCallMapType, waitingKey?: string}) => Saga.call(engineSaga, {method: 'keybase.1.signup.signup', params: p.params, incomingCallMap: p.incomingCallMap, waitingKey: p.waitingKey})
export const teamsCanUserPerformRpcPromise = (params: TeamsCanUserPerformRpcParam, waitingKey?: string): Promise<TeamsCanUserPerformResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.teams.canUserPerform', params, callback: (error: RPCError, result: TeamsCanUserPerformResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const teamsGetTarsDisabledRpcPromise = (params: TeamsGetTarsDisabledRpcParam, waitingKey?: string): Promise<TeamsGetTarsDisabledResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.teams.getTarsDisabled', params, callback: (error: RPCError, result: TeamsGetTarsDisabledResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const teamsGetTeamAndMemberShowcaseRpcPromise = (params: TeamsGetTeamAndMemberShowcaseRpcParam, waitingKey?: string): Promise<TeamsGetTeamAndMemberShowcaseResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.teams.getTeamAndMemberShowcase', params, callback: (error: RPCError, result: TeamsGetTeamAndMemberShowcaseResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const teamsSetTarsDisabledRpcPromise = (params: TeamsSetTarsDisabledRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.teams.setTarsDisabled', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const teamsSetTeamMemberShowcaseRpcPromise = (params: TeamsSetTeamMemberShowcaseRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.teams.setTeamMemberShowcase', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const teamsSetTeamShowcaseRpcPromise = (params: TeamsSetTeamShowcaseRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.teams.setTeamShowcase', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const teamsTeamAcceptInviteOrRequestAccessRpcPromise = (params: TeamsTeamAcceptInviteOrRequestAccessRpcParam, waitingKey?: string): Promise<TeamsTeamAcceptInviteOrRequestAccessResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.teams.teamAcceptInviteOrRequestAccess', params, callback: (error: RPCError, result: TeamsTeamAcceptInviteOrRequestAccessResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const teamsTeamAddEmailsBulkRpcPromise = (params: TeamsTeamAddEmailsBulkRpcParam, waitingKey?: string): Promise<TeamsTeamAddEmailsBulkResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.teams.teamAddEmailsBulk', params, callback: (error: RPCError, result: TeamsTeamAddEmailsBulkResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const teamsTeamAddMemberRpcPromise = (params: TeamsTeamAddMemberRpcParam, waitingKey?: string): Promise<TeamsTeamAddMemberResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.teams.teamAddMember', params, callback: (error: RPCError, result: TeamsTeamAddMemberResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const teamsTeamCreateRpcPromise = (params: TeamsTeamCreateRpcParam, waitingKey?: string): Promise<TeamsTeamCreateResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.teams.teamCreate', params, callback: (error: RPCError, result: TeamsTeamCreateResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const teamsTeamCreateSeitanTokenV2RpcPromise = (params: TeamsTeamCreateSeitanTokenV2RpcParam, waitingKey?: string): Promise<TeamsTeamCreateSeitanTokenV2Result> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.teams.teamCreateSeitanTokenV2', params, callback: (error: RPCError, result: TeamsTeamCreateSeitanTokenV2Result) => (error ? reject(error) : resolve(result)), waitingKey}))
export const teamsTeamEditMemberRpcPromise = (params: TeamsTeamEditMemberRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.teams.teamEditMember', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const teamsTeamGetRpcPromise = (params: TeamsTeamGetRpcParam, waitingKey?: string): Promise<TeamsTeamGetResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.teams.teamGet', params, callback: (error: RPCError, result: TeamsTeamGetResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const teamsTeamIgnoreRequestRpcPromise = (params: TeamsTeamIgnoreRequestRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.teams.teamIgnoreRequest', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const teamsTeamLeaveRpcPromise = (params: TeamsTeamLeaveRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.teams.teamLeave', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const teamsTeamListMyAccessRequestsRpcPromise = (params: TeamsTeamListMyAccessRequestsRpcParam, waitingKey?: string): Promise<TeamsTeamListMyAccessRequestsResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.teams.teamListMyAccessRequests', params, callback: (error: RPCError, result: TeamsTeamListMyAccessRequestsResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const teamsTeamListRequestsRpcPromise = (params: TeamsTeamListRequestsRpcParam, waitingKey?: string): Promise<TeamsTeamListRequestsResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.teams.teamListRequests', params, callback: (error: RPCError, result: TeamsTeamListRequestsResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const teamsTeamListUnverifiedRpcPromise = (params: TeamsTeamListUnverifiedRpcParam, waitingKey?: string): Promise<TeamsTeamListUnverifiedResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.teams.teamListUnverified', params, callback: (error: RPCError, result: TeamsTeamListUnverifiedResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const teamsTeamReAddMemberAfterResetRpcPromise = (params: TeamsTeamReAddMemberAfterResetRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.teams.teamReAddMemberAfterReset', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const teamsTeamRemoveMemberRpcPromise = (params: TeamsTeamRemoveMemberRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.teams.teamRemoveMember', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const teamsTeamSetSettingsRpcPromise = (params: TeamsTeamSetSettingsRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.teams.teamSetSettings', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const teamsTeamTreeRpcPromise = (params: TeamsTeamTreeRpcParam, waitingKey?: string): Promise<TeamsTeamTreeResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.teams.teamTree', params, callback: (error: RPCError, result: TeamsTeamTreeResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const trackCheckTrackingRpcPromise = (params: TrackCheckTrackingRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.track.checkTracking', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const trackDismissWithTokenRpcPromise = (params: TrackDismissWithTokenRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.track.dismissWithToken', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const trackTrackWithTokenRpcPromise = (params: TrackTrackWithTokenRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.track.trackWithToken', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const trackUntrackRpcPromise = (params: TrackUntrackRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.track.untrack', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export const userInterestingPeopleRpcPromise = (params: UserInterestingPeopleRpcParam, waitingKey?: string): Promise<UserInterestingPeopleResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.user.interestingPeople', params, callback: (error: RPCError, result: UserInterestingPeopleResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const userListTrackers2RpcPromise = (params: UserListTrackers2RpcParam, waitingKey?: string): Promise<UserListTrackers2Result> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.user.listTrackers2', params, callback: (error: RPCError, result: UserListTrackers2Result) => (error ? reject(error) : resolve(result)), waitingKey}))
export const userLoadMySettingsRpcPromise = (params: UserLoadMySettingsRpcParam, waitingKey?: string): Promise<UserLoadMySettingsResult> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.user.loadMySettings', params, callback: (error: RPCError, result: UserLoadMySettingsResult) => (error ? reject(error) : resolve(result)), waitingKey}))
export const userProfileEditRpcPromise = (params: UserProfileEditRpcParam, waitingKey?: string): Promise<void> => new Promise((resolve, reject) => engine()._rpcOutgoing({method: 'keybase.1.user.profileEdit', params, callback: (error: RPCError, result: void) => (error ? reject(error) : resolve()), waitingKey}))
export type APIRes = $ReadOnly<{status: String, body: String, httpStatus: Int, appStatus: String}>
export type AccountEmailChangeRpcParam = $ReadOnly<{newEmail: String}>
export type AccountHasServerKeysRpcParam = void
export type AccountPassphraseChangeRpcParam = $ReadOnly<{oldPassphrase: String, passphrase: String, force: Boolean}>
export type AccountPassphrasePromptRpcParam = $ReadOnly<{guiArg: GUIEntryArg}>
export type AccountResetAccountRpcParam = $ReadOnly<{passphrase: String}>
export type AnnotatedMemberInfo = $ReadOnly<{userID: UID, teamID: TeamID, username: String, fullName: String, fqName: String, isImplicitTeam: Boolean, isOpenTeam: Boolean, role: TeamRole, implicit?: ?ImplicitRole, needsPUK: Boolean, memberCount: Int, eldestSeqno: Seqno, allowProfilePromote: Boolean, isMemberShowcased: Boolean, status: TeamMemberStatus}>
export type AnnotatedTeamInvite = $ReadOnly<{role: TeamRole, id: TeamInviteID, type: TeamInviteType, name: TeamInviteName, uv: UserVersion, inviter: UserVersion, inviterUsername: String, teamName: String, status: TeamMemberStatus}>
export type AnnotatedTeamList = $ReadOnly<{teams?: ?Array<AnnotatedMemberInfo>, annotatedActiveInvites: {[key: string]: AnnotatedTeamInvite}}>
export type ApiserverDeleteRpcParam = $ReadOnly<{endpoint: String, args?: ?Array<StringKVPair>, httpStatus?: ?Array<Int>, appStatusCode?: ?Array<Int>}>
export type ApiserverGetRpcParam = $ReadOnly<{endpoint: String, args?: ?Array<StringKVPair>, httpStatus?: ?Array<Int>, appStatusCode?: ?Array<Int>}>
export type ApiserverGetWithSessionRpcParam = $ReadOnly<{endpoint: String, args?: ?Array<StringKVPair>, httpStatus?: ?Array<Int>, appStatusCode?: ?Array<Int>}>
export type ApiserverPostJSONRpcParam = $ReadOnly<{endpoint: String, args?: ?Array<StringKVPair>, JSONPayload?: ?Array<StringKVPair>, httpStatus?: ?Array<Int>, appStatusCode?: ?Array<Int>}>
export type ApiserverPostRpcParam = $ReadOnly<{endpoint: String, args?: ?Array<StringKVPair>, httpStatus?: ?Array<Int>, appStatusCode?: ?Array<Int>}>
export type AppState =
  | 0 // FOREGROUND_0
  | 1 // BACKGROUND_1
  | 2 // INACTIVE_2
  | 3 // BACKGROUNDACTIVE_3
  | 4 // BACKGROUNDFINAL_4

export type AppStateUpdateAppStateRpcParam = $ReadOnly<{state: AppState}>
export type AsyncOps =
  | 0 // LIST_0
  | 1 // LIST_RECURSIVE_1
  | 2 // READ_2
  | 3 // WRITE_3
  | 4 // COPY_4
  | 5 // MOVE_5
  | 6 // REMOVE_6
  | 7 // LIST_RECURSIVE_TO_DEPTH_7

export type AvatarClearCacheMsg = $ReadOnly<{name: String, formats?: ?Array<AvatarFormat>}>
export type AvatarFormat = String
export type AvatarUrl = String
export type AvatarsLoadTeamAvatarsRpcParam = $ReadOnly<{names?: ?Array<String>, formats?: ?Array<AvatarFormat>}>
export type AvatarsLoadUserAvatarsRpcParam = $ReadOnly<{names?: ?Array<String>, formats?: ?Array<AvatarFormat>}>
export type BTCRegisterBTCRpcParam = $ReadOnly<{address: String, force: Boolean}>
export type BadgeConversationInfo = $ReadOnly<{convID: ChatConversationID, badgeCounts: {[key: string]: Int}, unreadMessages: Int}>
export type BadgeState = $ReadOnly<{newTlfs: Int, rekeysNeeded: Int, newFollowers: Int, inboxVers: Int, homeTodoItems: Int, conversations?: ?Array<BadgeConversationInfo>, newGitRepoGlobalUniqueIDs?: ?Array<String>, newTeamNames?: ?Array<String>, newTeamAccessRequests?: ?Array<String>, teamsWithResetUsers?: ?Array<TeamMemberOutReset>}>
export type BadgerGetBadgeStateRpcParam = void
export type BinaryKID = Bytes
export type BlockAddReferenceRpcParam = $ReadOnly<{folder: String, ref: BlockReference}>
export type BlockArchiveReferenceRpcParam = $ReadOnly<{folder: String, refs?: ?Array<BlockReference>}>
export type BlockArchiveReferenceWithCountRpcParam = $ReadOnly<{folder: String, refs?: ?Array<BlockReference>}>
export type BlockAuthenticateSessionRpcParam = $ReadOnly<{signature: String}>
export type BlockBlockPingRpcParam = void
export type BlockDelReferenceRpcParam = $ReadOnly<{folder: String, ref: BlockReference}>
export type BlockDelReferenceWithCountRpcParam = $ReadOnly<{folder: String, refs?: ?Array<BlockReference>}>
export type BlockGetBlockRpcParam = $ReadOnly<{bid: BlockIdCombo, folder: String}>
export type BlockGetSessionChallengeRpcParam = void
export type BlockGetTeamQuotaInfoRpcParam = $ReadOnly<{tid: TeamID}>
export type BlockGetUserQuotaInfoRpcParam = void
export type BlockIdCombo = $ReadOnly<{blockHash: String, chargedTo: UserOrTeamID, blockType: BlockType}>
export type BlockPingResponse = $ReadOnly<{}>
export type BlockPutBlockAgainRpcParam = $ReadOnly<{folder: String, ref: BlockReference, blockKey: String, buf: Bytes}>
export type BlockPutBlockRpcParam = $ReadOnly<{bid: BlockIdCombo, folder: String, blockKey: String, buf: Bytes}>
export type BlockRefNonce = any
export type BlockReference = $ReadOnly<{bid: BlockIdCombo, nonce: BlockRefNonce, chargedTo: UserOrTeamID}>
export type BlockReferenceCount = $ReadOnly<{ref: BlockReference, liveCount: Int}>
export type BlockType =
  | 0 // DATA_0
  | 1 // MD_1
  | 2 // GIT_2

export type BootstrapStatus = $ReadOnly<{registered: Boolean, loggedIn: Boolean, uid: UID, username: String, deviceID: DeviceID, deviceName: String, following?: ?Array<String>, followers?: ?Array<String>}>
export type BoxNonce = any
export type BoxPublicKey = any
export type BulkRes = $ReadOnly<{invited?: ?Array<String>, alreadyInvited?: ?Array<String>, malformed?: ?Array<String>}>
export type Bytes32 = any
export type CanonicalTLFNameAndIDWithBreaks = $ReadOnly<{tlfID: TLFID, CanonicalName: CanonicalTlfName, breaks: TLFBreak}>
export type CanonicalTlfName = String
export type ChallengeInfo = $ReadOnly<{now: Long, challenge: String}>
export type ChatConversationID = Bytes
export type CheckProofStatus = $ReadOnly<{found: Boolean, status: ProofStatus, proofText: String, state: ProofState}>
export type CheckResult = $ReadOnly<{proofResult: ProofResult, time: Time, freshness: CheckResultFreshness}>
export type CheckResultFreshness =
  | 0 // FRESH_0
  | 1 // AGED_1
  | 2 // RANCID_2

export type ChooseType =
  | 0 // EXISTING_DEVICE_0
  | 1 // NEW_DEVICE_1

export type CiphertextBundle = $ReadOnly<{kid: KID, ciphertext: EncryptedBytes32, nonce: BoxNonce, publicKey: BoxPublicKey}>
export type ClientDetails = $ReadOnly<{pid: Int, clientType: ClientType, argv?: ?Array<String>, desc: String, version: String}>
export type ClientType =
  | 0 // NONE_0
  | 1 // CLI_1
  | 2 // GUI_MAIN_2
  | 3 // KBFS_3
  | 4 // GUI_HELPER_4

export type CompatibilityTeamID = {typ: 1, legacy: ?TLFID} | {typ: 2, modern: ?TeamID}
export type ComponentResult = $ReadOnly<{name: String, status: Status, exitCode: Int}>
export type Config = $ReadOnly<{serverURI: String, socketFile: String, label: String, runMode: String, gpgExists: Boolean, gpgPath: String, version: String, path: String, binaryRealpath: String, configPath: String, versionShort: String, versionFull: String, isAutoForked: Boolean, forkType: ForkType}>
export type ConfigCheckAPIServerOutOfDateWarningRpcParam = void
export type ConfigClearValueRpcParam = $ReadOnly<{path: String}>
export type ConfigGetBootstrapStatusRpcParam = void
export type ConfigGetConfigRpcParam = void
export type ConfigGetCurrentStatusRpcParam = void
export type ConfigGetExtendedStatusRpcParam = void
export type ConfigGetRememberPassphraseRpcParam = void
export type ConfigGetValueRpcParam = $ReadOnly<{path: String}>
export type ConfigHelloIAmRpcParam = $ReadOnly<{details: ClientDetails}>
export type ConfigSetPathRpcParam = $ReadOnly<{path: String}>
export type ConfigSetRememberPassphraseRpcParam = $ReadOnly<{remember: Boolean}>
export type ConfigSetUserConfigRpcParam = $ReadOnly<{username: String, key: String, value: String}>
export type ConfigSetValueRpcParam = $ReadOnly<{path: String, value: ConfigValue}>
export type ConfigValue = $ReadOnly<{isNull: Boolean, b?: ?Boolean, i?: ?Int, s?: ?String, o?: ?String}>
export type ConfigWaitForClientRpcParam = $ReadOnly<{clientType: ClientType, timeout: DurationSec}>
export type ConfiguredAccount = $ReadOnly<{username: String, hasStoredSecret: Boolean}>
export type ConfirmResult = $ReadOnly<{identityConfirmed: Boolean, remoteConfirmed: Boolean, expiringLocal: Boolean, autoConfirmed: Boolean}>
export type ConflictGeneration = Int
export type CopyArgs = $ReadOnly<{opID: OpID, src: Path, dest: Path}>
export type CryptKey = $ReadOnly<{KeyGeneration: Int, Key: Bytes32}>
export type CryptoSignED25519ForKBFSRpcParam = $ReadOnly<{msg: Bytes, reason: String}>
export type CryptoSignED25519RpcParam = $ReadOnly<{msg: Bytes, reason: String}>
export type CryptoSignToStringRpcParam = $ReadOnly<{msg: Bytes, reason: String}>
export type CryptoUnboxBytes32AnyRpcParam = $ReadOnly<{bundles?: ?Array<CiphertextBundle>, reason: String, promptPaper: Boolean}>
export type CryptoUnboxBytes32RpcParam = $ReadOnly<{encryptedBytes32: EncryptedBytes32, nonce: BoxNonce, peersPublicKey: BoxPublicKey, reason: String}>
export type Cryptocurrency = $ReadOnly<{rowId: Int, pkhash: Bytes, address: String, sigID: SigID, type: String, family: String}>
export type CryptocurrencyRegisterAddressRpcParam = $ReadOnly<{address: String, force: Boolean, wantedFamily: String, sigVersion?: ?SigVersion}>
export type CsrfToken = String
export type CtlAppExitRpcParam = void
export type CtlDbDeleteRpcParam = $ReadOnly<{key: DbKey}>
export type CtlDbGetRpcParam = $ReadOnly<{key: DbKey}>
export type CtlDbNukeRpcParam = void
export type CtlDbPutRpcParam = $ReadOnly<{key: DbKey, value: DbValue}>
export type CtlLogRotateRpcParam = void
export type CtlReloadRpcParam = void
export type CtlStopRpcParam = $ReadOnly<{exitCode: ExitCode}>
export type DbKey = $ReadOnly<{dbType: DbType, objType: Int, key: String}>
export type DbType =
  | 0 // MAIN_0
  | 1 // CHAT_1

export type DbValue = Bytes
export type DebuggingFirstStepRpcParam = $ReadOnly<{val: Int}>
export type DebuggingIncrementRpcParam = $ReadOnly<{val: Int}>
export type DebuggingScriptRpcParam = $ReadOnly<{script: String, args?: ?Array<String>}>
export type DebuggingSecondStepRpcParam = $ReadOnly<{val: Int}>
export type DelegateUiCtlRegisterGregorFirehoseFilteredRpcParam = $ReadOnly<{systems?: ?Array<String>}>
export type DelegateUiCtlRegisterGregorFirehoseRpcParam = void
export type DelegateUiCtlRegisterHomeUIRpcParam = void
export type DelegateUiCtlRegisterIdentifyUIRpcParam = void
export type DelegateUiCtlRegisterRekeyUIRpcParam = void
export type DelegateUiCtlRegisterSecretUIRpcParam = void
export type DelegateUiCtlRegisterUpdateUIRpcParam = void
export type Device = $ReadOnly<{type: String, name: String, deviceID: DeviceID, cTime: Time, mTime: Time, lastUsedTime: Time, encryptKey: KID, verifyKey: KID, status: Int}>
export type DeviceCheckDeviceNameForUserRpcParam = $ReadOnly<{username: String, devicename: String}>
export type DeviceCheckDeviceNameFormatRpcParam = $ReadOnly<{name: String}>
export type DeviceDetail = $ReadOnly<{device: Device, eldest: Boolean, provisioner?: ?Device, provisionedAt?: ?Time, revokedAt?: ?Time, revokedBy: KID, revokedByDevice?: ?Device, currentDevice: Boolean}>
export type DeviceDeviceAddRpcParam = void
export type DeviceDeviceHistoryListRpcParam = void
export type DeviceDeviceListRpcParam = void
export type DeviceEk = $ReadOnly<{seed: Bytes32, metadata: DeviceEkMetadata}>
export type DeviceEkMetadata = $ReadOnly<{kid: KID, hashMeta: HashMeta, generation: EkGeneration, ctime: Time, deviceCtime: Time}>
export type DeviceEkStatement = $ReadOnly<{currentDeviceEkMetadata: DeviceEkMetadata}>
export type DeviceID = String
export type DeviceType =
  | 0 // DESKTOP_0
  | 1 // MOBILE_1

export type Dirent = $ReadOnly<{time: Time, size: Int, name: String, direntType: DirentType, lastWriterUnverified: User, writable: Boolean}>
export type DirentType =
  | 0 // FILE_0
  | 1 // DIR_1
  | 2 // SYM_2
  | 3 // EXEC_3

export type DismissReason = $ReadOnly<{type: DismissReasonType, reason: String, resource: String}>
export type DismissReasonType =
  | 0 // NONE_0
  | 1 // HANDLED_ELSEWHERE_1

export type DowngradeReferenceRes = $ReadOnly<{completed?: ?Array<BlockReferenceCount>, failed: BlockReference}>
export type DurationSec = Double
export type ED25519PublicKey = any
export type ED25519Signature = any
export type ED25519SignatureInfo = $ReadOnly<{sig: ED25519Signature, publicKey: ED25519PublicKey}>
export type EkGeneration = Int64
export type Email = $ReadOnly<{email: String, isVerified: Boolean}>
export type EncryptedBytes32 = any
export type EncryptedGitMetadata = $ReadOnly<{v: Int, e: Bytes, n: BoxNonce, gen: PerTeamKeyGeneration}>
export type ErrorNum = Int
export type ExitCode =
  | 0 // OK_0
  | 2 // NOTOK_2
  | 4 // RESTART_4

export type ExtendedStatus = $ReadOnly<{standalone: Boolean, passphraseStreamCached: Boolean, tsecCached: Boolean, deviceSigKeyCached: Boolean, deviceEncKeyCached: Boolean, paperSigKeyCached: Boolean, paperEncKeyCached: Boolean, storedSecret: Boolean, secretPromptSkip: Boolean, rememberPassphrase: Boolean, device?: ?Device, deviceErr?: ?LoadDeviceErr, logDir: String, session?: ?SessionStatus, defaultUsername: String, provisionedUsernames?: ?Array<String>, Clients?: ?Array<ClientDetails>, deviceEkNames?: ?Array<String>, platformInfo: PlatformInfo, defaultDeviceID: DeviceID}>
export type FSEditListRequest = $ReadOnly<{folder: Folder, requestID: Int}>
export type FSErrorType =
  | 0 // ACCESS_DENIED_0
  | 1 // USER_NOT_FOUND_1
  | 2 // REVOKED_DATA_DETECTED_2
  | 3 // NOT_LOGGED_IN_3
  | 4 // TIMEOUT_4
  | 5 // REKEY_NEEDED_5
  | 6 // BAD_FOLDER_6
  | 7 // NOT_IMPLEMENTED_7
  | 8 // OLD_VERSION_8
  | 9 // OVER_QUOTA_9
  | 10 // NO_SIG_CHAIN_10
  | 11 // TOO_MANY_FOLDERS_11
  | 12 // EXDEV_NOT_SUPPORTED_12
  | 13 // DISK_LIMIT_REACHED_13
  | 14 // DISK_CACHE_ERROR_LOG_SEND_14

export type FSFolderEditHistory = $ReadOnly<{folder: Folder, serverTime: Time, history?: ?Array<FSFolderWriterEditHistory>}>
export type FSFolderWriterEdit = $ReadOnly<{filename: String, notificationType: FSNotificationType, serverTime: Time}>
export type FSFolderWriterEditHistory = $ReadOnly<{writerName: String, edits?: ?Array<FSFolderWriterEdit>}>
export type FSNotification = $ReadOnly<{filename: String, status: String, statusCode: FSStatusCode, notificationType: FSNotificationType, errorType: FSErrorType, params: {[key: string]: String}, writerUid: UID, localTime: Time, folderType: FolderType}>
export type FSNotificationType =
  | 0 // ENCRYPTING_0
  | 1 // DECRYPTING_1
  | 2 // SIGNING_2
  | 3 // VERIFYING_3
  | 4 // REKEYING_4
  | 5 // CONNECTION_5
  | 6 // MD_READ_SUCCESS_6
  | 7 // FILE_CREATED_7
  | 8 // FILE_MODIFIED_8
  | 9 // FILE_DELETED_9
  | 10 // FILE_RENAMED_10
  | 11 // INITIALIZED_11

export type FSPathSyncStatus = $ReadOnly<{folderType: FolderType, path: String, syncingBytes: Int64, syncingOps: Int64, syncedBytes: Int64}>
export type FSStatusCode =
  | 0 // START_0
  | 1 // FINISH_1
  | 2 // ERROR_2

export type FSSyncStatus = $ReadOnly<{totalSyncingBytes: Int64, syncingPaths?: ?Array<String>, endEstimate?: ?Time}>
export type FSSyncStatusRequest = $ReadOnly<{requestID: Int}>
export type FavoriteFavoriteAddRpcParam = $ReadOnly<{folder: Folder}>
export type FavoriteFavoriteIgnoreRpcParam = $ReadOnly<{folder: Folder}>
export type FavoriteGetFavoritesRpcParam = void
export type FavoritesResult = $ReadOnly<{favoriteFolders?: ?Array<Folder>, ignoredFolders?: ?Array<Folder>, newFolders?: ?Array<Folder>}>
export type Feature = $ReadOnly<{allow: Boolean, defaultValue: Boolean, readonly: Boolean, label: String}>
export type File = $ReadOnly<{path: String}>
export type FileContent = $ReadOnly<{data: Bytes, progress: Progress}>
export type FileDescriptor = $ReadOnly<{name: String, type: FileType}>
export type FileType =
  | 0 // UNKNOWN_0
  | 1 // DIRECTORY_1
  | 2 // FILE_2

export type FindNextMDResponse = $ReadOnly<{kbfsRoot: MerkleRoot, merkleNodes?: ?Array<Bytes>, rootSeqno: Seqno, rootHash: HashMeta}>
export type FirstStepResult = $ReadOnly<{valPlusTwo: Int}>
export type Folder = $ReadOnly<{name: String, private: Boolean, notificationsOn: Boolean, created: Boolean, folderType: FolderType}>
export type FolderType =
  | 0 // UNKNOWN_0
  | 1 // PRIVATE_1
  | 2 // PUBLIC_2
  | 3 // TEAM_3

export type ForkType =
  | 0 // NONE_0
  | 1 // AUTO_1
  | 2 // WATCHDOG_2
  | 3 // LAUNCHD_3
  | 4 // SYSTEMD_4

export type FsListRpcParam = $ReadOnly<{path: String}>
export type FullName = String
export type FullNamePackage = $ReadOnly<{version: FullNamePackageVersion, fullName: FullName, eldestSeqno: Seqno, status: StatusCode, cachedAt: Time}>
export type FullNamePackageVersion =
  | 0 // V0_0
  | 1 // V1_1
  | 2 // V2_2

export type FuseMountInfo = $ReadOnly<{path: String, fstype: String, output: String}>
export type FuseStatus = $ReadOnly<{version: String, bundleVersion: String, kextID: String, path: String, kextStarted: Boolean, installStatus: InstallStatus, installAction: InstallAction, mountInfos?: ?Array<FuseMountInfo>, status: Status}>
export type GPGKey = $ReadOnly<{algorithm: String, keyID: String, creation: String, expiration: String, identities?: ?Array<PGPIdentity>}>
export type GPGMethod =
  | 0 // GPG_NONE_0
  | 1 // GPG_IMPORT_1
  | 2 // GPG_SIGN_2

export type GUIEntryArg = $ReadOnly<{windowTitle: String, prompt: String, username: String, submitLabel: String, cancelLabel: String, retryLabel: String, type: PassphraseType, features: GUIEntryFeatures}>
export type GUIEntryFeatures = $ReadOnly<{showTyping: Feature}>
export type GcOptions = $ReadOnly<{maxLooseRefs: Int, pruneMinLooseObjects: Int, pruneExpireTime: Time}>
export type GetBlockRes = $ReadOnly<{blockKey: String, buf: Bytes}>
export type GetCurrentStatusRes = $ReadOnly<{configured: Boolean, registered: Boolean, loggedIn: Boolean, sessionIsValid: Boolean, user?: ?User}>
export type GetPassphraseRes = $ReadOnly<{passphrase: String, storeSecret: Boolean}>
export type GetTLFCryptKeysRes = $ReadOnly<{nameIDBreaks: CanonicalTLFNameAndIDWithBreaks, CryptKeys?: ?Array<CryptKey>}>
export type GitCommit = $ReadOnly<{commitHash: String, message: String, authorName: String, authorEmail: String, ctime: Time}>
export type GitCreatePersonalRepoRpcParam = $ReadOnly<{repoName: GitRepoName}>
export type GitCreateTeamRepoRpcParam = $ReadOnly<{repoName: GitRepoName, teamName: TeamName, notifyTeam: Boolean}>
export type GitDeleteGitMetadataRpcParam = $ReadOnly<{folder: Folder, repoName: GitRepoName}>
export type GitDeletePersonalRepoRpcParam = $ReadOnly<{repoName: GitRepoName}>
export type GitDeleteTeamRepoRpcParam = $ReadOnly<{repoName: GitRepoName, teamName: TeamName, notifyTeam: Boolean}>
export type GitGcPersonalRepoRpcParam = $ReadOnly<{repoName: GitRepoName, force: Boolean}>
export type GitGcTeamRepoRpcParam = $ReadOnly<{repoName: GitRepoName, teamName: TeamName, force: Boolean}>
export type GitGetAllGitMetadataRpcParam = void
export type GitGetGitMetadataRpcParam = $ReadOnly<{folder: Folder}>
export type GitGetTeamRepoSettingsRpcParam = $ReadOnly<{folder: Folder, repoID: RepoID}>
export type GitLocalMetadata = $ReadOnly<{repoName: GitRepoName, refs?: ?Array<GitRefMetadata>, pushType: GitPushType, previousRepoName: GitRepoName}>
export type GitLocalMetadataV1 = $ReadOnly<{repoName: GitRepoName}>
export type GitLocalMetadataVersion = 1 // V1_1

export type GitLocalMetadataVersioned = {version: 1, v1: ?GitLocalMetadataV1}
export type GitPushType =
  | 0 // DEFAULT_0
  | 1 // CREATEREPO_1
  | 3 // RENAMEREPO_3

export type GitPutGitMetadataRpcParam = $ReadOnly<{folder: Folder, repoID: RepoID, metadata: GitLocalMetadata, notifyTeam: Boolean}>
export type GitRefMetadata = $ReadOnly<{refName: String, commits?: ?Array<GitCommit>, moreCommitsAvailable: Boolean, isDelete: Boolean}>
export type GitRepoInfo = $ReadOnly<{folder: Folder, repoID: RepoID, localMetadata: GitLocalMetadata, serverMetadata: GitServerMetadata, repoUrl: String, globalUniqueID: String, canDelete: Boolean, teamRepoSettings?: ?GitTeamRepoSettings}>
export type GitRepoName = String
export type GitRepoResult = {state: 0, err: ?String} | {state: 1, ok: ?GitRepoInfo}
export type GitRepoResultState =
  | 0 // ERR_0
  | 1 // OK_1

export type GitServerMetadata = $ReadOnly<{ctime: Time, mtime: Time, lastModifyingUsername: String, lastModifyingDeviceID: DeviceID, lastModifyingDeviceName: String}>
export type GitSetTeamRepoSettingsRpcParam = $ReadOnly<{folder: Folder, repoID: RepoID, channelName?: ?String, chatDisabled: Boolean}>
export type GitTeamRepoSettings = $ReadOnly<{channelName?: ?String, chatDisabled: Boolean}>
export type GpgUiConfirmDuplicateKeyChosenRpcParam = void
export type GpgUiConfirmImportSecretToExistingKeyRpcParam = void
export type GpgUiGetTTYRpcParam = void
export type GpgUiSelectKeyAndPushOptionRpcParam = $ReadOnly<{keys?: ?Array<GPGKey>}>
export type GpgUiSelectKeyRpcParam = $ReadOnly<{keys?: ?Array<GPGKey>}>
export type GpgUiSignRpcParam = $ReadOnly<{msg: Bytes, fingerprint: Bytes}>
export type GpgUiWantToAddGPGKeyRpcParam = void
export type GregorDismissCategoryRpcParam = $ReadOnly<{category: Gregor1.Category}>
export type GregorDismissItemRpcParam = $ReadOnly<{id: Gregor1.MsgID}>
export type GregorGetStateRpcParam = void
export type GregorInjectItemRpcParam = $ReadOnly<{cat: String, body: String, dtime: Gregor1.TimeOrOffset}>
export type GregorUIPushOutOfBandMessagesRpcParam = $ReadOnly<{oobm?: ?Array<Gregor1.OutOfBandMessage>}>
export type GregorUIPushStateRpcParam = $ReadOnly<{state: Gregor1.State, reason: PushReason}>
export type GregorUpdateCategoryRpcParam = $ReadOnly<{category: String, body: String, dtime: Gregor1.TimeOrOffset}>
export type GregorUpdateItemRpcParam = $ReadOnly<{msgID: Gregor1.MsgID, cat: String, body: String, dtime: Gregor1.TimeOrOffset}>
export type HasServerKeysRes = $ReadOnly<{hasServerKeys: Boolean}>
export type HashMeta = Bytes
export type Hello2Res = $ReadOnly<{encryptionKey: KID, sigPayload: HelloRes, deviceEkKID: KID}>
export type HelloRes = String
export type HomeHomeActionTakenRpcParam = void
export type HomeHomeGetScreenRpcParam = $ReadOnly<{markViewed: Boolean, numFollowSuggestionsWanted: Int}>
export type HomeHomeMarkViewedRpcParam = void
export type HomeHomeSkipTodoTypeRpcParam = $ReadOnly<{t: HomeScreenTodoType}>
export type HomeScreen = $ReadOnly<{lastViewed: Time, version: Int, visits: Int, items?: ?Array<HomeScreenItem>, followSuggestions?: ?Array<HomeUserSummary>}>
export type HomeScreenItem = $ReadOnly<{badged: Boolean, data: HomeScreenItemData}>
export type HomeScreenItemData = {t: 1, todo: ?HomeScreenTodo} | {t: 2, people: ?HomeScreenPeopleNotification}
export type HomeScreenItemID = String
export type HomeScreenItemType =
  | 1 // TODO_1
  | 2 // PEOPLE_2

export type HomeScreenPeopleNotification = {t: 1, followed: ?HomeScreenPeopleNotificationFollowed} | {t: 2, followedMulti: ?HomeScreenPeopleNotificationFollowedMulti}
export type HomeScreenPeopleNotificationFollowed = $ReadOnly<{followTime: Time, followedBack: Boolean, user: UserSummary}>
export type HomeScreenPeopleNotificationFollowedMulti = $ReadOnly<{followers?: ?Array<HomeScreenPeopleNotificationFollowed>, numOthers: Int}>
export type HomeScreenPeopleNotificationType =
  | 1 // FOLLOWED_1
  | 2 // FOLLOWED_MULTI_2

export type HomeScreenTodo = {t: any}
export type HomeScreenTodoType =
  | 0 // NONE_0
  | 1 // BIO_1
  | 2 // PROOF_2
  | 3 // DEVICE_3
  | 4 // FOLLOW_4
  | 5 // CHAT_5
  | 6 // PAPERKEY_6
  | 7 // TEAM_7
  | 8 // FOLDER_8
  | 9 // GIT_REPO_9
  | 10 // TEAM_SHOWCASE_10

export type HomeUIHomeUIRefreshRpcParam = void
export type HomeUserSummary = $ReadOnly<{uid: UID, username: String, bio: String, fullName: String, pics?: ?Pics}>
export type Identify2Res = $ReadOnly<{upk: UserPlusKeys, identifiedAt: Time, trackBreaks?: ?IdentifyTrackBreaks}>
export type IdentifyIdentify2RpcParam = $ReadOnly<{uid: UID, userAssertion: String, reason: IdentifyReason, useDelegateUI?: Boolean, alwaysBlock?: Boolean, noErrorOnTrackFailure?: Boolean, forceRemoteCheck?: Boolean, needProofSet?: Boolean, allowEmptySelfID?: Boolean, noSkipSelf?: Boolean, canSuppressUI?: Boolean, identifyBehavior?: TLFIdentifyBehavior, forceDisplay?: Boolean}>
export type IdentifyIdentifyLiteRpcParam = $ReadOnly<{id: UserOrTeamID, assertion: String, reason: IdentifyReason, useDelegateUI?: Boolean, alwaysBlock?: Boolean, noErrorOnTrackFailure?: Boolean, forceRemoteCheck?: Boolean, needProofSet?: Boolean, allowEmptySelfID?: Boolean, noSkipSelf?: Boolean, canSuppressUI?: Boolean, identifyBehavior?: TLFIdentifyBehavior, forceDisplay?: Boolean}>
export type IdentifyKey = $ReadOnly<{pgpFingerprint: Bytes, KID: KID, trackDiff?: ?TrackDiff, breaksTracking: Boolean}>
export type IdentifyLiteRes = $ReadOnly<{ul: UserOrTeamLite, trackBreaks?: ?IdentifyTrackBreaks}>
export type IdentifyOutcome = $ReadOnly<{username: String, status?: ?Status, warnings?: ?Array<String>, trackUsed?: ?TrackSummary, trackStatus: TrackStatus, numTrackFailures: Int, numTrackChanges: Int, numProofFailures: Int, numRevoked: Int, numProofSuccesses: Int, revoked?: ?Array<TrackDiff>, trackOptions: TrackOptions, forPGPPull: Boolean, reason: IdentifyReason}>
export type IdentifyProofBreak = $ReadOnly<{remoteProof: RemoteProof, lcr: LinkCheckResult}>
export type IdentifyReason = $ReadOnly<{type: IdentifyReasonType, reason: String, resource: String}>
export type IdentifyReasonType =
  | 0 // NONE_0
  | 1 // ID_1
  | 2 // TRACK_2
  | 3 // ENCRYPT_3
  | 4 // DECRYPT_4
  | 5 // VERIFY_5
  | 6 // RESOURCE_6
  | 7 // BACKGROUND_7

export type IdentifyResolve3RpcParam = $ReadOnly<{assertion: String}>
export type IdentifyResolveIdentifyImplicitTeamRpcParam = $ReadOnly<{assertions: String, suffix: String, isPublic: Boolean, doIdentifies: Boolean, create: Boolean, reason: IdentifyReason, identifyBehavior: TLFIdentifyBehavior}>
export type IdentifyResolveImplicitTeamRpcParam = $ReadOnly<{id: TeamID}>
export type IdentifyRow = $ReadOnly<{rowId: Int, proof: RemoteProof, trackDiff?: ?TrackDiff}>
export type IdentifyTrackBreaks = $ReadOnly<{keys?: ?Array<IdentifyKey>, proofs?: ?Array<IdentifyProofBreak>}>
export type IdentifyUiCancelRpcParam = void
export type IdentifyUiConfirmRpcParam = $ReadOnly<{outcome: IdentifyOutcome}>
export type IdentifyUiDelegateIdentifyUIRpcParam = void
export type IdentifyUiDismissRpcParam = $ReadOnly<{username: String, reason: DismissReason}>
export type IdentifyUiDisplayCryptocurrencyRpcParam = $ReadOnly<{c: Cryptocurrency}>
export type IdentifyUiDisplayKeyRpcParam = $ReadOnly<{key: IdentifyKey}>
export type IdentifyUiDisplayTLFCreateWithInviteRpcParam = $ReadOnly<{folderName: String, isPrivate: Boolean, assertion: String, socialAssertion: SocialAssertion, inviteLink: String, throttled: Boolean}>
export type IdentifyUiDisplayTrackStatementRpcParam = $ReadOnly<{stmt: String}>
export type IdentifyUiDisplayUserCardRpcParam = $ReadOnly<{card: UserCard}>
export type IdentifyUiFinishRpcParam = void
export type IdentifyUiFinishSocialProofCheckRpcParam = $ReadOnly<{rp: RemoteProof, lcr: LinkCheckResult}>
export type IdentifyUiFinishWebProofCheckRpcParam = $ReadOnly<{rp: RemoteProof, lcr: LinkCheckResult}>
export type IdentifyUiLaunchNetworkChecksRpcParam = $ReadOnly<{identity: Identity, user: User}>
export type IdentifyUiReportLastTrackRpcParam = $ReadOnly<{track?: ?TrackSummary}>
export type IdentifyUiReportTrackTokenRpcParam = $ReadOnly<{trackToken: TrackToken}>
export type IdentifyUiStartRpcParam = $ReadOnly<{username: String, reason: IdentifyReason, forceDisplay?: Boolean}>
export type Identity = $ReadOnly<{status?: ?Status, whenLastTracked: Time, proofs?: ?Array<IdentifyRow>, cryptocurrency?: ?Array<Cryptocurrency>, revoked?: ?Array<TrackDiff>, revokedDetails?: ?Array<RevokedProof>, breaksTracking: Boolean}>
export type ImageCropRect = $ReadOnly<{x0: Int, y0: Int, x1: Int, y1: Int}>
export type ImplicitRole = $ReadOnly<{role: TeamRole, ancestor: TeamID}>
export type ImplicitTeamConflictInfo = $ReadOnly<{generation: ConflictGeneration, time: Time}>
export type ImplicitTeamDisplayName = $ReadOnly<{isPublic: Boolean, writers: ImplicitTeamUserSet, readers: ImplicitTeamUserSet, conflictInfo?: ?ImplicitTeamConflictInfo}>
export type ImplicitTeamMigrationFinalizeMigrationRpcParam = $ReadOnly<{folder: Folder}>
export type ImplicitTeamMigrationStartMigrationRpcParam = $ReadOnly<{folder: Folder}>
export type ImplicitTeamUserSet = $ReadOnly<{keybaseUsers?: ?Array<String>, unresolvedUsers?: ?Array<SocialAssertion>}>
export type InstallAction =
  | 0 // UNKNOWN_0
  | 1 // NONE_1
  | 2 // UPGRADE_2
  | 3 // REINSTALL_3
  | 4 // INSTALL_4

export type InstallFuseStatusRpcParam = $ReadOnly<{bundleVersion: String}>
export type InstallInstallCommandLinePrivilegedRpcParam = void
export type InstallInstallFuseRpcParam = void
export type InstallInstallKBFSRpcParam = void
export type InstallResult = $ReadOnly<{componentResults?: ?Array<ComponentResult>, status: Status, fatal: Boolean}>
export type InstallStatus =
  | 0 // UNKNOWN_0
  | 1 // ERROR_1
  | 2 // NOT_INSTALLED_2
  | 4 // INSTALLED_4

export type InstallUninstallKBFSRpcParam = void
export type InterestingPerson = $ReadOnly<{uid: UID, username: String}>
export type KBFSGitCreateRepoRpcParam = $ReadOnly<{folder: Folder, name: GitRepoName}>
export type KBFSGitDeleteRepoRpcParam = $ReadOnly<{folder: Folder, name: GitRepoName}>
export type KBFSGitGcRpcParam = $ReadOnly<{folder: Folder, name: GitRepoName, options: GcOptions}>
export type KBFSRoot = $ReadOnly<{treeID: MerkleTreeID, root: KBFSRootHash}>
export type KBFSRootHash = Bytes
export type KBFSTeamSettings = $ReadOnly<{tlfID: TLFID}>
export type KID = String
export type KbfsCreateTLFRpcParam = $ReadOnly<{teamID: TeamID, tlfID: TLFID}>
export type KbfsFSEditListRpcParam = $ReadOnly<{edits: FSFolderEditHistory, requestID: Int}>
export type KbfsFSEventRpcParam = $ReadOnly<{event: FSNotification}>
export type KbfsFSPathUpdateRpcParam = $ReadOnly<{path: String}>
export type KbfsFSSyncEventRpcParam = $ReadOnly<{event: FSPathSyncStatus}>
export type KbfsFSSyncStatusRpcParam = $ReadOnly<{status: FSSyncStatus, requestID: Int}>
export type KbfsGetKBFSTeamSettingsRpcParam = $ReadOnly<{teamID: TeamID}>
export type KbfsMountGetAllAvailableMountDirsRpcParam = void
export type KbfsMountGetCurrentMountDirRpcParam = void
export type KbfsMountSetCurrentMountDirRpcParam = $ReadOnly<{dir: String}>
export type Kex2Provisionee2DidCounterSign2RpcParam = $ReadOnly<{sig: Bytes, ppsEncrypted: String, pukBox?: ?PerUserKeyBox, userEkBox?: ?UserEkBoxed}>
export type Kex2Provisionee2Hello2RpcParam = $ReadOnly<{uid: UID, token: SessionToken, csrf: CsrfToken, sigBody: String}>
export type Kex2ProvisioneeDidCounterSignRpcParam = $ReadOnly<{sig: Bytes}>
export type Kex2ProvisioneeHelloRpcParam = $ReadOnly<{uid: UID, token: SessionToken, csrf: CsrfToken, pps: PassphraseStream, sigBody: String}>
export type Kex2ProvisionerKexStartRpcParam = void
export type KeyBundle = $ReadOnly<{version: Int, bundle: Bytes}>
export type KeyBundleResponse = $ReadOnly<{WriterBundle: KeyBundle, ReaderBundle: KeyBundle}>
export type KeyHalf = $ReadOnly<{user: UID, deviceKID: KID, key: Bytes}>
export type KeyInfo = $ReadOnly<{fingerprint: String, key: String, desc: String}>
export type KeyType =
  | 0 // NONE_0
  | 1 // NACL_1
  | 2 // PGP_2

export type KeybaseTime = $ReadOnly<{unix: Time, chain: Seqno}>
export type LeaseID = String
export type LinkCheckResult = $ReadOnly<{proofId: Int, proofResult: ProofResult, snoozedResult: ProofResult, torWarning: Boolean, tmpTrackExpireTime: Time, cached?: ?CheckResult, diff?: ?TrackDiff, remoteDiff?: ?TrackDiff, hint?: ?SigHint, breaksTracking: Boolean}>
export type LinkID = String
export type ListArgs = $ReadOnly<{opID: OpID, path: Path, filter: ListFilter}>
export type ListFilter =
  | 0 // NO_FILTER_0
  | 1 // FILTER_ALL_HIDDEN_1

export type ListResult = $ReadOnly<{files?: ?Array<File>}>
export type ListToDepthArgs = $ReadOnly<{opID: OpID, path: Path, filter: ListFilter, depth: Int}>
export type LoadAvatarsRes = $ReadOnly<{picmap: {[key: string]: {[key: string]: AvatarUrl}}}>
export type LoadDeviceErr = $ReadOnly<{where: String, desc: String}>
export type LoadTeamArg = $ReadOnly<{ID: TeamID, name: String, public: Boolean, needAdmin: Boolean, refreshUIDMapper: Boolean, refreshers: TeamRefreshers, forceFullReload: Boolean, forceRepoll: Boolean, staleOK: Boolean, allowNameLookupBurstCache: Boolean}>
export type LockContext = $ReadOnly<{requireLockID: LockID, releaseAfterSuccess: Boolean}>
export type LockID = Long
export type LogLevel =
  | 0 // NONE_0
  | 1 // DEBUG_1
  | 2 // INFO_2
  | 3 // NOTICE_3
  | 4 // WARN_4
  | 5 // ERROR_5
  | 6 // CRITICAL_6
  | 7 // FATAL_7

export type LogRegisterLoggerRpcParam = $ReadOnly<{name: String, level: LogLevel}>
export type LogUiLogRpcParam = $ReadOnly<{level: LogLevel, text: Text}>
export type LoginAccountDeleteRpcParam = void
export type LoginClearStoredSecretRpcParam = $ReadOnly<{username: String}>
export type LoginDeprovisionRpcParam = $ReadOnly<{username: String, doRevoke: Boolean}>
export type LoginGetConfiguredAccountsRpcParam = void
export type LoginLoginOneshotRpcParam = $ReadOnly<{username: String, paperKey: String}>
export type LoginLoginProvisionedDeviceRpcParam = $ReadOnly<{username: String, noPassphrasePrompt: Boolean}>
export type LoginLoginRpcParam = $ReadOnly<{deviceType: String, usernameOrEmail: String, clientType: ClientType}>
export type LoginLoginWithPaperKeyRpcParam = void
export type LoginLogoutRpcParam = void
export type LoginPaperKeyRpcParam = void
export type LoginPaperKeySubmitRpcParam = $ReadOnly<{paperPhrase: String}>
export type LoginRecoverAccountFromEmailAddressRpcParam = $ReadOnly<{email: String}>
export type LoginUiDisplayPaperKeyPhraseRpcParam = $ReadOnly<{phrase: String}>
export type LoginUiDisplayPrimaryPaperKeyRpcParam = $ReadOnly<{phrase: String}>
export type LoginUiGetEmailOrUsernameRpcParam = void
export type LoginUiPromptRevokePaperKeysRpcParam = $ReadOnly<{device: Device, index: Int}>
export type LoginUnlockRpcParam = void
export type LoginUnlockWithPassphraseRpcParam = $ReadOnly<{passphrase: String}>
export type LogsendPrepareLogsendRpcParam = void
export type LookupImplicitTeamRes = $ReadOnly<{teamID: TeamID, name: TeamName, displayName: ImplicitTeamDisplayName, tlfID: TLFID}>
export type MDBlock = $ReadOnly<{version: Int, timestamp: Time, block: Bytes}>
export type MDPriority = Int
export type MaskB64 = Bytes
export type MemberInfo = $ReadOnly<{userID: UID, teamID: TeamID, fqName: String, isImplicitTeam: Boolean, isOpenTeam: Boolean, role: TeamRole, implicit?: ?ImplicitRole, memberCount: Int, allowProfilePromote: Boolean, isMemberShowcased: Boolean}>
export type MerkleGetCurrentMerkleRootRpcParam = $ReadOnly<{freshnessMsec: Int}>
export type MerkleRoot = $ReadOnly<{version: Int, root: Bytes}>
export type MerkleRootAndTime = $ReadOnly<{root: MerkleRootV2, updateTime: Time, fetchTime: Time}>
export type MerkleRootV2 = $ReadOnly<{seqno: Seqno, hashMeta: HashMeta}>
export type MerkleTreeID =
  | 0 // MASTER_0
  | 1 // KBFS_PUBLIC_1
  | 2 // KBFS_PRIVATE_2
  | 3 // KBFS_PRIVATETEAM_3

export type MerkleTreeLocation = $ReadOnly<{leaf: UserOrTeamID, loc: SigChainLocation}>
export type MerkleVerifyMerkleRootAndKBFSRpcParam = $ReadOnly<{root: MerkleRootV2, expectedKBFSRoot: KBFSRoot}>
export type MetadataAuthenticateRpcParam = $ReadOnly<{signature: String}>
export type MetadataDeleteKeyRpcParam = $ReadOnly<{uid: UID, deviceKID: KID, keyHalfID: Bytes, logTags: {[key: string]: String}}>
export type MetadataFindNextMDRpcParam = $ReadOnly<{seqno: Seqno, folderID: String}>
export type MetadataForceMerkleBuildForTestRpcParam = void
export type MetadataGetChallengeRpcParam = void
export type MetadataGetFolderHandleRpcParam = $ReadOnly<{folderID: String, signature: String, challenge: String}>
export type MetadataGetFoldersForRekeyRpcParam = $ReadOnly<{deviceKID: KID}>
export type MetadataGetKeyBundlesRpcParam = $ReadOnly<{folderID: String, writerBundleID: String, readerBundleID: String}>
export type MetadataGetKeyRpcParam = $ReadOnly<{keyHalfID: Bytes, deviceKID: String, logTags: {[key: string]: String}}>
export type MetadataGetLatestFolderHandleRpcParam = $ReadOnly<{folderID: String}>
export type MetadataGetMerkleNodeRpcParam = $ReadOnly<{hash: String}>
export type MetadataGetMerkleRootLatestRpcParam = $ReadOnly<{treeID: MerkleTreeID}>
export type MetadataGetMerkleRootRpcParam = $ReadOnly<{treeID: MerkleTreeID, seqNo: Long}>
export type MetadataGetMerkleRootSinceRpcParam = $ReadOnly<{treeID: MerkleTreeID, when: Time}>
export type MetadataGetMetadataRpcParam = $ReadOnly<{folderID: String, folderHandle: Bytes, branchID: String, unmerged: Boolean, startRevision: Long, stopRevision: Long, logTags: {[key: string]: String}, lockBeforeGet?: ?LockID}>
export type MetadataLockRpcParam = $ReadOnly<{folderID: String, lockID: LockID}>
export type MetadataPing2RpcParam = void
export type MetadataPingRpcParam = void
export type MetadataPruneBranchRpcParam = $ReadOnly<{folderID: String, branchID: String, logTags: {[key: string]: String}}>
export type MetadataPutKeysRpcParam = $ReadOnly<{keyHalves?: ?Array<KeyHalf>, logTags: {[key: string]: String}}>
export type MetadataPutMetadataRpcParam = $ReadOnly<{mdBlock: MDBlock, readerKeyBundle: KeyBundle, writerKeyBundle: KeyBundle, logTags: {[key: string]: String}, lockContext?: ?LockContext, priority: MDPriority}>
export type MetadataRegisterForUpdatesRpcParam = $ReadOnly<{folderID: String, currRevision: Long, logTags: {[key: string]: String}}>
export type MetadataReleaseLockRpcParam = $ReadOnly<{folderID: String, lockID: LockID}>
export type MetadataResponse = $ReadOnly<{folderID: String, mdBlocks?: ?Array<MDBlock>}>
export type MetadataSetImplicitTeamModeForTestRpcParam = $ReadOnly<{implicitTeamMode: String}>
export type MetadataStartImplicitTeamMigrationRpcParam = $ReadOnly<{folderID: String}>
export type MetadataTruncateLockRpcParam = $ReadOnly<{folderID: String}>
export type MetadataTruncateUnlockRpcParam = $ReadOnly<{folderID: String}>
export type MetadataUpdateFolderNeedsRekeyRpcParam = $ReadOnly<{folderID: String, revision: Long}>
export type MetadataUpdateFoldersNeedRekeyRpcParam = $ReadOnly<{requests?: ?Array<RekeyRequest>}>
export type MetadataUpdateMetadataUpdateRpcParam = $ReadOnly<{folderID: String, revision: Long}>
export type MoveArgs = $ReadOnly<{opID: OpID, src: Path, dest: Path}>
export type NaclDHKeyPrivate = any
export type NaclDHKeyPublic = any
export type NaclSigningKeyPrivate = any
export type NaclSigningKeyPublic = any
export type NextMerkleRootRes = $ReadOnly<{res?: ?MerkleRootV2}>
export type NotificationChannels = $ReadOnly<{session: Boolean, users: Boolean, kbfs: Boolean, tracking: Boolean, favorites: Boolean, paperkeys: Boolean, keyfamily: Boolean, service: Boolean, app: Boolean, chat: Boolean, pgp: Boolean, kbfsrequest: Boolean, badges: Boolean, reachability: Boolean, team: Boolean, ephemeral: Boolean, chatkbfsedits: Boolean, chatdev: Boolean}>
export type NotifyAppExitRpcParam = void
export type NotifyBadgesBadgeStateRpcParam = $ReadOnly<{badgeState: BadgeState}>
export type NotifyCtlSetNotificationsRpcParam = $ReadOnly<{channels: NotificationChannels}>
export type NotifyEphemeralNewTeamEkRpcParam = $ReadOnly<{id: TeamID, generation: EkGeneration}>
export type NotifyFSFSActivityRpcParam = $ReadOnly<{notification: FSNotification}>
export type NotifyFSFSEditListResponseRpcParam = $ReadOnly<{edits: FSFolderEditHistory, requestID: Int}>
export type NotifyFSFSPathUpdatedRpcParam = $ReadOnly<{path: String}>
export type NotifyFSFSSyncActivityRpcParam = $ReadOnly<{status: FSPathSyncStatus}>
export type NotifyFSFSSyncStatusResponseRpcParam = $ReadOnly<{status: FSSyncStatus, requestID: Int}>
export type NotifyFSRequestFSEditListRequestRpcParam = $ReadOnly<{req: FSEditListRequest}>
export type NotifyFSRequestFSSyncStatusRequestRpcParam = $ReadOnly<{req: FSSyncStatusRequest}>
export type NotifyFavoritesFavoritesChangedRpcParam = $ReadOnly<{uid: UID}>
export type NotifyKeyfamilyKeyfamilyChangedRpcParam = $ReadOnly<{uid: UID}>
export type NotifyPGPPgpKeyInSecretStoreFileRpcParam = void
export type NotifyPaperKeyPaperKeyCachedRpcParam = $ReadOnly<{uid: UID, encKID: KID, sigKID: KID}>
export type NotifyServiceShutdownRpcParam = $ReadOnly<{code: Int}>
export type NotifySessionClientOutOfDateRpcParam = $ReadOnly<{upgradeTo: String, upgradeURI: String, upgradeMsg: String}>
export type NotifySessionLoggedInRpcParam = $ReadOnly<{username: String}>
export type NotifySessionLoggedOutRpcParam = void
export type NotifyTeamAvatarUpdatedRpcParam = $ReadOnly<{name: String, formats?: ?Array<AvatarFormat>}>
export type NotifyTeamTeamAbandonedRpcParam = $ReadOnly<{teamID: TeamID}>
export type NotifyTeamTeamChangedByIDRpcParam = $ReadOnly<{teamID: TeamID, latestSeqno: Seqno, implicitTeam: Boolean, changes: TeamChangeSet}>
export type NotifyTeamTeamChangedByNameRpcParam = $ReadOnly<{teamName: String, latestSeqno: Seqno, implicitTeam: Boolean, changes: TeamChangeSet}>
export type NotifyTeamTeamDeletedRpcParam = $ReadOnly<{teamID: TeamID}>
export type NotifyTeamTeamExitRpcParam = $ReadOnly<{teamID: TeamID}>
export type NotifyTrackingTrackingChangedRpcParam = $ReadOnly<{uid: UID, username: String, isTracking: Boolean}>
export type NotifyUsersUserChangedRpcParam = $ReadOnly<{uid: UID}>
export type OpDescription = {asyncOp: 0, list: ?ListArgs} | {asyncOp: 1, listRecursive: ?ListArgs} | {asyncOp: 7, listRecursiveToDepth: ?ListToDepthArgs} | {asyncOp: 2, read: ?ReadArgs} | {asyncOp: 3, write: ?WriteArgs} | {asyncOp: 4, copy: ?CopyArgs} | {asyncOp: 5, move: ?MoveArgs} | {asyncOp: 6, remove: ?RemoveArgs}
export type OpID = any
export type OpProgress = $ReadOnly<{start: Time, endEstimate: Time, opType: AsyncOps, bytesTotal: Int64, bytesRead: Int64, bytesWritten: Int64, filesTotal: Int64, filesRead: Int64, filesWritten: Int64}>
export type OpenFlags =
  | 0 // READ_0
  | 1 // REPLACE_1
  | 2 // EXISTING_2
  | 4 // WRITE_4
  | 8 // APPEND_8
  | 16 // DIRECTORY_16

export type OutOfDateInfo = $ReadOnly<{upgradeTo: String, upgradeURI: String, customMessage: String, criticalClockSkew: Long}>
export type Outcome =
  | 0 // NONE_0
  | 1 // FIXED_1
  | 2 // IGNORED_2

export type PGPCreateUids = $ReadOnly<{useDefault: Boolean, ids?: ?Array<PGPIdentity>}>
export type PGPDecryptOptions = $ReadOnly<{assertSigned: Boolean, signedBy: String}>
export type PGPEncryptOptions = $ReadOnly<{recipients?: ?Array<String>, noSign: Boolean, noSelf: Boolean, binaryOut: Boolean, keyQuery: String}>
export type PGPFingerprint = any
export type PGPIdentity = $ReadOnly<{username: String, comment: String, email: String}>
export type PGPPurgeRes = $ReadOnly<{filenames?: ?Array<String>}>
export type PGPQuery = $ReadOnly<{secret: Boolean, query: String, exactMatch: Boolean}>
export type PGPSigVerification = $ReadOnly<{isSigned: Boolean, verified: Boolean, signer: User, signKey: PublicKey}>
export type PGPSignOptions = $ReadOnly<{keyQuery: String, mode: SignMode, binaryIn: Boolean, binaryOut: Boolean}>
export type PGPVerifyOptions = $ReadOnly<{signedBy: String, signature: Bytes}>
export type PaperprovisionPaperProvisionRpcParam = $ReadOnly<{username: String, deviceName: String, paperKey: String}>
export type PassphraseStream = $ReadOnly<{passphraseStream: Bytes, generation: Int}>
export type PassphraseType =
  | 0 // NONE_0
  | 1 // PAPER_KEY_1
  | 2 // PASS_PHRASE_2
  | 3 // VERIFY_PASS_PHRASE_3

export type Path = {PathType: 0, local: ?String} | {PathType: 1, kbfs: ?String}
export type PathType =
  | 0 // LOCAL_0
  | 1 // KBFS_1

export type PerTeamKey = $ReadOnly<{gen: PerTeamKeyGeneration, seqno: Seqno, sigKID: KID, encKID: KID}>
export type PerTeamKeyGeneration = Int
export type PerTeamKeySeed = any
export type PerTeamKeySeedItem = $ReadOnly<{seed: PerTeamKeySeed, generation: PerTeamKeyGeneration, seqno: Seqno}>
export type PerUserKey = $ReadOnly<{gen: Int, seqno: Seqno, sigKID: KID, encKID: KID, signedByKID: KID}>
export type PerUserKeyBox = $ReadOnly<{generation: PerUserKeyGeneration, box: String, receiverKID: KID}>
export type PerUserKeyGeneration = Int
export type PgpPgpDecryptRpcParam = $ReadOnly<{source: Stream, sink: Stream, opts: PGPDecryptOptions}>
export type PgpPgpDeletePrimaryRpcParam = void
export type PgpPgpEncryptRpcParam = $ReadOnly<{source: Stream, sink: Stream, opts: PGPEncryptOptions}>
export type PgpPgpExportByFingerprintRpcParam = $ReadOnly<{options: PGPQuery, encrypted: Boolean}>
export type PgpPgpExportByKIDRpcParam = $ReadOnly<{options: PGPQuery, encrypted: Boolean}>
export type PgpPgpExportRpcParam = $ReadOnly<{options: PGPQuery, encrypted: Boolean}>
export type PgpPgpImportRpcParam = $ReadOnly<{key: Bytes, pushSecret: Boolean}>
export type PgpPgpKeyGenDefaultRpcParam = $ReadOnly<{createUids: PGPCreateUids}>
export type PgpPgpKeyGenRpcParam = $ReadOnly<{primaryBits: Int, subkeyBits: Int, createUids: PGPCreateUids, allowMulti: Boolean, doExport: Boolean, exportEncrypted: Boolean, pushSecret: Boolean}>
export type PgpPgpPullRpcParam = $ReadOnly<{userAsserts?: ?Array<String>}>
export type PgpPgpPurgeRpcParam = $ReadOnly<{doPurge: Boolean}>
export type PgpPgpSelectRpcParam = $ReadOnly<{fingerprintQuery: String, allowMulti: Boolean, skipImport: Boolean, onlyImport: Boolean}>
export type PgpPgpSignRpcParam = $ReadOnly<{source: Stream, sink: Stream, opts: PGPSignOptions}>
export type PgpPgpStorageDismissRpcParam = void
export type PgpPgpUpdateRpcParam = $ReadOnly<{all: Boolean, fingerprints?: ?Array<String>}>
export type PgpPgpVerifyRpcParam = $ReadOnly<{source: Stream, opts: PGPVerifyOptions}>
export type PgpUiFinishedRpcParam = void
export type PgpUiKeyGeneratedRpcParam = $ReadOnly<{kid: KID, key: KeyInfo}>
export type PgpUiOutputSignatureSuccessNonKeybaseRpcParam = $ReadOnly<{keyID: String, signedAt: Time}>
export type PgpUiOutputSignatureSuccessRpcParam = $ReadOnly<{fingerprint: String, username: String, signedAt: Time}>
export type PgpUiShouldPushPrivateRpcParam = void
export type Pics = $ReadOnly<{square40: String, square200: String, square360: String}>
export type PingResponse = $ReadOnly<{timestamp: Time}>
export type PlatformInfo = $ReadOnly<{os: String, osVersion: String, arch: String, goVersion: String}>
export type PprofLogProcessorProfileRpcParam = $ReadOnly<{logDirForMobile: String, profileDurationSeconds: DurationSec}>
export type PprofLogTraceRpcParam = $ReadOnly<{logDirForMobile: String, traceDurationSeconds: DurationSec}>
export type PprofProcessorProfileRpcParam = $ReadOnly<{profileFile: String, profileDurationSeconds: DurationSec}>
export type PprofTraceRpcParam = $ReadOnly<{traceFile: String, traceDurationSeconds: DurationSec}>
export type ProblemSet = $ReadOnly<{user: User, kid: KID, tlfs?: ?Array<ProblemTLF>}>
export type ProblemSetDevices = $ReadOnly<{problemSet: ProblemSet, devices?: ?Array<Device>}>
export type ProblemTLF = $ReadOnly<{tlf: TLF, score: Int, solution_kids?: ?Array<KID>}>
export type Process = $ReadOnly<{pid: String, command: String, fileDescriptors?: ?Array<FileDescriptor>}>
export type ProfileTeamLoadRes = $ReadOnly<{loadTimeNsec: Long}>
export type Progress = Int
export type PromptDefault =
  | 0 // NONE_0
  | 1 // YES_1
  | 2 // NO_2

export type PromptOverwriteType =
  | 0 // SOCIAL_0
  | 1 // SITE_1

export type ProofResult = $ReadOnly<{state: ProofState, status: ProofStatus, desc: String}>
export type ProofState =
  | 0 // NONE_0
  | 1 // OK_1
  | 2 // TEMP_FAILURE_2
  | 3 // PERM_FAILURE_3
  | 4 // LOOKING_4
  | 5 // SUPERSEDED_5
  | 6 // POSTED_6
  | 7 // REVOKED_7
  | 8 // DELETED_8
  | 9 // UNKNOWN_TYPE_9
  | 10 // SIG_HINT_MISSING_10
  | 11 // UNCHECKED_11

export type ProofStatus =
  | 0 // NONE_0
  | 1 // OK_1
  | 2 // LOCAL_2
  | 3 // FOUND_3
  | 100 // BASE_ERROR_100
  | 101 // HOST_UNREACHABLE_101
  | 103 // PERMISSION_DENIED_103
  | 106 // FAILED_PARSE_106
  | 107 // DNS_ERROR_107
  | 108 // AUTH_FAILED_108
  | 129 // HTTP_429_129
  | 150 // HTTP_500_150
  | 160 // TIMEOUT_160
  | 170 // INTERNAL_ERROR_170
  | 171 // UNCHECKED_171
  | 172 // MISSING_PVL_172
  | 200 // BASE_HARD_ERROR_200
  | 201 // NOT_FOUND_201
  | 202 // CONTENT_FAILURE_202
  | 203 // BAD_USERNAME_203
  | 204 // BAD_REMOTE_ID_204
  | 205 // TEXT_NOT_FOUND_205
  | 206 // BAD_ARGS_206
  | 207 // CONTENT_MISSING_207
  | 208 // TITLE_NOT_FOUND_208
  | 209 // SERVICE_ERROR_209
  | 210 // TOR_SKIPPED_210
  | 211 // TOR_INCOMPATIBLE_211
  | 230 // HTTP_300_230
  | 240 // HTTP_400_240
  | 260 // HTTP_OTHER_260
  | 270 // EMPTY_JSON_270
  | 301 // DELETED_301
  | 302 // SERVICE_DEAD_302
  | 303 // BAD_SIGNATURE_303
  | 304 // BAD_API_URL_304
  | 305 // UNKNOWN_TYPE_305
  | 306 // NO_HINT_306
  | 307 // BAD_HINT_TEXT_307
  | 308 // INVALID_PVL_308

export type ProofType =
  | 0 // NONE_0
  | 1 // KEYBASE_1
  | 2 // TWITTER_2
  | 3 // GITHUB_3
  | 4 // REDDIT_4
  | 5 // COINBASE_5
  | 6 // HACKERNEWS_6
  | 8 // FACEBOOK_8
  | 1000 // GENERIC_WEB_SITE_1000
  | 1001 // DNS_1001
  | 1002 // PGP_1002
  | 100001 // ROOTER_100001

export type Proofs = $ReadOnly<{social?: ?Array<TrackProof>, web?: ?Array<WebProof>, publicKeys?: ?Array<PublicKey>}>
export type ProveCheckProofRpcParam = $ReadOnly<{sigID: SigID}>
export type ProveStartProofRpcParam = $ReadOnly<{service: String, username: String, force: Boolean, promptPosted: Boolean, auto: Boolean, sigVersion?: ?SigVersion}>
export type ProveUiDisplayRecheckWarningRpcParam = $ReadOnly<{text: Text}>
export type ProveUiOkToCheckRpcParam = $ReadOnly<{name: String, attempt: Int}>
export type ProveUiOutputInstructionsRpcParam = $ReadOnly<{instructions: Text, proof: String}>
export type ProveUiOutputPrechecksRpcParam = $ReadOnly<{text: Text}>
export type ProveUiPreProofWarningRpcParam = $ReadOnly<{text: Text}>
export type ProveUiPromptOverwriteRpcParam = $ReadOnly<{account: String, typ: PromptOverwriteType}>
export type ProveUiPromptUsernameRpcParam = $ReadOnly<{prompt: String, prevError?: ?Status}>
export type ProvisionMethod =
  | 0 // DEVICE_0
  | 1 // PAPER_KEY_1
  | 2 // PASSPHRASE_2
  | 3 // GPG_IMPORT_3
  | 4 // GPG_SIGN_4

export type ProvisionUiChooseDeviceRpcParam = $ReadOnly<{devices?: ?Array<Device>, canSelectNoDevice: Boolean}>
export type ProvisionUiChooseDeviceTypeRpcParam = $ReadOnly<{kind: ChooseType}>
export type ProvisionUiChooseGPGMethodRpcParam = $ReadOnly<{keys?: ?Array<GPGKey>}>
export type ProvisionUiChooseProvisioningMethodRpcParam = $ReadOnly<{gpgOption: Boolean}>
export type ProvisionUiDisplayAndPromptSecretRpcParam = $ReadOnly<{secret: Bytes, phrase: String, otherDeviceType: DeviceType, previousErr: String}>
export type ProvisionUiDisplaySecretExchangedRpcParam = void
export type ProvisionUiPromptNewDeviceNameRpcParam = $ReadOnly<{existingDevices?: ?Array<String>, errorMessage: String}>
export type ProvisionUiProvisioneeSuccessRpcParam = $ReadOnly<{username: String, deviceName: String}>
export type ProvisionUiProvisionerSuccessRpcParam = $ReadOnly<{deviceName: String, deviceType: String}>
export type ProvisionUiSwitchToGPGSignOKRpcParam = $ReadOnly<{key: GPGKey, importError: String}>
export type PublicKey = $ReadOnly<{KID: KID, PGPFingerprint: String, PGPIdentities?: ?Array<PGPIdentity>, isSibkey: Boolean, isEldest: Boolean, parentID: String, deviceID: DeviceID, deviceDescription: String, deviceType: String, cTime: Time, eTime: Time, isRevoked: Boolean}>
export type PublicKeyV2 = {keyType: 1, nacl: ?PublicKeyV2NaCl} | {keyType: 2, pgp: ?PublicKeyV2PGPSummary} | {keyType: any}
export type PublicKeyV2Base = $ReadOnly<{kid: KID, isSibkey: Boolean, isEldest: Boolean, cTime: Time, eTime: Time, provisioning: SignatureMetadata, revocation?: ?SignatureMetadata}>
export type PublicKeyV2NaCl = $ReadOnly<{base: PublicKeyV2Base, parent?: ?KID, deviceID: DeviceID, deviceDescription: String, deviceType: String}>
export type PublicKeyV2PGPSummary = $ReadOnly<{base: PublicKeyV2Base, fingerprint: PGPFingerprint, identities?: ?Array<PGPIdentity>}>
export type PushReason =
  | 0 // NONE_0
  | 1 // RECONNECTED_1
  | 2 // NEW_DATA_2

export type QuotaVerifySessionRpcParam = $ReadOnly<{session: String}>
export type Reachability = $ReadOnly<{reachable: Reachable}>
export type ReachabilityCheckReachabilityRpcParam = void
export type ReachabilityReachabilityChangedRpcParam = $ReadOnly<{reachability: Reachability}>
export type ReachabilityStartReachabilityRpcParam = void
export type Reachable =
  | 0 // UNKNOWN_0
  | 1 // YES_1
  | 2 // NO_2

export type ReadArgs = $ReadOnly<{opID: OpID, path: Path, offset: Long, size: Int}>
export type ReaderKeyMask = $ReadOnly<{application: TeamApplication, generation: PerTeamKeyGeneration, mask: MaskB64}>
export type RegisterAddressRes = $ReadOnly<{type: String, family: String}>
export type RekeyDebugShowRekeyStatusRpcParam = void
export type RekeyEvent = $ReadOnly<{eventType: RekeyEventType, interruptType: Int}>
export type RekeyEventType =
  | 0 // NONE_0
  | 1 // NOT_LOGGED_IN_1
  | 2 // API_ERROR_2
  | 3 // NO_PROBLEMS_3
  | 4 // LOAD_ME_ERROR_4
  | 5 // CURRENT_DEVICE_CAN_REKEY_5
  | 6 // DEVICE_LOAD_ERROR_6
  | 7 // HARASS_7
  | 8 // NO_GREGOR_MESSAGES_8

export type RekeyGetPendingRekeyStatusRpcParam = void
export type RekeyGetRevokeWarningRpcParam = $ReadOnly<{actingDevice: DeviceID, targetDevice: DeviceID}>
export type RekeyRekeyStatusFinishRpcParam = void
export type RekeyRekeySyncRpcParam = $ReadOnly<{force: Boolean}>
export type RekeyRequest = $ReadOnly<{folderID: String, revision: Long}>
export type RekeyShowPendingRekeyStatusRpcParam = void
export type RekeyUIDelegateRekeyUIRpcParam = void
export type RekeyUIRefreshRpcParam = $ReadOnly<{problemSetDevices: ProblemSetDevices}>
export type RekeyUIRekeySendEventRpcParam = $ReadOnly<{event: RekeyEvent}>
export type RemoteProof = $ReadOnly<{proofType: ProofType, key: String, value: String, displayMarkup: String, sigID: SigID, mTime: Time}>
export type RemoteTrack = $ReadOnly<{username: String, uid: UID, linkID: LinkID}>
export type RemoveArgs = $ReadOnly<{opID: OpID, path: Path}>
export type RepoID = String
export type ResetLink = $ReadOnly<{ctime: UnixTime, merkleRoot: ResetMerkleRoot, prev: ResetPrev, resetSeqno: Seqno, type: ResetType, uid: UID}>
export type ResetMerkleRoot = $ReadOnly<{hashMeta: HashMeta, seqno: Seqno}>
export type ResetPrev = $ReadOnly<{eldestKID?: ?KID, lastSeqno: Seqno, reset: SHA512}>
export type ResetSummary = $ReadOnly<{ctime: UnixTime, merkleRoot: ResetMerkleRoot, resetSeqno: Seqno, eldestSeqno: Seqno, type: ResetType}>
export type ResetType =
  | 0 // NONE_0
  | 1 // RESET_1
  | 2 // DELETE_2

export type ResolveIdentifyImplicitTeamRes = $ReadOnly<{displayName: String, teamID: TeamID, writers?: ?Array<UserVersion>, trackBreaks: {[key: string]: IdentifyTrackBreaks}, folderID: TLFID}>
export type RevokeRevokeDeviceRpcParam = $ReadOnly<{deviceID: DeviceID, forceSelf: Boolean, forceLast: Boolean}>
export type RevokeRevokeKeyRpcParam = $ReadOnly<{keyID: KID}>
export type RevokeRevokeSigsRpcParam = $ReadOnly<{sigIDQueries?: ?Array<String>}>
export type RevokeWarning = $ReadOnly<{endangeredTLFs?: ?Array<TLF>}>
export type RevokedKey = $ReadOnly<{key: PublicKey, time: KeybaseTime, by: KID}>
export type RevokedProof = $ReadOnly<{proof: RemoteProof, diff: TrackDiff}>
export type SHA512 = Bytes
export type SaltpackDecryptOptions = $ReadOnly<{interactive: Boolean, forceRemoteCheck: Boolean, usePaperKey: Boolean}>
export type SaltpackEncryptOptions = $ReadOnly<{recipients?: ?Array<String>, anonymousSender: Boolean, encryptionOnlyMode: Boolean, noSelfEncrypt: Boolean, binary: Boolean, saltpackVersion: Int}>
export type SaltpackEncryptedMessageInfo = $ReadOnly<{devices?: ?Array<Device>, numAnonReceivers: Int, receiverIsAnon: Boolean, sender: SaltpackSender}>
export type SaltpackSaltpackDecryptRpcParam = $ReadOnly<{source: Stream, sink: Stream, opts: SaltpackDecryptOptions}>
export type SaltpackSaltpackEncryptRpcParam = $ReadOnly<{source: Stream, sink: Stream, opts: SaltpackEncryptOptions}>
export type SaltpackSaltpackSignRpcParam = $ReadOnly<{source: Stream, sink: Stream, opts: SaltpackSignOptions}>
export type SaltpackSaltpackVerifyRpcParam = $ReadOnly<{source: Stream, sink: Stream, opts: SaltpackVerifyOptions}>
export type SaltpackSender = $ReadOnly<{uid: UID, username: String, senderType: SaltpackSenderType}>
export type SaltpackSenderType =
  | 0 // NOT_TRACKED_0
  | 1 // UNKNOWN_1
  | 2 // ANONYMOUS_2
  | 3 // TRACKING_BROKE_3
  | 4 // TRACKING_OK_4
  | 5 // SELF_5
  | 6 // REVOKED_6
  | 7 // EXPIRED_7

export type SaltpackSignOptions = $ReadOnly<{detached: Boolean, binary: Boolean, saltpackVersion: Int}>
export type SaltpackUiSaltpackPromptForDecryptRpcParam = $ReadOnly<{sender: SaltpackSender, usedDelegateUI: Boolean}>
export type SaltpackUiSaltpackVerifyBadSenderRpcParam = $ReadOnly<{signingKID: KID, sender: SaltpackSender}>
export type SaltpackUiSaltpackVerifySuccessRpcParam = $ReadOnly<{signingKID: KID, sender: SaltpackSender}>
export type SaltpackVerifyOptions = $ReadOnly<{signedBy: String, signature: Bytes}>
export type ScanProofsScanProofsRpcParam = $ReadOnly<{infile: String, indices: String, sigid: String, ratelimit: Int, cachefile: String, ignorefile: String}>
export type SearchComponent = $ReadOnly<{key: String, value: String, score: Double}>
export type SearchResult = $ReadOnly<{uid: UID, username: String, components?: ?Array<SearchComponent>, score: Double}>
export type SecretEntryArg = $ReadOnly<{desc: String, prompt: String, err: String, cancel: String, ok: String, reason: String, showTyping: Boolean}>
export type SecretEntryRes = $ReadOnly<{text: String, canceled: Boolean, storeSecret: Boolean}>
export type SecretKeys = $ReadOnly<{signing: NaclSigningKeyPrivate, encryption: NaclDHKeyPrivate}>
export type SecretKeysGetSecretKeysRpcParam = void
export type SecretResponse = $ReadOnly<{secret: Bytes, phrase: String}>
export type SecretUiGetPassphraseRpcParam = $ReadOnly<{pinentry: GUIEntryArg, terminal?: ?SecretEntryArg}>
export type SeitanAKey = String
export type SeitanIKey = String
export type SeitanIKeyV2 = String
export type SeitanKeyAndLabel = {v: 1, v1: ?SeitanKeyAndLabelVersion1} | {v: 2, v2: ?SeitanKeyAndLabelVersion2} | {v: any}
export type SeitanKeyAndLabelVersion =
  | 1 // V1_1
  | 2 // V2_2

export type SeitanKeyAndLabelVersion1 = $ReadOnly<{i: SeitanIKey, l: SeitanKeyLabel}>
export type SeitanKeyAndLabelVersion2 = $ReadOnly<{k: SeitanPubKey, l: SeitanKeyLabel}>
export type SeitanKeyLabel = {t: 1, sms: ?SeitanKeyLabelSms} | {t: any}
export type SeitanKeyLabelSms = $ReadOnly<{f: String, n: String}>
export type SeitanKeyLabelType = 1 // SMS_1

export type SeitanPubKey = KID
export type SelectKeyRes = $ReadOnly<{keyID: String, doSecretPush: Boolean}>
export type SeqType =
  | 1 // PUBLIC_1
  | 2 // PRIVATE_2
  | 3 // SEMIPRIVATE_3

export type Seqno = Int64
export type ServiceStatus = $ReadOnly<{version: String, label: String, pid: String, lastExitStatus: String, bundleVersion: String, installStatus: InstallStatus, installAction: InstallAction, status: Status}>
export type ServicesStatus = $ReadOnly<{service?: ?Array<ServiceStatus>, kbfs?: ?Array<ServiceStatus>, updater?: ?Array<ServiceStatus>}>
export type Session = $ReadOnly<{uid: UID, username: String, token: String, deviceSubkeyKid: KID, deviceSibkeyKid: KID}>
export type SessionCurrentSessionRpcParam = void
export type SessionSessionPingRpcParam = void
export type SessionStatus = $ReadOnly<{SessionFor: String, Loaded: Boolean, Cleared: Boolean, SaltOnly: Boolean, Expired: Boolean}>
export type SessionToken = String
export type Sig = $ReadOnly<{seqno: Seqno, sigID: SigID, sigIDDisplay: String, type: String, cTime: Time, revoked: Boolean, active: Boolean, key: String, body: String}>
export type SigChainLocation = $ReadOnly<{seqno: Seqno, seqType: SeqType}>
export type SigHint = $ReadOnly<{remoteId: String, humanUrl: String, apiUrl: String, checkText: String}>
export type SigID = String
export type SigListArgs = $ReadOnly<{sessionID: Int, username: String, allKeys: Boolean, types?: ?SigTypes, filterx: String, verbose: Boolean, revoked: Boolean}>
export type SigTypes = $ReadOnly<{track: Boolean, proof: Boolean, cryptocurrency: Boolean, isSelf: Boolean}>
export type SigVersion = Int
export type SignMode =
  | 0 // ATTACHED_0
  | 1 // DETACHED_1
  | 2 // CLEAR_2

export type SignatureMetadata = $ReadOnly<{signingKID: KID, prevMerkleRootSigned: MerkleRootV2, firstAppearedUnverified: Seqno, time: Time, sigChainLocation: SigChainLocation}>
export type SignupCheckInvitationCodeRpcParam = $ReadOnly<{invitationCode: String}>
export type SignupCheckUsernameAvailableRpcParam = $ReadOnly<{username: String}>
export type SignupGetInvitationCodeRpcParam = void
export type SignupInviteRequestRpcParam = $ReadOnly<{email: String, fullname: String, notes: String}>
export type SignupRes = $ReadOnly<{passphraseOk: Boolean, postOk: Boolean, writeOk: Boolean}>
export type SignupSignupRpcParam = $ReadOnly<{email: String, inviteCode: String, passphrase: String, username: String, deviceName: String, deviceType: DeviceType, storeSecret: Boolean, skipMail: Boolean, genPGPBatch: Boolean, genPaper: Boolean}>
export type SigsSigListJSONRpcParam = $ReadOnly<{arg: SigListArgs}>
export type SigsSigListRpcParam = $ReadOnly<{arg: SigListArgs}>
export type SimpleFSGetHTTPAddressAndTokenResponse = $ReadOnly<{address: String, token: String}>
export type SimpleFSListResult = $ReadOnly<{entries?: ?Array<Dirent>, progress: Progress}>
export type SimpleFSQuotaUsage = $ReadOnly<{usageBytes: Int64, archiveBytes: Int64, limitBytes: Int64, gitUsageBytes: Int64, gitArchiveBytes: Int64, gitLimitBytes: Int64}>
export type SimpleFSSimpleFSCancelRpcParam = $ReadOnly<{opID: OpID}>
export type SimpleFSSimpleFSCheckRpcParam = $ReadOnly<{opID: OpID}>
export type SimpleFSSimpleFSCloseRpcParam = $ReadOnly<{opID: OpID}>
export type SimpleFSSimpleFSCopyRecursiveRpcParam = $ReadOnly<{opID: OpID, src: Path, dest: Path}>
export type SimpleFSSimpleFSCopyRpcParam = $ReadOnly<{opID: OpID, src: Path, dest: Path}>
export type SimpleFSSimpleFSDumpDebuggingInfoRpcParam = void
export type SimpleFSSimpleFSFolderEditHistoryRpcParam = $ReadOnly<{path: Path}>
export type SimpleFSSimpleFSGetHTTPAddressAndTokenRpcParam = void
export type SimpleFSSimpleFSGetOpsRpcParam = void
export type SimpleFSSimpleFSGetUserQuotaUsageRpcParam = void
export type SimpleFSSimpleFSListRecursiveRpcParam = $ReadOnly<{opID: OpID, path: Path, filter: ListFilter, refreshSubscription: Boolean}>
export type SimpleFSSimpleFSListRecursiveToDepthRpcParam = $ReadOnly<{opID: OpID, path: Path, filter: ListFilter, refreshSubscription: Boolean, depth: Int}>
export type SimpleFSSimpleFSListRpcParam = $ReadOnly<{opID: OpID, path: Path, filter: ListFilter, refreshSubscription: Boolean}>
export type SimpleFSSimpleFSMakeOpidRpcParam = void
export type SimpleFSSimpleFSMoveRpcParam = $ReadOnly<{opID: OpID, src: Path, dest: Path}>
export type SimpleFSSimpleFSOpenRpcParam = $ReadOnly<{opID: OpID, dest: Path, flags: OpenFlags}>
export type SimpleFSSimpleFSReadListRpcParam = $ReadOnly<{opID: OpID}>
export type SimpleFSSimpleFSReadRpcParam = $ReadOnly<{opID: OpID, offset: Long, size: Int}>
export type SimpleFSSimpleFSRemoveRpcParam = $ReadOnly<{opID: OpID, path: Path}>
export type SimpleFSSimpleFSRenameRpcParam = $ReadOnly<{src: Path, dest: Path}>
export type SimpleFSSimpleFSSetStatRpcParam = $ReadOnly<{dest: Path, flag: DirentType}>
export type SimpleFSSimpleFSStatRpcParam = $ReadOnly<{path: Path}>
export type SimpleFSSimpleFSSuppressNotificationsRpcParam = $ReadOnly<{suppressDurationSec: Int}>
export type SimpleFSSimpleFSSyncStatusRpcParam = void
export type SimpleFSSimpleFSUserEditHistoryRpcParam = void
export type SimpleFSSimpleFSWaitRpcParam = $ReadOnly<{opID: OpID}>
export type SimpleFSSimpleFSWriteRpcParam = $ReadOnly<{opID: OpID, offset: Long, content: Bytes}>
export type SocialAssertion = $ReadOnly<{user: String, service: SocialAssertionService}>
export type SocialAssertionService = String
export type StartProofResult = $ReadOnly<{sigID: SigID}>
export type Status = $ReadOnly<{code: Int, name: String, desc: String, fields?: ?Array<StringKVPair>}>
export type StatusCode =
  | 0 // SCOk_0
  | 100 // SCInputError_100
  | 201 // SCLoginRequired_201
  | 202 // SCBadSession_202
  | 203 // SCBadLoginUserNotFound_203
  | 204 // SCBadLoginPassword_204
  | 205 // SCNotFound_205
  | 210 // SCThrottleControl_210
  | 216 // SCDeleted_216
  | 218 // SCGeneric_218
  | 235 // SCAlreadyLoggedIn_235
  | 230 // SCExists_230
  | 237 // SCCanceled_237
  | 239 // SCInputCanceled_239
  | 274 // SCReloginRequired_274
  | 275 // SCResolutionFailed_275
  | 276 // SCProfileNotPublic_276
  | 277 // SCIdentifyFailed_277
  | 278 // SCTrackingBroke_278
  | 279 // SCWrongCryptoFormat_279
  | 280 // SCDecryptionError_280
  | 281 // SCInvalidAddress_281
  | 283 // SCNoSession_283
  | 290 // SCAccountReset_290
  | 295 // SCIdentifiesFailed_295
  | 297 // SCNoSpaceOnDevice_297
  | 472 // SCBadEmail_472
  | 701 // SCBadSignupUsernameTaken_701
  | 707 // SCBadInvitationCode_707
  | 801 // SCMissingResult_801
  | 901 // SCKeyNotFound_901
  | 905 // SCKeyCorrupted_905
  | 907 // SCKeyInUse_907
  | 913 // SCKeyBadGen_913
  | 914 // SCKeyNoSecret_914
  | 915 // SCKeyBadUIDs_915
  | 916 // SCKeyNoActive_916
  | 917 // SCKeyNoSig_917
  | 918 // SCKeyBadSig_918
  | 919 // SCKeyBadEldest_919
  | 920 // SCKeyNoEldest_920
  | 921 // SCKeyDuplicateUpdate_921
  | 922 // SCSibkeyAlreadyExists_922
  | 924 // SCDecryptionKeyNotFound_924
  | 927 // SCKeyNoPGPEncryption_927
  | 928 // SCKeyNoNaClEncryption_928
  | 929 // SCKeySyncedPGPNotFound_929
  | 930 // SCKeyNoMatchingGPG_930
  | 931 // SCKeyRevoked_931
  | 1008 // SCSigWrongKey_1008
  | 1010 // SCSigOldSeqno_1010
  | 1301 // SCBadTrackSession_1301
  | 1404 // SCDeviceBadName_1404
  | 1408 // SCDeviceNameInUse_1408
  | 1409 // SCDeviceNotFound_1409
  | 1410 // SCDeviceMismatch_1410
  | 1411 // SCDeviceRequired_1411
  | 1413 // SCDevicePrevProvisioned_1413
  | 1414 // SCDeviceNoProvision_1414
  | 1415 // SCDeviceProvisionViaDevice_1415
  | 1416 // SCRevokeCurrentDevice_1416
  | 1417 // SCRevokeLastDevice_1417
  | 1418 // SCDeviceProvisionOffline_1418
  | 1419 // SCRevokeLastDevicePGP_1419
  | 1501 // SCStreamExists_1501
  | 1502 // SCStreamNotFound_1502
  | 1503 // SCStreamWrongKind_1503
  | 1504 // SCStreamEOF_1504
  | 1600 // SCGenericAPIError_1600
  | 1601 // SCAPINetworkError_1601
  | 1602 // SCTimeout_1602
  | 1701 // SCProofError_1701
  | 1702 // SCIdentificationExpired_1702
  | 1703 // SCSelfNotFound_1703
  | 1704 // SCBadKexPhrase_1704
  | 1705 // SCNoUIDelegation_1705
  | 1706 // SCNoUI_1706
  | 1707 // SCGPGUnavailable_1707
  | 1800 // SCInvalidVersionError_1800
  | 1801 // SCOldVersionError_1801
  | 1802 // SCInvalidLocationError_1802
  | 1803 // SCServiceStatusError_1803
  | 1804 // SCInstallError_1804
  | 1810 // SCLoadKextError_1810
  | 1811 // SCLoadKextPermError_1811
  | 2300 // SCGitInternal_2300
  | 2301 // SCGitRepoAlreadyExists_2301
  | 2302 // SCGitInvalidRepoName_2302
  | 2303 // SCGitCannotDelete_2303
  | 2304 // SCGitRepoDoesntExist_2304
  | 2400 // SCLoginStateTimeout_2400
  | 2500 // SCChatInternal_2500
  | 2501 // SCChatRateLimit_2501
  | 2502 // SCChatConvExists_2502
  | 2503 // SCChatUnknownTLFID_2503
  | 2504 // SCChatNotInConv_2504
  | 2505 // SCChatBadMsg_2505
  | 2506 // SCChatBroadcast_2506
  | 2507 // SCChatAlreadySuperseded_2507
  | 2508 // SCChatAlreadyDeleted_2508
  | 2509 // SCChatTLFFinalized_2509
  | 2510 // SCChatCollision_2510
  | 2511 // SCIdentifySummaryError_2511
  | 2512 // SCNeedSelfRekey_2512
  | 2513 // SCNeedOtherRekey_2513
  | 2514 // SCChatMessageCollision_2514
  | 2515 // SCChatDuplicateMessage_2515
  | 2516 // SCChatClientError_2516
  | 2517 // SCChatNotInTeam_2517
  | 2518 // SCChatStalePreviousState_2518
  | 2604 // SCTeamBadMembership_2604
  | 2607 // SCTeamSelfNotOwner_2607
  | 2614 // SCTeamNotFound_2614
  | 2619 // SCTeamExists_2619
  | 2623 // SCTeamReadError_2623
  | 2638 // SCNoOp_2638
  | 2646 // SCTeamInviteBadToken_2646
  | 2663 // SCTeamTarDuplicate_2663
  | 2664 // SCTeamTarNotFound_2664
  | 2665 // SCTeamMemberExists_2665
  | 2666 // SCTeamNotReleased_2666
  | 2667 // SCTeamPermanentlyLeft_2667
  | 2668 // SCTeamNeedRootId_2668
  | 2669 // SCTeamHasLiveChildren_2669
  | 2670 // SCTeamDeleteError_2670
  | 2671 // SCTeamBadRootTeam_2671
  | 2672 // SCTeamNameConflictsWithUser_2672
  | 2673 // SCTeamDeleteNoUpPointer_2673
  | 2674 // SCTeamNeedOwner_2674
  | 2675 // SCTeamNoOwnerAllowed_2675
  | 2676 // SCTeamImplicitNoNonSbs_2676
  | 2677 // SCTeamImplicitBadHash_2677
  | 2678 // SCTeamImplicitBadName_2678
  | 2679 // SCTeamImplicitClash_2679
  | 2680 // SCTeamImplicitDuplicate_2680
  | 2681 // SCTeamImplicitBadOp_2681
  | 2682 // SCTeamImplicitBadRole_2682
  | 2683 // SCTeamImplicitNotFound_2683
  | 2684 // SCTeamBadAdminSeqnoType_2684
  | 2685 // SCTeamImplicitBadAdd_2685
  | 2686 // SCTeamImplicitBadRemove_2686
  | 2696 // SCTeamInviteTokenReused_2696
  | 2697 // SCTeamKeyMaskNotFound_2697
  | 2702 // SCTeamBanned_2702
  | 2703 // SCTeamInvalidBan_2703
  | 2711 // SCTeamShowcasePermDenied_2711
  | 2721 // SCTeamProvisionalCanKey_2721
  | 2722 // SCTeamProvisionalCannotKey_2722
  | 2900 // SCEphemeralKeyBadGeneration_2900
  | 2901 // SCEphemeralKeyUnexpectedBox_2901
  | 2902 // SCEphemeralKeyMissingBox_2902
  | 2903 // SCEphemeralKeyWrongNumberOfKeys_2903
  | 2904 // SCEphemeralKeyMismatchedKey_2904
  | 2905 // SCEphemeralPairwiseMACsMissingUIDs_2905
  | 3100 // SCStellarError_3100
  | 3101 // SCStellarBadInput_3101
  | 3102 // SCStellarWrongRevision_3102
  | 3103 // SCStellarMissingBundle_3103
  | 3104 // SCStellarBadPuk_3104
  | 3105 // SCStellarMissingAccount_3105
  | 3106 // SCStellarBadPrev_3106
  | 3107 // SCStellarWrongPrimary_3107
  | 3108 // SCStellarUnsupportedCurrency_3108
  | 3201 // SCNISTWrongSize_3201
  | 3202 // SCNISTBadMode_3202
  | 3203 // SCNISTHashWrongSize_3203
  | 3204 // SCNISTSigWrongSize_3204
  | 3205 // SCNISTSigBadInput_3205
  | 3206 // SCNISTSigBadUID_3206
  | 3207 // SCNISTSigBadDeviceID_3207
  | 3208 // SCNISTSigBadNonce_3208
  | 3209 // SCNISTNoSigOrHash_3209
  | 3210 // SCNISTExpired_3210
  | 3211 // SCNISTSigRevoked_3211
  | 3212 // SCNISTKeyRevoked_3212
  | 3213 // SCNISTUserDeleted_3213
  | 3214 // SCNISTNoDevice_3214
  | 3215 // SCNISTSigCannot_verify_3215
  | 3216 // SCNISTReplay_3216
  | 3217 // SCNISTSigBadLifetime_3217
  | 3218 // SCNISTNotFound_3218
  | 3219 // SCNISTBadClock_3219
  | 3220 // SCNISTSigBadCtime_3220
  | 3221 // SCBadSignupUsernameDeleted_3221

export type Stream = $ReadOnly<{fd: Int}>
export type StreamUiCloseRpcParam = $ReadOnly<{s: Stream}>
export type StreamUiReadRpcParam = $ReadOnly<{s: Stream, sz: Int}>
export type StreamUiResetRpcParam = $ReadOnly<{s: Stream}>
export type StreamUiWriteRpcParam = $ReadOnly<{s: Stream, buf: Bytes}>
export type StringKVPair = $ReadOnly<{key: String, value: String}>
export type SubteamLogPoint = $ReadOnly<{name: TeamName, seqno: Seqno}>
export type TLF = $ReadOnly<{id: TLFID, name: String, writers?: ?Array<String>, readers?: ?Array<String>, isPrivate: Boolean}>
export type TLFBreak = $ReadOnly<{breaks?: ?Array<TLFIdentifyFailure>}>
export type TLFID = String
export type TLFIdentifyBehavior =
  | 0 // UNSET_0
  | 1 // CHAT_CLI_1
  | 2 // CHAT_GUI_2
  | 3 // CHAT_GUI_STRICT_3
  | 4 // KBFS_REKEY_4
  | 5 // KBFS_QR_5
  | 6 // CHAT_SKIP_6
  | 7 // SALTPACK_7
  | 8 // CLI_8
  | 9 // GUI_9
  | 10 // DEFAULT_KBFS_10
  | 11 // KBFS_CHAT_11

export type TLFIdentifyFailure = $ReadOnly<{user: User, breaks?: ?IdentifyTrackBreaks}>
export type TLFQuery = $ReadOnly<{tlfName: String, identifyBehavior: TLFIdentifyBehavior}>
export type TLFVisibility =
  | 0 // ANY_0
  | 1 // PUBLIC_1
  | 2 // PRIVATE_2

export type TeamAcceptOrRequestResult = $ReadOnly<{wasToken: Boolean, wasSeitan: Boolean, wasTeamName: Boolean, wasOpenTeam: Boolean}>
export type TeamAccessRequest = $ReadOnly<{uid: UID, eldestSeqno: Seqno}>
export type TeamAddMemberResult = $ReadOnly<{invited: Boolean, user?: ?User, emailSent: Boolean, chatSending: Boolean}>
export type TeamAndMemberShowcase = $ReadOnly<{teamShowcase: TeamShowcase, isMemberShowcased: Boolean}>
export type TeamApplication =
  | 1 // KBFS_1
  | 2 // CHAT_2
  | 3 // SALTPACK_3
  | 4 // GIT_METADATA_4
  | 5 // SEITAN_INVITE_TOKEN_5
  | 6 // STELLAR_RELAY_6

export type TeamApplicationKey = $ReadOnly<{application: TeamApplication, keyGeneration: PerTeamKeyGeneration, key: Bytes32}>
export type TeamCLKRMsg = $ReadOnly<{teamID: TeamID, generation: PerTeamKeyGeneration, score: Int, resetUsersUntrusted?: ?Array<TeamCLKRResetUser>}>
export type TeamCLKRResetUser = $ReadOnly<{uid: UID, userEldestSeqno: Seqno, memberEldestSeqno: Seqno}>
export type TeamChangeReq = $ReadOnly<{owners?: ?Array<UserVersion>, admins?: ?Array<UserVersion>, writers?: ?Array<UserVersion>, readers?: ?Array<UserVersion>, none?: ?Array<UserVersion>, completedInvites: {[key: string]: UserVersionPercentForm}}>
export type TeamChangeRow = $ReadOnly<{id: TeamID, name: String, keyRotated: Boolean, membershipChanged: Boolean, latestSeqno: Seqno, implicitTeam: Boolean, misc: Boolean, removedResetUsers: Boolean}>
export type TeamChangeSet = $ReadOnly<{membershipChanged: Boolean, keyRotated: Boolean, renamed: Boolean, misc: Boolean}>
export type TeamCreateResult = $ReadOnly<{teamID: TeamID, chatSent: Boolean, creatorAdded: Boolean}>
export type TeamData = $ReadOnly<{secretless: Boolean, name: TeamName, chain: TeamSigChainState, perTeamKeySeeds: {[key: string]: PerTeamKeySeedItem}, readerKeyMasks: {[key: string]: {[key: string]: MaskB64}}, latestSeqnoHint: Seqno, cachedAt: Time, tlfCryptKeys: {[key: string]: ?Array<CryptKey>}}>
export type TeamDebugRes = $ReadOnly<{chain: TeamSigChainState}>
export type TeamDetails = $ReadOnly<{members: TeamMembersDetails, keyGeneration: PerTeamKeyGeneration, annotatedActiveInvites: {[key: string]: AnnotatedTeamInvite}, settings: TeamSettings, showcase: TeamShowcase}>
export type TeamEk = $ReadOnly<{seed: Bytes32, metadata: TeamEkMetadata}>
export type TeamEkBoxMetadata = $ReadOnly<{box: String, recipientGeneration: EkGeneration, recipientUID: UID}>
export type TeamEkBoxed = $ReadOnly<{box: String, userEkGeneration: EkGeneration, metadata: TeamEkMetadata}>
export type TeamEkMetadata = $ReadOnly<{kid: KID, hashMeta: HashMeta, generation: EkGeneration, ctime: Time}>
export type TeamEkStatement = $ReadOnly<{currentTeamEkMetadata: TeamEkMetadata}>
export type TeamEncryptedKBFSKeyset = $ReadOnly<{v: Int, e: Bytes, n: Bytes}>
export type TeamEncryptedKBFSKeysetHash = String
export type TeamExitRow = $ReadOnly<{id: TeamID}>
export type TeamGetLegacyTLFUpgrade = $ReadOnly<{encryptedKeyset: String, teamGeneration: PerTeamKeyGeneration, legacyGeneration: Int, appType: TeamApplication}>
export type TeamID = String
export type TeamIDAndName = $ReadOnly<{id: TeamID, name: TeamName}>
export type TeamIDWithVisibility = $ReadOnly<{teamID: TeamID, visibility: TLFVisibility}>
export type TeamInvite = $ReadOnly<{role: TeamRole, id: TeamInviteID, type: TeamInviteType, name: TeamInviteName, inviter: UserVersion}>
export type TeamInviteCategory =
  | 0 // NONE_0
  | 1 // UNKNOWN_1
  | 2 // KEYBASE_2
  | 3 // EMAIL_3
  | 4 // SBS_4
  | 5 // SEITAN_5

export type TeamInviteID = String
export type TeamInviteName = String
export type TeamInviteSocialNetwork = String
export type TeamInviteType = {c: 1, unknown: ?String} | {c: 4, sbs: ?TeamInviteSocialNetwork} | {c: any}
export type TeamInvitee = $ReadOnly<{inviteID: TeamInviteID, uid: UID, eldestSeqno: Seqno, role: TeamRole}>
export type TeamJoinRequest = $ReadOnly<{name: String, username: String}>
export type TeamKBFSKeyRefresher = $ReadOnly<{generation: Int, appType: TeamApplication}>
export type TeamLegacyTLFUpgradeChainInfo = $ReadOnly<{keysetHash: TeamEncryptedKBFSKeysetHash, teamGeneration: PerTeamKeyGeneration, legacyGeneration: Int, appType: TeamApplication}>
export type TeamList = $ReadOnly<{teams?: ?Array<MemberInfo>}>
export type TeamMember = $ReadOnly<{uid: UID, role: TeamRole, eldestSeqno: Seqno, userEldestSeqno: Seqno}>
export type TeamMemberDetails = $ReadOnly<{uv: UserVersion, username: String, fullName: FullName, needsPUK: Boolean, status: TeamMemberStatus}>
export type TeamMemberOutFromReset = $ReadOnly<{teamName: String, resetUser: TeamResetUser}>
export type TeamMemberOutReset = $ReadOnly<{teamname: String, username: String, uid: UID, id: Gregor1.MsgID}>
export type TeamMemberStatus =
  | 0 // ACTIVE_0
  | 1 // RESET_1
  | 2 // DELETED_2

export type TeamMembers = $ReadOnly<{owners?: ?Array<UserVersion>, admins?: ?Array<UserVersion>, writers?: ?Array<UserVersion>, readers?: ?Array<UserVersion>}>
export type TeamMembersDetails = $ReadOnly<{owners?: ?Array<TeamMemberDetails>, admins?: ?Array<TeamMemberDetails>, writers?: ?Array<TeamMemberDetails>, readers?: ?Array<TeamMemberDetails>}>
export type TeamName = $ReadOnly<{parts?: ?Array<TeamNamePart>}>
export type TeamNameLogPoint = $ReadOnly<{lastPart: TeamNamePart, seqno: Seqno}>
export type TeamNamePart = String
export type TeamOpenReqMsg = $ReadOnly<{teamID: TeamID, tars?: ?Array<TeamAccessRequest>}>
export type TeamOperation = $ReadOnly<{manageMembers: Boolean, manageSubteams: Boolean, createChannel: Boolean, chat: Boolean, deleteChannel: Boolean, renameChannel: Boolean, editChannelDescription: Boolean, setTeamShowcase: Boolean, setMemberShowcase: Boolean, setRetentionPolicy: Boolean, changeOpenTeam: Boolean, leaveTeam: Boolean, joinTeam: Boolean, setPublicityAny: Boolean, listFirst: Boolean, changeTarsDisabled: Boolean, deleteChatHistory: Boolean}>
export type TeamPlusApplicationKeys = $ReadOnly<{id: TeamID, name: String, implicit: Boolean, public: Boolean, application: TeamApplication, writers?: ?Array<UserVersion>, onlyReaders?: ?Array<UserVersion>, applicationKeys?: ?Array<TeamApplicationKey>}>
export type TeamRefreshers = $ReadOnly<{needKeyGeneration: PerTeamKeyGeneration, wantMembers?: ?Array<UserVersion>, wantMembersRole: TeamRole, needKBFSKeyGeneration: TeamKBFSKeyRefresher}>
export type TeamRequestAccessResult = $ReadOnly<{open: Boolean}>
export type TeamResetUser = $ReadOnly<{username: String, uid: UID, eldestSeqno: Seqno}>
export type TeamRole =
  | 0 // NONE_0
  | 1 // READER_1
  | 2 // WRITER_2
  | 3 // ADMIN_3
  | 4 // OWNER_4

export type TeamSBSMsg = $ReadOnly<{teamID: TeamID, score: Int, invitees?: ?Array<TeamInvitee>}>
export type TeamSeitanMsg = $ReadOnly<{teamID: TeamID, seitans?: ?Array<TeamSeitanRequest>}>
export type TeamSeitanRequest = $ReadOnly<{inviteID: TeamInviteID, uid: UID, eldestSeqno: Seqno, akey: SeitanAKey, role: TeamRole, unixCTime: Int64}>
export type TeamSettings = $ReadOnly<{open: Boolean, joinAs: TeamRole}>
export type TeamShowcase = $ReadOnly<{isShowcased: Boolean, description?: ?String, setByUID?: ?UID, anyMemberShowcase: Boolean}>
export type TeamSigChainState = $ReadOnly<{reader: UserVersion, id: TeamID, implicit: Boolean, public: Boolean, rootAncestor: TeamName, nameDepth: Int, nameLog?: ?Array<TeamNameLogPoint>, lastSeqno: Seqno, lastLinkID: LinkID, parentID?: ?TeamID, userLog: {[key: string]: ?Array<UserLogPoint>}, subteamLog: {[key: string]: ?Array<SubteamLogPoint>}, perTeamKeys: {[key: string]: PerTeamKey}, perTeamKeyCTime: UnixTime, linkIDs: {[key: string]: LinkID}, stubbedLinks: {[key: string]: Boolean}, activeInvites: {[key: string]: TeamInvite}, obsoleteInvites: {[key: string]: TeamInvite}, open: Boolean, openTeamJoinAs: TeamRole, tlfID: TLFID, tlfLegacyUpgrade: {[key: string]: TeamLegacyTLFUpgradeChainInfo}}>
export type TeamStatus =
  | 0 // NONE_0
  | 1 // LIVE_1
  | 2 // DELETED_2
  | 3 // ABANDONED_3

export type TeamTreeEntry = $ReadOnly<{name: TeamName, admin: Boolean}>
export type TeamTreeResult = $ReadOnly<{entries?: ?Array<TeamTreeEntry>}>
export type TeamType =
  | 0 // NONE_0
  | 1 // LEGACY_1
  | 2 // MODERN_2

export type TeamsCanUserPerformRpcParam = $ReadOnly<{name: String}>
export type TeamsFindNextMerkleRootAfterTeamRemovalBySigningKeyRpcParam = $ReadOnly<{uid: UID, signingKey: KID, team: TeamID, isPublic: Boolean, anyRoleAllowed: Boolean}>
export type TeamsFindNextMerkleRootAfterTeamRemovalRpcParam = $ReadOnly<{uid: UID, team: TeamID, isPublic: Boolean, teamSigchainSeqno: Seqno, prev: MerkleRootV2}>
export type TeamsGetTarsDisabledRpcParam = $ReadOnly<{name: String}>
export type TeamsGetTeamAndMemberShowcaseRpcParam = $ReadOnly<{name: String}>
export type TeamsGetTeamRootIDRpcParam = $ReadOnly<{id: TeamID}>
export type TeamsGetTeamShowcaseRpcParam = $ReadOnly<{name: String}>
export type TeamsLoadTeamPlusApplicationKeysRpcParam = $ReadOnly<{id: TeamID, application: TeamApplication, refreshers: TeamRefreshers}>
export type TeamsLookupImplicitTeamRpcParam = $ReadOnly<{name: String, public: Boolean}>
export type TeamsLookupOrCreateImplicitTeamRpcParam = $ReadOnly<{name: String, public: Boolean}>
export type TeamsProfileTeamLoadRpcParam = $ReadOnly<{arg: LoadTeamArg}>
export type TeamsSetTarsDisabledRpcParam = $ReadOnly<{name: String, disabled: Boolean}>
export type TeamsSetTeamMemberShowcaseRpcParam = $ReadOnly<{name: String, isShowcased: Boolean}>
export type TeamsSetTeamShowcaseRpcParam = $ReadOnly<{name: String, isShowcased?: ?Boolean, description?: ?String, anyMemberShowcase?: ?Boolean}>
export type TeamsTeamAcceptInviteOrRequestAccessRpcParam = $ReadOnly<{tokenOrName: String}>
export type TeamsTeamAcceptInviteRpcParam = $ReadOnly<{token: String}>
export type TeamsTeamAddEmailsBulkRpcParam = $ReadOnly<{name: String, emails: String, role: TeamRole}>
export type TeamsTeamAddMemberRpcParam = $ReadOnly<{name: String, email: String, username: String, role: TeamRole, sendChatNotification: Boolean}>
export type TeamsTeamChangeMembershipRpcParam = $ReadOnly<{name: String, req: TeamChangeReq}>
export type TeamsTeamCreateRpcParam = $ReadOnly<{name: String, joinSubteam: Boolean}>
export type TeamsTeamCreateSeitanTokenRpcParam = $ReadOnly<{name: String, role: TeamRole, label: SeitanKeyLabel}>
export type TeamsTeamCreateSeitanTokenV2RpcParam = $ReadOnly<{name: String, role: TeamRole, label: SeitanKeyLabel}>
export type TeamsTeamCreateWithSettingsRpcParam = $ReadOnly<{name: String, joinSubteam: Boolean, settings: TeamSettings}>
export type TeamsTeamDebugRpcParam = $ReadOnly<{teamID: TeamID}>
export type TeamsTeamDeleteRpcParam = $ReadOnly<{name: String}>
export type TeamsTeamEditMemberRpcParam = $ReadOnly<{name: String, username: String, role: TeamRole}>
export type TeamsTeamGetRpcParam = $ReadOnly<{name: String}>
export type TeamsTeamIgnoreRequestRpcParam = $ReadOnly<{name: String, username: String}>
export type TeamsTeamImplicitAdminsRpcParam = $ReadOnly<{teamName: String}>
export type TeamsTeamLeaveRpcParam = $ReadOnly<{name: String, permanent: Boolean}>
export type TeamsTeamListMyAccessRequestsRpcParam = $ReadOnly<{teamName?: ?String}>
export type TeamsTeamListRequestsRpcParam = $ReadOnly<{teamName?: ?String}>
export type TeamsTeamListSubteamsRecursiveRpcParam = $ReadOnly<{parentTeamName: String, forceRepoll: Boolean}>
export type TeamsTeamListTeammatesRpcParam = $ReadOnly<{includeImplicitTeams: Boolean}>
export type TeamsTeamListUnverifiedRpcParam = $ReadOnly<{userAssertion: String, includeImplicitTeams: Boolean}>
export type TeamsTeamListVerifiedRpcParam = $ReadOnly<{userAssertion: String, includeImplicitTeams: Boolean}>
export type TeamsTeamReAddMemberAfterResetRpcParam = $ReadOnly<{id: TeamID, username: String}>
export type TeamsTeamRemoveMemberRpcParam = $ReadOnly<{name: String, username: String, email: String, inviteID: TeamInviteID}>
export type TeamsTeamRenameRpcParam = $ReadOnly<{prevName: TeamName, newName: TeamName}>
export type TeamsTeamRequestAccessRpcParam = $ReadOnly<{name: String}>
export type TeamsTeamRotateKeyRpcParam = $ReadOnly<{teamID: TeamID}>
export type TeamsTeamSetSettingsRpcParam = $ReadOnly<{name: String, settings: TeamSettings}>
export type TeamsTeamTreeRpcParam = $ReadOnly<{name: TeamName}>
export type TeamsTryDecryptWithTeamKeyRpcParam = $ReadOnly<{teamID: TeamID, encryptedData: Bytes, nonce: BoxNonce, peersPublicKey: BoxPublicKey, minGeneration: PerTeamKeyGeneration}>
export type TeamsUiConfirmRootTeamDeleteRpcParam = $ReadOnly<{teamName: String}>
export type TeamsUiConfirmSubteamDeleteRpcParam = $ReadOnly<{teamName: String}>
export type TeamsUploadTeamAvatarRpcParam = $ReadOnly<{teamname: String, filename: String, crop?: ?ImageCropRect, sendChatNotification: Boolean}>
export type Test = $ReadOnly<{reply: String}>
export type TestPanicRpcParam = $ReadOnly<{message: String}>
export type TestTestCallbackRpcParam = $ReadOnly<{name: String}>
export type TestTestRpcParam = $ReadOnly<{name: String}>
export type Text = $ReadOnly<{data: String, markup: Boolean}>
export type Time = Long
export type TlfCompleteAndCanonicalizePrivateTlfNameRpcParam = $ReadOnly<{query: TLFQuery}>
export type TlfCryptKeysRpcParam = $ReadOnly<{query: TLFQuery}>
export type TlfKeysGetPublicCanonicalTLFNameAndIDRpcParam = $ReadOnly<{query: TLFQuery}>
export type TlfKeysGetTLFCryptKeysRpcParam = $ReadOnly<{query: TLFQuery}>
export type TlfPublicCanonicalTLFNameAndIDRpcParam = $ReadOnly<{query: TLFQuery}>
export type TrackCheckTrackingRpcParam = void
export type TrackDiff = $ReadOnly<{type: TrackDiffType, displayMarkup: String}>
export type TrackDiffType =
  | 0 // NONE_0
  | 1 // ERROR_1
  | 2 // CLASH_2
  | 3 // REVOKED_3
  | 4 // UPGRADED_4
  | 5 // NEW_5
  | 6 // REMOTE_FAIL_6
  | 7 // REMOTE_WORKING_7
  | 8 // REMOTE_CHANGED_8
  | 9 // NEW_ELDEST_9
  | 10 // NONE_VIA_TEMPORARY_10

export type TrackDismissWithTokenRpcParam = $ReadOnly<{trackToken: TrackToken}>
export type TrackFakeTrackingChangedRpcParam = $ReadOnly<{username: String, isTracking: Boolean}>
export type TrackOptions = $ReadOnly<{localOnly: Boolean, bypassConfirm: Boolean, forceRetrack: Boolean, expiringLocal: Boolean, forPGPPull: Boolean, sigVersion?: ?SigVersion}>
export type TrackProof = $ReadOnly<{proofType: String, proofName: String, idString: String}>
export type TrackStatus =
  | 1 // NEW_OK_1
  | 2 // NEW_ZERO_PROOFS_2
  | 3 // NEW_FAIL_PROOFS_3
  | 4 // UPDATE_BROKEN_FAILED_PROOFS_4
  | 5 // UPDATE_NEW_PROOFS_5
  | 6 // UPDATE_OK_6
  | 7 // UPDATE_BROKEN_REVOKED_7

export type TrackSummary = $ReadOnly<{username: String, time: Time, isRemote: Boolean}>
export type TrackToken = String
export type TrackTrackRpcParam = $ReadOnly<{userAssertion: String, options: TrackOptions, forceRemoteCheck: Boolean}>
export type TrackTrackWithTokenRpcParam = $ReadOnly<{trackToken: TrackToken, options: TrackOptions}>
export type TrackUntrackRpcParam = $ReadOnly<{username: String}>
export type Tracker = $ReadOnly<{tracker: UID, status: Int, mTime: Time}>
export type UID = String
export type UPAKVersion =
  | 1 // V1_1
  | 2 // V2_2

export type UPAKVersioned = {v: 1, v1: ?UserPlusAllKeys} | {v: 2, v2: ?UserPlusKeysV2AllIncarnations}
export type UPK2MinorVersion =
  | 0 // V0_0
  | 1 // V1_1
  | 2 // V2_2
  | 3 // V3_3
  | 4 // V4_4
  | 5 // V5_5
  | 6 // V6_6

export type UiPromptYesNoRpcParam = $ReadOnly<{text: Text, promptDefault: PromptDefault}>
export type UnboxAnyRes = $ReadOnly<{kid: KID, plaintext: Bytes32, index: Int}>
export type UninstallResult = $ReadOnly<{componentResults?: ?Array<ComponentResult>, status: Status}>
export type UnixTime = Long
export type User = $ReadOnly<{uid: UID, username: String}>
export type UserCard = $ReadOnly<{following: Int, followers: Int, uid: UID, fullName: String, location: String, bio: String, website: String, twitter: String, youFollowThem: Boolean, theyFollowYou: Boolean, teamShowcase?: ?Array<UserTeamShowcase>}>
export type UserEk = $ReadOnly<{seed: Bytes32, metadata: UserEkMetadata}>
export type UserEkBoxMetadata = $ReadOnly<{box: String, recipientGeneration: EkGeneration, recipientDeviceID: DeviceID}>
export type UserEkBoxed = $ReadOnly<{box: String, deviceEkGeneration: EkGeneration, metadata: UserEkMetadata}>
export type UserEkMetadata = $ReadOnly<{kid: KID, hashMeta: HashMeta, generation: EkGeneration, ctime: Time}>
export type UserEkStatement = $ReadOnly<{currentUserEkMetadata: UserEkMetadata}>
export type UserFindNextMerkleRootAfterResetRpcParam = $ReadOnly<{uid: UID, resetSeqno: Seqno, prev: ResetMerkleRoot}>
export type UserFindNextMerkleRootAfterRevokeRpcParam = $ReadOnly<{uid: UID, kid: KID, loc: SigChainLocation, prev: MerkleRootV2}>
export type UserGetUPAKRpcParam = $ReadOnly<{uid: UID}>
export type UserInterestingPeopleRpcParam = $ReadOnly<{maxUsers: Int}>
export type UserListTrackers2RpcParam = $ReadOnly<{assertion: String, reverse: Boolean}>
export type UserListTrackersByNameRpcParam = $ReadOnly<{username: String}>
export type UserListTrackersRpcParam = $ReadOnly<{uid: UID}>
export type UserListTrackersSelfRpcParam = void
export type UserListTrackingJSONRpcParam = $ReadOnly<{filter: String, verbose: Boolean, assertion: String}>
export type UserListTrackingRpcParam = $ReadOnly<{filter: String, assertion: String}>
export type UserLoadAllPublicKeysUnverifiedRpcParam = $ReadOnly<{uid: UID}>
export type UserLoadMyPublicKeysRpcParam = void
export type UserLoadMySettingsRpcParam = void
export type UserLoadPublicKeysRpcParam = $ReadOnly<{uid: UID}>
export type UserLoadUncheckedUserSummariesRpcParam = $ReadOnly<{uids?: ?Array<UID>}>
export type UserLoadUserByNameRpcParam = $ReadOnly<{username: String}>
export type UserLoadUserPlusKeysRpcParam = $ReadOnly<{uid: UID, pollForKID: KID}>
export type UserLoadUserPlusKeysV2RpcParam = $ReadOnly<{uid: UID, pollForKID: KID}>
export type UserLoadUserRpcParam = $ReadOnly<{uid: UID}>
export type UserLogPoint = $ReadOnly<{role: TeamRole, sigMeta: SignatureMetadata}>
export type UserMeUserVersionRpcParam = $ReadOnly<{forcePoll: Boolean}>
export type UserOrTeamID = String
export type UserOrTeamLite = $ReadOnly<{id: UserOrTeamID, name: String}>
export type UserOrTeamResult =
  | 1 // USER_1
  | 2 // TEAM_2

export type UserPlusAllKeys = $ReadOnly<{base: UserPlusKeys, pgpKeys?: ?Array<PublicKey>, remoteTracks?: ?Array<RemoteTrack>}>
export type UserPlusKeys = $ReadOnly<{uid: UID, username: String, eldestSeqno: Seqno, status: StatusCode, deviceKeys?: ?Array<PublicKey>, revokedDeviceKeys?: ?Array<RevokedKey>, pgpKeyCount: Int, uvv: UserVersionVector, deletedDeviceKeys?: ?Array<PublicKey>, perUserKeys?: ?Array<PerUserKey>, resets?: ?Array<ResetSummary>}>
export type UserPlusKeysV2 = $ReadOnly<{uid: UID, username: String, eldestSeqno: Seqno, status: StatusCode, perUserKeys?: ?Array<PerUserKey>, deviceKeys: {[key: string]: PublicKeyV2NaCl}, pgpKeys: {[key: string]: PublicKeyV2PGPSummary}, remoteTracks: {[key: string]: RemoteTrack}, reset?: ?ResetSummary}>
export type UserPlusKeysV2AllIncarnations = $ReadOnly<{current: UserPlusKeysV2, pastIncarnations?: ?Array<UserPlusKeysV2>, uvv: UserVersionVector, seqnoLinkIDs: {[key: string]: LinkID}, minorVersion: UPK2MinorVersion}>
export type UserProfileEditRpcParam = $ReadOnly<{fullName: String, location: String, bio: String}>
export type UserResolution = $ReadOnly<{assertion: SocialAssertion, userID: UID}>
export type UserSearchRpcParam = $ReadOnly<{query: String}>
export type UserSettings = $ReadOnly<{emails?: ?Array<Email>}>
export type UserSummary = $ReadOnly<{uid: UID, username: String, thumbnail: String, idVersion: Int, fullName: String, bio: String, proofs: Proofs, sigIDDisplay: String, trackTime: Time}>
export type UserSummary2 = $ReadOnly<{uid: UID, username: String, thumbnail: String, fullName: String, isFollower: Boolean, isFollowee: Boolean}>
export type UserSummary2Set = $ReadOnly<{users?: ?Array<UserSummary2>, time: Time, version: Int}>
export type UserTeamShowcase = $ReadOnly<{fqName: String, open: Boolean, teamIsShowcased: Boolean, description: String, role: TeamRole, publicAdmins?: ?Array<String>, numMembers: Int}>
export type UserUploadUserAvatarRpcParam = $ReadOnly<{filename: String, crop?: ?ImageCropRect}>
export type UserVersion = $ReadOnly<{uid: UID, eldestSeqno: Seqno}>
export type UserVersionPercentForm = String
export type UserVersionVector = $ReadOnly<{id: Long, sigHints: Int, sigChain: Long, cachedAt: Time}>
export type VerifySessionRes = $ReadOnly<{uid: UID, sid: String, generated: Int, lifetime: Int}>
export type WebProof = $ReadOnly<{hostname: String, protocols?: ?Array<String>}>
export type WriteArgs = $ReadOnly<{opID: OpID, path: Path, offset: Long}>
type AccountHasServerKeysResult = HasServerKeysRes
type AccountPassphrasePromptResult = GetPassphraseRes
type ApiserverDeleteResult = APIRes
type ApiserverGetResult = APIRes
type ApiserverGetWithSessionResult = APIRes
type ApiserverPostJSONResult = APIRes
type ApiserverPostResult = APIRes
type AvatarsLoadTeamAvatarsResult = LoadAvatarsRes
type AvatarsLoadUserAvatarsResult = LoadAvatarsRes
type BadgerGetBadgeStateResult = BadgeState
type BlockArchiveReferenceResult = ?Array<BlockReference>
type BlockArchiveReferenceWithCountResult = DowngradeReferenceRes
type BlockBlockPingResult = BlockPingResponse
type BlockDelReferenceWithCountResult = DowngradeReferenceRes
type BlockGetBlockResult = GetBlockRes
type BlockGetSessionChallengeResult = ChallengeInfo
type BlockGetTeamQuotaInfoResult = Bytes
type BlockGetUserQuotaInfoResult = Bytes
type ConfigCheckAPIServerOutOfDateWarningResult = OutOfDateInfo
type ConfigGetBootstrapStatusResult = BootstrapStatus
type ConfigGetConfigResult = Config
type ConfigGetCurrentStatusResult = GetCurrentStatusRes
type ConfigGetExtendedStatusResult = ExtendedStatus
type ConfigGetRememberPassphraseResult = Boolean
type ConfigGetValueResult = ConfigValue
type ConfigWaitForClientResult = Boolean
type CryptoSignED25519ForKBFSResult = ED25519SignatureInfo
type CryptoSignED25519Result = ED25519SignatureInfo
type CryptoSignToStringResult = String
type CryptoUnboxBytes32AnyResult = UnboxAnyRes
type CryptoUnboxBytes32Result = Bytes32
type CryptocurrencyRegisterAddressResult = RegisterAddressRes
type CtlDbGetResult = ?DbValue
type DebuggingFirstStepResult = FirstStepResult
type DebuggingIncrementResult = Int
type DebuggingScriptResult = String
type DebuggingSecondStepResult = Int
type DeviceCheckDeviceNameFormatResult = Boolean
type DeviceDeviceHistoryListResult = ?Array<DeviceDetail>
type DeviceDeviceListResult = ?Array<Device>
type FavoriteGetFavoritesResult = FavoritesResult
type FsListResult = ListResult
type GitCreatePersonalRepoResult = RepoID
type GitCreateTeamRepoResult = RepoID
type GitGetAllGitMetadataResult = ?Array<GitRepoResult>
type GitGetGitMetadataResult = ?Array<GitRepoResult>
type GitGetTeamRepoSettingsResult = GitTeamRepoSettings
type GpgUiConfirmDuplicateKeyChosenResult = Boolean
type GpgUiConfirmImportSecretToExistingKeyResult = Boolean
type GpgUiGetTTYResult = String
type GpgUiSelectKeyAndPushOptionResult = SelectKeyRes
type GpgUiSelectKeyResult = String
type GpgUiSignResult = String
type GpgUiWantToAddGPGKeyResult = Boolean
type GregorGetStateResult = Gregor1.State
type GregorInjectItemResult = Gregor1.MsgID
type GregorUpdateCategoryResult = Gregor1.MsgID
type GregorUpdateItemResult = Gregor1.MsgID
type HomeHomeGetScreenResult = HomeScreen
type IdentifyIdentify2Result = Identify2Res
type IdentifyIdentifyLiteResult = IdentifyLiteRes
type IdentifyResolve3Result = UserOrTeamLite
type IdentifyResolveIdentifyImplicitTeamResult = ResolveIdentifyImplicitTeamRes
type IdentifyResolveImplicitTeamResult = Folder
type IdentifyUiConfirmResult = ConfirmResult
type IdentifyUiDelegateIdentifyUIResult = Int
type InstallFuseStatusResult = FuseStatus
type InstallInstallCommandLinePrivilegedResult = InstallResult
type InstallInstallFuseResult = InstallResult
type InstallInstallKBFSResult = InstallResult
type InstallUninstallKBFSResult = UninstallResult
type KBFSGitCreateRepoResult = RepoID
type KbfsGetKBFSTeamSettingsResult = KBFSTeamSettings
type KbfsMountGetAllAvailableMountDirsResult = ?Array<String>
type KbfsMountGetCurrentMountDirResult = String
type Kex2Provisionee2Hello2Result = Hello2Res
type Kex2ProvisioneeHelloResult = HelloRes
type LoginGetConfiguredAccountsResult = ?Array<ConfiguredAccount>
type LoginUiGetEmailOrUsernameResult = String
type LoginUiPromptRevokePaperKeysResult = Boolean
type MerkleGetCurrentMerkleRootResult = MerkleRootAndTime
type MetadataAuthenticateResult = Int
type MetadataFindNextMDResult = FindNextMDResponse
type MetadataGetChallengeResult = ChallengeInfo
type MetadataGetFolderHandleResult = Bytes
type MetadataGetKeyBundlesResult = KeyBundleResponse
type MetadataGetKeyResult = Bytes
type MetadataGetLatestFolderHandleResult = Bytes
type MetadataGetMerkleNodeResult = Bytes
type MetadataGetMerkleRootLatestResult = MerkleRoot
type MetadataGetMerkleRootResult = MerkleRoot
type MetadataGetMerkleRootSinceResult = MerkleRoot
type MetadataGetMetadataResult = MetadataResponse
type MetadataPing2Result = PingResponse
type MetadataTruncateLockResult = Boolean
type MetadataTruncateUnlockResult = Boolean
type PgpPgpDecryptResult = PGPSigVerification
type PgpPgpExportByFingerprintResult = ?Array<KeyInfo>
type PgpPgpExportByKIDResult = ?Array<KeyInfo>
type PgpPgpExportResult = ?Array<KeyInfo>
type PgpPgpPurgeResult = PGPPurgeRes
type PgpPgpVerifyResult = PGPSigVerification
type PgpUiShouldPushPrivateResult = Boolean
type ProveCheckProofResult = CheckProofStatus
type ProveStartProofResult = StartProofResult
type ProveUiOkToCheckResult = Boolean
type ProveUiPreProofWarningResult = Boolean
type ProveUiPromptOverwriteResult = Boolean
type ProveUiPromptUsernameResult = String
type ProvisionUiChooseDeviceResult = DeviceID
type ProvisionUiChooseDeviceTypeResult = DeviceType
type ProvisionUiChooseGPGMethodResult = GPGMethod
type ProvisionUiChooseProvisioningMethodResult = ProvisionMethod
type ProvisionUiDisplayAndPromptSecretResult = SecretResponse
type ProvisionUiPromptNewDeviceNameResult = String
type ProvisionUiSwitchToGPGSignOKResult = Boolean
type QuotaVerifySessionResult = VerifySessionRes
type ReachabilityCheckReachabilityResult = Reachability
type ReachabilityStartReachabilityResult = Reachability
type RekeyGetPendingRekeyStatusResult = ProblemSetDevices
type RekeyGetRevokeWarningResult = RevokeWarning
type RekeyRekeyStatusFinishResult = Outcome
type RekeyUIDelegateRekeyUIResult = Int
type SaltpackSaltpackDecryptResult = SaltpackEncryptedMessageInfo
type SecretKeysGetSecretKeysResult = SecretKeys
type SecretUiGetPassphraseResult = GetPassphraseRes
type SessionCurrentSessionResult = Session
type SignupGetInvitationCodeResult = String
type SignupSignupResult = SignupRes
type SigsSigListJSONResult = String
type SigsSigListResult = ?Array<Sig>
type SimpleFSSimpleFSCheckResult = OpProgress
type SimpleFSSimpleFSFolderEditHistoryResult = FSFolderEditHistory
type SimpleFSSimpleFSGetHTTPAddressAndTokenResult = SimpleFSGetHTTPAddressAndTokenResponse
type SimpleFSSimpleFSGetOpsResult = ?Array<OpDescription>
type SimpleFSSimpleFSGetUserQuotaUsageResult = SimpleFSQuotaUsage
type SimpleFSSimpleFSMakeOpidResult = OpID
type SimpleFSSimpleFSReadListResult = SimpleFSListResult
type SimpleFSSimpleFSReadResult = FileContent
type SimpleFSSimpleFSStatResult = Dirent
type SimpleFSSimpleFSSyncStatusResult = FSSyncStatus
type SimpleFSSimpleFSUserEditHistoryResult = ?Array<FSFolderEditHistory>
type StreamUiReadResult = Bytes
type StreamUiWriteResult = Int
type TeamsCanUserPerformResult = TeamOperation
type TeamsFindNextMerkleRootAfterTeamRemovalBySigningKeyResult = NextMerkleRootRes
type TeamsFindNextMerkleRootAfterTeamRemovalResult = NextMerkleRootRes
type TeamsGetTarsDisabledResult = Boolean
type TeamsGetTeamAndMemberShowcaseResult = TeamAndMemberShowcase
type TeamsGetTeamRootIDResult = TeamID
type TeamsGetTeamShowcaseResult = TeamShowcase
type TeamsLoadTeamPlusApplicationKeysResult = TeamPlusApplicationKeys
type TeamsLookupImplicitTeamResult = LookupImplicitTeamRes
type TeamsLookupOrCreateImplicitTeamResult = LookupImplicitTeamRes
type TeamsProfileTeamLoadResult = ProfileTeamLoadRes
type TeamsTeamAcceptInviteOrRequestAccessResult = TeamAcceptOrRequestResult
type TeamsTeamAddEmailsBulkResult = BulkRes
type TeamsTeamAddMemberResult = TeamAddMemberResult
type TeamsTeamCreateResult = TeamCreateResult
type TeamsTeamCreateSeitanTokenResult = SeitanIKey
type TeamsTeamCreateSeitanTokenV2Result = SeitanIKeyV2
type TeamsTeamCreateWithSettingsResult = TeamCreateResult
type TeamsTeamDebugResult = TeamDebugRes
type TeamsTeamGetResult = TeamDetails
type TeamsTeamImplicitAdminsResult = ?Array<TeamMemberDetails>
type TeamsTeamListMyAccessRequestsResult = ?Array<TeamName>
type TeamsTeamListRequestsResult = ?Array<TeamJoinRequest>
type TeamsTeamListSubteamsRecursiveResult = ?Array<TeamIDAndName>
type TeamsTeamListTeammatesResult = AnnotatedTeamList
type TeamsTeamListUnverifiedResult = AnnotatedTeamList
type TeamsTeamListVerifiedResult = AnnotatedTeamList
type TeamsTeamRequestAccessResult = TeamRequestAccessResult
type TeamsTeamTreeResult = TeamTreeResult
type TeamsTryDecryptWithTeamKeyResult = Bytes
type TeamsUiConfirmRootTeamDeleteResult = Boolean
type TeamsUiConfirmSubteamDeleteResult = Boolean
type TestTestCallbackResult = String
type TestTestResult = Test
type TlfCompleteAndCanonicalizePrivateTlfNameResult = CanonicalTLFNameAndIDWithBreaks
type TlfCryptKeysResult = GetTLFCryptKeysRes
type TlfKeysGetPublicCanonicalTLFNameAndIDResult = CanonicalTLFNameAndIDWithBreaks
type TlfKeysGetTLFCryptKeysResult = GetTLFCryptKeysRes
type TlfPublicCanonicalTLFNameAndIDResult = CanonicalTLFNameAndIDWithBreaks
type TrackTrackResult = ConfirmResult
type UiPromptYesNoResult = Boolean
type UserFindNextMerkleRootAfterResetResult = NextMerkleRootRes
type UserFindNextMerkleRootAfterRevokeResult = NextMerkleRootRes
type UserGetUPAKResult = UPAKVersioned
type UserInterestingPeopleResult = ?Array<InterestingPerson>
type UserListTrackers2Result = UserSummary2Set
type UserListTrackersByNameResult = ?Array<Tracker>
type UserListTrackersResult = ?Array<Tracker>
type UserListTrackersSelfResult = ?Array<Tracker>
type UserListTrackingJSONResult = String
type UserListTrackingResult = ?Array<UserSummary>
type UserLoadAllPublicKeysUnverifiedResult = ?Array<PublicKey>
type UserLoadMyPublicKeysResult = ?Array<PublicKey>
type UserLoadMySettingsResult = UserSettings
type UserLoadPublicKeysResult = ?Array<PublicKey>
type UserLoadUncheckedUserSummariesResult = ?Array<UserSummary>
type UserLoadUserByNameResult = User
type UserLoadUserPlusKeysResult = UserPlusKeys
type UserLoadUserPlusKeysV2Result = UserPlusKeysV2AllIncarnations
type UserLoadUserResult = User
type UserMeUserVersionResult = UserVersion
type UserSearchResult = ?Array<SearchResult>

export type IncomingCallMapType = {|
  'keybase.1.gpgUi.wantToAddGPGKey'?: (params: $ReadOnly<{sessionID: Int}>, response: {error: RPCErrorHandler, result: (result: GpgUiWantToAddGPGKeyResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.gpgUi.confirmDuplicateKeyChosen'?: (params: $ReadOnly<{sessionID: Int}>, response: {error: RPCErrorHandler, result: (result: GpgUiConfirmDuplicateKeyChosenResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.gpgUi.confirmImportSecretToExistingKey'?: (params: $ReadOnly<{sessionID: Int}>, response: {error: RPCErrorHandler, result: (result: GpgUiConfirmImportSecretToExistingKeyResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.gpgUi.selectKeyAndPushOption'?: (params: $ReadOnly<{sessionID: Int, keys?: ?Array<GPGKey>}>, response: {error: RPCErrorHandler, result: (result: GpgUiSelectKeyAndPushOptionResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.gpgUi.selectKey'?: (params: $ReadOnly<{sessionID: Int, keys?: ?Array<GPGKey>}>, response: {error: RPCErrorHandler, result: (result: GpgUiSelectKeyResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.gpgUi.sign'?: (params: $ReadOnly<{msg: Bytes, fingerprint: Bytes}>, response: {error: RPCErrorHandler, result: (result: GpgUiSignResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.gpgUi.getTTY'?: (params: $ReadOnly<{}>, response: {error: RPCErrorHandler, result: (result: GpgUiGetTTYResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.gregorUI.pushState'?: (params: $ReadOnly<{state: Gregor1.State, reason: PushReason}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.gregorUI.pushOutOfBandMessages'?: (params: $ReadOnly<{oobm?: ?Array<Gregor1.OutOfBandMessage>}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.homeUI.homeUIRefresh'?: (params: $ReadOnly<{}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.identifyUi.displayTLFCreateWithInvite'?: (params: $ReadOnly<{sessionID: Int, folderName: String, isPrivate: Boolean, assertion: String, socialAssertion: SocialAssertion, inviteLink: String, throttled: Boolean}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.identifyUi.delegateIdentifyUI'?: (params: $ReadOnly<{}>, response: {error: RPCErrorHandler, result: (result: IdentifyUiDelegateIdentifyUIResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.identifyUi.start'?: (params: $ReadOnly<{sessionID: Int, username: String, reason: IdentifyReason, forceDisplay?: Boolean}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.identifyUi.displayKey'?: (params: $ReadOnly<{sessionID: Int, key: IdentifyKey}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.identifyUi.reportLastTrack'?: (params: $ReadOnly<{sessionID: Int, track?: ?TrackSummary}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.identifyUi.launchNetworkChecks'?: (params: $ReadOnly<{sessionID: Int, identity: Identity, user: User}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.identifyUi.displayTrackStatement'?: (params: $ReadOnly<{sessionID: Int, stmt: String}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.identifyUi.finishWebProofCheck'?: (params: $ReadOnly<{sessionID: Int, rp: RemoteProof, lcr: LinkCheckResult}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.identifyUi.finishSocialProofCheck'?: (params: $ReadOnly<{sessionID: Int, rp: RemoteProof, lcr: LinkCheckResult}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.identifyUi.displayCryptocurrency'?: (params: $ReadOnly<{sessionID: Int, c: Cryptocurrency}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.identifyUi.reportTrackToken'?: (params: $ReadOnly<{sessionID: Int, trackToken: TrackToken}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.identifyUi.displayUserCard'?: (params: $ReadOnly<{sessionID: Int, card: UserCard}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.identifyUi.confirm'?: (params: $ReadOnly<{sessionID: Int, outcome: IdentifyOutcome}>, response: {error: RPCErrorHandler, result: (result: IdentifyUiConfirmResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.identifyUi.cancel'?: (params: $ReadOnly<{sessionID: Int}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.identifyUi.finish'?: (params: $ReadOnly<{sessionID: Int}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.identifyUi.dismiss'?: (params: $ReadOnly<{sessionID: Int, username: String, reason: DismissReason}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.logUi.log'?: (params: $ReadOnly<{sessionID: Int, level: LogLevel, text: Text}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.loginUi.getEmailOrUsername'?: (params: $ReadOnly<{sessionID: Int}>, response: {error: RPCErrorHandler, result: (result: LoginUiGetEmailOrUsernameResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.loginUi.promptRevokePaperKeys'?: (params: $ReadOnly<{sessionID: Int, device: Device, index: Int}>, response: {error: RPCErrorHandler, result: (result: LoginUiPromptRevokePaperKeysResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.loginUi.displayPaperKeyPhrase'?: (params: $ReadOnly<{sessionID: Int, phrase: String}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.loginUi.displayPrimaryPaperKey'?: (params: $ReadOnly<{sessionID: Int, phrase: String}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.logsend.prepareLogsend'?: (params: $ReadOnly<{}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifyApp.exit'?: (params: $ReadOnly<{}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifyBadges.badgeState'?: (params: $ReadOnly<{badgeState: BadgeState}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifyEphemeral.newTeamEk'?: (params: $ReadOnly<{id: TeamID, generation: EkGeneration}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifyFavorites.favoritesChanged'?: (params: $ReadOnly<{uid: UID}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifyFS.FSActivity'?: (params: $ReadOnly<{notification: FSNotification}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifyFS.FSPathUpdated'?: (params: $ReadOnly<{path: String}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifyFS.FSSyncActivity'?: (params: $ReadOnly<{status: FSPathSyncStatus}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifyFS.FSEditListResponse'?: (params: $ReadOnly<{edits: FSFolderEditHistory, requestID: Int}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifyFS.FSSyncStatusResponse'?: (params: $ReadOnly<{status: FSSyncStatus, requestID: Int}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifyKeyfamily.keyfamilyChanged'?: (params: $ReadOnly<{uid: UID}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifyPaperKey.paperKeyCached'?: (params: $ReadOnly<{uid: UID, encKID: KID, sigKID: KID}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifyPGP.pgpKeyInSecretStoreFile'?: (params: $ReadOnly<{}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifyService.shutdown'?: (params: $ReadOnly<{code: Int}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifySession.loggedOut'?: (params: $ReadOnly<{}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifySession.loggedIn'?: (params: $ReadOnly<{username: String}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifySession.clientOutOfDate'?: (params: $ReadOnly<{upgradeTo: String, upgradeURI: String, upgradeMsg: String}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifyTeam.teamChangedByID'?: (params: $ReadOnly<{teamID: TeamID, latestSeqno: Seqno, implicitTeam: Boolean, changes: TeamChangeSet}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifyTeam.teamChangedByName'?: (params: $ReadOnly<{teamName: String, latestSeqno: Seqno, implicitTeam: Boolean, changes: TeamChangeSet}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifyTeam.teamDeleted'?: (params: $ReadOnly<{teamID: TeamID}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifyTeam.teamAbandoned'?: (params: $ReadOnly<{teamID: TeamID}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifyTeam.teamExit'?: (params: $ReadOnly<{teamID: TeamID}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifyTeam.avatarUpdated'?: (params: $ReadOnly<{name: String, formats?: ?Array<AvatarFormat>}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifyTracking.trackingChanged'?: (params: $ReadOnly<{uid: UID, username: String, isTracking: Boolean}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.NotifyUsers.userChanged'?: (params: $ReadOnly<{uid: UID}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.pgpUi.outputSignatureSuccess'?: (params: $ReadOnly<{sessionID: Int, fingerprint: String, username: String, signedAt: Time}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.pgpUi.outputSignatureSuccessNonKeybase'?: (params: $ReadOnly<{sessionID: Int, keyID: String, signedAt: Time}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.pgpUi.keyGenerated'?: (params: $ReadOnly<{sessionID: Int, kid: KID, key: KeyInfo}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.pgpUi.shouldPushPrivate'?: (params: $ReadOnly<{sessionID: Int}>, response: {error: RPCErrorHandler, result: (result: PgpUiShouldPushPrivateResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.pgpUi.finished'?: (params: $ReadOnly<{sessionID: Int}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.proveUi.promptOverwrite'?: (params: $ReadOnly<{sessionID: Int, account: String, typ: PromptOverwriteType}>, response: {error: RPCErrorHandler, result: (result: ProveUiPromptOverwriteResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.proveUi.promptUsername'?: (params: $ReadOnly<{sessionID: Int, prompt: String, prevError?: ?Status}>, response: {error: RPCErrorHandler, result: (result: ProveUiPromptUsernameResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.proveUi.outputPrechecks'?: (params: $ReadOnly<{sessionID: Int, text: Text}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.proveUi.preProofWarning'?: (params: $ReadOnly<{sessionID: Int, text: Text}>, response: {error: RPCErrorHandler, result: (result: ProveUiPreProofWarningResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.proveUi.outputInstructions'?: (params: $ReadOnly<{sessionID: Int, instructions: Text, proof: String}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.proveUi.okToCheck'?: (params: $ReadOnly<{sessionID: Int, name: String, attempt: Int}>, response: {error: RPCErrorHandler, result: (result: ProveUiOkToCheckResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.proveUi.displayRecheckWarning'?: (params: $ReadOnly<{sessionID: Int, text: Text}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.provisionUi.chooseProvisioningMethod'?: (params: $ReadOnly<{sessionID: Int, gpgOption: Boolean}>, response: {error: RPCErrorHandler, result: (result: ProvisionUiChooseProvisioningMethodResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.provisionUi.chooseGPGMethod'?: (params: $ReadOnly<{sessionID: Int, keys?: ?Array<GPGKey>}>, response: {error: RPCErrorHandler, result: (result: ProvisionUiChooseGPGMethodResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.provisionUi.switchToGPGSignOK'?: (params: $ReadOnly<{sessionID: Int, key: GPGKey, importError: String}>, response: {error: RPCErrorHandler, result: (result: ProvisionUiSwitchToGPGSignOKResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.provisionUi.chooseDevice'?: (params: $ReadOnly<{sessionID: Int, devices?: ?Array<Device>, canSelectNoDevice: Boolean}>, response: {error: RPCErrorHandler, result: (result: ProvisionUiChooseDeviceResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.provisionUi.chooseDeviceType'?: (params: $ReadOnly<{sessionID: Int, kind: ChooseType}>, response: {error: RPCErrorHandler, result: (result: ProvisionUiChooseDeviceTypeResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.provisionUi.DisplayAndPromptSecret'?: (params: $ReadOnly<{sessionID: Int, secret: Bytes, phrase: String, otherDeviceType: DeviceType, previousErr: String}>, response: {error: RPCErrorHandler, result: (result: ProvisionUiDisplayAndPromptSecretResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.provisionUi.DisplaySecretExchanged'?: (params: $ReadOnly<{sessionID: Int}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.provisionUi.PromptNewDeviceName'?: (params: $ReadOnly<{sessionID: Int, existingDevices?: ?Array<String>, errorMessage: String}>, response: {error: RPCErrorHandler, result: (result: ProvisionUiPromptNewDeviceNameResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.provisionUi.ProvisioneeSuccess'?: (params: $ReadOnly<{sessionID: Int, username: String, deviceName: String}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.provisionUi.ProvisionerSuccess'?: (params: $ReadOnly<{sessionID: Int, deviceName: String, deviceType: String}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.rekeyUI.delegateRekeyUI'?: (params: $ReadOnly<{}>, response: {error: RPCErrorHandler, result: (result: RekeyUIDelegateRekeyUIResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.rekeyUI.refresh'?: (params: $ReadOnly<{sessionID: Int, problemSetDevices: ProblemSetDevices}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.rekeyUI.rekeySendEvent'?: (params: $ReadOnly<{sessionID: Int, event: RekeyEvent}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.saltpackUi.saltpackPromptForDecrypt'?: (params: $ReadOnly<{sessionID: Int, sender: SaltpackSender, usedDelegateUI: Boolean}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.saltpackUi.saltpackVerifySuccess'?: (params: $ReadOnly<{sessionID: Int, signingKID: KID, sender: SaltpackSender}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.saltpackUi.saltpackVerifyBadSender'?: (params: $ReadOnly<{sessionID: Int, signingKID: KID, sender: SaltpackSender}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.secretUi.getPassphrase'?: (params: $ReadOnly<{sessionID: Int, pinentry: GUIEntryArg, terminal?: ?SecretEntryArg}>, response: {error: RPCErrorHandler, result: (result: SecretUiGetPassphraseResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.streamUi.close'?: (params: $ReadOnly<{sessionID: Int, s: Stream}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.streamUi.read'?: (params: $ReadOnly<{sessionID: Int, s: Stream, sz: Int}>, response: {error: RPCErrorHandler, result: (result: StreamUiReadResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.streamUi.reset'?: (params: $ReadOnly<{sessionID: Int, s: Stream}>, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.streamUi.write'?: (params: $ReadOnly<{sessionID: Int, s: Stream, buf: Bytes}>, response: {error: RPCErrorHandler, result: (result: StreamUiWriteResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.teamsUi.confirmRootTeamDelete'?: (params: $ReadOnly<{sessionID: Int, teamName: String}>, response: {error: RPCErrorHandler, result: (result: TeamsUiConfirmRootTeamDeleteResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.teamsUi.confirmSubteamDelete'?: (params: $ReadOnly<{sessionID: Int, teamName: String}>, response: {error: RPCErrorHandler, result: (result: TeamsUiConfirmSubteamDeleteResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
  'keybase.1.ui.promptYesNo'?: (params: $ReadOnly<{sessionID: Int, text: Text, promptDefault: PromptDefault}>, response: {error: RPCErrorHandler, result: (result: UiPromptYesNoResult) => void}, state: TypedState) => Saga.Effect | Array<Saga.Effect> | null | void,
|}

// Not enabled calls. To enable add to enabled-calls.json: 'keybase.1.account.passphrasePrompt' 'keybase.1.account.resetAccount' 'keybase.1.appState.updateAppState' 'keybase.1.badger.getBadgeState' 'keybase.1.block.getSessionChallenge' 'keybase.1.block.authenticateSession' 'keybase.1.block.putBlock' 'keybase.1.block.putBlockAgain' 'keybase.1.block.getBlock' 'keybase.1.block.addReference' 'keybase.1.block.delReference' 'keybase.1.block.archiveReference' 'keybase.1.block.delReferenceWithCount' 'keybase.1.block.archiveReferenceWithCount' 'keybase.1.block.getUserQuotaInfo' 'keybase.1.block.getTeamQuotaInfo' 'keybase.1.block.blockPing' 'keybase.1.BTC.registerBTC' 'keybase.1.config.getCurrentStatus' 'keybase.1.config.setUserConfig' 'keybase.1.config.setPath' 'keybase.1.config.setValue' 'keybase.1.config.clearValue' 'keybase.1.config.getValue' 'keybase.1.config.checkAPIServerOutOfDateWarning' 'keybase.1.crypto.signED25519' 'keybase.1.crypto.signED25519ForKBFS' 'keybase.1.crypto.signToString' 'keybase.1.crypto.unboxBytes32' 'keybase.1.crypto.unboxBytes32Any' 'keybase.1.ctl.stop' 'keybase.1.ctl.logRotate' 'keybase.1.ctl.reload' 'keybase.1.ctl.appExit' 'keybase.1.ctl.dbDelete' 'keybase.1.ctl.dbPut' 'keybase.1.ctl.dbGet' 'keybase.1.debugging.firstStep' 'keybase.1.debugging.secondStep' 'keybase.1.debugging.increment' 'keybase.1.debugging.script' 'keybase.1.delegateUiCtl.registerUpdateUI' 'keybase.1.delegateUiCtl.registerGregorFirehose' 'keybase.1.device.deviceList' 'keybase.1.device.checkDeviceNameForUser' 'keybase.1.favorite.getFavorites' 'keybase.1.fs.List' 'keybase.1.git.putGitMetadata' 'keybase.1.git.deleteGitMetadata' 'keybase.1.git.gcPersonalRepo' 'keybase.1.git.gcTeamRepo' 'keybase.1.git.getTeamRepoSettings' 'keybase.1.gpgUi.wantToAddGPGKey' 'keybase.1.gpgUi.confirmDuplicateKeyChosen' 'keybase.1.gpgUi.confirmImportSecretToExistingKey' 'keybase.1.gpgUi.selectKeyAndPushOption' 'keybase.1.gpgUi.selectKey' 'keybase.1.gpgUi.sign' 'keybase.1.gpgUi.getTTY' 'keybase.1.gregorUI.pushState' 'keybase.1.gregorUI.pushOutOfBandMessages' 'keybase.1.home.homeActionTaken' 'keybase.1.homeUI.homeUIRefresh' 'keybase.1.identify.Resolve3' 'keybase.1.identify.identifyLite' 'keybase.1.identify.resolveIdentifyImplicitTeam' 'keybase.1.identify.resolveImplicitTeam' 'keybase.1.identifyUi.displayTLFCreateWithInvite' 'keybase.1.identifyUi.delegateIdentifyUI' 'keybase.1.identifyUi.start' 'keybase.1.identifyUi.displayKey' 'keybase.1.identifyUi.reportLastTrack' 'keybase.1.identifyUi.launchNetworkChecks' 'keybase.1.identifyUi.displayTrackStatement' 'keybase.1.identifyUi.finishWebProofCheck' 'keybase.1.identifyUi.finishSocialProofCheck' 'keybase.1.identifyUi.displayCryptocurrency' 'keybase.1.identifyUi.reportTrackToken' 'keybase.1.identifyUi.displayUserCard' 'keybase.1.identifyUi.confirm' 'keybase.1.identifyUi.cancel' 'keybase.1.identifyUi.finish' 'keybase.1.identifyUi.dismiss' 'keybase.1.implicitTeamMigration.startMigration' 'keybase.1.implicitTeamMigration.finalizeMigration' 'keybase.1.install.installCommandLinePrivileged' 'keybase.1.kbfs.FSEvent' 'keybase.1.kbfs.FSPathUpdate' 'keybase.1.kbfs.FSEditList' 'keybase.1.kbfs.FSSyncStatus' 'keybase.1.kbfs.FSSyncEvent' 'keybase.1.kbfs.createTLF' 'keybase.1.kbfs.getKBFSTeamSettings' 'keybase.1.KBFSGit.createRepo' 'keybase.1.KBFSGit.deleteRepo' 'keybase.1.KBFSGit.gc' 'keybase.1.kbfsMount.GetAllAvailableMountDirs' 'keybase.1.kbfsMount.SetCurrentMountDir' 'keybase.1.Kex2Provisionee.hello' 'keybase.1.Kex2Provisionee.didCounterSign' 'keybase.1.Kex2Provisionee2.hello2' 'keybase.1.Kex2Provisionee2.didCounterSign2' 'keybase.1.Kex2Provisioner.kexStart' 'keybase.1.log.registerLogger' 'keybase.1.logUi.log' 'keybase.1.login.loginProvisionedDevice' 'keybase.1.login.loginWithPaperKey' 'keybase.1.login.clearStoredSecret' 'keybase.1.login.recoverAccountFromEmailAddress' 'keybase.1.login.unlock' 'keybase.1.login.unlockWithPassphrase' 'keybase.1.login.loginOneshot' 'keybase.1.loginUi.getEmailOrUsername' 'keybase.1.loginUi.promptRevokePaperKeys' 'keybase.1.loginUi.displayPaperKeyPhrase' 'keybase.1.loginUi.displayPrimaryPaperKey' 'keybase.1.logsend.prepareLogsend' 'keybase.1.merkle.getCurrentMerkleRoot' 'keybase.1.merkle.verifyMerkleRootAndKBFS' 'keybase.1.metadata.getChallenge' 'keybase.1.metadata.authenticate' 'keybase.1.metadata.putMetadata' 'keybase.1.metadata.getMetadata' 'keybase.1.metadata.registerForUpdates' 'keybase.1.metadata.pruneBranch' 'keybase.1.metadata.putKeys' 'keybase.1.metadata.getKey' 'keybase.1.metadata.deleteKey' 'keybase.1.metadata.truncateLock' 'keybase.1.metadata.truncateUnlock' 'keybase.1.metadata.getFolderHandle' 'keybase.1.metadata.getFoldersForRekey' 'keybase.1.metadata.ping' 'keybase.1.metadata.ping2' 'keybase.1.metadata.getLatestFolderHandle' 'keybase.1.metadata.getKeyBundles' 'keybase.1.metadata.lock' 'keybase.1.metadata.releaseLock' 'keybase.1.metadata.startImplicitTeamMigration' 'keybase.1.metadata.getMerkleRoot' 'keybase.1.metadata.getMerkleRootLatest' 'keybase.1.metadata.getMerkleRootSince' 'keybase.1.metadata.getMerkleNode' 'keybase.1.metadata.findNextMD' 'keybase.1.metadata.setImplicitTeamModeForTest' 'keybase.1.metadata.forceMerkleBuildForTest' 'keybase.1.metadataUpdate.metadataUpdate' 'keybase.1.metadataUpdate.folderNeedsRekey' 'keybase.1.metadataUpdate.foldersNeedRekey' 'keybase.1.NotifyApp.exit' 'keybase.1.NotifyBadges.badgeState' 'keybase.1.NotifyEphemeral.newTeamEk' 'keybase.1.NotifyFavorites.favoritesChanged' 'keybase.1.NotifyFS.FSActivity' 'keybase.1.NotifyFS.FSPathUpdated' 'keybase.1.NotifyFS.FSSyncActivity' 'keybase.1.NotifyFS.FSEditListResponse' 'keybase.1.NotifyFS.FSSyncStatusResponse' 'keybase.1.NotifyFSRequest.FSEditListRequest' 'keybase.1.NotifyFSRequest.FSSyncStatusRequest' 'keybase.1.NotifyKeyfamily.keyfamilyChanged' 'keybase.1.NotifyPaperKey.paperKeyCached' 'keybase.1.NotifyPGP.pgpKeyInSecretStoreFile' 'keybase.1.NotifyService.shutdown' 'keybase.1.NotifySession.loggedOut' 'keybase.1.NotifySession.loggedIn' 'keybase.1.NotifySession.clientOutOfDate' 'keybase.1.NotifyTeam.teamChangedByID' 'keybase.1.NotifyTeam.teamChangedByName' 'keybase.1.NotifyTeam.teamDeleted' 'keybase.1.NotifyTeam.teamAbandoned' 'keybase.1.NotifyTeam.teamExit' 'keybase.1.NotifyTeam.avatarUpdated' 'keybase.1.NotifyTracking.trackingChanged' 'keybase.1.NotifyUsers.userChanged' 'keybase.1.paperprovision.paperProvision' 'keybase.1.pgp.pgpSign' 'keybase.1.pgp.pgpPull' 'keybase.1.pgp.pgpEncrypt' 'keybase.1.pgp.pgpDecrypt' 'keybase.1.pgp.pgpVerify' 'keybase.1.pgp.pgpImport' 'keybase.1.pgp.pgpExport' 'keybase.1.pgp.pgpExportByFingerprint' 'keybase.1.pgp.pgpExportByKID' 'keybase.1.pgp.pgpKeyGen' 'keybase.1.pgp.pgpDeletePrimary' 'keybase.1.pgp.pgpSelect' 'keybase.1.pgp.pgpUpdate' 'keybase.1.pgp.pgpPurge' 'keybase.1.pgpUi.outputSignatureSuccess' 'keybase.1.pgpUi.outputSignatureSuccessNonKeybase' 'keybase.1.pgpUi.keyGenerated' 'keybase.1.pgpUi.shouldPushPrivate' 'keybase.1.pgpUi.finished' 'keybase.1.pprof.processorProfile' 'keybase.1.pprof.trace' 'keybase.1.proveUi.promptOverwrite' 'keybase.1.proveUi.promptUsername' 'keybase.1.proveUi.outputPrechecks' 'keybase.1.proveUi.preProofWarning' 'keybase.1.proveUi.outputInstructions' 'keybase.1.proveUi.okToCheck' 'keybase.1.proveUi.displayRecheckWarning' 'keybase.1.provisionUi.chooseProvisioningMethod' 'keybase.1.provisionUi.chooseGPGMethod' 'keybase.1.provisionUi.switchToGPGSignOK' 'keybase.1.provisionUi.chooseDevice' 'keybase.1.provisionUi.chooseDeviceType' 'keybase.1.provisionUi.DisplayAndPromptSecret' 'keybase.1.provisionUi.DisplaySecretExchanged' 'keybase.1.provisionUi.PromptNewDeviceName' 'keybase.1.provisionUi.ProvisioneeSuccess' 'keybase.1.provisionUi.ProvisionerSuccess' 'keybase.1.quota.verifySession' 'keybase.1.reachability.reachabilityChanged' 'keybase.1.rekey.getPendingRekeyStatus' 'keybase.1.rekey.debugShowRekeyStatus' 'keybase.1.rekey.rekeySync' 'keybase.1.rekeyUI.delegateRekeyUI' 'keybase.1.rekeyUI.refresh' 'keybase.1.rekeyUI.rekeySendEvent' 'keybase.1.saltpack.saltpackEncrypt' 'keybase.1.saltpack.saltpackDecrypt' 'keybase.1.saltpack.saltpackSign' 'keybase.1.saltpack.saltpackVerify' 'keybase.1.saltpackUi.saltpackPromptForDecrypt' 'keybase.1.saltpackUi.saltpackVerifySuccess' 'keybase.1.saltpackUi.saltpackVerifyBadSender' 'keybase.1.ScanProofs.scanProofs' 'keybase.1.secretUi.getPassphrase' 'keybase.1.SecretKeys.getSecretKeys' 'keybase.1.session.currentSession' 'keybase.1.session.sessionPing' 'keybase.1.sigs.sigList' 'keybase.1.sigs.sigListJSON' 'keybase.1.SimpleFS.simpleFSListRecursive' 'keybase.1.SimpleFS.simpleFSCopy' 'keybase.1.SimpleFS.simpleFSMove' 'keybase.1.SimpleFS.simpleFSRename' 'keybase.1.SimpleFS.simpleFSSetStat' 'keybase.1.SimpleFS.simpleFSRead' 'keybase.1.SimpleFS.simpleFSWrite' 'keybase.1.SimpleFS.simpleFSRemove' 'keybase.1.SimpleFS.simpleFSMakeOpid' 'keybase.1.SimpleFS.simpleFSClose' 'keybase.1.SimpleFS.simpleFSGetOps' 'keybase.1.SimpleFS.simpleFSDumpDebuggingInfo' 'keybase.1.SimpleFS.simpleFSUserEditHistory' 'keybase.1.SimpleFS.simpleFSFolderEditHistory' 'keybase.1.SimpleFS.simpleFSGetUserQuotaUsage' 'keybase.1.streamUi.close' 'keybase.1.streamUi.read' 'keybase.1.streamUi.reset' 'keybase.1.streamUi.write' 'keybase.1.teams.teamCreateWithSettings' 'keybase.1.teams.teamImplicitAdmins' 'keybase.1.teams.teamListTeammates' 'keybase.1.teams.teamListVerified' 'keybase.1.teams.teamListSubteamsRecursive' 'keybase.1.teams.teamChangeMembership' 'keybase.1.teams.teamRename' 'keybase.1.teams.teamAcceptInvite' 'keybase.1.teams.teamRequestAccess' 'keybase.1.teams.teamDelete' 'keybase.1.teams.teamCreateSeitanToken' 'keybase.1.teams.lookupImplicitTeam' 'keybase.1.teams.lookupOrCreateImplicitTeam' 'keybase.1.teams.loadTeamPlusApplicationKeys' 'keybase.1.teams.getTeamRootID' 'keybase.1.teams.getTeamShowcase' 'keybase.1.teams.teamRotateKey' 'keybase.1.teams.teamDebug' 'keybase.1.teams.uploadTeamAvatar' 'keybase.1.teams.tryDecryptWithTeamKey' 'keybase.1.teams.findNextMerkleRootAfterTeamRemoval' 'keybase.1.teams.findNextMerkleRootAfterTeamRemovalBySigningKey' 'keybase.1.teams.profileTeamLoad' 'keybase.1.teamsUi.confirmRootTeamDelete' 'keybase.1.teamsUi.confirmSubteamDelete' 'keybase.1.test.test' 'keybase.1.test.testCallback' 'keybase.1.test.panic' 'keybase.1.tlf.CryptKeys' 'keybase.1.tlf.publicCanonicalTLFNameAndID' 'keybase.1.tlf.completeAndCanonicalizePrivateTlfName' 'keybase.1.tlfKeys.getTLFCryptKeys' 'keybase.1.tlfKeys.getPublicCanonicalTLFNameAndID' 'keybase.1.track.track' 'keybase.1.track.fakeTrackingChanged' 'keybase.1.ui.promptYesNo' 'keybase.1.user.listTrackers' 'keybase.1.user.listTrackersByName' 'keybase.1.user.listTrackersSelf' 'keybase.1.user.loadUncheckedUserSummaries' 'keybase.1.user.loadUser' 'keybase.1.user.loadUserByName' 'keybase.1.user.loadUserPlusKeys' 'keybase.1.user.loadUserPlusKeysV2' 'keybase.1.user.loadPublicKeys' 'keybase.1.user.loadMyPublicKeys' 'keybase.1.user.listTracking' 'keybase.1.user.listTrackingJSON' 'keybase.1.user.search' 'keybase.1.user.loadAllPublicKeysUnverified' 'keybase.1.user.meUserVersion' 'keybase.1.user.getUPAK' 'keybase.1.user.uploadUserAvatar' 'keybase.1.user.findNextMerkleRootAfterRevoke' 'keybase.1.user.findNextMerkleRootAfterReset'
