// @flow strict
/* eslint-disable */

// This file is auto-generated by client/protocol/Makefile.
import type {CallEffect, Effect} from 'redux-saga'
import * as Gregor1 from './rpc-gregor-gen'
export type {Gregor1}
export type Bool = boolean
export type Boolean = boolean
export type Bytes = Buffer
export type Double = number
export type Int = number
export type Int64 = number
export type Long = number
export type String = string
export type Uint = number
export type Uint64 = number
type IncomingErrorCallback = (?{code?: number, desc?: string}) => void
type IncomingReturn = Effect | null | void | false | Array<Effect | null | void | false>

export type MessageTypes = {|
  'keybase.1.NotifyApp.exit': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.NotifyBadges.badgeState': {|
    inParam: $ReadOnly<{|badgeState: BadgeState|}>,
    outParam: void,
  |},
  'keybase.1.NotifyCanUserPerform.canUserPerformChanged': {|
    inParam: $ReadOnly<{|teamName: String|}>,
    outParam: void,
  |},
  'keybase.1.NotifyDeviceClone.deviceCloneCountChanged': {|
    inParam: $ReadOnly<{|newClones: Int|}>,
    outParam: void,
  |},
  'keybase.1.NotifyEphemeral.newTeamEk': {|
    inParam: $ReadOnly<{|id: TeamID, generation: EkGeneration|}>,
    outParam: void,
  |},
  'keybase.1.NotifyFS.FSActivity': {|
    inParam: $ReadOnly<{|notification: FSNotification|}>,
    outParam: void,
  |},
  'keybase.1.NotifyFS.FSEditListResponse': {|
    inParam: $ReadOnly<{|edits: FSFolderEditHistory, requestID: Int|}>,
    outParam: void,
  |},
  'keybase.1.NotifyFS.FSPathUpdated': {|
    inParam: $ReadOnly<{|path: String|}>,
    outParam: void,
  |},
  'keybase.1.NotifyFS.FSSyncActivity': {|
    inParam: $ReadOnly<{|status: FSPathSyncStatus|}>,
    outParam: void,
  |},
  'keybase.1.NotifyFS.FSSyncStatusResponse': {|
    inParam: $ReadOnly<{|status: FSSyncStatus, requestID: Int|}>,
    outParam: void,
  |},
  'keybase.1.NotifyFavorites.favoritesChanged': {|
    inParam: $ReadOnly<{|uid: UID|}>,
    outParam: void,
  |},
  'keybase.1.NotifyKeyfamily.keyfamilyChanged': {|
    inParam: $ReadOnly<{|uid: UID|}>,
    outParam: void,
  |},
  'keybase.1.NotifyPGP.pgpKeyInSecretStoreFile': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.NotifyPaperKey.paperKeyCached': {|
    inParam: $ReadOnly<{|uid: UID, encKID: KID, sigKID: KID|}>,
    outParam: void,
  |},
  'keybase.1.NotifyService.shutdown': {|
    inParam: $ReadOnly<{|code: Int|}>,
    outParam: void,
  |},
  'keybase.1.NotifySession.clientOutOfDate': {|
    inParam: $ReadOnly<{|upgradeTo: String, upgradeURI: String, upgradeMsg: String|}>,
    outParam: void,
  |},
  'keybase.1.NotifySession.loggedIn': {|
    inParam: $ReadOnly<{|username: String|}>,
    outParam: void,
  |},
  'keybase.1.NotifySession.loggedOut': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.NotifyTeam.avatarUpdated': {|
    inParam: $ReadOnly<{|name: String, formats?: ?Array<AvatarFormat>|}>,
    outParam: void,
  |},
  'keybase.1.NotifyTeam.newlyAddedToTeam': {|
    inParam: $ReadOnly<{|teamID: TeamID|}>,
    outParam: void,
  |},
  'keybase.1.NotifyTeam.teamAbandoned': {|
    inParam: $ReadOnly<{|teamID: TeamID|}>,
    outParam: void,
  |},
  'keybase.1.NotifyTeam.teamChangedByID': {|
    inParam: $ReadOnly<{|teamID: TeamID, latestSeqno: Seqno, implicitTeam: Boolean, changes: TeamChangeSet|}>,
    outParam: void,
  |},
  'keybase.1.NotifyTeam.teamChangedByName': {|
    inParam: $ReadOnly<{|teamName: String, latestSeqno: Seqno, implicitTeam: Boolean, changes: TeamChangeSet|}>,
    outParam: void,
  |},
  'keybase.1.NotifyTeam.teamDeleted': {|
    inParam: $ReadOnly<{|teamID: TeamID|}>,
    outParam: void,
  |},
  'keybase.1.NotifyTeam.teamExit': {|
    inParam: $ReadOnly<{|teamID: TeamID|}>,
    outParam: void,
  |},
  'keybase.1.NotifyTracking.trackingChanged': {|
    inParam: $ReadOnly<{|uid: UID, username: String, isTracking: Boolean|}>,
    outParam: void,
  |},
  'keybase.1.NotifyUnverifiedTeamList.teamListUnverifiedChanged': {|
    inParam: $ReadOnly<{|teamName: String|}>,
    outParam: void,
  |},
  'keybase.1.NotifyUsers.userChanged': {|
    inParam: $ReadOnly<{|uid: UID|}>,
    outParam: void,
  |},
  'keybase.1.SimpleFS.SimpleFSGetHTTPAddressAndToken': {|
    inParam: void,
    outParam: SimpleFSGetHTTPAddressAndTokenResponse,
  |},
  'keybase.1.SimpleFS.simpleFSCancel': {|
    inParam: $ReadOnly<{|opID: OpID|}>,
    outParam: void,
  |},
  'keybase.1.SimpleFS.simpleFSCheck': {|
    inParam: $ReadOnly<{|opID: OpID|}>,
    outParam: OpProgress,
  |},
  'keybase.1.SimpleFS.simpleFSCopyRecursive': {|
    inParam: $ReadOnly<{|opID: OpID, src: Path, dest: Path|}>,
    outParam: void,
  |},
  'keybase.1.SimpleFS.simpleFSList': {|
    inParam: $ReadOnly<{|opID: OpID, path: Path, filter: ListFilter, refreshSubscription: Boolean|}>,
    outParam: void,
  |},
  'keybase.1.SimpleFS.simpleFSListRecursiveToDepth': {|
    inParam: $ReadOnly<{|opID: OpID, path: Path, filter: ListFilter, refreshSubscription: Boolean, depth: Int|}>,
    outParam: void,
  |},
  'keybase.1.SimpleFS.simpleFSOpen': {|
    inParam: $ReadOnly<{|opID: OpID, dest: Path, flags: OpenFlags|}>,
    outParam: void,
  |},
  'keybase.1.SimpleFS.simpleFSReadList': {|
    inParam: $ReadOnly<{|opID: OpID|}>,
    outParam: SimpleFSListResult,
  |},
  'keybase.1.SimpleFS.simpleFSStat': {|
    inParam: $ReadOnly<{|path: Path, identifyBehavior?: ?TLFIdentifyBehavior|}>,
    outParam: Dirent,
  |},
  'keybase.1.SimpleFS.simpleFSSyncStatus': {|
    inParam: $ReadOnly<{|filter: ListFilter|}>,
    outParam: FSSyncStatus,
  |},
  'keybase.1.SimpleFS.simpleFSUserEditHistory': {|
    inParam: void,
    outParam: ?Array<FSFolderEditHistory>,
  |},
  'keybase.1.SimpleFS.simpleFSWait': {|
    inParam: $ReadOnly<{|opID: OpID|}>,
    outParam: void,
  |},
  'keybase.1.account.emailChange': {|
    inParam: $ReadOnly<{|newEmail: String|}>,
    outParam: void,
  |},
  'keybase.1.account.getLockdownMode': {|
    inParam: void,
    outParam: GetLockdownResponse,
  |},
  'keybase.1.account.hasServerKeys': {|
    inParam: void,
    outParam: HasServerKeysRes,
  |},
  'keybase.1.account.passphraseChange': {|
    inParam: $ReadOnly<{|oldPassphrase: String, passphrase: String, force: Boolean|}>,
    outParam: void,
  |},
  'keybase.1.account.setLockdownMode': {|
    inParam: $ReadOnly<{|enabled: Boolean|}>,
    outParam: void,
  |},
  'keybase.1.apiserver.Delete': {|
    inParam: $ReadOnly<{|endpoint: String, args?: ?Array<StringKVPair>, httpStatus?: ?Array<Int>, appStatusCode?: ?Array<Int>|}>,
    outParam: APIRes,
  |},
  'keybase.1.apiserver.Get': {|
    inParam: $ReadOnly<{|endpoint: String, args?: ?Array<StringKVPair>, httpStatus?: ?Array<Int>, appStatusCode?: ?Array<Int>|}>,
    outParam: APIRes,
  |},
  'keybase.1.apiserver.GetWithSession': {|
    inParam: $ReadOnly<{|endpoint: String, args?: ?Array<StringKVPair>, httpStatus?: ?Array<Int>, appStatusCode?: ?Array<Int>|}>,
    outParam: APIRes,
  |},
  'keybase.1.apiserver.Post': {|
    inParam: $ReadOnly<{|endpoint: String, args?: ?Array<StringKVPair>, httpStatus?: ?Array<Int>, appStatusCode?: ?Array<Int>|}>,
    outParam: APIRes,
  |},
  'keybase.1.apiserver.PostJSON': {|
    inParam: $ReadOnly<{|endpoint: String, args?: ?Array<StringKVPair>, JSONPayload?: ?Array<StringKVPair>, httpStatus?: ?Array<Int>, appStatusCode?: ?Array<Int>|}>,
    outParam: APIRes,
  |},
  'keybase.1.avatars.loadTeamAvatars': {|
    inParam: $ReadOnly<{|names?: ?Array<String>, formats?: ?Array<AvatarFormat>|}>,
    outParam: LoadAvatarsRes,
  |},
  'keybase.1.avatars.loadUserAvatars': {|
    inParam: $ReadOnly<{|names?: ?Array<String>, formats?: ?Array<AvatarFormat>|}>,
    outParam: LoadAvatarsRes,
  |},
  'keybase.1.config.getAllProvisionedUsernames': {|
    inParam: void,
    outParam: AllProvisionedUsernames,
  |},
  'keybase.1.config.getBootstrapStatus': {|
    inParam: void,
    outParam: BootstrapStatus,
  |},
  'keybase.1.config.getConfig': {|
    inParam: void,
    outParam: Config,
  |},
  'keybase.1.config.getRememberPassphrase': {|
    inParam: void,
    outParam: Boolean,
  |},
  'keybase.1.config.getUpdateInfo': {|
    inParam: void,
    outParam: UpdateInfo,
  |},
  'keybase.1.config.helloIAm': {|
    inParam: $ReadOnly<{|details: ClientDetails|}>,
    outParam: void,
  |},
  'keybase.1.config.setRememberPassphrase': {|
    inParam: $ReadOnly<{|remember: Boolean|}>,
    outParam: void,
  |},
  'keybase.1.config.startUpdateIfNeeded': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.config.waitForClient': {|
    inParam: $ReadOnly<{|clientType: ClientType, timeout: DurationSec|}>,
    outParam: Boolean,
  |},
  'keybase.1.cryptocurrency.registerAddress': {|
    inParam: $ReadOnly<{|address: String, force: Boolean, wantedFamily: String, sigVersion?: ?SigVersion|}>,
    outParam: RegisterAddressRes,
  |},
  'keybase.1.ctl.dbNuke': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.delegateUiCtl.registerGregorFirehoseFiltered': {|
    inParam: $ReadOnly<{|systems?: ?Array<String>|}>,
    outParam: void,
  |},
  'keybase.1.delegateUiCtl.registerHomeUI': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.delegateUiCtl.registerIdentifyUI': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.delegateUiCtl.registerRekeyUI': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.delegateUiCtl.registerSecretUI': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.device.checkDeviceNameFormat': {|
    inParam: $ReadOnly<{|name: String|}>,
    outParam: Boolean,
  |},
  'keybase.1.device.deviceAdd': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.device.deviceHistoryList': {|
    inParam: void,
    outParam: ?Array<DeviceDetail>,
  |},
  'keybase.1.favorite.favoriteAdd': {|
    inParam: $ReadOnly<{|folder: Folder|}>,
    outParam: void,
  |},
  'keybase.1.favorite.favoriteIgnore': {|
    inParam: $ReadOnly<{|folder: Folder|}>,
    outParam: void,
  |},
  'keybase.1.git.createPersonalRepo': {|
    inParam: $ReadOnly<{|repoName: GitRepoName|}>,
    outParam: RepoID,
  |},
  'keybase.1.git.createTeamRepo': {|
    inParam: $ReadOnly<{|repoName: GitRepoName, teamName: TeamName, notifyTeam: Boolean|}>,
    outParam: RepoID,
  |},
  'keybase.1.git.deletePersonalRepo': {|
    inParam: $ReadOnly<{|repoName: GitRepoName|}>,
    outParam: void,
  |},
  'keybase.1.git.deleteTeamRepo': {|
    inParam: $ReadOnly<{|repoName: GitRepoName, teamName: TeamName, notifyTeam: Boolean|}>,
    outParam: void,
  |},
  'keybase.1.git.getAllGitMetadata': {|
    inParam: void,
    outParam: ?Array<GitRepoResult>,
  |},
  'keybase.1.git.getGitMetadata': {|
    inParam: $ReadOnly<{|folder: Folder|}>,
    outParam: ?Array<GitRepoResult>,
  |},
  'keybase.1.git.setTeamRepoSettings': {|
    inParam: $ReadOnly<{|folder: Folder, repoID: RepoID, channelName?: ?String, chatDisabled: Boolean|}>,
    outParam: void,
  |},
  'keybase.1.gpgUi.confirmDuplicateKeyChosen': {|
    inParam: void,
    outParam: Boolean,
  |},
  'keybase.1.gpgUi.confirmImportSecretToExistingKey': {|
    inParam: void,
    outParam: Boolean,
  |},
  'keybase.1.gpgUi.getTTY': {|
    inParam: void,
    outParam: String,
  |},
  'keybase.1.gpgUi.selectKey': {|
    inParam: $ReadOnly<{|keys?: ?Array<GPGKey>|}>,
    outParam: String,
  |},
  'keybase.1.gpgUi.selectKeyAndPushOption': {|
    inParam: $ReadOnly<{|keys?: ?Array<GPGKey>|}>,
    outParam: SelectKeyRes,
  |},
  'keybase.1.gpgUi.sign': {|
    inParam: $ReadOnly<{|msg: Bytes, fingerprint: Bytes|}>,
    outParam: String,
  |},
  'keybase.1.gpgUi.wantToAddGPGKey': {|
    inParam: void,
    outParam: Boolean,
  |},
  'keybase.1.gregor.dismissCategory': {|
    inParam: $ReadOnly<{|category: Gregor1.Category|}>,
    outParam: void,
  |},
  'keybase.1.gregor.dismissItem': {|
    inParam: $ReadOnly<{|id: Gregor1.MsgID|}>,
    outParam: void,
  |},
  'keybase.1.gregor.getState': {|
    inParam: void,
    outParam: Gregor1.State,
  |},
  'keybase.1.gregor.injectItem': {|
    inParam: $ReadOnly<{|cat: String, body: String, dtime: Gregor1.TimeOrOffset|}>,
    outParam: Gregor1.MsgID,
  |},
  'keybase.1.gregor.updateCategory': {|
    inParam: $ReadOnly<{|category: String, body: String, dtime: Gregor1.TimeOrOffset|}>,
    outParam: Gregor1.MsgID,
  |},
  'keybase.1.gregor.updateItem': {|
    inParam: $ReadOnly<{|msgID: Gregor1.MsgID, cat: String, body: String, dtime: Gregor1.TimeOrOffset|}>,
    outParam: Gregor1.MsgID,
  |},
  'keybase.1.gregorUI.pushOutOfBandMessages': {|
    inParam: $ReadOnly<{|oobm?: ?Array<Gregor1.OutOfBandMessage>|}>,
    outParam: void,
  |},
  'keybase.1.gregorUI.pushState': {|
    inParam: $ReadOnly<{|state: Gregor1.State, reason: PushReason|}>,
    outParam: void,
  |},
  'keybase.1.home.homeGetScreen': {|
    inParam: $ReadOnly<{|markViewed: Boolean, numFollowSuggestionsWanted: Int|}>,
    outParam: HomeScreen,
  |},
  'keybase.1.home.homeMarkViewed': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.home.homeSkipTodoType': {|
    inParam: $ReadOnly<{|t: HomeScreenTodoType|}>,
    outParam: void,
  |},
  'keybase.1.homeUI.homeUIRefresh': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.identify.identify2': {|
    inParam: $ReadOnly<{|uid: UID, userAssertion: String, reason: IdentifyReason, useDelegateUI?: Boolean, alwaysBlock?: Boolean, noErrorOnTrackFailure?: Boolean, forceRemoteCheck?: Boolean, needProofSet?: Boolean, allowEmptySelfID?: Boolean, noSkipSelf?: Boolean, canSuppressUI?: Boolean, identifyBehavior?: TLFIdentifyBehavior, forceDisplay?: Boolean, actLoggedOut?: Boolean|}>,
    outParam: Identify2Res,
  |},
  'keybase.1.identifyUi.cancel': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.identifyUi.confirm': {|
    inParam: $ReadOnly<{|outcome: IdentifyOutcome|}>,
    outParam: ConfirmResult,
  |},
  'keybase.1.identifyUi.delegateIdentifyUI': {|
    inParam: void,
    outParam: Int,
  |},
  'keybase.1.identifyUi.dismiss': {|
    inParam: $ReadOnly<{|username: String, reason: DismissReason|}>,
    outParam: void,
  |},
  'keybase.1.identifyUi.displayCryptocurrency': {|
    inParam: $ReadOnly<{|c: Cryptocurrency|}>,
    outParam: void,
  |},
  'keybase.1.identifyUi.displayKey': {|
    inParam: $ReadOnly<{|key: IdentifyKey|}>,
    outParam: void,
  |},
  'keybase.1.identifyUi.displayTLFCreateWithInvite': {|
    inParam: $ReadOnly<{|folderName: String, isPrivate: Boolean, assertion: String, socialAssertion: SocialAssertion, inviteLink: String, throttled: Boolean|}>,
    outParam: void,
  |},
  'keybase.1.identifyUi.displayTrackStatement': {|
    inParam: $ReadOnly<{|stmt: String|}>,
    outParam: void,
  |},
  'keybase.1.identifyUi.displayUserCard': {|
    inParam: $ReadOnly<{|card: UserCard|}>,
    outParam: void,
  |},
  'keybase.1.identifyUi.finish': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.identifyUi.finishSocialProofCheck': {|
    inParam: $ReadOnly<{|rp: RemoteProof, lcr: LinkCheckResult|}>,
    outParam: void,
  |},
  'keybase.1.identifyUi.finishWebProofCheck': {|
    inParam: $ReadOnly<{|rp: RemoteProof, lcr: LinkCheckResult|}>,
    outParam: void,
  |},
  'keybase.1.identifyUi.launchNetworkChecks': {|
    inParam: $ReadOnly<{|identity: Identity, user: User|}>,
    outParam: void,
  |},
  'keybase.1.identifyUi.reportLastTrack': {|
    inParam: $ReadOnly<{|track?: ?TrackSummary|}>,
    outParam: void,
  |},
  'keybase.1.identifyUi.reportTrackToken': {|
    inParam: $ReadOnly<{|trackToken: TrackToken|}>,
    outParam: void,
  |},
  'keybase.1.identifyUi.start': {|
    inParam: $ReadOnly<{|username: String, reason: IdentifyReason, forceDisplay?: Boolean|}>,
    outParam: void,
  |},
  'keybase.1.install.fuseStatus': {|
    inParam: $ReadOnly<{|bundleVersion: String|}>,
    outParam: FuseStatus,
  |},
  'keybase.1.install.installFuse': {|
    inParam: void,
    outParam: InstallResult,
  |},
  'keybase.1.install.installKBFS': {|
    inParam: void,
    outParam: InstallResult,
  |},
  'keybase.1.install.uninstallKBFS': {|
    inParam: void,
    outParam: UninstallResult,
  |},
  'keybase.1.kbfsMount.GetCurrentMountDir': {|
    inParam: void,
    outParam: String,
  |},
  'keybase.1.logUi.log': {|
    inParam: $ReadOnly<{|level: LogLevel, text: Text|}>,
    outParam: void,
  |},
  'keybase.1.login.accountDelete': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.login.deprovision': {|
    inParam: $ReadOnly<{|username: String, doRevoke: Boolean|}>,
    outParam: void,
  |},
  'keybase.1.login.getConfiguredAccounts': {|
    inParam: void,
    outParam: ?Array<ConfiguredAccount>,
  |},
  'keybase.1.login.login': {|
    inParam: $ReadOnly<{|deviceType: String, usernameOrEmail: String, clientType: ClientType|}>,
    outParam: void,
  |},
  'keybase.1.login.logout': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.login.paperKey': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.login.paperKeySubmit': {|
    inParam: $ReadOnly<{|paperPhrase: String|}>,
    outParam: void,
  |},
  'keybase.1.loginUi.displayPaperKeyPhrase': {|
    inParam: $ReadOnly<{|phrase: String|}>,
    outParam: void,
  |},
  'keybase.1.loginUi.displayPrimaryPaperKey': {|
    inParam: $ReadOnly<{|phrase: String|}>,
    outParam: void,
  |},
  'keybase.1.loginUi.getEmailOrUsername': {|
    inParam: void,
    outParam: String,
  |},
  'keybase.1.loginUi.promptRevokePaperKeys': {|
    inParam: $ReadOnly<{|device: Device, index: Int|}>,
    outParam: Boolean,
  |},
  'keybase.1.logsend.prepareLogsend': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.notifyCtl.setNotifications': {|
    inParam: $ReadOnly<{|channels: NotificationChannels|}>,
    outParam: void,
  |},
  'keybase.1.pgp.pgpKeyGenDefault': {|
    inParam: $ReadOnly<{|createUids: PGPCreateUids|}>,
    outParam: void,
  |},
  'keybase.1.pgp.pgpStorageDismiss': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.pgpUi.finished': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.pgpUi.keyGenerated': {|
    inParam: $ReadOnly<{|kid: KID, key: KeyInfo|}>,
    outParam: void,
  |},
  'keybase.1.pgpUi.outputSignatureSuccess': {|
    inParam: $ReadOnly<{|fingerprint: String, username: String, signedAt: Time|}>,
    outParam: void,
  |},
  'keybase.1.pgpUi.outputSignatureSuccessNonKeybase': {|
    inParam: $ReadOnly<{|keyID: String, signedAt: Time|}>,
    outParam: void,
  |},
  'keybase.1.pgpUi.shouldPushPrivate': {|
    inParam: void,
    outParam: Boolean,
  |},
  'keybase.1.pprof.logProcessorProfile': {|
    inParam: $ReadOnly<{|logDirForMobile: String, profileDurationSeconds: DurationSec|}>,
    outParam: void,
  |},
  'keybase.1.pprof.logTrace': {|
    inParam: $ReadOnly<{|logDirForMobile: String, traceDurationSeconds: DurationSec|}>,
    outParam: void,
  |},
  'keybase.1.prove.checkProof': {|
    inParam: $ReadOnly<{|sigID: SigID|}>,
    outParam: CheckProofStatus,
  |},
  'keybase.1.prove.startProof': {|
    inParam: $ReadOnly<{|service: String, username: String, force: Boolean, promptPosted: Boolean, auto: Boolean, sigVersion?: ?SigVersion|}>,
    outParam: StartProofResult,
  |},
  'keybase.1.proveUi.displayRecheckWarning': {|
    inParam: $ReadOnly<{|text: Text|}>,
    outParam: void,
  |},
  'keybase.1.proveUi.okToCheck': {|
    inParam: $ReadOnly<{|name: String, attempt: Int|}>,
    outParam: Boolean,
  |},
  'keybase.1.proveUi.outputInstructions': {|
    inParam: $ReadOnly<{|instructions: Text, proof: String|}>,
    outParam: void,
  |},
  'keybase.1.proveUi.outputPrechecks': {|
    inParam: $ReadOnly<{|text: Text|}>,
    outParam: void,
  |},
  'keybase.1.proveUi.preProofWarning': {|
    inParam: $ReadOnly<{|text: Text|}>,
    outParam: Boolean,
  |},
  'keybase.1.proveUi.promptOverwrite': {|
    inParam: $ReadOnly<{|account: String, typ: PromptOverwriteType|}>,
    outParam: Boolean,
  |},
  'keybase.1.proveUi.promptUsername': {|
    inParam: $ReadOnly<{|prompt: String, prevError?: ?Status|}>,
    outParam: String,
  |},
  'keybase.1.provisionUi.DisplayAndPromptSecret': {|
    inParam: $ReadOnly<{|secret: Bytes, phrase: String, otherDeviceType: DeviceType, previousErr: String|}>,
    outParam: SecretResponse,
  |},
  'keybase.1.provisionUi.DisplaySecretExchanged': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.provisionUi.PromptNewDeviceName': {|
    inParam: $ReadOnly<{|existingDevices?: ?Array<String>, errorMessage: String|}>,
    outParam: String,
  |},
  'keybase.1.provisionUi.ProvisioneeSuccess': {|
    inParam: $ReadOnly<{|username: String, deviceName: String|}>,
    outParam: void,
  |},
  'keybase.1.provisionUi.ProvisionerSuccess': {|
    inParam: $ReadOnly<{|deviceName: String, deviceType: String|}>,
    outParam: void,
  |},
  'keybase.1.provisionUi.chooseDevice': {|
    inParam: $ReadOnly<{|devices?: ?Array<Device>, canSelectNoDevice: Boolean|}>,
    outParam: DeviceID,
  |},
  'keybase.1.provisionUi.chooseDeviceType': {|
    inParam: $ReadOnly<{|kind: ChooseType|}>,
    outParam: DeviceType,
  |},
  'keybase.1.provisionUi.chooseGPGMethod': {|
    inParam: $ReadOnly<{|keys?: ?Array<GPGKey>|}>,
    outParam: GPGMethod,
  |},
  'keybase.1.provisionUi.chooseProvisioningMethod': {|
    inParam: $ReadOnly<{|gpgOption: Boolean|}>,
    outParam: ProvisionMethod,
  |},
  'keybase.1.provisionUi.switchToGPGSignOK': {|
    inParam: $ReadOnly<{|key: GPGKey, importError: String|}>,
    outParam: Boolean,
  |},
  'keybase.1.reachability.checkReachability': {|
    inParam: void,
    outParam: Reachability,
  |},
  'keybase.1.reachability.reachabilityChanged': {|
    inParam: $ReadOnly<{|reachability: Reachability|}>,
    outParam: void,
  |},
  'keybase.1.reachability.startReachability': {|
    inParam: void,
    outParam: Reachability,
  |},
  'keybase.1.rekey.getRevokeWarning': {|
    inParam: $ReadOnly<{|actingDevice: DeviceID, targetDevice: DeviceID|}>,
    outParam: RevokeWarning,
  |},
  'keybase.1.rekey.rekeyStatusFinish': {|
    inParam: void,
    outParam: Outcome,
  |},
  'keybase.1.rekey.showPendingRekeyStatus': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.rekeyUI.delegateRekeyUI': {|
    inParam: void,
    outParam: Int,
  |},
  'keybase.1.rekeyUI.refresh': {|
    inParam: $ReadOnly<{|problemSetDevices: ProblemSetDevices|}>,
    outParam: void,
  |},
  'keybase.1.rekeyUI.rekeySendEvent': {|
    inParam: $ReadOnly<{|event: RekeyEvent|}>,
    outParam: void,
  |},
  'keybase.1.revoke.revokeDevice': {|
    inParam: $ReadOnly<{|deviceID: DeviceID, forceSelf: Boolean, forceLast: Boolean|}>,
    outParam: void,
  |},
  'keybase.1.revoke.revokeKey': {|
    inParam: $ReadOnly<{|keyID: KID|}>,
    outParam: void,
  |},
  'keybase.1.revoke.revokeSigs': {|
    inParam: $ReadOnly<{|sigIDQueries?: ?Array<String>|}>,
    outParam: void,
  |},
  'keybase.1.saltpackUi.saltpackPromptForDecrypt': {|
    inParam: $ReadOnly<{|signingKID: KID, sender: SaltpackSender, usedDelegateUI: Boolean|}>,
    outParam: void,
  |},
  'keybase.1.saltpackUi.saltpackVerifyBadSender': {|
    inParam: $ReadOnly<{|signingKID: KID, sender: SaltpackSender|}>,
    outParam: void,
  |},
  'keybase.1.saltpackUi.saltpackVerifySuccess': {|
    inParam: $ReadOnly<{|signingKID: KID, sender: SaltpackSender|}>,
    outParam: void,
  |},
  'keybase.1.secretUi.getPassphrase': {|
    inParam: $ReadOnly<{|pinentry: GUIEntryArg, terminal?: ?SecretEntryArg|}>,
    outParam: GetPassphraseRes,
  |},
  'keybase.1.signup.checkInvitationCode': {|
    inParam: $ReadOnly<{|invitationCode: String|}>,
    outParam: void,
  |},
  'keybase.1.signup.checkUsernameAvailable': {|
    inParam: $ReadOnly<{|username: String|}>,
    outParam: void,
  |},
  'keybase.1.signup.getInvitationCode': {|
    inParam: void,
    outParam: String,
  |},
  'keybase.1.signup.inviteRequest': {|
    inParam: $ReadOnly<{|email: String, fullname: String, notes: String|}>,
    outParam: void,
  |},
  'keybase.1.signup.signup': {|
    inParam: $ReadOnly<{|email: String, inviteCode: String, passphrase: String, username: String, deviceName: String, deviceType: DeviceType, storeSecret: Boolean, skipMail: Boolean, genPGPBatch: Boolean, genPaper: Boolean|}>,
    outParam: SignupRes,
  |},
  'keybase.1.streamUi.close': {|
    inParam: $ReadOnly<{|s: Stream|}>,
    outParam: void,
  |},
  'keybase.1.streamUi.read': {|
    inParam: $ReadOnly<{|s: Stream, sz: Int|}>,
    outParam: Bytes,
  |},
  'keybase.1.streamUi.reset': {|
    inParam: $ReadOnly<{|s: Stream|}>,
    outParam: void,
  |},
  'keybase.1.streamUi.write': {|
    inParam: $ReadOnly<{|s: Stream, buf: Bytes|}>,
    outParam: Int,
  |},
  'keybase.1.teams.canUserPerform': {|
    inParam: $ReadOnly<{|name: String|}>,
    outParam: TeamOperation,
  |},
  'keybase.1.teams.getTarsDisabled': {|
    inParam: $ReadOnly<{|name: String|}>,
    outParam: Boolean,
  |},
  'keybase.1.teams.getTeamAndMemberShowcase': {|
    inParam: $ReadOnly<{|name: String|}>,
    outParam: TeamAndMemberShowcase,
  |},
  'keybase.1.teams.setTarsDisabled': {|
    inParam: $ReadOnly<{|name: String, disabled: Boolean|}>,
    outParam: void,
  |},
  'keybase.1.teams.setTeamMemberShowcase': {|
    inParam: $ReadOnly<{|name: String, isShowcased: Boolean|}>,
    outParam: void,
  |},
  'keybase.1.teams.setTeamShowcase': {|
    inParam: $ReadOnly<{|name: String, isShowcased?: ?Boolean, description?: ?String, anyMemberShowcase?: ?Boolean|}>,
    outParam: void,
  |},
  'keybase.1.teams.teamAcceptInviteOrRequestAccess': {|
    inParam: $ReadOnly<{|tokenOrName: String|}>,
    outParam: TeamAcceptOrRequestResult,
  |},
  'keybase.1.teams.teamAddEmailsBulk': {|
    inParam: $ReadOnly<{|name: String, emails: String, role: TeamRole|}>,
    outParam: BulkRes,
  |},
  'keybase.1.teams.teamAddMember': {|
    inParam: $ReadOnly<{|name: String, email: String, username: String, role: TeamRole, sendChatNotification: Boolean|}>,
    outParam: TeamAddMemberResult,
  |},
  'keybase.1.teams.teamAddMembers': {|
    inParam: $ReadOnly<{|name: String, assertions?: ?Array<String>, role: TeamRole, sendChatNotification: Boolean|}>,
    outParam: void,
  |},
  'keybase.1.teams.teamCreate': {|
    inParam: $ReadOnly<{|name: String, joinSubteam: Boolean|}>,
    outParam: TeamCreateResult,
  |},
  'keybase.1.teams.teamCreateSeitanTokenV2': {|
    inParam: $ReadOnly<{|name: String, role: TeamRole, label: SeitanKeyLabel|}>,
    outParam: SeitanIKeyV2,
  |},
  'keybase.1.teams.teamEditMember': {|
    inParam: $ReadOnly<{|name: String, username: String, role: TeamRole|}>,
    outParam: void,
  |},
  'keybase.1.teams.teamGet': {|
    inParam: $ReadOnly<{|name: String|}>,
    outParam: TeamDetails,
  |},
  'keybase.1.teams.teamIgnoreRequest': {|
    inParam: $ReadOnly<{|name: String, username: String|}>,
    outParam: void,
  |},
  'keybase.1.teams.teamLeave': {|
    inParam: $ReadOnly<{|name: String, permanent: Boolean|}>,
    outParam: void,
  |},
  'keybase.1.teams.teamListMyAccessRequests': {|
    inParam: $ReadOnly<{|teamName?: ?String|}>,
    outParam: ?Array<TeamName>,
  |},
  'keybase.1.teams.teamListRequests': {|
    inParam: $ReadOnly<{|teamName?: ?String|}>,
    outParam: ?Array<TeamJoinRequest>,
  |},
  'keybase.1.teams.teamListUnverified': {|
    inParam: $ReadOnly<{|userAssertion: String, includeImplicitTeams: Boolean|}>,
    outParam: AnnotatedTeamList,
  |},
  'keybase.1.teams.teamReAddMemberAfterReset': {|
    inParam: $ReadOnly<{|id: TeamID, username: String|}>,
    outParam: void,
  |},
  'keybase.1.teams.teamRemoveMember': {|
    inParam: $ReadOnly<{|name: String, username: String, email: String, inviteID: TeamInviteID|}>,
    outParam: void,
  |},
  'keybase.1.teams.teamSetSettings': {|
    inParam: $ReadOnly<{|name: String, settings: TeamSettings|}>,
    outParam: void,
  |},
  'keybase.1.teams.teamTree': {|
    inParam: $ReadOnly<{|name: TeamName|}>,
    outParam: TeamTreeResult,
  |},
  'keybase.1.teams.uploadTeamAvatar': {|
    inParam: $ReadOnly<{|teamname: String, filename: String, crop?: ?ImageCropRect, sendChatNotification: Boolean|}>,
    outParam: void,
  |},
  'keybase.1.teamsUi.confirmRootTeamDelete': {|
    inParam: $ReadOnly<{|teamName: String|}>,
    outParam: Boolean,
  |},
  'keybase.1.teamsUi.confirmSubteamDelete': {|
    inParam: $ReadOnly<{|teamName: String|}>,
    outParam: Boolean,
  |},
  'keybase.1.track.checkTracking': {|
    inParam: void,
    outParam: void,
  |},
  'keybase.1.track.dismissWithToken': {|
    inParam: $ReadOnly<{|trackToken: TrackToken|}>,
    outParam: void,
  |},
  'keybase.1.track.trackWithToken': {|
    inParam: $ReadOnly<{|trackToken: TrackToken, options: TrackOptions|}>,
    outParam: void,
  |},
  'keybase.1.track.untrack': {|
    inParam: $ReadOnly<{|username: String|}>,
    outParam: void,
  |},
  'keybase.1.ui.promptYesNo': {|
    inParam: $ReadOnly<{|text: Text, promptDefault: PromptDefault|}>,
    outParam: Boolean,
  |},
  'keybase.1.user.interestingPeople': {|
    inParam: $ReadOnly<{|maxUsers: Int|}>,
    outParam: ?Array<InterestingPerson>,
  |},
  'keybase.1.user.listTrackers2': {|
    inParam: $ReadOnly<{|assertion: String, reverse: Boolean|}>,
    outParam: UserSummary2Set,
  |},
  'keybase.1.user.loadMySettings': {|
    inParam: void,
    outParam: UserSettings,
  |},
  'keybase.1.user.profileEdit': {|
    inParam: $ReadOnly<{|fullName: String, location: String, bio: String|}>,
    outParam: void,
  |},
  'keybase.1.user.uploadUserAvatar': {|
    inParam: $ReadOnly<{|filename: String, crop?: ?ImageCropRect|}>,
    outParam: void,
  |},
|}

export const appStateAppState = {
  foreground: 0,
  background: 1,
  inactive: 2,
  backgroundactive: 3,
}

export const backendCommonBlockType = {
  data: 0,
  md: 1,
  git: 2,
}

export const blockBlockStatus = {
  unknown: 0,
  live: 1,
  archived: 2,
}

export const commonClientType = {
  none: 0,
  cli: 1,
  guiMain: 2,
  kbfs: 3,
  guiHelper: 4,
}

export const commonDeviceType = {
  desktop: 0,
  mobile: 1,
}

export const commonFullNamePackageVersion = {
  v0: 0,
  v1: 1,
  v2: 2,
}

export const commonLogLevel = {
  none: 0,
  debug: 1,
  info: 2,
  notice: 3,
  warn: 4,
  error: 5,
  critical: 6,
  fatal: 7,
}

export const commonMerkleTreeID = {
  master: 0,
  kbfsPublic: 1,
  kbfsPrivate: 2,
  kbfsPrivateteam: 3,
}

export const commonSeqType = {
  none: 0,
  public: 1,
  private: 2,
  semiprivate: 3,
}

export const commonTLFVisibility = {
  any: 0,
  public: 1,
  private: 2,
}

export const commonTeamType = {
  none: 0,
  legacy: 1,
  modern: 2,
}

export const commonUserOrTeamResult = {
  user: 1,
  team: 2,
}

export const configForkType = {
  none: 0,
  auto: 1,
  watchdog: 2,
  launchd: 3,
  systemd: 4,
}

export const configUpdateInfoStatus = {
  upToDate: 0,
  needUpdate: 1,
  criticallyOutOfDate: 2,
}

export const constantsStatusCode = {
  scok: 0,
  scinputerror: 100,
  scloginrequired: 201,
  scbadsession: 202,
  scbadloginusernotfound: 203,
  scbadloginpassword: 204,
  scnotfound: 205,
  scthrottlecontrol: 210,
  scdeleted: 216,
  scgeneric: 218,
  scalreadyloggedin: 235,
  scexists: 230,
  sccanceled: 237,
  scinputcanceled: 239,
  screloginrequired: 274,
  scresolutionfailed: 275,
  scprofilenotpublic: 276,
  scidentifyfailed: 277,
  sctrackingbroke: 278,
  scwrongcryptoformat: 279,
  scdecryptionerror: 280,
  scinvalidaddress: 281,
  scnosession: 283,
  scaccountreset: 290,
  scidentifiesfailed: 295,
  scnospaceondevice: 297,
  scmerkleclienterror: 299,
  scbademail: 472,
  scbadsignupusernametaken: 701,
  scbadinvitationcode: 707,
  scfeatureflag: 712,
  scmissingresult: 801,
  sckeynotfound: 901,
  sckeycorrupted: 905,
  sckeyinuse: 907,
  sckeybadgen: 913,
  sckeynosecret: 914,
  sckeybaduids: 915,
  sckeynoactive: 916,
  sckeynosig: 917,
  sckeybadsig: 918,
  sckeybadeldest: 919,
  sckeynoeldest: 920,
  sckeyduplicateupdate: 921,
  scsibkeyalreadyexists: 922,
  scdecryptionkeynotfound: 924,
  sckeynopgpencryption: 927,
  sckeynonaclencryption: 928,
  sckeysyncedpgpnotfound: 929,
  sckeynomatchinggpg: 930,
  sckeyrevoked: 931,
  scsigcannotverify: 1002,
  scsigwrongkey: 1008,
  scsigoldseqno: 1010,
  scbadtracksession: 1301,
  scdevicebadname: 1404,
  scdevicenameinuse: 1408,
  scdevicenotfound: 1409,
  scdevicemismatch: 1410,
  scdevicerequired: 1411,
  scdeviceprevprovisioned: 1413,
  scdevicenoprovision: 1414,
  scdeviceprovisionviadevice: 1415,
  screvokecurrentdevice: 1416,
  screvokelastdevice: 1417,
  scdeviceprovisionoffline: 1418,
  screvokelastdevicepgp: 1419,
  scstreamexists: 1501,
  scstreamnotfound: 1502,
  scstreamwrongkind: 1503,
  scstreameof: 1504,
  scgenericapierror: 1600,
  scapinetworkerror: 1601,
  sctimeout: 1602,
  scprooferror: 1701,
  scidentificationexpired: 1702,
  scselfnotfound: 1703,
  scbadkexphrase: 1704,
  scnouidelegation: 1705,
  scnoui: 1706,
  scgpgunavailable: 1707,
  scinvalidversionerror: 1800,
  scoldversionerror: 1801,
  scinvalidlocationerror: 1802,
  scservicestatuserror: 1803,
  scinstallerror: 1804,
  scloadkexterror: 1810,
  scloadkextpermerror: 1811,
  scgitinternal: 2300,
  scgitrepoalreadyexists: 2301,
  scgitinvalidreponame: 2302,
  scgitcannotdelete: 2303,
  scgitrepodoesntexist: 2304,
  scloginstatetimeout: 2400,
  scchatinternal: 2500,
  scchatratelimit: 2501,
  scchatconvexists: 2502,
  scchatunknowntlfid: 2503,
  scchatnotinconv: 2504,
  scchatbadmsg: 2505,
  scchatbroadcast: 2506,
  scchatalreadysuperseded: 2507,
  scchatalreadydeleted: 2508,
  scchattlffinalized: 2509,
  scchatcollision: 2510,
  scidentifysummaryerror: 2511,
  scneedselfrekey: 2512,
  scneedotherrekey: 2513,
  scchatmessagecollision: 2514,
  scchatduplicatemessage: 2515,
  scchatclienterror: 2516,
  scchatnotinteam: 2517,
  scchatstalepreviousstate: 2518,
  scteambadmembership: 2604,
  scteamselfnotowner: 2607,
  scteamnotfound: 2614,
  scteamexists: 2619,
  scteamreaderror: 2623,
  scteamwritepermdenied: 2625,
  scnoop: 2638,
  scteaminvitebadtoken: 2646,
  scteamtarduplicate: 2663,
  scteamtarnotfound: 2664,
  scteammemberexists: 2665,
  scteamnotreleased: 2666,
  scteampermanentlyleft: 2667,
  scteamneedrootid: 2668,
  scteamhaslivechildren: 2669,
  scteamdeleteerror: 2670,
  scteambadrootteam: 2671,
  scteamnameconflictswithuser: 2672,
  scteamdeletenouppointer: 2673,
  scteamneedowner: 2674,
  scteamnoownerallowed: 2675,
  scteamimplicitnononsbs: 2676,
  scteamimplicitbadhash: 2677,
  scteamimplicitbadname: 2678,
  scteamimplicitclash: 2679,
  scteamimplicitduplicate: 2680,
  scteamimplicitbadop: 2681,
  scteamimplicitbadrole: 2682,
  scteamimplicitnotfound: 2683,
  scteambadadminseqnotype: 2684,
  scteamimplicitbadadd: 2685,
  scteamimplicitbadremove: 2686,
  scteaminvitetokenreused: 2696,
  scteamkeymasknotfound: 2697,
  scteambanned: 2702,
  scteaminvalidban: 2703,
  scteamshowcasepermdenied: 2711,
  scteamprovisionalcankey: 2721,
  scteamprovisionalcannotkey: 2722,
  scteamftloutdated: 2736,
  scephemeralkeybadgeneration: 2900,
  scephemeralkeyunexpectedbox: 2901,
  scephemeralkeymissingbox: 2902,
  scephemeralkeywrongnumberofkeys: 2903,
  scephemeralkeymismatchedkey: 2904,
  scephemeralpairwisemacsmissinguids: 2905,
  scstellarerror: 3100,
  scstellarbadinput: 3101,
  scstellarwrongrevision: 3102,
  scstellarmissingbundle: 3103,
  scstellarbadpuk: 3104,
  scstellarmissingaccount: 3105,
  scstellarbadprev: 3106,
  scstellarwrongprimary: 3107,
  scstellarunsupportedcurrency: 3108,
  scnistwrongsize: 3201,
  scnistbadmode: 3202,
  scnisthashwrongsize: 3203,
  scnistsigwrongsize: 3204,
  scnistsigbadinput: 3205,
  scnistsigbaduid: 3206,
  scnistsigbaddeviceid: 3207,
  scnistsigbadnonce: 3208,
  scnistnosigorhash: 3209,
  scnistexpired: 3210,
  scnistsigrevoked: 3211,
  scnistkeyrevoked: 3212,
  scnistuserdeleted: 3213,
  scnistnodevice: 3214,
  scnistsigcannotVerify: 3215,
  scnistreplay: 3216,
  scnistsigbadlifetime: 3217,
  scnistnotfound: 3218,
  scnistbadclock: 3219,
  scnistsigbadctime: 3220,
  scbadsignupusernamedeleted: 3221,
}

export const ctlDbType = {
  main: 0,
  chat: 1,
}

export const ctlExitCode = {
  ok: 0,
  notok: 2,
  restart: 4,
}

export const favoriteFolderType = {
  unknown: 0,
  private: 1,
  public: 2,
  team: 3,
}

export const gitGitLocalMetadataVersion = {
  v1: 1,
}

export const gitGitPushType = {
  default: 0,
  createrepo: 1,
  renamerepo: 3,
}

export const gitGitRepoResultState = {
  err: 0,
  ok: 1,
}

export const gregorUIPushReason = {
  none: 0,
  reconnected: 1,
  newData: 2,
}

export const homeHomeScreenItemType = {
  todo: 1,
  people: 2,
}

export const homeHomeScreenPeopleNotificationType = {
  followed: 1,
  followedMulti: 2,
}

export const homeHomeScreenTodoType = {
  none: 0,
  bio: 1,
  proof: 2,
  device: 3,
  follow: 4,
  chat: 5,
  paperkey: 6,
  team: 7,
  folder: 8,
  gitRepo: 9,
  teamShowcase: 10,
  avatarUser: 11,
  avatarTeam: 12,
}

export const identifyCommonIdentifyReasonType = {
  none: 0,
  id: 1,
  track: 2,
  encrypt: 3,
  decrypt: 4,
  verify: 5,
  resource: 6,
  background: 7,
}

export const identifyCommonTrackDiffType = {
  none: 0,
  error: 1,
  clash: 2,
  revoked: 3,
  upgraded: 4,
  new: 5,
  remoteFail: 6,
  remoteWorking: 7,
  remoteChanged: 8,
  newEldest: 9,
  noneViaTemporary: 10,
}

export const identifyCommonTrackStatus = {
  newOk: 1,
  newZeroProofs: 2,
  newFailProofs: 3,
  updateBrokenFailedProofs: 4,
  updateNewProofs: 5,
  updateOk: 6,
  updateBrokenRevoked: 7,
}

export const identifyUiCheckResultFreshness = {
  fresh: 0,
  aged: 1,
  rancid: 2,
}

export const identifyUiDismissReasonType = {
  none: 0,
  handledElsewhere: 1,
}

export const installInstallAction = {
  unknown: 0,
  none: 1,
  upgrade: 2,
  reinstall: 3,
  install: 4,
}

export const installInstallStatus = {
  unknown: 0,
  error: 1,
  notInstalled: 2,
  installed: 4,
}

export const kbfsCommonFSErrorType = {
  accessDenied: 0,
  userNotFound: 1,
  revokedDataDetected: 2,
  notLoggedIn: 3,
  timeout: 4,
  rekeyNeeded: 5,
  badFolder: 6,
  notImplemented: 7,
  oldVersion: 8,
  overQuota: 9,
  noSigChain: 10,
  tooManyFolders: 11,
  exdevNotSupported: 12,
  diskLimitReached: 13,
  diskCacheErrorLogSend: 14,
}

export const kbfsCommonFSNotificationType = {
  encrypting: 0,
  decrypting: 1,
  signing: 2,
  verifying: 3,
  rekeying: 4,
  connection: 5,
  mdReadSuccess: 6,
  fileCreated: 7,
  fileModified: 8,
  fileDeleted: 9,
  fileRenamed: 10,
  initialized: 11,
}

export const kbfsCommonFSStatusCode = {
  start: 0,
  finish: 1,
  error: 2,
}

export const passphraseCommonPassphraseType = {
  none: 0,
  paperKey: 1,
  passPhrase: 2,
  verifyPassPhrase: 3,
}

export const pgpSignMode = {
  attached: 0,
  detached: 1,
  clear: 2,
}

export const processFileType = {
  unknown: 0,
  directory: 1,
  file: 2,
}

export const proveCommonProofState = {
  none: 0,
  ok: 1,
  tempFailure: 2,
  permFailure: 3,
  looking: 4,
  superseded: 5,
  posted: 6,
  revoked: 7,
  deleted: 8,
  unknownType: 9,
  sigHintMissing: 10,
  unchecked: 11,
}

export const proveCommonProofStatus = {
  none: 0,
  ok: 1,
  local: 2,
  found: 3,
  baseError: 100,
  hostUnreachable: 101,
  permissionDenied: 103,
  failedParse: 106,
  dnsError: 107,
  authFailed: 108,
  http429: 129,
  http500: 150,
  timeout: 160,
  internalError: 170,
  unchecked: 171,
  missingPvl: 172,
  baseHardError: 200,
  notFound: 201,
  contentFailure: 202,
  badUsername: 203,
  badRemoteId: 204,
  textNotFound: 205,
  badArgs: 206,
  contentMissing: 207,
  titleNotFound: 208,
  serviceError: 209,
  torSkipped: 210,
  torIncompatible: 211,
  http300: 230,
  http400: 240,
  httpOther: 260,
  emptyJson: 270,
  deleted: 301,
  serviceDead: 302,
  badSignature: 303,
  badApiUrl: 304,
  unknownType: 305,
  noHint: 306,
  badHintText: 307,
  invalidPvl: 308,
}

export const proveCommonProofType = {
  none: 0,
  keybase: 1,
  twitter: 2,
  github: 3,
  reddit: 4,
  coinbase: 5,
  hackernews: 6,
  facebook: 8,
  genericSocial: 9,
  genericWebSite: 1000,
  dns: 1001,
  pgp: 1002,
  rooter: 100001,
}

export const proveUiPromptOverwriteType = {
  social: 0,
  site: 1,
}

export const provisionUiChooseType = {
  existingDevice: 0,
  newDevice: 1,
}

export const provisionUiGPGMethod = {
  gpgNone: 0,
  gpgImport: 1,
  gpgSign: 2,
}

export const provisionUiProvisionMethod = {
  device: 0,
  paperKey: 1,
  passphrase: 2,
  gpgImport: 3,
  gpgSign: 4,
}

export const reachabilityReachable = {
  unknown: 0,
  yes: 1,
  no: 2,
}

export const rekeyOutcome = {
  none: 0,
  fixed: 1,
  ignored: 2,
}

export const rekeyUIRekeyEventType = {
  none: 0,
  notLoggedIn: 1,
  apiError: 2,
  noProblems: 3,
  loadMeError: 4,
  currentDeviceCanRekey: 5,
  deviceLoadError: 6,
  harass: 7,
  noGregorMessages: 8,
}

export const resetResetType = {
  none: 0,
  reset: 1,
  delete: 2,
}

export const saltpackAuthenticityType = {
  signed: 0,
  repudiable: 1,
  anonymous: 2,
}

export const saltpackUiSaltpackSenderType = {
  notTracked: 0,
  unknown: 1,
  anonymous: 2,
  trackingBroke: 3,
  trackingOk: 4,
  self: 5,
  revoked: 6,
  expired: 7,
}

export const simpleFSAsyncOps = {
  list: 0,
  listRecursive: 1,
  read: 2,
  write: 3,
  copy: 4,
  move: 5,
  remove: 6,
  listRecursiveToDepth: 7,
  getRevisions: 8,
}

export const simpleFSDirentType = {
  file: 0,
  dir: 1,
  sym: 2,
  exec: 3,
}

export const simpleFSKBFSArchivedType = {
  revision: 0,
  time: 1,
  timeString: 2,
  relTimeString: 3,
}

export const simpleFSListFilter = {
  noFilter: 0,
  filterAllHidden: 1,
  filterSystemHidden: 2,
}

export const simpleFSOpenFlags = {
  read: 0,
  replace: 1,
  existing: 2,
  write: 4,
  append: 8,
  directory: 16,
}

export const simpleFSPathType = {
  local: 0,
  kbfs: 1,
  kbfsArchived: 2,
}

export const simpleFSRevisionSpanType = {
  default: 0,
  lastFive: 1,
}

export const teamsAuditVersion = {
  v0: 0,
  v1: 1,
  v2: 2,
  v3: 3,
}

export const teamsSeitanKeyAndLabelVersion = {
  v1: 1,
  v2: 2,
}

export const teamsSeitanKeyLabelType = {
  sms: 1,
}

export const teamsTeamApplication = {
  kbfs: 1,
  chat: 2,
  saltpack: 3,
  gitMetadata: 4,
  seitanInviteToken: 5,
  stellarRelay: 6,
}

export const teamsTeamInviteCategory = {
  none: 0,
  unknown: 1,
  keybase: 2,
  email: 3,
  sbs: 4,
  seitan: 5,
}

export const teamsTeamMemberStatus = {
  active: 0,
  reset: 1,
  deleted: 2,
}

export const teamsTeamRole = {
  none: 0,
  reader: 1,
  writer: 2,
  admin: 3,
  owner: 4,
}

export const teamsTeamStatus = {
  none: 0,
  live: 1,
  deleted: 2,
  abandoned: 3,
}

export const tlfKeysTLFIdentifyBehavior = {
  unset: 0,
  chatCli: 1,
  chatGui: 2,
  chatGuiStrict: 3,
  kbfsRekey: 4,
  kbfsQr: 5,
  chatSkip: 6,
  saltpack: 7,
  cli: 8,
  gui: 9,
  defaultKbfs: 10,
  kbfsChat: 11,
  resolveAndCheck: 12,
}

export const uPKKeyType = {
  none: 0,
  nacl: 1,
  pgp: 2,
}

export const uPKUPAKVersion = {
  v1: 1,
  v2: 2,
}

export const uPKUPK2MinorVersion = {
  v0: 0,
  v1: 1,
  v2: 2,
  v3: 3,
  v4: 4,
  v5: 5,
  v6: 6,
}

export const uPKUPKLiteMinorVersion = {
  v0: 0,
}

export const uiPromptDefault = {
  none: 0,
  yes: 1,
  no: 2,
}
export type APIRes = $ReadOnly<{status: String, body: String, httpStatus: Int, appStatus: String}>
export type AllProvisionedUsernames = $ReadOnly<{defaultUsername: String, provisionedUsernames?: ?Array<String>, hasProvisionedUser: Boolean}>
export type AnnotatedMemberInfo = $ReadOnly<{userID: UID, teamID: TeamID, username: String, fullName: String, fqName: String, isImplicitTeam: Boolean, isOpenTeam: Boolean, role: TeamRole, implicit?: ?ImplicitRole, needsPUK: Boolean, memberCount: Int, eldestSeqno: Seqno, allowProfilePromote: Boolean, isMemberShowcased: Boolean, status: TeamMemberStatus}>
export type AnnotatedTeamInvite = $ReadOnly<{role: TeamRole, id: TeamInviteID, type: TeamInviteType, name: TeamInviteName, uv: UserVersion, inviter: UserVersion, inviterUsername: String, teamName: String, status: TeamMemberStatus}>
export type AnnotatedTeamList = $ReadOnly<{teams?: ?Array<AnnotatedMemberInfo>, annotatedActiveInvites: {[key: string]: AnnotatedTeamInvite}}>
export type AppState =
  | 0 // FOREGROUND_0
  | 1 // BACKGROUND_1
  | 2 // INACTIVE_2
  | 3 // BACKGROUNDACTIVE_3

export type AsyncOps =
  | 0 // LIST_0
  | 1 // LIST_RECURSIVE_1
  | 2 // READ_2
  | 3 // WRITE_3
  | 4 // COPY_4
  | 5 // MOVE_5
  | 6 // REMOVE_6
  | 7 // LIST_RECURSIVE_TO_DEPTH_7
  | 8 // GET_REVISIONS_8

export type Audit = $ReadOnly<{time: Time, mms /* maxMerkleSeqno */: Seqno, mcs /* maxChainSeqno */: Seqno, mmp /* maxMerkleProbe */: Seqno}>
export type AuditHistory = $ReadOnly<{ID: TeamID, public: Boolean, priorMerkleSeqno: Seqno, version: AuditVersion, audits?: ?Array<Audit>, preProbes: {[key: string]: Probe}, postProbes: {[key: string]: Probe}, tails: {[key: string]: LinkID}}>
export type AuditVersion =
  | 0 // V0_0
  | 1 // V1_1
  | 2 // V2_2
  | 3 // V3_3

export type AuthenticityType =
  | 0 // SIGNED_0
  | 1 // REPUDIABLE_1
  | 2 // ANONYMOUS_2

export type AvatarClearCacheMsg = $ReadOnly<{name: String, formats?: ?Array<AvatarFormat>}>
export type AvatarFormat = String
export type AvatarUrl = String
export type BadgeConversationInfo = $ReadOnly<{convID: ChatConversationID, badgeCounts: {[key: string]: Int}, unreadMessages: Int}>
export type BadgeState = $ReadOnly<{newTlfs: Int, rekeysNeeded: Int, newFollowers: Int, inboxVers: Int, homeTodoItems: Int, conversations?: ?Array<BadgeConversationInfo>, newGitRepoGlobalUniqueIDs?: ?Array<String>, newTeamNames?: ?Array<String>, newTeamAccessRequests?: ?Array<String>, teamsWithResetUsers?: ?Array<TeamMemberOutReset>, unreadWalletAccounts?: ?Array<WalletAccountInfo>}>
export type BinaryKID = Bytes
export type BlockIdCombo = $ReadOnly<{blockHash: String, chargedTo: UserOrTeamID, blockType: BlockType}>
export type BlockPingResponse = $ReadOnly<{}>
export type BlockRefNonce = ?string
export type BlockReference = $ReadOnly<{bid: BlockIdCombo, nonce: BlockRefNonce, chargedTo: UserOrTeamID}>
export type BlockReferenceCount = $ReadOnly<{ref: BlockReference, liveCount: Int}>
export type BlockStatus =
  | 0 // UNKNOWN_0
  | 1 // LIVE_1
  | 2 // ARCHIVED_2

export type BlockType =
  | 0 // DATA_0
  | 1 // MD_1
  | 2 // GIT_2

export type BootstrapStatus = $ReadOnly<{registered: Boolean, loggedIn: Boolean, uid: UID, username: String, deviceID: DeviceID, deviceName: String, following?: ?Array<String>, followers?: ?Array<String>}>
export type BoxNonce = ?string
export type BoxPublicKey = ?string
export type BulkRes = $ReadOnly<{invited?: ?Array<String>, alreadyInvited?: ?Array<String>, malformed?: ?Array<String>}>
export type Bytes32 = ?string
export type CanonicalTLFNameAndIDWithBreaks = $ReadOnly<{tlfID: TLFID, CanonicalName: CanonicalTlfName, breaks: TLFBreak}>
export type CanonicalTlfName = String
export type ChallengeInfo = $ReadOnly<{now: Long, challenge: String}>
export type ChatConversationID = Bytes
export type CheckProofStatus = $ReadOnly<{found: Boolean, status: ProofStatus, proofText: String, state: ProofState}>
export type CheckResult = $ReadOnly<{proofResult: ProofResult, time: Time, freshness: CheckResultFreshness}>
export type CheckResultFreshness =
  | 0 // FRESH_0
  | 1 // AGED_1
  | 2 // RANCID_2

export type ChooseType =
  | 0 // EXISTING_DEVICE_0
  | 1 // NEW_DEVICE_1

export type CiphertextBundle = $ReadOnly<{kid: KID, ciphertext: EncryptedBytes32, nonce: BoxNonce, publicKey: BoxPublicKey}>
export type ClientDetails = $ReadOnly<{pid: Int, clientType: ClientType, argv?: ?Array<String>, desc: String, version: String}>
export type ClientType =
  | 0 // NONE_0
  | 1 // CLI_1
  | 2 // GUI_MAIN_2
  | 3 // KBFS_3
  | 4 // GUI_HELPER_4

export type CompatibilityTeamID = {typ: 1, legacy: ?TLFID} | {typ: 2, modern: ?TeamID}
export type ComponentResult = $ReadOnly<{name: String, status: Status, exitCode: Int}>
export type Config = $ReadOnly<{serverURI: String, socketFile: String, label: String, runMode: String, gpgExists: Boolean, gpgPath: String, version: String, path: String, binaryRealpath: String, configPath: String, versionShort: String, versionFull: String, isAutoForked: Boolean, forkType: ForkType}>
export type ConfigValue = $ReadOnly<{isNull: Boolean, b?: ?Boolean, i?: ?Int, s?: ?String, o?: ?String}>
export type ConfiguredAccount = $ReadOnly<{username: String, hasStoredSecret: Boolean}>
export type ConfirmResult = $ReadOnly<{identityConfirmed: Boolean, remoteConfirmed: Boolean, expiringLocal: Boolean, autoConfirmed: Boolean}>
export type ConflictGeneration = Int
export type CopyArgs = $ReadOnly<{opID: OpID, src: Path, dest: Path}>
export type CryptKey = $ReadOnly<{KeyGeneration: Int, Key: Bytes32}>
export type Cryptocurrency = $ReadOnly<{rowId: Int, pkhash: Bytes, address: String, sigID: SigID, type: String, family: String}>
export type CsrfToken = String
export type DbKey = $ReadOnly<{dbType: DbType, objType: Int, key: String}>
export type DbType =
  | 0 // MAIN_0
  | 1 // CHAT_1

export type DbValue = Bytes
export type Device = $ReadOnly<{type: String, name: String, deviceID: DeviceID, cTime: Time, mTime: Time, lastUsedTime: Time, encryptKey: KID, verifyKey: KID, status: Int}>
export type DeviceDetail = $ReadOnly<{device: Device, eldest: Boolean, provisioner?: ?Device, provisionedAt?: ?Time, revokedAt?: ?Time, revokedBy: KID, revokedByDevice?: ?Device, currentDevice: Boolean}>
export type DeviceEk = $ReadOnly<{seed: Bytes32, metadata: DeviceEkMetadata}>
export type DeviceEkMetadata = $ReadOnly<{kid: KID, hashMeta: HashMeta, generation: EkGeneration, ctime: Time, deviceCtime: Time}>
export type DeviceEkStatement = $ReadOnly<{currentDeviceEkMetadata: DeviceEkMetadata}>
export type DeviceID = String
export type DeviceType =
  | 0 // DESKTOP_0
  | 1 // MOBILE_1

export type Dirent = $ReadOnly<{time: Time, size: Int, name: String, direntType: DirentType, lastWriterUnverified: User, writable: Boolean}>
export type DirentType =
  | 0 // FILE_0
  | 1 // DIR_1
  | 2 // SYM_2
  | 3 // EXEC_3

export type DirentWithRevision = $ReadOnly<{entry: Dirent, revision: KBFSRevision}>
export type DismissReason = $ReadOnly<{type: DismissReasonType, reason: String, resource: String}>
export type DismissReasonType =
  | 0 // NONE_0
  | 1 // HANDLED_ELSEWHERE_1

export type DownPointer = $ReadOnly<{id: TeamID, nameComponent: String, isDeleted: Boolean}>
export type DowngradeReferenceRes = $ReadOnly<{completed?: ?Array<BlockReferenceCount>, failed: BlockReference}>
export type DurationSec = Double
export type ED25519PublicKey = ?string
export type ED25519Signature = ?string
export type ED25519SignatureInfo = $ReadOnly<{sig: ED25519Signature, publicKey: ED25519PublicKey}>
export type EkGeneration = Int64
export type Email = $ReadOnly<{email: String, isVerified: Boolean}>
export type EncryptedBytes32 = ?string
export type EncryptedGitMetadata = $ReadOnly<{v: Int, e: Bytes, n: BoxNonce, gen: PerTeamKeyGeneration}>
export type ErrorNum = Int
export type ExitCode =
  | 0 // OK_0
  | 2 // NOTOK_2
  | 4 // RESTART_4

export type ExtendedStatus = $ReadOnly<{standalone: Boolean, passphraseStreamCached: Boolean, tsecCached: Boolean, deviceSigKeyCached: Boolean, deviceEncKeyCached: Boolean, paperSigKeyCached: Boolean, paperEncKeyCached: Boolean, storedSecret: Boolean, secretPromptSkip: Boolean, rememberPassphrase: Boolean, device?: ?Device, deviceErr?: ?LoadDeviceErr, logDir: String, session?: ?SessionStatus, defaultUsername: String, provisionedUsernames?: ?Array<String>, Clients?: ?Array<ClientDetails>, deviceEkNames?: ?Array<String>, platformInfo: PlatformInfo, defaultDeviceID: DeviceID}>
export type FSEditListRequest = $ReadOnly<{folder: Folder, requestID: Int}>
export type FSErrorType =
  | 0 // ACCESS_DENIED_0
  | 1 // USER_NOT_FOUND_1
  | 2 // REVOKED_DATA_DETECTED_2
  | 3 // NOT_LOGGED_IN_3
  | 4 // TIMEOUT_4
  | 5 // REKEY_NEEDED_5
  | 6 // BAD_FOLDER_6
  | 7 // NOT_IMPLEMENTED_7
  | 8 // OLD_VERSION_8
  | 9 // OVER_QUOTA_9
  | 10 // NO_SIG_CHAIN_10
  | 11 // TOO_MANY_FOLDERS_11
  | 12 // EXDEV_NOT_SUPPORTED_12
  | 13 // DISK_LIMIT_REACHED_13
  | 14 // DISK_CACHE_ERROR_LOG_SEND_14

export type FSFolderEditHistory = $ReadOnly<{folder: Folder, serverTime: Time, history?: ?Array<FSFolderWriterEditHistory>}>
export type FSFolderWriterEdit = $ReadOnly<{filename: String, notificationType: FSNotificationType, serverTime: Time}>
export type FSFolderWriterEditHistory = $ReadOnly<{writerName: String, edits?: ?Array<FSFolderWriterEdit>}>
export type FSNotification = $ReadOnly<{filename: String, status: String, statusCode: FSStatusCode, notificationType: FSNotificationType, errorType: FSErrorType, params: {[key: string]: String}, writerUid: UID, localTime: Time, folderType: FolderType}>
export type FSNotificationType =
  | 0 // ENCRYPTING_0
  | 1 // DECRYPTING_1
  | 2 // SIGNING_2
  | 3 // VERIFYING_3
  | 4 // REKEYING_4
  | 5 // CONNECTION_5
  | 6 // MD_READ_SUCCESS_6
  | 7 // FILE_CREATED_7
  | 8 // FILE_MODIFIED_8
  | 9 // FILE_DELETED_9
  | 10 // FILE_RENAMED_10
  | 11 // INITIALIZED_11

export type FSPathSyncStatus = $ReadOnly<{folderType: FolderType, path: String, syncingBytes: Int64, syncingOps: Int64, syncedBytes: Int64}>
export type FSStatusCode =
  | 0 // START_0
  | 1 // FINISH_1
  | 2 // ERROR_2

export type FSSyncStatus = $ReadOnly<{totalSyncingBytes: Int64, syncingPaths?: ?Array<String>, endEstimate?: ?Time}>
export type FSSyncStatusRequest = $ReadOnly<{requestID: Int}>
export type FastTeamData = $ReadOnly<{name: TeamName, chain: FastTeamSigChainState, perTeamKeySeeds /* perTeamKeySeedsUnverified */: {[key: string]: PerTeamKeySeed}, latestKeyGeneration: PerTeamKeyGeneration, readerKeyMasks: {[key: string]: {[key: string]: MaskB64}}, latestSeqnoHint: Seqno, cachedAt: Time, loadedLatest: Boolean}>
export type FastTeamLoadArg = $ReadOnly<{ID: TeamID, public: Boolean, assertTeamName?: ?TeamName, applications?: ?Array<TeamApplication>, keyGenerationsNeeded?: ?Array<PerTeamKeyGeneration>, needLatestKey: Boolean, forceRefresh: Boolean}>
export type FastTeamLoadRes = $ReadOnly<{name: TeamName, applicationKeys?: ?Array<TeamApplicationKey>}>
export type FastTeamSigChainState = $ReadOnly<{ID: TeamID, public: Boolean, rootAncestor: TeamName, nameDepth: Int, last?: ?LinkTriple, perTeamKeys: {[key: string]: PerTeamKey}, perTeamKeySeedsVerified: {[key: string]: PerTeamKeySeed}, downPointers: {[key: string]: DownPointer}, lastUpPointer?: ?UpPointer, perTeamKeyCTime: UnixTime, linkIDs: {[key: string]: LinkID}, merkleInfo: {[key: string]: MerkleRootV2}}>
export type FavoritesResult = $ReadOnly<{favoriteFolders?: ?Array<Folder>, ignoredFolders?: ?Array<Folder>, newFolders?: ?Array<Folder>}>
export type Feature = $ReadOnly<{allow: Boolean, defaultValue: Boolean, readonly: Boolean, label: String}>
export type File = $ReadOnly<{path: String}>
export type FileContent = $ReadOnly<{data: Bytes, progress: Progress}>
export type FileDescriptor = $ReadOnly<{name: String, type: FileType}>
export type FileType =
  | 0 // UNKNOWN_0
  | 1 // DIRECTORY_1
  | 2 // FILE_2

export type FindNextMDResponse = $ReadOnly<{kbfsRoot: MerkleRoot, merkleNodes?: ?Array<Bytes>, rootSeqno: Seqno, rootHash: HashMeta}>
export type FirstStepResult = $ReadOnly<{valPlusTwo: Int}>
export type Folder = $ReadOnly<{name: String, private: Boolean, notificationsOn: Boolean, created: Boolean, folderType: FolderType, team_id /* teamID */?: ?TeamID}>
export type FolderType =
  | 0 // UNKNOWN_0
  | 1 // PRIVATE_1
  | 2 // PUBLIC_2
  | 3 // TEAM_3

export type ForkType =
  | 0 // NONE_0
  | 1 // AUTO_1
  | 2 // WATCHDOG_2
  | 3 // LAUNCHD_3
  | 4 // SYSTEMD_4

export type FullName = String
export type FullNamePackage = $ReadOnly<{version: FullNamePackageVersion, fullName: FullName, eldestSeqno: Seqno, status: StatusCode, cachedAt: Time}>
export type FullNamePackageVersion =
  | 0 // V0_0
  | 1 // V1_1
  | 2 // V2_2

export type FuseMountInfo = $ReadOnly<{path: String, fstype: String, output: String}>
export type FuseStatus = $ReadOnly<{version: String, bundleVersion: String, kextID: String, path: String, kextStarted: Boolean, installStatus: InstallStatus, installAction: InstallAction, mountInfos?: ?Array<FuseMountInfo>, status: Status}>
export type GPGKey = $ReadOnly<{algorithm: String, keyID: String, creation: String, expiration: String, identities?: ?Array<PGPIdentity>}>
export type GPGMethod =
  | 0 // GPG_NONE_0
  | 1 // GPG_IMPORT_1
  | 2 // GPG_SIGN_2

export type GUIEntryArg = $ReadOnly<{windowTitle: String, prompt: String, username: String, submitLabel: String, cancelLabel: String, retryLabel: String, type: PassphraseType, features: GUIEntryFeatures}>
export type GUIEntryFeatures = $ReadOnly<{showTyping: Feature}>
export type GcOptions = $ReadOnly<{maxLooseRefs: Int, pruneMinLooseObjects: Int, pruneExpireTime: Time, maxObjectPacks: Int}>
export type GetBlockRes = $ReadOnly<{blockKey: String, buf: Bytes, size: Int, status: BlockStatus}>
export type GetCurrentStatusRes = $ReadOnly<{configured: Boolean, registered: Boolean, loggedIn: Boolean, sessionIsValid: Boolean, user?: ?User}>
export type GetLockdownResponse = $ReadOnly<{history?: ?Array<LockdownHistory>, status: Boolean}>
export type GetPassphraseRes = $ReadOnly<{passphrase: String, storeSecret: Boolean}>
export type GetRevisionsArgs = $ReadOnly<{opID: OpID, path: Path, spanType: RevisionSpanType}>
export type GetRevisionsResult = $ReadOnly<{revisions?: ?Array<DirentWithRevision>, progress: Progress}>
export type GetTLFCryptKeysRes = $ReadOnly<{nameIDBreaks: CanonicalTLFNameAndIDWithBreaks, CryptKeys?: ?Array<CryptKey>}>
export type GitCommit = $ReadOnly<{commitHash: String, message: String, authorName: String, authorEmail: String, ctime: Time}>
export type GitLocalMetadata = $ReadOnly<{repoName: GitRepoName, refs?: ?Array<GitRefMetadata>, pushType: GitPushType, previousRepoName: GitRepoName}>
export type GitLocalMetadataV1 = $ReadOnly<{repoName: GitRepoName}>
export type GitLocalMetadataVersion = 1 // V1_1

export type GitLocalMetadataVersioned = {version: 1, v1: ?GitLocalMetadataV1}
export type GitPushType =
  | 0 // DEFAULT_0
  | 1 // CREATEREPO_1
  | 3 // RENAMEREPO_3

export type GitRefMetadata = $ReadOnly<{refName: String, commits?: ?Array<GitCommit>, moreCommitsAvailable: Boolean, isDelete: Boolean}>
export type GitRepoInfo = $ReadOnly<{folder: Folder, repoID: RepoID, localMetadata: GitLocalMetadata, serverMetadata: GitServerMetadata, repoUrl: String, globalUniqueID: String, canDelete: Boolean, teamRepoSettings?: ?GitTeamRepoSettings}>
export type GitRepoName = String
export type GitRepoResult = {state: 0, err: ?String} | {state: 1, ok: ?GitRepoInfo}
export type GitRepoResultState =
  | 0 // ERR_0
  | 1 // OK_1

export type GitServerMetadata = $ReadOnly<{ctime: Time, mtime: Time, lastModifyingUsername: String, lastModifyingDeviceID: DeviceID, lastModifyingDeviceName: String}>
export type GitTeamRepoSettings = $ReadOnly<{channelName?: ?String, chatDisabled: Boolean}>
export type HasServerKeysRes = $ReadOnly<{hasServerKeys: Boolean}>
export type HashMeta = Bytes
export type Hello2Res = $ReadOnly<{encryptionKey: KID, sigPayload: HelloRes, deviceEkKID: KID}>
export type HelloRes = String
export type HomeScreen = $ReadOnly<{lastViewed: Time, version: Int, visits: Int, items?: ?Array<HomeScreenItem>, followSuggestions?: ?Array<HomeUserSummary>}>
export type HomeScreenItem = $ReadOnly<{badged: Boolean, data: HomeScreenItemData}>
export type HomeScreenItemData = {t: 1, todo: ?HomeScreenTodo} | {t: 2, people: ?HomeScreenPeopleNotification}
export type HomeScreenItemID = String
export type HomeScreenItemType =
  | 1 // TODO_1
  | 2 // PEOPLE_2

export type HomeScreenPeopleNotification = {t: 1, followed: ?HomeScreenPeopleNotificationFollowed} | {t: 2, followedMulti: ?HomeScreenPeopleNotificationFollowedMulti}
export type HomeScreenPeopleNotificationFollowed = $ReadOnly<{followTime: Time, followedBack: Boolean, user: UserSummary}>
export type HomeScreenPeopleNotificationFollowedMulti = $ReadOnly<{followers?: ?Array<HomeScreenPeopleNotificationFollowed>, numOthers: Int}>
export type HomeScreenPeopleNotificationType =
  | 1 // FOLLOWED_1
  | 2 // FOLLOWED_MULTI_2

export type HomeScreenTodo = void
export type HomeScreenTodoType =
  | 0 // NONE_0
  | 1 // BIO_1
  | 2 // PROOF_2
  | 3 // DEVICE_3
  | 4 // FOLLOW_4
  | 5 // CHAT_5
  | 6 // PAPERKEY_6
  | 7 // TEAM_7
  | 8 // FOLDER_8
  | 9 // GIT_REPO_9
  | 10 // TEAM_SHOWCASE_10
  | 11 // AVATAR_USER_11
  | 12 // AVATAR_TEAM_12

export type HomeUserSummary = $ReadOnly<{uid: UID, username: String, bio: String, fullName: String, pics?: ?Pics}>
export type Identify2Res = $ReadOnly<{upk: UserPlusKeys, identifiedAt: Time, trackBreaks?: ?IdentifyTrackBreaks}>
export type Identify2ResUPK2 = $ReadOnly<{upk: UserPlusKeysV2AllIncarnations, identifiedAt: Time, trackBreaks?: ?IdentifyTrackBreaks}>
export type IdentifyKey = $ReadOnly<{pgpFingerprint: Bytes, KID: KID, trackDiff?: ?TrackDiff, breaksTracking: Boolean}>
export type IdentifyLiteRes = $ReadOnly<{ul: UserOrTeamLite, trackBreaks?: ?IdentifyTrackBreaks}>
export type IdentifyOutcome = $ReadOnly<{username: String, status?: ?Status, warnings?: ?Array<String>, trackUsed?: ?TrackSummary, trackStatus: TrackStatus, numTrackFailures: Int, numTrackChanges: Int, numProofFailures: Int, numRevoked: Int, numProofSuccesses: Int, revoked?: ?Array<TrackDiff>, trackOptions: TrackOptions, forPGPPull: Boolean, reason: IdentifyReason}>
export type IdentifyProofBreak = $ReadOnly<{remoteProof: RemoteProof, lcr: LinkCheckResult}>
export type IdentifyReason = $ReadOnly<{type: IdentifyReasonType, reason: String, resource: String}>
export type IdentifyReasonType =
  | 0 // NONE_0
  | 1 // ID_1
  | 2 // TRACK_2
  | 3 // ENCRYPT_3
  | 4 // DECRYPT_4
  | 5 // VERIFY_5
  | 6 // RESOURCE_6
  | 7 // BACKGROUND_7

export type IdentifyRow = $ReadOnly<{rowId: Int, proof: RemoteProof, trackDiff?: ?TrackDiff}>
export type IdentifyTrackBreaks = $ReadOnly<{keys?: ?Array<IdentifyKey>, proofs?: ?Array<IdentifyProofBreak>}>
export type Identity = $ReadOnly<{status?: ?Status, whenLastTracked: Time, proofs?: ?Array<IdentifyRow>, cryptocurrency?: ?Array<Cryptocurrency>, revoked?: ?Array<TrackDiff>, revokedDetails?: ?Array<RevokedProof>, breaksTracking: Boolean}>
export type ImageCropRect = $ReadOnly<{x0: Int, y0: Int, x1: Int, y1: Int}>
export type ImplicitRole = $ReadOnly<{role: TeamRole, ancestor: TeamID}>
export type ImplicitTeamConflictInfo = $ReadOnly<{generation: ConflictGeneration, time: Time}>
export type ImplicitTeamDisplayName = $ReadOnly<{isPublic: Boolean, writers: ImplicitTeamUserSet, readers: ImplicitTeamUserSet, conflictInfo?: ?ImplicitTeamConflictInfo}>
export type ImplicitTeamUserSet = $ReadOnly<{keybaseUsers?: ?Array<String>, unresolvedUsers?: ?Array<SocialAssertion>}>
export type InstallAction =
  | 0 // UNKNOWN_0
  | 1 // NONE_1
  | 2 // UPGRADE_2
  | 3 // REINSTALL_3
  | 4 // INSTALL_4

export type InstallResult = $ReadOnly<{componentResults?: ?Array<ComponentResult>, status: Status, fatal: Boolean}>
export type InstallStatus =
  | 0 // UNKNOWN_0
  | 1 // ERROR_1
  | 2 // NOT_INSTALLED_2
  | 4 // INSTALLED_4

export type InterestingPerson = $ReadOnly<{uid: UID, username: String}>
export type KBFSArchivedParam = {KBFSArchivedType: 0, revision: ?KBFSRevision} | {KBFSArchivedType: 1, time: ?Time} | {KBFSArchivedType: 2, timeString: ?String} | {KBFSArchivedType: 3, relTimeString: ?String}
export type KBFSArchivedPath = $ReadOnly<{path: String, archivedParam: KBFSArchivedParam}>
export type KBFSArchivedType =
  | 0 // REVISION_0
  | 1 // TIME_1
  | 2 // TIME_STRING_2
  | 3 // REL_TIME_STRING_3

export type KBFSRevision = Int64
export type KBFSRoot = $ReadOnly<{treeID: MerkleTreeID, root: KBFSRootHash}>
export type KBFSRootHash = Bytes
export type KBFSTeamSettings = $ReadOnly<{tlfID: TLFID}>
export type KID = String
export type KeyBundle = $ReadOnly<{version: Int, bundle: Bytes}>
export type KeyBundleResponse = $ReadOnly<{WriterBundle: KeyBundle, ReaderBundle: KeyBundle}>
export type KeyHalf = $ReadOnly<{user: UID, deviceKID: KID, key: Bytes}>
export type KeyInfo = $ReadOnly<{fingerprint: String, key: String, desc: String}>
export type KeyType =
  | 0 // NONE_0
  | 1 // NACL_1
  | 2 // PGP_2

export type KeybaseTime = $ReadOnly<{unix: Time, chain: Seqno}>
export type LeaseID = String
export type LinkCheckResult = $ReadOnly<{proofId: Int, proofResult: ProofResult, snoozedResult: ProofResult, torWarning: Boolean, tmpTrackExpireTime: Time, cached?: ?CheckResult, diff?: ?TrackDiff, remoteDiff?: ?TrackDiff, hint?: ?SigHint, breaksTracking: Boolean}>
export type LinkID = String
export type LinkTriple = $ReadOnly<{seqno: Seqno, seqType: SeqType, linkID: LinkID}>
export type ListArgs = $ReadOnly<{opID: OpID, path: Path, filter: ListFilter}>
export type ListFilter =
  | 0 // NO_FILTER_0
  | 1 // FILTER_ALL_HIDDEN_1
  | 2 // FILTER_SYSTEM_HIDDEN_2

export type ListResult = $ReadOnly<{files?: ?Array<File>}>
export type ListToDepthArgs = $ReadOnly<{opID: OpID, path: Path, filter: ListFilter, depth: Int}>
export type LoadAvatarsRes = $ReadOnly<{picmap: {[key: string]: {[key: string]: AvatarUrl}}}>
export type LoadDeviceErr = $ReadOnly<{where: String, desc: String}>
export type LoadTeamArg = $ReadOnly<{ID: TeamID, name: String, public: Boolean, needAdmin: Boolean, refreshUIDMapper: Boolean, refreshers: TeamRefreshers, forceFullReload: Boolean, forceRepoll: Boolean, staleOK: Boolean, allowNameLookupBurstCache: Boolean}>
export type LockContext = $ReadOnly<{requireLockID: LockID, releaseAfterSuccess: Boolean}>
export type LockID = Long
export type LockdownHistory = $ReadOnly<{status: Boolean, creationTime: Time, deviceID: DeviceID, deviceName: String}>
export type LogLevel =
  | 0 // NONE_0
  | 1 // DEBUG_1
  | 2 // INFO_2
  | 3 // NOTICE_3
  | 4 // WARN_4
  | 5 // ERROR_5
  | 6 // CRITICAL_6
  | 7 // FATAL_7

export type LookupImplicitTeamRes = $ReadOnly<{teamID: TeamID, name: TeamName, displayName: ImplicitTeamDisplayName, tlfID: TLFID}>
export type MDBlock = $ReadOnly<{version: Int, timestamp: Time, block: Bytes}>
export type MDPriority = Int
export type MaskB64 = Bytes
export type MemberInfo = $ReadOnly<{userID: UID, teamID: TeamID, fqName: String, isImplicitTeam: Boolean, isOpenTeam: Boolean, role: TeamRole, implicit?: ?ImplicitRole, memberCount: Int, allowProfilePromote: Boolean, isMemberShowcased: Boolean}>
export type MerkleRoot = $ReadOnly<{version: Int, root: Bytes}>
export type MerkleRootAndTime = $ReadOnly<{root: MerkleRootV2, updateTime: Time, fetchTime: Time}>
export type MerkleRootV2 = $ReadOnly<{seqno: Seqno, hashMeta: HashMeta}>
export type MerkleStoreEntry = $ReadOnly<{hash: MerkleStoreKitHash, entry: MerkleStoreEntryString}>
export type MerkleStoreEntryString = String
export type MerkleStoreKit = String
export type MerkleStoreKitHash = String
export type MerkleStoreSupportedVersion = Int
export type MerkleTreeID =
  | 0 // MASTER_0
  | 1 // KBFS_PUBLIC_1
  | 2 // KBFS_PRIVATE_2
  | 3 // KBFS_PRIVATETEAM_3

export type MerkleTreeLocation = $ReadOnly<{leaf: UserOrTeamID, loc: SigChainLocation}>
export type MetadataResponse = $ReadOnly<{folderID: String, mdBlocks?: ?Array<MDBlock>}>
export type MoveArgs = $ReadOnly<{opID: OpID, src: Path, dest: Path}>
export type NaclDHKeyPrivate = ?string
export type NaclDHKeyPublic = ?string
export type NaclSigningKeyPrivate = ?string
export type NaclSigningKeyPublic = ?string
export type NextMerkleRootRes = $ReadOnly<{res?: ?MerkleRootV2}>
export type NotificationChannels = $ReadOnly<{session: Boolean, users: Boolean, kbfs: Boolean, tracking: Boolean, favorites: Boolean, paperkeys: Boolean, keyfamily: Boolean, service: Boolean, app: Boolean, chat: Boolean, pgp: Boolean, kbfsrequest: Boolean, badges: Boolean, reachability: Boolean, team: Boolean, ephemeral: Boolean, chatkbfsedits: Boolean, chatdev: Boolean, deviceclone: Boolean, chatattachments: Boolean, wallet: Boolean}>
export type OpDescription = {asyncOp: 0, list: ?ListArgs} | {asyncOp: 1, listRecursive: ?ListArgs} | {asyncOp: 7, listRecursiveToDepth: ?ListToDepthArgs} | {asyncOp: 2, read: ?ReadArgs} | {asyncOp: 3, write: ?WriteArgs} | {asyncOp: 4, copy: ?CopyArgs} | {asyncOp: 5, move: ?MoveArgs} | {asyncOp: 6, remove: ?RemoveArgs} | {asyncOp: 8, getRevisions: ?GetRevisionsArgs}
export type OpID = ?string
export type OpProgress = $ReadOnly<{start: Time, endEstimate: Time, opType: AsyncOps, bytesTotal: Int64, bytesRead: Int64, bytesWritten: Int64, filesTotal: Int64, filesRead: Int64, filesWritten: Int64}>
export type OpenFlags =
  | 0 // READ_0
  | 1 // REPLACE_1
  | 2 // EXISTING_2
  | 4 // WRITE_4
  | 8 // APPEND_8
  | 16 // DIRECTORY_16

export type OutOfDateInfo = $ReadOnly<{upgradeTo: String, upgradeURI: String, customMessage: String, criticalClockSkew: Long}>
export type Outcome =
  | 0 // NONE_0
  | 1 // FIXED_1
  | 2 // IGNORED_2

export type PGPCreateUids = $ReadOnly<{useDefault: Boolean, ids?: ?Array<PGPIdentity>}>
export type PGPDecryptOptions = $ReadOnly<{assertSigned: Boolean, signedBy: String}>
export type PGPEncryptOptions = $ReadOnly<{recipients?: ?Array<String>, noSign: Boolean, noSelf: Boolean, binaryOut: Boolean, keyQuery: String}>
export type PGPFingerprint = ?string
export type PGPIdentity = $ReadOnly<{username: String, comment: String, email: String}>
export type PGPPurgeRes = $ReadOnly<{filenames?: ?Array<String>}>
export type PGPQuery = $ReadOnly<{secret: Boolean, query: String, exactMatch: Boolean}>
export type PGPSigVerification = $ReadOnly<{isSigned: Boolean, verified: Boolean, signer: User, signKey: PublicKey}>
export type PGPSignOptions = $ReadOnly<{keyQuery: String, mode: SignMode, binaryIn: Boolean, binaryOut: Boolean}>
export type PGPVerifyOptions = $ReadOnly<{signedBy: String, signature: Bytes}>
export type ParamProofJSON = $ReadOnly<{sigHash: SigID, kbUsername: String}>
export type ParamProofLogoConfig = $ReadOnly<{url: String, faIcon: String}>
export type ParamProofServiceConfig = $ReadOnly<{version: Int, domain: String, displayName: String, group?: ?String, logo?: ?ParamProofLogoConfig, description: String, usernameConfig: ParamProofUsernameConfig, brandColor: String, prefillUrl: String, profileUrl: String, checkUrl: String, checkPath?: ?Array<SelectorEntry>}>
export type ParamProofUsernameConfig = $ReadOnly<{re: String, min: Int, max: Int}>
export type PassphraseStream = $ReadOnly<{passphraseStream: Bytes, generation: Int}>
export type PassphraseType =
  | 0 // NONE_0
  | 1 // PAPER_KEY_1
  | 2 // PASS_PHRASE_2
  | 3 // VERIFY_PASS_PHRASE_3

export type Path = {PathType: 0, local: ?String} | {PathType: 1, kbfs: ?String} | {PathType: 2, kbfsArchived: ?KBFSArchivedPath}
export type PathType =
  | 0 // LOCAL_0
  | 1 // KBFS_1
  | 2 // KBFS_ARCHIVED_2

export type PerTeamKey = $ReadOnly<{gen: PerTeamKeyGeneration, seqno: Seqno, sigKID: KID, encKID: KID}>
export type PerTeamKeyGeneration = Int
export type PerTeamKeySeed = ?string
export type PerTeamKeySeedItem = $ReadOnly<{seed: PerTeamKeySeed, generation: PerTeamKeyGeneration, seqno: Seqno}>
export type PerUserKey = $ReadOnly<{gen: Int, seqno: Seqno, sigKID: KID, encKID: KID, signedByKID: KID}>
export type PerUserKeyBox = $ReadOnly<{generation: PerUserKeyGeneration, box: String, receiverKID: KID}>
export type PerUserKeyGeneration = Int
export type PhoneNumber = String
export type Pics = $ReadOnly<{square40: String, square200: String, square360: String}>
export type PingResponse = $ReadOnly<{timestamp: Time}>
export type PlatformInfo = $ReadOnly<{os: String, osVersion: String, arch: String, goVersion: String}>
export type Probe = $ReadOnly<{i /* index */: Int, s /* teamSeqno */: Seqno}>
export type ProblemSet = $ReadOnly<{user: User, kid: KID, tlfs?: ?Array<ProblemTLF>}>
export type ProblemSetDevices = $ReadOnly<{problemSet: ProblemSet, devices?: ?Array<Device>}>
export type ProblemTLF = $ReadOnly<{tlf: TLF, score: Int, solution_kids?: ?Array<KID>}>
export type Process = $ReadOnly<{pid: String, command: String, fileDescriptors?: ?Array<FileDescriptor>}>
export type ProfileTeamLoadRes = $ReadOnly<{loadTimeNsec: Long}>
export type Progress = Int
export type PromptDefault =
  | 0 // NONE_0
  | 1 // YES_1
  | 2 // NO_2

export type PromptOverwriteType =
  | 0 // SOCIAL_0
  | 1 // SITE_1

export type ProofResult = $ReadOnly<{state: ProofState, status: ProofStatus, desc: String}>
export type ProofState =
  | 0 // NONE_0
  | 1 // OK_1
  | 2 // TEMP_FAILURE_2
  | 3 // PERM_FAILURE_3
  | 4 // LOOKING_4
  | 5 // SUPERSEDED_5
  | 6 // POSTED_6
  | 7 // REVOKED_7
  | 8 // DELETED_8
  | 9 // UNKNOWN_TYPE_9
  | 10 // SIG_HINT_MISSING_10
  | 11 // UNCHECKED_11

export type ProofStatus =
  | 0 // NONE_0
  | 1 // OK_1
  | 2 // LOCAL_2
  | 3 // FOUND_3
  | 100 // BASE_ERROR_100
  | 101 // HOST_UNREACHABLE_101
  | 103 // PERMISSION_DENIED_103
  | 106 // FAILED_PARSE_106
  | 107 // DNS_ERROR_107
  | 108 // AUTH_FAILED_108
  | 129 // HTTP_429_129
  | 150 // HTTP_500_150
  | 160 // TIMEOUT_160
  | 170 // INTERNAL_ERROR_170
  | 171 // UNCHECKED_171
  | 172 // MISSING_PVL_172
  | 200 // BASE_HARD_ERROR_200
  | 201 // NOT_FOUND_201
  | 202 // CONTENT_FAILURE_202
  | 203 // BAD_USERNAME_203
  | 204 // BAD_REMOTE_ID_204
  | 205 // TEXT_NOT_FOUND_205
  | 206 // BAD_ARGS_206
  | 207 // CONTENT_MISSING_207
  | 208 // TITLE_NOT_FOUND_208
  | 209 // SERVICE_ERROR_209
  | 210 // TOR_SKIPPED_210
  | 211 // TOR_INCOMPATIBLE_211
  | 230 // HTTP_300_230
  | 240 // HTTP_400_240
  | 260 // HTTP_OTHER_260
  | 270 // EMPTY_JSON_270
  | 301 // DELETED_301
  | 302 // SERVICE_DEAD_302
  | 303 // BAD_SIGNATURE_303
  | 304 // BAD_API_URL_304
  | 305 // UNKNOWN_TYPE_305
  | 306 // NO_HINT_306
  | 307 // BAD_HINT_TEXT_307
  | 308 // INVALID_PVL_308

export type ProofType =
  | 0 // NONE_0
  | 1 // KEYBASE_1
  | 2 // TWITTER_2
  | 3 // GITHUB_3
  | 4 // REDDIT_4
  | 5 // COINBASE_5
  | 6 // HACKERNEWS_6
  | 8 // FACEBOOK_8
  | 9 // GENERIC_SOCIAL_9
  | 1000 // GENERIC_WEB_SITE_1000
  | 1001 // DNS_1001
  | 1002 // PGP_1002
  | 100001 // ROOTER_100001

export type Proofs = $ReadOnly<{social?: ?Array<TrackProof>, web?: ?Array<WebProof>, publicKeys?: ?Array<PublicKey>}>
export type ProvisionMethod =
  | 0 // DEVICE_0
  | 1 // PAPER_KEY_1
  | 2 // PASSPHRASE_2
  | 3 // GPG_IMPORT_3
  | 4 // GPG_SIGN_4

export type PublicKey = $ReadOnly<{KID: KID, PGPFingerprint: String, PGPIdentities?: ?Array<PGPIdentity>, isSibkey: Boolean, isEldest: Boolean, parentID: String, deviceID: DeviceID, deviceDescription: String, deviceType: String, cTime: Time, eTime: Time, isRevoked: Boolean}>
export type PublicKeyV2 = {keyType: 1, nacl: ?PublicKeyV2NaCl} | {keyType: 2, pgp: ?PublicKeyV2PGPSummary}
export type PublicKeyV2Base = $ReadOnly<{kid: KID, isSibkey: Boolean, isEldest: Boolean, cTime: Time, eTime: Time, provisioning: SignatureMetadata, revocation?: ?SignatureMetadata}>
export type PublicKeyV2NaCl = $ReadOnly<{base: PublicKeyV2Base, parent?: ?KID, deviceID: DeviceID, deviceDescription: String, deviceType: String}>
export type PublicKeyV2PGPSummary = $ReadOnly<{base: PublicKeyV2Base, fingerprint: PGPFingerprint, identities?: ?Array<PGPIdentity>}>
export type PushReason =
  | 0 // NONE_0
  | 1 // RECONNECTED_1
  | 2 // NEW_DATA_2

export type Reachability = $ReadOnly<{reachable: Reachable}>
export type Reachable =
  | 0 // UNKNOWN_0
  | 1 // YES_1
  | 2 // NO_2

export type ReadArgs = $ReadOnly<{opID: OpID, path: Path, offset: Long, size: Int}>
export type ReaderKeyMask = $ReadOnly<{application: TeamApplication, generation: PerTeamKeyGeneration, mask: MaskB64}>
export type RegisterAddressRes = $ReadOnly<{type: String, family: String}>
export type RekeyEvent = $ReadOnly<{eventType: RekeyEventType, interruptType: Int}>
export type RekeyEventType =
  | 0 // NONE_0
  | 1 // NOT_LOGGED_IN_1
  | 2 // API_ERROR_2
  | 3 // NO_PROBLEMS_3
  | 4 // LOAD_ME_ERROR_4
  | 5 // CURRENT_DEVICE_CAN_REKEY_5
  | 6 // DEVICE_LOAD_ERROR_6
  | 7 // HARASS_7
  | 8 // NO_GREGOR_MESSAGES_8

export type RekeyRequest = $ReadOnly<{folderID: String, revision: Long}>
export type RemoteProof = $ReadOnly<{proofType: ProofType, key: String, value: String, displayMarkup: String, sigID: SigID, mTime: Time}>
export type RemoteTrack = $ReadOnly<{username: String, uid: UID, linkID: LinkID}>
export type RemoveArgs = $ReadOnly<{opID: OpID, path: Path}>
export type RepoID = String
export type ResetLink = $ReadOnly<{ctime: UnixTime, merkleRoot: ResetMerkleRoot, prev: ResetPrev, resetSeqno: Seqno, type: ResetType, uid: UID}>
export type ResetMerkleRoot = $ReadOnly<{hashMeta: HashMeta, seqno: Seqno}>
export type ResetPrev = $ReadOnly<{eldestKID?: ?KID, lastSeqno: Seqno, reset: SHA512}>
export type ResetSummary = $ReadOnly<{ctime: UnixTime, merkleRoot: ResetMerkleRoot, resetSeqno: Seqno, eldestSeqno: Seqno, type: ResetType}>
export type ResetType =
  | 0 // NONE_0
  | 1 // RESET_1
  | 2 // DELETE_2

export type ResolveIdentifyImplicitTeamRes = $ReadOnly<{displayName: String, teamID: TeamID, writers?: ?Array<UserVersion>, trackBreaks: {[key: string]: IdentifyTrackBreaks}, folderID: TLFID}>
export type RevisionSpanType =
  | 0 // DEFAULT_0
  | 1 // LAST_FIVE_1

export type RevokeWarning = $ReadOnly<{endangeredTLFs?: ?Array<TLF>}>
export type RevokedKey = $ReadOnly<{key: PublicKey, time: KeybaseTime, by: KID}>
export type RevokedProof = $ReadOnly<{proof: RemoteProof, diff: TrackDiff}>
export type SHA512 = Bytes
export type SaltpackDecryptOptions = $ReadOnly<{interactive: Boolean, forceRemoteCheck: Boolean, usePaperKey: Boolean}>
export type SaltpackEncryptOptions = $ReadOnly<{recipients?: ?Array<String>, teamRecipients?: ?Array<String>, authenticityType: AuthenticityType, useEntityKeys: Boolean, useDeviceKeys: Boolean, usePaperKeys: Boolean, noSelfEncrypt: Boolean, binary: Boolean, saltpackVersion: Int, useKBFSKeysOnlyForTesting: Boolean}>
export type SaltpackEncryptedMessageInfo = $ReadOnly<{devices?: ?Array<Device>, numAnonReceivers: Int, receiverIsAnon: Boolean, sender: SaltpackSender}>
export type SaltpackSender = $ReadOnly<{uid: UID, username: String, senderType: SaltpackSenderType}>
export type SaltpackSenderType =
  | 0 // NOT_TRACKED_0
  | 1 // UNKNOWN_1
  | 2 // ANONYMOUS_2
  | 3 // TRACKING_BROKE_3
  | 4 // TRACKING_OK_4
  | 5 // SELF_5
  | 6 // REVOKED_6
  | 7 // EXPIRED_7

export type SaltpackSignOptions = $ReadOnly<{detached: Boolean, binary: Boolean, saltpackVersion: Int}>
export type SaltpackVerifyOptions = $ReadOnly<{signedBy: String, signature: Bytes}>
export type SearchComponent = $ReadOnly<{key: String, value: String, score: Double}>
export type SearchResult = $ReadOnly<{uid: UID, username: String, components?: ?Array<SearchComponent>, score: Double}>
export type SecretEntryArg = $ReadOnly<{desc: String, prompt: String, err: String, cancel: String, ok: String, reason: String, showTyping: Boolean}>
export type SecretEntryRes = $ReadOnly<{text: String, canceled: Boolean, storeSecret: Boolean}>
export type SecretKeys = $ReadOnly<{signing: NaclSigningKeyPrivate, encryption: NaclDHKeyPrivate}>
export type SecretResponse = $ReadOnly<{secret: Bytes, phrase: String}>
export type SeitanAKey = String
export type SeitanIKey = String
export type SeitanIKeyV2 = String
export type SeitanKeyAndLabel = {v: 1, v1: ?SeitanKeyAndLabelVersion1} | {v: 2, v2: ?SeitanKeyAndLabelVersion2}
export type SeitanKeyAndLabelVersion =
  | 1 // V1_1
  | 2 // V2_2

export type SeitanKeyAndLabelVersion1 = $ReadOnly<{i: SeitanIKey, l: SeitanKeyLabel}>
export type SeitanKeyAndLabelVersion2 = $ReadOnly<{k: SeitanPubKey, l: SeitanKeyLabel}>
export type SeitanKeyLabel = {t: 1, sms: ?SeitanKeyLabelSms}
export type SeitanKeyLabelSms = $ReadOnly<{f: String, n: String}>
export type SeitanKeyLabelType = 1 // SMS_1

export type SeitanPubKey = KID
export type SelectKeyRes = $ReadOnly<{keyID: String, doSecretPush: Boolean}>
export type SelectorEntry = $ReadOnly<{isIndex: Boolean, index: Int, isKey: Boolean, key: String, isAll: Boolean, isContents: Boolean}>
export type SeqType =
  | 0 // NONE_0
  | 1 // PUBLIC_1
  | 2 // PRIVATE_2
  | 3 // SEMIPRIVATE_3

export type Seqno = Int64
export type ServiceStatus = $ReadOnly<{version: String, label: String, pid: String, lastExitStatus: String, bundleVersion: String, installStatus: InstallStatus, installAction: InstallAction, status: Status}>
export type ServicesStatus = $ReadOnly<{service?: ?Array<ServiceStatus>, kbfs?: ?Array<ServiceStatus>, updater?: ?Array<ServiceStatus>}>
export type Session = $ReadOnly<{uid: UID, username: String, token: String, deviceSubkeyKid: KID, deviceSibkeyKid: KID}>
export type SessionStatus = $ReadOnly<{SessionFor: String, Loaded: Boolean, Cleared: Boolean, SaltOnly: Boolean, Expired: Boolean}>
export type SessionToken = String
export type Sig = $ReadOnly<{seqno: Seqno, sigID: SigID, sigIDDisplay: String, type: String, cTime: Time, revoked: Boolean, active: Boolean, key: String, body: String}>
export type SigChainLocation = $ReadOnly<{seqno: Seqno, seqType: SeqType}>
export type SigHint = $ReadOnly<{remoteId: String, humanUrl: String, apiUrl: String, checkText: String}>
export type SigID = String
export type SigListArgs = $ReadOnly<{sessionID: Int, username: String, allKeys: Boolean, types?: ?SigTypes, filterx: String, verbose: Boolean, revoked: Boolean}>
export type SigTypes = $ReadOnly<{track: Boolean, proof: Boolean, cryptocurrency: Boolean, isSelf: Boolean}>
export type SigVersion = Int
export type SignMode =
  | 0 // ATTACHED_0
  | 1 // DETACHED_1
  | 2 // CLEAR_2

export type SignatureMetadata = $ReadOnly<{signingKID: KID, prevMerkleRootSigned: MerkleRootV2, firstAppearedUnverified: Seqno, time: Time, sigChainLocation: SigChainLocation}>
export type SignupRes = $ReadOnly<{passphraseOk: Boolean, postOk: Boolean, writeOk: Boolean}>
export type SimpleFSGetHTTPAddressAndTokenResponse = $ReadOnly<{address: String, token: String}>
export type SimpleFSListResult = $ReadOnly<{entries?: ?Array<Dirent>, progress: Progress}>
export type SimpleFSQuotaUsage = $ReadOnly<{usageBytes: Int64, archiveBytes: Int64, limitBytes: Int64, gitUsageBytes: Int64, gitArchiveBytes: Int64, gitLimitBytes: Int64}>
export type SocialAssertion = $ReadOnly<{user: String, service: SocialAssertionService}>
export type SocialAssertionService = String
export type StartProofResult = $ReadOnly<{sigID: SigID}>
export type Status = $ReadOnly<{code: Int, name: String, desc: String, fields?: ?Array<StringKVPair>}>
export type StatusCode =
  | 0 // SCOk_0
  | 100 // SCInputError_100
  | 201 // SCLoginRequired_201
  | 202 // SCBadSession_202
  | 203 // SCBadLoginUserNotFound_203
  | 204 // SCBadLoginPassword_204
  | 205 // SCNotFound_205
  | 210 // SCThrottleControl_210
  | 216 // SCDeleted_216
  | 218 // SCGeneric_218
  | 235 // SCAlreadyLoggedIn_235
  | 230 // SCExists_230
  | 237 // SCCanceled_237
  | 239 // SCInputCanceled_239
  | 274 // SCReloginRequired_274
  | 275 // SCResolutionFailed_275
  | 276 // SCProfileNotPublic_276
  | 277 // SCIdentifyFailed_277
  | 278 // SCTrackingBroke_278
  | 279 // SCWrongCryptoFormat_279
  | 280 // SCDecryptionError_280
  | 281 // SCInvalidAddress_281
  | 283 // SCNoSession_283
  | 290 // SCAccountReset_290
  | 295 // SCIdentifiesFailed_295
  | 297 // SCNoSpaceOnDevice_297
  | 299 // SCMerkleClientError_299
  | 472 // SCBadEmail_472
  | 701 // SCBadSignupUsernameTaken_701
  | 707 // SCBadInvitationCode_707
  | 712 // SCFeatureFlag_712
  | 801 // SCMissingResult_801
  | 901 // SCKeyNotFound_901
  | 905 // SCKeyCorrupted_905
  | 907 // SCKeyInUse_907
  | 913 // SCKeyBadGen_913
  | 914 // SCKeyNoSecret_914
  | 915 // SCKeyBadUIDs_915
  | 916 // SCKeyNoActive_916
  | 917 // SCKeyNoSig_917
  | 918 // SCKeyBadSig_918
  | 919 // SCKeyBadEldest_919
  | 920 // SCKeyNoEldest_920
  | 921 // SCKeyDuplicateUpdate_921
  | 922 // SCSibkeyAlreadyExists_922
  | 924 // SCDecryptionKeyNotFound_924
  | 927 // SCKeyNoPGPEncryption_927
  | 928 // SCKeyNoNaClEncryption_928
  | 929 // SCKeySyncedPGPNotFound_929
  | 930 // SCKeyNoMatchingGPG_930
  | 931 // SCKeyRevoked_931
  | 1002 // SCSigCannotVerify_1002
  | 1008 // SCSigWrongKey_1008
  | 1010 // SCSigOldSeqno_1010
  | 1301 // SCBadTrackSession_1301
  | 1404 // SCDeviceBadName_1404
  | 1408 // SCDeviceNameInUse_1408
  | 1409 // SCDeviceNotFound_1409
  | 1410 // SCDeviceMismatch_1410
  | 1411 // SCDeviceRequired_1411
  | 1413 // SCDevicePrevProvisioned_1413
  | 1414 // SCDeviceNoProvision_1414
  | 1415 // SCDeviceProvisionViaDevice_1415
  | 1416 // SCRevokeCurrentDevice_1416
  | 1417 // SCRevokeLastDevice_1417
  | 1418 // SCDeviceProvisionOffline_1418
  | 1419 // SCRevokeLastDevicePGP_1419
  | 1501 // SCStreamExists_1501
  | 1502 // SCStreamNotFound_1502
  | 1503 // SCStreamWrongKind_1503
  | 1504 // SCStreamEOF_1504
  | 1600 // SCGenericAPIError_1600
  | 1601 // SCAPINetworkError_1601
  | 1602 // SCTimeout_1602
  | 1701 // SCProofError_1701
  | 1702 // SCIdentificationExpired_1702
  | 1703 // SCSelfNotFound_1703
  | 1704 // SCBadKexPhrase_1704
  | 1705 // SCNoUIDelegation_1705
  | 1706 // SCNoUI_1706
  | 1707 // SCGPGUnavailable_1707
  | 1800 // SCInvalidVersionError_1800
  | 1801 // SCOldVersionError_1801
  | 1802 // SCInvalidLocationError_1802
  | 1803 // SCServiceStatusError_1803
  | 1804 // SCInstallError_1804
  | 1810 // SCLoadKextError_1810
  | 1811 // SCLoadKextPermError_1811
  | 2300 // SCGitInternal_2300
  | 2301 // SCGitRepoAlreadyExists_2301
  | 2302 // SCGitInvalidRepoName_2302
  | 2303 // SCGitCannotDelete_2303
  | 2304 // SCGitRepoDoesntExist_2304
  | 2400 // SCLoginStateTimeout_2400
  | 2500 // SCChatInternal_2500
  | 2501 // SCChatRateLimit_2501
  | 2502 // SCChatConvExists_2502
  | 2503 // SCChatUnknownTLFID_2503
  | 2504 // SCChatNotInConv_2504
  | 2505 // SCChatBadMsg_2505
  | 2506 // SCChatBroadcast_2506
  | 2507 // SCChatAlreadySuperseded_2507
  | 2508 // SCChatAlreadyDeleted_2508
  | 2509 // SCChatTLFFinalized_2509
  | 2510 // SCChatCollision_2510
  | 2511 // SCIdentifySummaryError_2511
  | 2512 // SCNeedSelfRekey_2512
  | 2513 // SCNeedOtherRekey_2513
  | 2514 // SCChatMessageCollision_2514
  | 2515 // SCChatDuplicateMessage_2515
  | 2516 // SCChatClientError_2516
  | 2517 // SCChatNotInTeam_2517
  | 2518 // SCChatStalePreviousState_2518
  | 2604 // SCTeamBadMembership_2604
  | 2607 // SCTeamSelfNotOwner_2607
  | 2614 // SCTeamNotFound_2614
  | 2619 // SCTeamExists_2619
  | 2623 // SCTeamReadError_2623
  | 2625 // SCTeamWritePermDenied_2625
  | 2638 // SCNoOp_2638
  | 2646 // SCTeamInviteBadToken_2646
  | 2663 // SCTeamTarDuplicate_2663
  | 2664 // SCTeamTarNotFound_2664
  | 2665 // SCTeamMemberExists_2665
  | 2666 // SCTeamNotReleased_2666
  | 2667 // SCTeamPermanentlyLeft_2667
  | 2668 // SCTeamNeedRootId_2668
  | 2669 // SCTeamHasLiveChildren_2669
  | 2670 // SCTeamDeleteError_2670
  | 2671 // SCTeamBadRootTeam_2671
  | 2672 // SCTeamNameConflictsWithUser_2672
  | 2673 // SCTeamDeleteNoUpPointer_2673
  | 2674 // SCTeamNeedOwner_2674
  | 2675 // SCTeamNoOwnerAllowed_2675
  | 2676 // SCTeamImplicitNoNonSbs_2676
  | 2677 // SCTeamImplicitBadHash_2677
  | 2678 // SCTeamImplicitBadName_2678
  | 2679 // SCTeamImplicitClash_2679
  | 2680 // SCTeamImplicitDuplicate_2680
  | 2681 // SCTeamImplicitBadOp_2681
  | 2682 // SCTeamImplicitBadRole_2682
  | 2683 // SCTeamImplicitNotFound_2683
  | 2684 // SCTeamBadAdminSeqnoType_2684
  | 2685 // SCTeamImplicitBadAdd_2685
  | 2686 // SCTeamImplicitBadRemove_2686
  | 2696 // SCTeamInviteTokenReused_2696
  | 2697 // SCTeamKeyMaskNotFound_2697
  | 2702 // SCTeamBanned_2702
  | 2703 // SCTeamInvalidBan_2703
  | 2711 // SCTeamShowcasePermDenied_2711
  | 2721 // SCTeamProvisionalCanKey_2721
  | 2722 // SCTeamProvisionalCannotKey_2722
  | 2736 // SCTeamFTLOutdated_2736
  | 2900 // SCEphemeralKeyBadGeneration_2900
  | 2901 // SCEphemeralKeyUnexpectedBox_2901
  | 2902 // SCEphemeralKeyMissingBox_2902
  | 2903 // SCEphemeralKeyWrongNumberOfKeys_2903
  | 2904 // SCEphemeralKeyMismatchedKey_2904
  | 2905 // SCEphemeralPairwiseMACsMissingUIDs_2905
  | 3100 // SCStellarError_3100
  | 3101 // SCStellarBadInput_3101
  | 3102 // SCStellarWrongRevision_3102
  | 3103 // SCStellarMissingBundle_3103
  | 3104 // SCStellarBadPuk_3104
  | 3105 // SCStellarMissingAccount_3105
  | 3106 // SCStellarBadPrev_3106
  | 3107 // SCStellarWrongPrimary_3107
  | 3108 // SCStellarUnsupportedCurrency_3108
  | 3201 // SCNISTWrongSize_3201
  | 3202 // SCNISTBadMode_3202
  | 3203 // SCNISTHashWrongSize_3203
  | 3204 // SCNISTSigWrongSize_3204
  | 3205 // SCNISTSigBadInput_3205
  | 3206 // SCNISTSigBadUID_3206
  | 3207 // SCNISTSigBadDeviceID_3207
  | 3208 // SCNISTSigBadNonce_3208
  | 3209 // SCNISTNoSigOrHash_3209
  | 3210 // SCNISTExpired_3210
  | 3211 // SCNISTSigRevoked_3211
  | 3212 // SCNISTKeyRevoked_3212
  | 3213 // SCNISTUserDeleted_3213
  | 3214 // SCNISTNoDevice_3214
  | 3215 // SCNISTSigCannot_verify_3215
  | 3216 // SCNISTReplay_3216
  | 3217 // SCNISTSigBadLifetime_3217
  | 3218 // SCNISTNotFound_3218
  | 3219 // SCNISTBadClock_3219
  | 3220 // SCNISTSigBadCtime_3220
  | 3221 // SCBadSignupUsernameDeleted_3221

export type Stream = $ReadOnly<{fd: Int}>
export type StringKVPair = $ReadOnly<{key: String, value: String}>
export type SubteamLogPoint = $ReadOnly<{name: TeamName, seqno: Seqno}>
export type TLF = $ReadOnly<{id: TLFID, name: String, writers?: ?Array<String>, readers?: ?Array<String>, isPrivate: Boolean}>
export type TLFBreak = $ReadOnly<{breaks?: ?Array<TLFIdentifyFailure>}>
export type TLFID = String
export type TLFIdentifyBehavior =
  | 0 // UNSET_0
  | 1 // CHAT_CLI_1
  | 2 // CHAT_GUI_2
  | 3 // CHAT_GUI_STRICT_3
  | 4 // KBFS_REKEY_4
  | 5 // KBFS_QR_5
  | 6 // CHAT_SKIP_6
  | 7 // SALTPACK_7
  | 8 // CLI_8
  | 9 // GUI_9
  | 10 // DEFAULT_KBFS_10
  | 11 // KBFS_CHAT_11
  | 12 // RESOLVE_AND_CHECK_12

export type TLFIdentifyFailure = $ReadOnly<{user: User, breaks?: ?IdentifyTrackBreaks}>
export type TLFQuery = $ReadOnly<{tlfName: String, identifyBehavior: TLFIdentifyBehavior}>
export type TLFVisibility =
  | 0 // ANY_0
  | 1 // PUBLIC_1
  | 2 // PRIVATE_2

export type TeamAcceptOrRequestResult = $ReadOnly<{wasToken: Boolean, wasSeitan: Boolean, wasTeamName: Boolean, wasOpenTeam: Boolean}>
export type TeamAccessRequest = $ReadOnly<{uid: UID, eldestSeqno: Seqno}>
export type TeamAddMemberResult = $ReadOnly<{invited: Boolean, user?: ?User, emailSent: Boolean, chatSending: Boolean}>
export type TeamAndMemberShowcase = $ReadOnly<{teamShowcase: TeamShowcase, isMemberShowcased: Boolean}>
export type TeamApplication =
  | 1 // KBFS_1
  | 2 // CHAT_2
  | 3 // SALTPACK_3
  | 4 // GIT_METADATA_4
  | 5 // SEITAN_INVITE_TOKEN_5
  | 6 // STELLAR_RELAY_6

export type TeamApplicationKey = $ReadOnly<{application: TeamApplication, keyGeneration: PerTeamKeyGeneration, key: Bytes32}>
export type TeamCLKRMsg = $ReadOnly<{teamID: TeamID, generation: PerTeamKeyGeneration, score: Int, resetUsersUntrusted?: ?Array<TeamCLKRResetUser>}>
export type TeamCLKRResetUser = $ReadOnly<{uid: UID, userEldestSeqno: Seqno, memberEldestSeqno: Seqno}>
export type TeamChangeReq = $ReadOnly<{owners?: ?Array<UserVersion>, admins?: ?Array<UserVersion>, writers?: ?Array<UserVersion>, readers?: ?Array<UserVersion>, none?: ?Array<UserVersion>, completedInvites: {[key: string]: UserVersionPercentForm}}>
export type TeamChangeRow = $ReadOnly<{id: TeamID, name: String, keyRotated: Boolean, membershipChanged: Boolean, latestSeqno: Seqno, implicitTeam: Boolean, misc: Boolean, removedResetUsers: Boolean}>
export type TeamChangeSet = $ReadOnly<{membershipChanged: Boolean, keyRotated: Boolean, renamed: Boolean, misc: Boolean}>
export type TeamCreateResult = $ReadOnly<{teamID: TeamID, chatSent: Boolean, creatorAdded: Boolean}>
export type TeamData = $ReadOnly<{secretless: Boolean, name: TeamName, chain: TeamSigChainState, perTeamKeySeeds /* perTeamKeySeedsUnverified */: {[key: string]: PerTeamKeySeedItem}, readerKeyMasks: {[key: string]: {[key: string]: MaskB64}}, latestSeqnoHint: Seqno, cachedAt: Time, tlfCryptKeys: {[key: string]: ?Array<CryptKey>}}>
export type TeamDebugRes = $ReadOnly<{chain: TeamSigChainState}>
export type TeamDetails = $ReadOnly<{members: TeamMembersDetails, keyGeneration: PerTeamKeyGeneration, annotatedActiveInvites: {[key: string]: AnnotatedTeamInvite}, settings: TeamSettings, showcase: TeamShowcase}>
export type TeamEk = $ReadOnly<{seed: Bytes32, metadata: TeamEkMetadata}>
export type TeamEkBoxMetadata = $ReadOnly<{box: String, recipientGeneration: EkGeneration, recipientUID: UID}>
export type TeamEkBoxed = $ReadOnly<{box: String, userEkGeneration: EkGeneration, metadata: TeamEkMetadata}>
export type TeamEkMetadata = $ReadOnly<{kid: KID, hashMeta: HashMeta, generation: EkGeneration, ctime: Time}>
export type TeamEkStatement = $ReadOnly<{currentTeamEkMetadata: TeamEkMetadata}>
export type TeamEncryptedKBFSKeyset = $ReadOnly<{v: Int, e: Bytes, n: Bytes}>
export type TeamEncryptedKBFSKeysetHash = String
export type TeamExitRow = $ReadOnly<{id: TeamID}>
export type TeamGetLegacyTLFUpgrade = $ReadOnly<{encryptedKeyset: String, teamGeneration: PerTeamKeyGeneration, legacyGeneration: Int, appType: TeamApplication}>
export type TeamID = String
export type TeamIDAndName = $ReadOnly<{id: TeamID, name: TeamName}>
export type TeamIDWithVisibility = $ReadOnly<{teamID: TeamID, visibility: TLFVisibility}>
export type TeamInvite = $ReadOnly<{role: TeamRole, id: TeamInviteID, type: TeamInviteType, name: TeamInviteName, inviter: UserVersion}>
export type TeamInviteCategory =
  | 0 // NONE_0
  | 1 // UNKNOWN_1
  | 2 // KEYBASE_2
  | 3 // EMAIL_3
  | 4 // SBS_4
  | 5 // SEITAN_5

export type TeamInviteID = String
export type TeamInviteName = String
export type TeamInviteSocialNetwork = String
export type TeamInviteType = {c: 1, unknown: ?String} | {c: 4, sbs: ?TeamInviteSocialNetwork}
export type TeamInvitee = $ReadOnly<{inviteID: TeamInviteID, uid: UID, eldestSeqno: Seqno, role: TeamRole}>
export type TeamJoinRequest = $ReadOnly<{name: String, username: String}>
export type TeamKBFSKeyRefresher = $ReadOnly<{generation: Int, appType: TeamApplication}>
export type TeamLegacyTLFUpgradeChainInfo = $ReadOnly<{keysetHash: TeamEncryptedKBFSKeysetHash, teamGeneration: PerTeamKeyGeneration, legacyGeneration: Int, appType: TeamApplication}>
export type TeamList = $ReadOnly<{teams?: ?Array<MemberInfo>}>
export type TeamMember = $ReadOnly<{uid: UID, role: TeamRole, eldestSeqno: Seqno, status: TeamMemberStatus}>
export type TeamMemberDetails = $ReadOnly<{uv: UserVersion, username: String, fullName: FullName, needsPUK: Boolean, status: TeamMemberStatus}>
export type TeamMemberOutFromReset = $ReadOnly<{teamName: String, resetUser: TeamResetUser}>
export type TeamMemberOutReset = $ReadOnly<{teamname: String, username: String, uid: UID, id: Gregor1.MsgID}>
export type TeamMemberStatus =
  | 0 // ACTIVE_0
  | 1 // RESET_1
  | 2 // DELETED_2

export type TeamMembers = $ReadOnly<{owners?: ?Array<UserVersion>, admins?: ?Array<UserVersion>, writers?: ?Array<UserVersion>, readers?: ?Array<UserVersion>}>
export type TeamMembersDetails = $ReadOnly<{owners?: ?Array<TeamMemberDetails>, admins?: ?Array<TeamMemberDetails>, writers?: ?Array<TeamMemberDetails>, readers?: ?Array<TeamMemberDetails>}>
export type TeamName = $ReadOnly<{parts?: ?Array<TeamNamePart>}>
export type TeamNameLogPoint = $ReadOnly<{lastPart: TeamNamePart, seqno: Seqno}>
export type TeamNamePart = String
export type TeamNewlyAddedRow = $ReadOnly<{id: TeamID, name: String}>
export type TeamOpenReqMsg = $ReadOnly<{teamID: TeamID, tars?: ?Array<TeamAccessRequest>}>
export type TeamOperation = $ReadOnly<{manageMembers: Boolean, manageSubteams: Boolean, createChannel: Boolean, chat: Boolean, deleteChannel: Boolean, renameChannel: Boolean, editChannelDescription: Boolean, setTeamShowcase: Boolean, setMemberShowcase: Boolean, setRetentionPolicy: Boolean, setMinWriterRole: Boolean, changeOpenTeam: Boolean, leaveTeam: Boolean, joinTeam: Boolean, setPublicityAny: Boolean, listFirst: Boolean, changeTarsDisabled: Boolean, deleteChatHistory: Boolean}>
export type TeamPlusApplicationKeys = $ReadOnly<{id: TeamID, name: String, implicit: Boolean, public: Boolean, application: TeamApplication, writers?: ?Array<UserVersion>, onlyReaders?: ?Array<UserVersion>, applicationKeys?: ?Array<TeamApplicationKey>}>
export type TeamRefreshers = $ReadOnly<{needKeyGeneration: PerTeamKeyGeneration, needApplicationsAtGenerations: {[key: string]: ?Array<TeamApplication>}, needApplicationsAtGenerationsWithKBFS: {[key: string]: ?Array<TeamApplication>}, wantMembers?: ?Array<UserVersion>, wantMembersRole: TeamRole, needKBFSKeyGeneration: TeamKBFSKeyRefresher}>
export type TeamRequestAccessResult = $ReadOnly<{open: Boolean}>
export type TeamResetUser = $ReadOnly<{username: String, uid: UID, eldestSeqno: Seqno}>
export type TeamRole =
  | 0 // NONE_0
  | 1 // READER_1
  | 2 // WRITER_2
  | 3 // ADMIN_3
  | 4 // OWNER_4

export type TeamSBSMsg = $ReadOnly<{teamID: TeamID, score: Int, invitees?: ?Array<TeamInvitee>}>
export type TeamSeitanMsg = $ReadOnly<{teamID: TeamID, seitans?: ?Array<TeamSeitanRequest>}>
export type TeamSeitanRequest = $ReadOnly<{inviteID: TeamInviteID, uid: UID, eldestSeqno: Seqno, akey: SeitanAKey, role: TeamRole, unixCTime: Int64}>
export type TeamSettings = $ReadOnly<{open: Boolean, joinAs: TeamRole}>
export type TeamShowcase = $ReadOnly<{isShowcased: Boolean, description?: ?String, setByUID?: ?UID, anyMemberShowcase: Boolean}>
export type TeamSigChainState = $ReadOnly<{reader: UserVersion, id: TeamID, implicit: Boolean, public: Boolean, rootAncestor: TeamName, nameDepth: Int, nameLog?: ?Array<TeamNameLogPoint>, lastSeqno: Seqno, lastLinkID: LinkID, lastHighSeqno: Seqno, lastHighLinkID: LinkID, parentID?: ?TeamID, userLog: {[key: string]: ?Array<UserLogPoint>}, subteamLog: {[key: string]: ?Array<SubteamLogPoint>}, perTeamKeys: {[key: string]: PerTeamKey}, perTeamKeyCTime: UnixTime, linkIDs: {[key: string]: LinkID}, stubbedLinks: {[key: string]: Boolean}, activeInvites: {[key: string]: TeamInvite}, obsoleteInvites: {[key: string]: TeamInvite}, open: Boolean, openTeamJoinAs: TeamRole, tlfIDs?: ?Array<TLFID>, tlfLegacyUpgrade: {[key: string]: TeamLegacyTLFUpgradeChainInfo}, headMerkle?: ?MerkleRootV2}>
export type TeamStatus =
  | 0 // NONE_0
  | 1 // LIVE_1
  | 2 // DELETED_2
  | 3 // ABANDONED_3

export type TeamTreeEntry = $ReadOnly<{name: TeamName, admin: Boolean}>
export type TeamTreeResult = $ReadOnly<{entries?: ?Array<TeamTreeEntry>}>
export type TeamType =
  | 0 // NONE_0
  | 1 // LEGACY_1
  | 2 // MODERN_2

export type Test = $ReadOnly<{reply: String}>
export type Text = $ReadOnly<{data: String, markup: Boolean}>
export type Time = Long
export type TrackDiff = $ReadOnly<{type: TrackDiffType, displayMarkup: String}>
export type TrackDiffType =
  | 0 // NONE_0
  | 1 // ERROR_1
  | 2 // CLASH_2
  | 3 // REVOKED_3
  | 4 // UPGRADED_4
  | 5 // NEW_5
  | 6 // REMOTE_FAIL_6
  | 7 // REMOTE_WORKING_7
  | 8 // REMOTE_CHANGED_8
  | 9 // NEW_ELDEST_9
  | 10 // NONE_VIA_TEMPORARY_10

export type TrackOptions = $ReadOnly<{localOnly: Boolean, bypassConfirm: Boolean, forceRetrack: Boolean, expiringLocal: Boolean, forPGPPull: Boolean, sigVersion?: ?SigVersion}>
export type TrackProof = $ReadOnly<{proofType: String, proofName: String, idString: String}>
export type TrackStatus =
  | 1 // NEW_OK_1
  | 2 // NEW_ZERO_PROOFS_2
  | 3 // NEW_FAIL_PROOFS_3
  | 4 // UPDATE_BROKEN_FAILED_PROOFS_4
  | 5 // UPDATE_NEW_PROOFS_5
  | 6 // UPDATE_OK_6
  | 7 // UPDATE_BROKEN_REVOKED_7

export type TrackSummary = $ReadOnly<{username: String, time: Time, isRemote: Boolean}>
export type TrackToken = String
export type Tracker = $ReadOnly<{tracker: UID, status: Int, mTime: Time}>
export type UID = String
export type UPAKVersion =
  | 1 // V1_1
  | 2 // V2_2

export type UPAKVersioned = {v: 1, v1: ?UserPlusAllKeys} | {v: 2, v2: ?UserPlusKeysV2AllIncarnations}
export type UPK2MinorVersion =
  | 0 // V0_0
  | 1 // V1_1
  | 2 // V2_2
  | 3 // V3_3
  | 4 // V4_4
  | 5 // V5_5
  | 6 // V6_6

export type UPKLiteMinorVersion = 0 // V0_0

export type UPKLiteV1 = $ReadOnly<{uid: UID, username: String, eldestSeqno: Seqno, status: StatusCode, deviceKeys: {[key: string]: PublicKeyV2NaCl}, reset?: ?ResetSummary}>
export type UPKLiteV1AllIncarnations = $ReadOnly<{current: UPKLiteV1, pastIncarnations?: ?Array<UPKLiteV1>, seqnoLinkIDs: {[key: string]: LinkID}, minorVersion: UPKLiteMinorVersion}>
export type UnboxAnyRes = $ReadOnly<{kid: KID, plaintext: Bytes32, index: Int}>
export type UninstallResult = $ReadOnly<{componentResults?: ?Array<ComponentResult>, status: Status}>
export type UnixTime = Long
export type UpPointer = $ReadOnly<{ourSeqno: Seqno, parentID: TeamID, parentSeqno: Seqno, deletion: Boolean}>
export type UpdateInfo = $ReadOnly<{status: UpdateInfoStatus, message: String}>
export type UpdateInfoStatus =
  | 0 // UP_TO_DATE_0
  | 1 // NEED_UPDATE_1
  | 2 // CRITICALLY_OUT_OF_DATE_2

export type User = $ReadOnly<{uid: UID, username: String}>
export type UserCard = $ReadOnly<{following: Int, followers: Int, uid: UID, fullName: String, location: String, bio: String, website: String, twitter: String, youFollowThem: Boolean, theyFollowYou: Boolean, teamShowcase?: ?Array<UserTeamShowcase>}>
export type UserEk = $ReadOnly<{seed: Bytes32, metadata: UserEkMetadata}>
export type UserEkBoxMetadata = $ReadOnly<{box: String, recipientGeneration: EkGeneration, recipientDeviceID: DeviceID}>
export type UserEkBoxed = $ReadOnly<{box: String, deviceEkGeneration: EkGeneration, metadata: UserEkMetadata}>
export type UserEkMetadata = $ReadOnly<{kid: KID, hashMeta: HashMeta, generation: EkGeneration, ctime: Time}>
export type UserEkReboxArg = $ReadOnly<{userEkBoxMetadata: UserEkBoxMetadata, deviceID: DeviceID, deviceEkStatementSig: String}>
export type UserEkStatement = $ReadOnly<{currentUserEkMetadata: UserEkMetadata}>
export type UserLogPoint = $ReadOnly<{role: TeamRole, sigMeta: SignatureMetadata}>
export type UserOrTeamID = String
export type UserOrTeamLite = $ReadOnly<{id: UserOrTeamID, name: String}>
export type UserOrTeamResult =
  | 1 // USER_1
  | 2 // TEAM_2

export type UserPhoneNumber = $ReadOnly<{phoneNumber: PhoneNumber, verified: Boolean, ctime: UnixTime}>
export type UserPlusAllKeys = $ReadOnly<{base: UserPlusKeys, pgpKeys?: ?Array<PublicKey>, remoteTracks?: ?Array<RemoteTrack>}>
export type UserPlusKeys = $ReadOnly<{uid: UID, username: String, eldestSeqno: Seqno, status: StatusCode, deviceKeys?: ?Array<PublicKey>, revokedDeviceKeys?: ?Array<RevokedKey>, pgpKeyCount: Int, uvv: UserVersionVector, deletedDeviceKeys?: ?Array<PublicKey>, perUserKeys?: ?Array<PerUserKey>, resets?: ?Array<ResetSummary>}>
export type UserPlusKeysV2 = $ReadOnly<{uid: UID, username: String, eldestSeqno: Seqno, status: StatusCode, perUserKeys?: ?Array<PerUserKey>, deviceKeys: {[key: string]: PublicKeyV2NaCl}, pgpKeys: {[key: string]: PublicKeyV2PGPSummary}, stellarAccountID?: ?String, remoteTracks: {[key: string]: RemoteTrack}, reset?: ?ResetSummary}>
export type UserPlusKeysV2AllIncarnations = $ReadOnly<{current: UserPlusKeysV2, pastIncarnations?: ?Array<UserPlusKeysV2>, uvv: UserVersionVector, seqnoLinkIDs: {[key: string]: LinkID}, minorVersion: UPK2MinorVersion}>
export type UserResolution = $ReadOnly<{assertion: SocialAssertion, userID: UID}>
export type UserSettings = $ReadOnly<{emails?: ?Array<Email>}>
export type UserSummary = $ReadOnly<{uid: UID, username: String, thumbnail: String, idVersion: Int, fullName: String, bio: String, proofs: Proofs, sigIDDisplay: String, trackTime: Time}>
export type UserSummary2 = $ReadOnly<{uid: UID, username: String, thumbnail: String, fullName: String, isFollower: Boolean, isFollowee: Boolean}>
export type UserSummary2Set = $ReadOnly<{users?: ?Array<UserSummary2>, time: Time, version: Int}>
export type UserTeamShowcase = $ReadOnly<{fqName: String, open: Boolean, teamIsShowcased: Boolean, description: String, role: TeamRole, publicAdmins?: ?Array<String>, numMembers: Int}>
export type UserVersion = $ReadOnly<{uid: UID, eldestSeqno: Seqno}>
export type UserVersionPercentForm = String
export type UserVersionVector = $ReadOnly<{id: Long, sigHints: Int, sigChain: Long, cachedAt: Time}>
export type VerifySessionRes = $ReadOnly<{uid: UID, sid: String, generated: Int, lifetime: Int}>
export type WalletAccountInfo = $ReadOnly<{accountID: String, numUnread: Int}>
export type WebProof = $ReadOnly<{hostname: String, protocols?: ?Array<String>}>
export type WriteArgs = $ReadOnly<{opID: OpID, path: Path, offset: Long}>

export type IncomingCallMapType = {|'keybase.1.gpgUi.wantToAddGPGKey'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gpgUi.wantToAddGPGKey'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.gpgUi.confirmDuplicateKeyChosen'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gpgUi.confirmDuplicateKeyChosen'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.gpgUi.confirmImportSecretToExistingKey'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gpgUi.confirmImportSecretToExistingKey'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.gpgUi.selectKeyAndPushOption'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gpgUi.selectKeyAndPushOption'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.gpgUi.selectKey'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gpgUi.selectKey'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.gpgUi.sign'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gpgUi.sign'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.gpgUi.getTTY'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gpgUi.getTTY'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.gregorUI.pushState'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gregorUI.pushState'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.gregorUI.pushOutOfBandMessages'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gregorUI.pushOutOfBandMessages'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.homeUI.homeUIRefresh'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.homeUI.homeUIRefresh'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.identifyUi.displayTLFCreateWithInvite'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.displayTLFCreateWithInvite'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.identifyUi.delegateIdentifyUI'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.delegateIdentifyUI'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.identifyUi.start'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.start'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.identifyUi.displayKey'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.displayKey'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.identifyUi.reportLastTrack'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.reportLastTrack'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.identifyUi.launchNetworkChecks'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.launchNetworkChecks'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.identifyUi.displayTrackStatement'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.displayTrackStatement'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.identifyUi.finishWebProofCheck'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.finishWebProofCheck'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.identifyUi.finishSocialProofCheck'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.finishSocialProofCheck'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.identifyUi.displayCryptocurrency'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.displayCryptocurrency'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.identifyUi.reportTrackToken'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.reportTrackToken'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.identifyUi.displayUserCard'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.displayUserCard'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.identifyUi.confirm'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.confirm'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.identifyUi.cancel'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.cancel'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.identifyUi.finish'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.finish'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.identifyUi.dismiss'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.dismiss'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.logUi.log'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.logUi.log'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.loginUi.getEmailOrUsername'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.loginUi.getEmailOrUsername'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.loginUi.promptRevokePaperKeys'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.loginUi.promptRevokePaperKeys'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.loginUi.displayPaperKeyPhrase'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.loginUi.displayPaperKeyPhrase'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.loginUi.displayPrimaryPaperKey'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.loginUi.displayPrimaryPaperKey'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.logsend.prepareLogsend'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.logsend.prepareLogsend'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyApp.exit'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyApp.exit'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyBadges.badgeState'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyBadges.badgeState'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyCanUserPerform.canUserPerformChanged'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyCanUserPerform.canUserPerformChanged'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyDeviceClone.deviceCloneCountChanged'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyDeviceClone.deviceCloneCountChanged'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyEphemeral.newTeamEk'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyEphemeral.newTeamEk'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyFavorites.favoritesChanged'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyFavorites.favoritesChanged'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyFS.FSActivity'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyFS.FSActivity'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyFS.FSPathUpdated'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyFS.FSPathUpdated'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyFS.FSSyncActivity'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyFS.FSSyncActivity'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyFS.FSEditListResponse'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyFS.FSEditListResponse'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyFS.FSSyncStatusResponse'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyFS.FSSyncStatusResponse'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyKeyfamily.keyfamilyChanged'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyKeyfamily.keyfamilyChanged'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyPaperKey.paperKeyCached'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyPaperKey.paperKeyCached'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyPGP.pgpKeyInSecretStoreFile'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyPGP.pgpKeyInSecretStoreFile'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyService.shutdown'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyService.shutdown'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifySession.loggedOut'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifySession.loggedOut'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifySession.loggedIn'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifySession.loggedIn'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifySession.clientOutOfDate'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifySession.clientOutOfDate'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyTeam.teamChangedByID'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyTeam.teamChangedByID'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyTeam.teamChangedByName'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyTeam.teamChangedByName'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyTeam.teamDeleted'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyTeam.teamDeleted'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyTeam.teamAbandoned'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyTeam.teamAbandoned'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyTeam.teamExit'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyTeam.teamExit'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyTeam.newlyAddedToTeam'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyTeam.newlyAddedToTeam'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyTeam.avatarUpdated'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyTeam.avatarUpdated'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyTracking.trackingChanged'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyTracking.trackingChanged'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyUnverifiedTeamList.teamListUnverifiedChanged'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyUnverifiedTeamList.teamListUnverifiedChanged'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.NotifyUsers.userChanged'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyUsers.userChanged'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.pgpUi.outputSignatureSuccess'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.pgpUi.outputSignatureSuccess'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.pgpUi.outputSignatureSuccessNonKeybase'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.pgpUi.outputSignatureSuccessNonKeybase'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.pgpUi.keyGenerated'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.pgpUi.keyGenerated'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.pgpUi.shouldPushPrivate'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.pgpUi.shouldPushPrivate'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.pgpUi.finished'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.pgpUi.finished'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.proveUi.promptOverwrite'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.proveUi.promptOverwrite'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.proveUi.promptUsername'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.proveUi.promptUsername'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.proveUi.outputPrechecks'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.proveUi.outputPrechecks'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.proveUi.preProofWarning'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.proveUi.preProofWarning'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.proveUi.outputInstructions'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.proveUi.outputInstructions'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.proveUi.okToCheck'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.proveUi.okToCheck'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.proveUi.displayRecheckWarning'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.proveUi.displayRecheckWarning'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.provisionUi.chooseProvisioningMethod'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.chooseProvisioningMethod'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.provisionUi.chooseGPGMethod'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.chooseGPGMethod'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.provisionUi.switchToGPGSignOK'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.switchToGPGSignOK'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.provisionUi.chooseDevice'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.chooseDevice'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.provisionUi.chooseDeviceType'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.chooseDeviceType'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.provisionUi.DisplayAndPromptSecret'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.DisplayAndPromptSecret'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.provisionUi.DisplaySecretExchanged'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.DisplaySecretExchanged'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.provisionUi.PromptNewDeviceName'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.PromptNewDeviceName'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.provisionUi.ProvisioneeSuccess'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.ProvisioneeSuccess'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.provisionUi.ProvisionerSuccess'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.ProvisionerSuccess'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.reachability.reachabilityChanged'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.reachability.reachabilityChanged'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.rekeyUI.delegateRekeyUI'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.rekeyUI.delegateRekeyUI'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.rekeyUI.refresh'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.rekeyUI.refresh'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.rekeyUI.rekeySendEvent'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.rekeyUI.rekeySendEvent'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.saltpackUi.saltpackPromptForDecrypt'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.saltpackUi.saltpackPromptForDecrypt'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.saltpackUi.saltpackVerifySuccess'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.saltpackUi.saltpackVerifySuccess'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.saltpackUi.saltpackVerifyBadSender'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.saltpackUi.saltpackVerifyBadSender'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.secretUi.getPassphrase'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.secretUi.getPassphrase'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.streamUi.close'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.streamUi.close'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.streamUi.read'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.streamUi.read'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.streamUi.reset'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.streamUi.reset'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.streamUi.write'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.streamUi.write'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.teamsUi.confirmRootTeamDelete'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teamsUi.confirmRootTeamDelete'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.teamsUi.confirmSubteamDelete'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teamsUi.confirmSubteamDelete'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn, 'keybase.1.ui.promptYesNo'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.ui.promptYesNo'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn|}

export type CustomResponseIncomingCallMap = {|'keybase.1.gpgUi.wantToAddGPGKey'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gpgUi.wantToAddGPGKey'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.gpgUi.wantToAddGPGKey'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.gpgUi.confirmDuplicateKeyChosen'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gpgUi.confirmDuplicateKeyChosen'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.gpgUi.confirmDuplicateKeyChosen'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.gpgUi.confirmImportSecretToExistingKey'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gpgUi.confirmImportSecretToExistingKey'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.gpgUi.confirmImportSecretToExistingKey'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.gpgUi.selectKeyAndPushOption'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gpgUi.selectKeyAndPushOption'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.gpgUi.selectKeyAndPushOption'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.gpgUi.selectKey'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gpgUi.selectKey'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.gpgUi.selectKey'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.gpgUi.sign'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gpgUi.sign'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.gpgUi.sign'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.gpgUi.getTTY'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gpgUi.getTTY'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.gpgUi.getTTY'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.gregorUI.pushState'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gregorUI.pushState'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.gregorUI.pushState'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.gregorUI.pushOutOfBandMessages'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gregorUI.pushOutOfBandMessages'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.gregorUI.pushOutOfBandMessages'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.homeUI.homeUIRefresh'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.homeUI.homeUIRefresh'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.homeUI.homeUIRefresh'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.identifyUi.displayTLFCreateWithInvite'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.displayTLFCreateWithInvite'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.displayTLFCreateWithInvite'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.identifyUi.delegateIdentifyUI'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.delegateIdentifyUI'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.delegateIdentifyUI'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.identifyUi.start'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.start'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.start'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.identifyUi.displayKey'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.displayKey'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.displayKey'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.identifyUi.reportLastTrack'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.reportLastTrack'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.reportLastTrack'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.identifyUi.launchNetworkChecks'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.launchNetworkChecks'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.launchNetworkChecks'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.identifyUi.displayTrackStatement'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.displayTrackStatement'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.displayTrackStatement'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.identifyUi.finishWebProofCheck'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.finishWebProofCheck'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.finishWebProofCheck'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.identifyUi.finishSocialProofCheck'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.finishSocialProofCheck'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.finishSocialProofCheck'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.identifyUi.displayCryptocurrency'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.displayCryptocurrency'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.displayCryptocurrency'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.identifyUi.reportTrackToken'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.reportTrackToken'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.reportTrackToken'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.identifyUi.displayUserCard'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.displayUserCard'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.displayUserCard'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.identifyUi.confirm'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.confirm'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.confirm'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.identifyUi.cancel'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.cancel'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.cancel'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.identifyUi.finish'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.finish'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.finish'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.identifyUi.dismiss'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.dismiss'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.identifyUi.dismiss'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.logUi.log'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.logUi.log'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.logUi.log'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.loginUi.getEmailOrUsername'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.loginUi.getEmailOrUsername'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.loginUi.getEmailOrUsername'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.loginUi.promptRevokePaperKeys'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.loginUi.promptRevokePaperKeys'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.loginUi.promptRevokePaperKeys'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.loginUi.displayPaperKeyPhrase'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.loginUi.displayPaperKeyPhrase'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.loginUi.displayPaperKeyPhrase'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.loginUi.displayPrimaryPaperKey'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.loginUi.displayPrimaryPaperKey'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.loginUi.displayPrimaryPaperKey'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.logsend.prepareLogsend'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.logsend.prepareLogsend'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.logsend.prepareLogsend'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.NotifyApp.exit'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyApp.exit'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyApp.exit'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.NotifyFS.FSSyncActivity'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyFS.FSSyncActivity'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyFS.FSSyncActivity'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.NotifyFS.FSEditListResponse'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyFS.FSEditListResponse'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyFS.FSEditListResponse'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.NotifyFS.FSSyncStatusResponse'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyFS.FSSyncStatusResponse'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyFS.FSSyncStatusResponse'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.NotifyKeyfamily.keyfamilyChanged'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyKeyfamily.keyfamilyChanged'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyKeyfamily.keyfamilyChanged'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.NotifyPaperKey.paperKeyCached'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyPaperKey.paperKeyCached'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyPaperKey.paperKeyCached'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.NotifyPGP.pgpKeyInSecretStoreFile'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyPGP.pgpKeyInSecretStoreFile'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyPGP.pgpKeyInSecretStoreFile'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.NotifyService.shutdown'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyService.shutdown'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyService.shutdown'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.NotifySession.loggedIn'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifySession.loggedIn'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifySession.loggedIn'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.NotifySession.clientOutOfDate'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifySession.clientOutOfDate'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifySession.clientOutOfDate'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.NotifyTeam.teamChangedByID'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyTeam.teamChangedByID'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyTeam.teamChangedByID'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.NotifyTeam.teamChangedByName'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyTeam.teamChangedByName'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyTeam.teamChangedByName'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.NotifyTeam.teamDeleted'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyTeam.teamDeleted'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyTeam.teamDeleted'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.NotifyTeam.teamAbandoned'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyTeam.teamAbandoned'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyTeam.teamAbandoned'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.NotifyTeam.teamExit'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyTeam.teamExit'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyTeam.teamExit'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.NotifyTeam.newlyAddedToTeam'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyTeam.newlyAddedToTeam'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyTeam.newlyAddedToTeam'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.NotifyTeam.avatarUpdated'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyTeam.avatarUpdated'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.NotifyTeam.avatarUpdated'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.pgpUi.outputSignatureSuccess'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.pgpUi.outputSignatureSuccess'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.pgpUi.outputSignatureSuccess'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.pgpUi.outputSignatureSuccessNonKeybase'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.pgpUi.outputSignatureSuccessNonKeybase'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.pgpUi.outputSignatureSuccessNonKeybase'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.pgpUi.keyGenerated'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.pgpUi.keyGenerated'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.pgpUi.keyGenerated'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.pgpUi.shouldPushPrivate'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.pgpUi.shouldPushPrivate'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.pgpUi.shouldPushPrivate'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.pgpUi.finished'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.pgpUi.finished'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.pgpUi.finished'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.proveUi.promptOverwrite'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.proveUi.promptOverwrite'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.proveUi.promptOverwrite'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.proveUi.promptUsername'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.proveUi.promptUsername'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.proveUi.promptUsername'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.proveUi.outputPrechecks'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.proveUi.outputPrechecks'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.proveUi.outputPrechecks'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.proveUi.preProofWarning'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.proveUi.preProofWarning'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.proveUi.preProofWarning'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.proveUi.outputInstructions'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.proveUi.outputInstructions'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.proveUi.outputInstructions'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.proveUi.okToCheck'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.proveUi.okToCheck'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.proveUi.okToCheck'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.proveUi.displayRecheckWarning'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.proveUi.displayRecheckWarning'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.proveUi.displayRecheckWarning'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.provisionUi.chooseProvisioningMethod'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.chooseProvisioningMethod'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.chooseProvisioningMethod'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.provisionUi.chooseGPGMethod'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.chooseGPGMethod'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.chooseGPGMethod'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.provisionUi.switchToGPGSignOK'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.switchToGPGSignOK'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.switchToGPGSignOK'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.provisionUi.chooseDevice'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.chooseDevice'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.chooseDevice'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.provisionUi.chooseDeviceType'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.chooseDeviceType'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.chooseDeviceType'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.provisionUi.DisplayAndPromptSecret'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.DisplayAndPromptSecret'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.DisplayAndPromptSecret'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.provisionUi.DisplaySecretExchanged'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.DisplaySecretExchanged'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.DisplaySecretExchanged'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.provisionUi.PromptNewDeviceName'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.PromptNewDeviceName'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.PromptNewDeviceName'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.provisionUi.ProvisioneeSuccess'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.ProvisioneeSuccess'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.ProvisioneeSuccess'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.provisionUi.ProvisionerSuccess'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.ProvisionerSuccess'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.provisionUi.ProvisionerSuccess'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.rekeyUI.delegateRekeyUI'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.rekeyUI.delegateRekeyUI'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.rekeyUI.delegateRekeyUI'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.rekeyUI.refresh'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.rekeyUI.refresh'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.rekeyUI.refresh'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.rekeyUI.rekeySendEvent'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.rekeyUI.rekeySendEvent'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.rekeyUI.rekeySendEvent'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.saltpackUi.saltpackPromptForDecrypt'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.saltpackUi.saltpackPromptForDecrypt'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.saltpackUi.saltpackPromptForDecrypt'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.saltpackUi.saltpackVerifySuccess'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.saltpackUi.saltpackVerifySuccess'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.saltpackUi.saltpackVerifySuccess'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.saltpackUi.saltpackVerifyBadSender'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.saltpackUi.saltpackVerifyBadSender'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.saltpackUi.saltpackVerifyBadSender'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.secretUi.getPassphrase'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.secretUi.getPassphrase'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.secretUi.getPassphrase'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.streamUi.close'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.streamUi.close'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.streamUi.close'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.streamUi.read'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.streamUi.read'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.streamUi.read'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.streamUi.reset'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.streamUi.reset'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.streamUi.reset'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.streamUi.write'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.streamUi.write'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.streamUi.write'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.teamsUi.confirmRootTeamDelete'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teamsUi.confirmRootTeamDelete'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.teamsUi.confirmRootTeamDelete'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.teamsUi.confirmSubteamDelete'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teamsUi.confirmSubteamDelete'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.teamsUi.confirmSubteamDelete'>, 'outParam'>) => void}) => IncomingReturn, 'keybase.1.ui.promptYesNo'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.ui.promptYesNo'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'keybase.1.ui.promptYesNo'>, 'outParam'>) => void}) => IncomingReturn|}
declare export function SimpleFSSimpleFSCancelRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.simpleFSCancel'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.simpleFSCancel'>, 'outParam'>>
declare export function SimpleFSSimpleFSCheckRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.simpleFSCheck'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.simpleFSCheck'>, 'outParam'>>
declare export function SimpleFSSimpleFSCopyRecursiveRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.simpleFSCopyRecursive'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.simpleFSCopyRecursive'>, 'outParam'>>
declare export function SimpleFSSimpleFSGetHTTPAddressAndTokenRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.SimpleFSGetHTTPAddressAndToken'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.SimpleFSGetHTTPAddressAndToken'>, 'outParam'>>
declare export function SimpleFSSimpleFSListRecursiveToDepthRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.simpleFSListRecursiveToDepth'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.simpleFSListRecursiveToDepth'>, 'outParam'>>
declare export function SimpleFSSimpleFSListRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.simpleFSList'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.simpleFSList'>, 'outParam'>>
declare export function SimpleFSSimpleFSOpenRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.simpleFSOpen'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.simpleFSOpen'>, 'outParam'>>
declare export function SimpleFSSimpleFSReadListRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.simpleFSReadList'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.simpleFSReadList'>, 'outParam'>>
declare export function SimpleFSSimpleFSStatRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.simpleFSStat'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.simpleFSStat'>, 'outParam'>>
declare export function SimpleFSSimpleFSSyncStatusRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.simpleFSSyncStatus'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.simpleFSSyncStatus'>, 'outParam'>>
declare export function SimpleFSSimpleFSUserEditHistoryRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.simpleFSUserEditHistory'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.simpleFSUserEditHistory'>, 'outParam'>>
declare export function SimpleFSSimpleFSWaitRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.simpleFSWait'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.SimpleFS.simpleFSWait'>, 'outParam'>>
declare export function accountEmailChangeRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.account.emailChange'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.account.emailChange'>, 'outParam'>>
declare export function accountGetLockdownModeRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.account.getLockdownMode'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.account.getLockdownMode'>, 'outParam'>>
declare export function accountHasServerKeysRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.account.hasServerKeys'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.account.hasServerKeys'>, 'outParam'>>
declare export function accountPassphraseChangeRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.account.passphraseChange'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.account.passphraseChange'>, 'outParam'>>
declare export function accountSetLockdownModeRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.account.setLockdownMode'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.account.setLockdownMode'>, 'outParam'>>
declare export function apiserverDeleteRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.apiserver.Delete'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.apiserver.Delete'>, 'outParam'>>
declare export function apiserverGetRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.apiserver.Get'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.apiserver.Get'>, 'outParam'>>
declare export function apiserverGetWithSessionRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.apiserver.GetWithSession'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.apiserver.GetWithSession'>, 'outParam'>>
declare export function apiserverPostJSONRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.apiserver.PostJSON'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.apiserver.PostJSON'>, 'outParam'>>
declare export function apiserverPostRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.apiserver.Post'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.apiserver.Post'>, 'outParam'>>
declare export function avatarsLoadTeamAvatarsRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.avatars.loadTeamAvatars'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.avatars.loadTeamAvatars'>, 'outParam'>>
declare export function avatarsLoadUserAvatarsRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.avatars.loadUserAvatars'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.avatars.loadUserAvatars'>, 'outParam'>>
declare export function configGetAllProvisionedUsernamesRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.config.getAllProvisionedUsernames'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.config.getAllProvisionedUsernames'>, 'outParam'>>
declare export function configGetBootstrapStatusRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.config.getBootstrapStatus'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.config.getBootstrapStatus'>, 'outParam'>>
declare export function configGetConfigRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.config.getConfig'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.config.getConfig'>, 'outParam'>>
declare export function configGetRememberPassphraseRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.config.getRememberPassphrase'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.config.getRememberPassphrase'>, 'outParam'>>
declare export function configGetUpdateInfoRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.config.getUpdateInfo'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.config.getUpdateInfo'>, 'outParam'>>
declare export function configHelloIAmRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.config.helloIAm'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.config.helloIAm'>, 'outParam'>>
declare export function configSetRememberPassphraseRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.config.setRememberPassphrase'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.config.setRememberPassphrase'>, 'outParam'>>
declare export function configStartUpdateIfNeededRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.config.startUpdateIfNeeded'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.config.startUpdateIfNeeded'>, 'outParam'>>
declare export function configWaitForClientRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.config.waitForClient'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.config.waitForClient'>, 'outParam'>>
declare export function cryptocurrencyRegisterAddressRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.cryptocurrency.registerAddress'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.cryptocurrency.registerAddress'>, 'outParam'>>
declare export function ctlDbNukeRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.ctl.dbNuke'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.ctl.dbNuke'>, 'outParam'>>
declare export function delegateUiCtlRegisterGregorFirehoseFilteredRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.delegateUiCtl.registerGregorFirehoseFiltered'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.delegateUiCtl.registerGregorFirehoseFiltered'>, 'outParam'>>
declare export function delegateUiCtlRegisterHomeUIRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.delegateUiCtl.registerHomeUI'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.delegateUiCtl.registerHomeUI'>, 'outParam'>>
declare export function delegateUiCtlRegisterIdentifyUIRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.delegateUiCtl.registerIdentifyUI'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.delegateUiCtl.registerIdentifyUI'>, 'outParam'>>
declare export function delegateUiCtlRegisterRekeyUIRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.delegateUiCtl.registerRekeyUI'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.delegateUiCtl.registerRekeyUI'>, 'outParam'>>
declare export function delegateUiCtlRegisterSecretUIRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.delegateUiCtl.registerSecretUI'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.delegateUiCtl.registerSecretUI'>, 'outParam'>>
declare export function deviceCheckDeviceNameFormatRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.device.checkDeviceNameFormat'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.device.checkDeviceNameFormat'>, 'outParam'>>
declare export function deviceDeviceAddRpcSaga(p: {params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.device.deviceAdd'>, 'inParam'>, incomingCallMap: IncomingCallMapType, customResponseIncomingCallMap?: CustomResponseIncomingCallMap, waitingKey?: string}): CallEffect<void>
declare export function deviceDeviceHistoryListRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.device.deviceHistoryList'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.device.deviceHistoryList'>, 'outParam'>>
declare export function favoriteFavoriteAddRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.favorite.favoriteAdd'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.favorite.favoriteAdd'>, 'outParam'>>
declare export function favoriteFavoriteIgnoreRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.favorite.favoriteIgnore'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.favorite.favoriteIgnore'>, 'outParam'>>
declare export function gitCreatePersonalRepoRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.git.createPersonalRepo'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.git.createPersonalRepo'>, 'outParam'>>
declare export function gitCreateTeamRepoRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.git.createTeamRepo'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.git.createTeamRepo'>, 'outParam'>>
declare export function gitDeletePersonalRepoRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.git.deletePersonalRepo'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.git.deletePersonalRepo'>, 'outParam'>>
declare export function gitDeleteTeamRepoRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.git.deleteTeamRepo'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.git.deleteTeamRepo'>, 'outParam'>>
declare export function gitGetAllGitMetadataRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.git.getAllGitMetadata'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.git.getAllGitMetadata'>, 'outParam'>>
declare export function gitGetGitMetadataRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.git.getGitMetadata'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.git.getGitMetadata'>, 'outParam'>>
declare export function gitSetTeamRepoSettingsRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.git.setTeamRepoSettings'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.git.setTeamRepoSettings'>, 'outParam'>>
declare export function gregorDismissCategoryRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.gregor.dismissCategory'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gregor.dismissCategory'>, 'outParam'>>
declare export function gregorDismissItemRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.gregor.dismissItem'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gregor.dismissItem'>, 'outParam'>>
declare export function gregorGetStateRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.gregor.getState'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gregor.getState'>, 'outParam'>>
declare export function gregorInjectItemRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.gregor.injectItem'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gregor.injectItem'>, 'outParam'>>
declare export function gregorUpdateCategoryRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.gregor.updateCategory'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gregor.updateCategory'>, 'outParam'>>
declare export function gregorUpdateItemRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.gregor.updateItem'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.gregor.updateItem'>, 'outParam'>>
declare export function homeHomeGetScreenRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.home.homeGetScreen'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.home.homeGetScreen'>, 'outParam'>>
declare export function homeHomeMarkViewedRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.home.homeMarkViewed'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.home.homeMarkViewed'>, 'outParam'>>
declare export function homeHomeSkipTodoTypeRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.home.homeSkipTodoType'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.home.homeSkipTodoType'>, 'outParam'>>
declare export function identifyIdentify2RpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.identify.identify2'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.identify.identify2'>, 'outParam'>>
declare export function installFuseStatusRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.install.fuseStatus'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.install.fuseStatus'>, 'outParam'>>
declare export function installInstallFuseRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.install.installFuse'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.install.installFuse'>, 'outParam'>>
declare export function installInstallKBFSRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.install.installKBFS'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.install.installKBFS'>, 'outParam'>>
declare export function installUninstallKBFSRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.install.uninstallKBFS'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.install.uninstallKBFS'>, 'outParam'>>
declare export function kbfsMountGetCurrentMountDirRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.kbfsMount.GetCurrentMountDir'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.kbfsMount.GetCurrentMountDir'>, 'outParam'>>
declare export function loginAccountDeleteRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.login.accountDelete'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.login.accountDelete'>, 'outParam'>>
declare export function loginDeprovisionRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.login.deprovision'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.login.deprovision'>, 'outParam'>>
declare export function loginGetConfiguredAccountsRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.login.getConfiguredAccounts'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.login.getConfiguredAccounts'>, 'outParam'>>
declare export function loginLoginRpcSaga(p: {params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.login.login'>, 'inParam'>, incomingCallMap: IncomingCallMapType, customResponseIncomingCallMap?: CustomResponseIncomingCallMap, waitingKey?: string}): CallEffect<void>
declare export function loginLogoutRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.login.logout'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.login.logout'>, 'outParam'>>
declare export function loginPaperKeyRpcSaga(p: {params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.login.paperKey'>, 'inParam'>, incomingCallMap: IncomingCallMapType, customResponseIncomingCallMap?: CustomResponseIncomingCallMap, waitingKey?: string}): CallEffect<void>
declare export function loginPaperKeySubmitRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.login.paperKeySubmit'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.login.paperKeySubmit'>, 'outParam'>>
declare export function notifyCtlSetNotificationsRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.notifyCtl.setNotifications'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.notifyCtl.setNotifications'>, 'outParam'>>
declare export function pgpPgpKeyGenDefaultRpcChannelMap(configKeys: Array<string>, request: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.pgp.pgpKeyGenDefault'>, 'inParam'>): void /* not void but this is deprecated */
declare export function pgpPgpStorageDismissRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.pgp.pgpStorageDismiss'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.pgp.pgpStorageDismiss'>, 'outParam'>>
declare export function pprofLogProcessorProfileRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.pprof.logProcessorProfile'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.pprof.logProcessorProfile'>, 'outParam'>>
declare export function pprofLogTraceRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.pprof.logTrace'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.pprof.logTrace'>, 'outParam'>>
declare export function proveCheckProofRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.prove.checkProof'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.prove.checkProof'>, 'outParam'>>
declare export function proveStartProofRpcChannelMap(configKeys: Array<string>, request: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.prove.startProof'>, 'inParam'>): void /* not void but this is deprecated */
declare export function reachabilityCheckReachabilityRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.reachability.checkReachability'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.reachability.checkReachability'>, 'outParam'>>
declare export function reachabilityStartReachabilityRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.reachability.startReachability'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.reachability.startReachability'>, 'outParam'>>
declare export function rekeyGetRevokeWarningRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.rekey.getRevokeWarning'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.rekey.getRevokeWarning'>, 'outParam'>>
declare export function rekeyRekeyStatusFinishRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.rekey.rekeyStatusFinish'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.rekey.rekeyStatusFinish'>, 'outParam'>>
declare export function rekeyShowPendingRekeyStatusRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.rekey.showPendingRekeyStatus'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.rekey.showPendingRekeyStatus'>, 'outParam'>>
declare export function revokeRevokeDeviceRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.revoke.revokeDevice'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.revoke.revokeDevice'>, 'outParam'>>
declare export function revokeRevokeKeyRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.revoke.revokeKey'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.revoke.revokeKey'>, 'outParam'>>
declare export function revokeRevokeSigsRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.revoke.revokeSigs'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.revoke.revokeSigs'>, 'outParam'>>
declare export function signupCheckInvitationCodeRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.signup.checkInvitationCode'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.signup.checkInvitationCode'>, 'outParam'>>
declare export function signupCheckUsernameAvailableRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.signup.checkUsernameAvailable'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.signup.checkUsernameAvailable'>, 'outParam'>>
declare export function signupGetInvitationCodeRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.signup.getInvitationCode'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.signup.getInvitationCode'>, 'outParam'>>
declare export function signupInviteRequestRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.signup.inviteRequest'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.signup.inviteRequest'>, 'outParam'>>
declare export function signupSignupRpcSaga(p: {params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.signup.signup'>, 'inParam'>, incomingCallMap: IncomingCallMapType, customResponseIncomingCallMap?: CustomResponseIncomingCallMap, waitingKey?: string}): CallEffect<void>
declare export function teamsCanUserPerformRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.canUserPerform'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.canUserPerform'>, 'outParam'>>
declare export function teamsGetTarsDisabledRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.getTarsDisabled'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.getTarsDisabled'>, 'outParam'>>
declare export function teamsGetTeamAndMemberShowcaseRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.getTeamAndMemberShowcase'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.getTeamAndMemberShowcase'>, 'outParam'>>
declare export function teamsSetTarsDisabledRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.setTarsDisabled'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.setTarsDisabled'>, 'outParam'>>
declare export function teamsSetTeamMemberShowcaseRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.setTeamMemberShowcase'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.setTeamMemberShowcase'>, 'outParam'>>
declare export function teamsSetTeamShowcaseRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.setTeamShowcase'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.setTeamShowcase'>, 'outParam'>>
declare export function teamsTeamAcceptInviteOrRequestAccessRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamAcceptInviteOrRequestAccess'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamAcceptInviteOrRequestAccess'>, 'outParam'>>
declare export function teamsTeamAddEmailsBulkRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamAddEmailsBulk'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamAddEmailsBulk'>, 'outParam'>>
declare export function teamsTeamAddMemberRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamAddMember'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamAddMember'>, 'outParam'>>
declare export function teamsTeamAddMembersRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamAddMembers'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamAddMembers'>, 'outParam'>>
declare export function teamsTeamCreateRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamCreate'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamCreate'>, 'outParam'>>
declare export function teamsTeamCreateSeitanTokenV2RpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamCreateSeitanTokenV2'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamCreateSeitanTokenV2'>, 'outParam'>>
declare export function teamsTeamEditMemberRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamEditMember'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamEditMember'>, 'outParam'>>
declare export function teamsTeamGetRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamGet'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamGet'>, 'outParam'>>
declare export function teamsTeamIgnoreRequestRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamIgnoreRequest'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamIgnoreRequest'>, 'outParam'>>
declare export function teamsTeamLeaveRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamLeave'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamLeave'>, 'outParam'>>
declare export function teamsTeamListMyAccessRequestsRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamListMyAccessRequests'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamListMyAccessRequests'>, 'outParam'>>
declare export function teamsTeamListRequestsRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamListRequests'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamListRequests'>, 'outParam'>>
declare export function teamsTeamListUnverifiedRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamListUnverified'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamListUnverified'>, 'outParam'>>
declare export function teamsTeamReAddMemberAfterResetRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamReAddMemberAfterReset'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamReAddMemberAfterReset'>, 'outParam'>>
declare export function teamsTeamRemoveMemberRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamRemoveMember'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamRemoveMember'>, 'outParam'>>
declare export function teamsTeamSetSettingsRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamSetSettings'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamSetSettings'>, 'outParam'>>
declare export function teamsTeamTreeRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamTree'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.teamTree'>, 'outParam'>>
declare export function teamsUploadTeamAvatarRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.uploadTeamAvatar'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.teams.uploadTeamAvatar'>, 'outParam'>>
declare export function trackCheckTrackingRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.track.checkTracking'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.track.checkTracking'>, 'outParam'>>
declare export function trackDismissWithTokenRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.track.dismissWithToken'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.track.dismissWithToken'>, 'outParam'>>
declare export function trackTrackWithTokenRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.track.trackWithToken'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.track.trackWithToken'>, 'outParam'>>
declare export function trackUntrackRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.track.untrack'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.track.untrack'>, 'outParam'>>
declare export function userInterestingPeopleRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.user.interestingPeople'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.user.interestingPeople'>, 'outParam'>>
declare export function userListTrackers2RpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.user.listTrackers2'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.user.listTrackers2'>, 'outParam'>>
declare export function userLoadMySettingsRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.user.loadMySettings'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.user.loadMySettings'>, 'outParam'>>
declare export function userProfileEditRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.user.profileEdit'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.user.profileEdit'>, 'outParam'>>
declare export function userUploadUserAvatarRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'keybase.1.user.uploadUserAvatar'>, 'inParam'>, waitingKey?: string): Promise<$PropertyType<$PropertyType<MessageTypes, 'keybase.1.user.uploadUserAvatar'>, 'outParam'>>
// Not enabled calls. To enable add to enabled-calls.json: 'keybase.1.account.passphrasePrompt' 'keybase.1.account.resetAccount' 'keybase.1.appState.updateAppState' 'keybase.1.badger.getBadgeState' 'keybase.1.block.getSessionChallenge' 'keybase.1.block.authenticateSession' 'keybase.1.block.putBlock' 'keybase.1.block.putBlockAgain' 'keybase.1.block.getBlock' 'keybase.1.block.addReference' 'keybase.1.block.delReference' 'keybase.1.block.archiveReference' 'keybase.1.block.delReferenceWithCount' 'keybase.1.block.archiveReferenceWithCount' 'keybase.1.block.getUserQuotaInfo' 'keybase.1.block.getTeamQuotaInfo' 'keybase.1.block.blockPing' 'keybase.1.BTC.registerBTC' 'keybase.1.config.getCurrentStatus' 'keybase.1.config.getExtendedStatus' 'keybase.1.config.setUserConfig' 'keybase.1.config.setPath' 'keybase.1.config.setValue' 'keybase.1.config.clearValue' 'keybase.1.config.getValue' 'keybase.1.config.checkAPIServerOutOfDateWarning' 'keybase.1.crypto.signED25519' 'keybase.1.crypto.signED25519ForKBFS' 'keybase.1.crypto.signToString' 'keybase.1.crypto.unboxBytes32' 'keybase.1.crypto.unboxBytes32Any' 'keybase.1.ctl.stop' 'keybase.1.ctl.logRotate' 'keybase.1.ctl.reload' 'keybase.1.ctl.appExit' 'keybase.1.ctl.dbDelete' 'keybase.1.ctl.dbPut' 'keybase.1.ctl.dbGet' 'keybase.1.debugging.firstStep' 'keybase.1.debugging.secondStep' 'keybase.1.debugging.increment' 'keybase.1.debugging.script' 'keybase.1.delegateUiCtl.registerUpdateUI' 'keybase.1.delegateUiCtl.registerGregorFirehose' 'keybase.1.device.deviceList' 'keybase.1.device.checkDeviceNameForUser' 'keybase.1.favorite.getFavorites' 'keybase.1.fs.List' 'keybase.1.git.putGitMetadata' 'keybase.1.git.deleteGitMetadata' 'keybase.1.git.gcPersonalRepo' 'keybase.1.git.gcTeamRepo' 'keybase.1.git.getTeamRepoSettings' 'keybase.1.gpgUi.wantToAddGPGKey' 'keybase.1.gpgUi.confirmDuplicateKeyChosen' 'keybase.1.gpgUi.confirmImportSecretToExistingKey' 'keybase.1.gpgUi.selectKeyAndPushOption' 'keybase.1.gpgUi.selectKey' 'keybase.1.gpgUi.sign' 'keybase.1.gpgUi.getTTY' 'keybase.1.gregorUI.pushState' 'keybase.1.gregorUI.pushOutOfBandMessages' 'keybase.1.home.homeActionTaken' 'keybase.1.homeUI.homeUIRefresh' 'keybase.1.identify.Resolve3' 'keybase.1.identify.identifyLite' 'keybase.1.identify.resolveIdentifyImplicitTeam' 'keybase.1.identify.resolveImplicitTeam' 'keybase.1.identify.normalizeSocialAssertion' 'keybase.1.identifyUi.displayTLFCreateWithInvite' 'keybase.1.identifyUi.delegateIdentifyUI' 'keybase.1.identifyUi.start' 'keybase.1.identifyUi.displayKey' 'keybase.1.identifyUi.reportLastTrack' 'keybase.1.identifyUi.launchNetworkChecks' 'keybase.1.identifyUi.displayTrackStatement' 'keybase.1.identifyUi.finishWebProofCheck' 'keybase.1.identifyUi.finishSocialProofCheck' 'keybase.1.identifyUi.displayCryptocurrency' 'keybase.1.identifyUi.reportTrackToken' 'keybase.1.identifyUi.displayUserCard' 'keybase.1.identifyUi.confirm' 'keybase.1.identifyUi.cancel' 'keybase.1.identifyUi.finish' 'keybase.1.identifyUi.dismiss' 'keybase.1.implicitTeamMigration.startMigration' 'keybase.1.implicitTeamMigration.finalizeMigration' 'keybase.1.install.installCommandLinePrivileged' 'keybase.1.kbfs.FSEvent' 'keybase.1.kbfs.FSPathUpdate' 'keybase.1.kbfs.FSEditList' 'keybase.1.kbfs.FSSyncStatus' 'keybase.1.kbfs.FSSyncEvent' 'keybase.1.kbfs.createTLF' 'keybase.1.kbfs.getKBFSTeamSettings' 'keybase.1.kbfs.upgradeTLF' 'keybase.1.KBFSGit.createRepo' 'keybase.1.KBFSGit.deleteRepo' 'keybase.1.KBFSGit.gc' 'keybase.1.kbfsMount.GetAllAvailableMountDirs' 'keybase.1.kbfsMount.SetCurrentMountDir' 'keybase.1.Kex2Provisionee.hello' 'keybase.1.Kex2Provisionee.didCounterSign' 'keybase.1.Kex2Provisionee2.hello2' 'keybase.1.Kex2Provisionee2.didCounterSign2' 'keybase.1.Kex2Provisioner.kexStart' 'keybase.1.log.registerLogger' 'keybase.1.logUi.log' 'keybase.1.login.loginProvisionedDevice' 'keybase.1.login.loginWithPaperKey' 'keybase.1.login.clearStoredSecret' 'keybase.1.login.recoverAccountFromEmailAddress' 'keybase.1.login.unlock' 'keybase.1.login.unlockWithPassphrase' 'keybase.1.login.loginOneshot' 'keybase.1.loginUi.getEmailOrUsername' 'keybase.1.loginUi.promptRevokePaperKeys' 'keybase.1.loginUi.displayPaperKeyPhrase' 'keybase.1.loginUi.displayPrimaryPaperKey' 'keybase.1.logsend.prepareLogsend' 'keybase.1.merkle.getCurrentMerkleRoot' 'keybase.1.merkle.verifyMerkleRootAndKBFS' 'keybase.1.metadata.getChallenge' 'keybase.1.metadata.authenticate' 'keybase.1.metadata.putMetadata' 'keybase.1.metadata.getMetadata' 'keybase.1.metadata.getMetadataByTimestamp' 'keybase.1.metadata.registerForUpdates' 'keybase.1.metadata.pruneBranch' 'keybase.1.metadata.putKeys' 'keybase.1.metadata.getKey' 'keybase.1.metadata.deleteKey' 'keybase.1.metadata.truncateLock' 'keybase.1.metadata.truncateUnlock' 'keybase.1.metadata.getFolderHandle' 'keybase.1.metadata.getFoldersForRekey' 'keybase.1.metadata.ping' 'keybase.1.metadata.ping2' 'keybase.1.metadata.getLatestFolderHandle' 'keybase.1.metadata.getKeyBundles' 'keybase.1.metadata.lock' 'keybase.1.metadata.releaseLock' 'keybase.1.metadata.startImplicitTeamMigration' 'keybase.1.metadata.getMerkleRoot' 'keybase.1.metadata.getMerkleRootLatest' 'keybase.1.metadata.getMerkleRootSince' 'keybase.1.metadata.getMerkleNode' 'keybase.1.metadata.findNextMD' 'keybase.1.metadata.setImplicitTeamModeForTest' 'keybase.1.metadata.forceMerkleBuildForTest' 'keybase.1.metadataUpdate.metadataUpdate' 'keybase.1.metadataUpdate.folderNeedsRekey' 'keybase.1.metadataUpdate.foldersNeedRekey' 'keybase.1.NotifyApp.exit' 'keybase.1.NotifyBadges.badgeState' 'keybase.1.NotifyCanUserPerform.canUserPerformChanged' 'keybase.1.NotifyDeviceClone.deviceCloneCountChanged' 'keybase.1.NotifyEphemeral.newTeamEk' 'keybase.1.NotifyFavorites.favoritesChanged' 'keybase.1.NotifyFS.FSActivity' 'keybase.1.NotifyFS.FSPathUpdated' 'keybase.1.NotifyFS.FSSyncActivity' 'keybase.1.NotifyFS.FSEditListResponse' 'keybase.1.NotifyFS.FSSyncStatusResponse' 'keybase.1.NotifyFSRequest.FSEditListRequest' 'keybase.1.NotifyFSRequest.FSSyncStatusRequest' 'keybase.1.NotifyKeyfamily.keyfamilyChanged' 'keybase.1.NotifyPaperKey.paperKeyCached' 'keybase.1.NotifyPGP.pgpKeyInSecretStoreFile' 'keybase.1.NotifyService.shutdown' 'keybase.1.NotifySession.loggedOut' 'keybase.1.NotifySession.loggedIn' 'keybase.1.NotifySession.clientOutOfDate' 'keybase.1.NotifyTeam.teamChangedByID' 'keybase.1.NotifyTeam.teamChangedByName' 'keybase.1.NotifyTeam.teamDeleted' 'keybase.1.NotifyTeam.teamAbandoned' 'keybase.1.NotifyTeam.teamExit' 'keybase.1.NotifyTeam.newlyAddedToTeam' 'keybase.1.NotifyTeam.avatarUpdated' 'keybase.1.NotifyTracking.trackingChanged' 'keybase.1.NotifyUnverifiedTeamList.teamListUnverifiedChanged' 'keybase.1.NotifyUsers.userChanged' 'keybase.1.paperprovision.paperProvision' 'keybase.1.pgp.pgpSign' 'keybase.1.pgp.pgpPull' 'keybase.1.pgp.pgpEncrypt' 'keybase.1.pgp.pgpDecrypt' 'keybase.1.pgp.pgpVerify' 'keybase.1.pgp.pgpImport' 'keybase.1.pgp.pgpExport' 'keybase.1.pgp.pgpExportByFingerprint' 'keybase.1.pgp.pgpExportByKID' 'keybase.1.pgp.pgpKeyGen' 'keybase.1.pgp.pgpDeletePrimary' 'keybase.1.pgp.pgpSelect' 'keybase.1.pgp.pgpUpdate' 'keybase.1.pgp.pgpPurge' 'keybase.1.pgpUi.outputSignatureSuccess' 'keybase.1.pgpUi.outputSignatureSuccessNonKeybase' 'keybase.1.pgpUi.keyGenerated' 'keybase.1.pgpUi.shouldPushPrivate' 'keybase.1.pgpUi.finished' 'keybase.1.pprof.processorProfile' 'keybase.1.pprof.trace' 'keybase.1.prove.listProofServices' 'keybase.1.proveUi.promptOverwrite' 'keybase.1.proveUi.promptUsername' 'keybase.1.proveUi.outputPrechecks' 'keybase.1.proveUi.preProofWarning' 'keybase.1.proveUi.outputInstructions' 'keybase.1.proveUi.okToCheck' 'keybase.1.proveUi.displayRecheckWarning' 'keybase.1.provisionUi.chooseProvisioningMethod' 'keybase.1.provisionUi.chooseGPGMethod' 'keybase.1.provisionUi.switchToGPGSignOK' 'keybase.1.provisionUi.chooseDevice' 'keybase.1.provisionUi.chooseDeviceType' 'keybase.1.provisionUi.DisplayAndPromptSecret' 'keybase.1.provisionUi.DisplaySecretExchanged' 'keybase.1.provisionUi.PromptNewDeviceName' 'keybase.1.provisionUi.ProvisioneeSuccess' 'keybase.1.provisionUi.ProvisionerSuccess' 'keybase.1.quota.verifySession' 'keybase.1.rekey.getPendingRekeyStatus' 'keybase.1.rekey.debugShowRekeyStatus' 'keybase.1.rekey.rekeySync' 'keybase.1.rekeyUI.delegateRekeyUI' 'keybase.1.rekeyUI.refresh' 'keybase.1.rekeyUI.rekeySendEvent' 'keybase.1.saltpack.saltpackEncrypt' 'keybase.1.saltpack.saltpackDecrypt' 'keybase.1.saltpack.saltpackSign' 'keybase.1.saltpack.saltpackVerify' 'keybase.1.saltpackUi.saltpackPromptForDecrypt' 'keybase.1.saltpackUi.saltpackVerifySuccess' 'keybase.1.saltpackUi.saltpackVerifyBadSender' 'keybase.1.ScanProofs.scanProofs' 'keybase.1.secretUi.getPassphrase' 'keybase.1.SecretKeys.getSecretKeys' 'keybase.1.selfprovision.selfProvision' 'keybase.1.session.currentSession' 'keybase.1.session.sessionPing' 'keybase.1.sigs.sigList' 'keybase.1.sigs.sigListJSON' 'keybase.1.SimpleFS.simpleFSListRecursive' 'keybase.1.SimpleFS.simpleFSCopy' 'keybase.1.SimpleFS.simpleFSMove' 'keybase.1.SimpleFS.simpleFSRename' 'keybase.1.SimpleFS.simpleFSSetStat' 'keybase.1.SimpleFS.simpleFSRead' 'keybase.1.SimpleFS.simpleFSWrite' 'keybase.1.SimpleFS.simpleFSRemove' 'keybase.1.SimpleFS.simpleFSGetRevisions' 'keybase.1.SimpleFS.simpleFSReadRevisions' 'keybase.1.SimpleFS.simpleFSMakeOpid' 'keybase.1.SimpleFS.simpleFSClose' 'keybase.1.SimpleFS.simpleFSGetOps' 'keybase.1.SimpleFS.simpleFSDumpDebuggingInfo' 'keybase.1.SimpleFS.simpleFSFolderEditHistory' 'keybase.1.SimpleFS.simpleFSGetUserQuotaUsage' 'keybase.1.streamUi.close' 'keybase.1.streamUi.read' 'keybase.1.streamUi.reset' 'keybase.1.streamUi.write' 'keybase.1.teams.teamCreateWithSettings' 'keybase.1.teams.teamImplicitAdmins' 'keybase.1.teams.teamListTeammates' 'keybase.1.teams.teamListVerified' 'keybase.1.teams.teamListSubteamsRecursive' 'keybase.1.teams.teamChangeMembership' 'keybase.1.teams.teamRename' 'keybase.1.teams.teamAcceptInvite' 'keybase.1.teams.teamRequestAccess' 'keybase.1.teams.teamDelete' 'keybase.1.teams.teamCreateSeitanToken' 'keybase.1.teams.lookupImplicitTeam' 'keybase.1.teams.lookupOrCreateImplicitTeam' 'keybase.1.teams.loadTeamPlusApplicationKeys' 'keybase.1.teams.getTeamRootID' 'keybase.1.teams.getTeamShowcase' 'keybase.1.teams.teamRotateKey' 'keybase.1.teams.teamDebug' 'keybase.1.teams.tryDecryptWithTeamKey' 'keybase.1.teams.findNextMerkleRootAfterTeamRemoval' 'keybase.1.teams.findNextMerkleRootAfterTeamRemovalBySigningKey' 'keybase.1.teams.profileTeamLoad' 'keybase.1.teams.getTeamID' 'keybase.1.teams.ftl' 'keybase.1.teamsUi.confirmRootTeamDelete' 'keybase.1.teamsUi.confirmSubteamDelete' 'keybase.1.test.test' 'keybase.1.test.testCallback' 'keybase.1.test.panic' 'keybase.1.tlf.CryptKeys' 'keybase.1.tlf.publicCanonicalTLFNameAndID' 'keybase.1.tlf.completeAndCanonicalizePrivateTlfName' 'keybase.1.tlfKeys.getTLFCryptKeys' 'keybase.1.tlfKeys.getPublicCanonicalTLFNameAndID' 'keybase.1.track.track' 'keybase.1.track.fakeTrackingChanged' 'keybase.1.ui.promptYesNo' 'keybase.1.user.listTrackers' 'keybase.1.user.listTrackersByName' 'keybase.1.user.listTrackersSelf' 'keybase.1.user.loadUncheckedUserSummaries' 'keybase.1.user.loadUser' 'keybase.1.user.loadUserByName' 'keybase.1.user.loadUserPlusKeys' 'keybase.1.user.loadUserPlusKeysV2' 'keybase.1.user.loadPublicKeys' 'keybase.1.user.loadMyPublicKeys' 'keybase.1.user.listTracking' 'keybase.1.user.listTrackingJSON' 'keybase.1.user.search' 'keybase.1.user.loadAllPublicKeysUnverified' 'keybase.1.user.meUserVersion' 'keybase.1.user.getUPAK' 'keybase.1.user.getUPAKLite' 'keybase.1.user.findNextMerkleRootAfterRevoke' 'keybase.1.user.findNextMerkleRootAfterReset' 'keybase.1.user.addPhoneNumber' 'keybase.1.user.verifyPhoneNumber' 'keybase.1.user.getPhoneNumbers'
