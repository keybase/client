// @flow strict
/* eslint-disable */

// This file is auto-generated by client/protocol/Makefile.
import type {CallEffect, Effect} from 'redux-saga'
import * as Keybase1 from './rpc-gen'
export type {Keybase1}
export type Bool = boolean
export type Boolean = boolean
export type Bytes = Buffer
export type Double = number
export type Int = number
export type Int64 = number
export type Long = number
export type String = string
export type Uint = number
export type Uint64 = number
type WaitingKey = string | Array<string>
type IncomingErrorCallback = (?{code?: number, desc?: string}) => void
type IncomingReturn = Effect | null | void | false | Array<Effect | null | void | false>

export type MessageTypes = {|
  'stellar.1.local.acceptDisclaimerLocal': {|
    inParam: void,
    outParam: void,
  |},
  'stellar.1.local.buildPaymentLocal': {|
    inParam: $ReadOnly<{|bid: BuildPaymentID, from: AccountID, fromPrimaryAccount: Boolean, to: String, toIsAccountID: Boolean, amount: String, currency?: ?OutsideCurrencyCode, asset?: ?Asset, secretNote: String, publicMemo: String|}>,
    outParam: BuildPaymentResLocal,
  |},
  'stellar.1.local.buildRequestLocal': {|
    inParam: $ReadOnly<{|to: String, amount: String, asset?: ?Asset, currency?: ?OutsideCurrencyCode, secretNote: String|}>,
    outParam: BuildRequestResLocal,
  |},
  'stellar.1.local.cancelPaymentLocal': {|
    inParam: $ReadOnly<{|paymentID: PaymentID|}>,
    outParam: RelayClaimResult,
  |},
  'stellar.1.local.cancelRequestLocal': {|
    inParam: $ReadOnly<{|reqID: KeybaseRequestID|}>,
    outParam: void,
  |},
  'stellar.1.local.changeDisplayCurrencyLocal': {|
    inParam: $ReadOnly<{|accountID: AccountID, currency: OutsideCurrencyCode|}>,
    outParam: void,
  |},
  'stellar.1.local.changeWalletAccountNameLocal': {|
    inParam: $ReadOnly<{|accountID: AccountID, newName: String|}>,
    outParam: void,
  |},
  'stellar.1.local.createWalletAccountLocal': {|
    inParam: $ReadOnly<{|name: String|}>,
    outParam: AccountID,
  |},
  'stellar.1.local.deleteWalletAccountLocal': {|
    inParam: $ReadOnly<{|accountID: AccountID, userAcknowledged: String|}>,
    outParam: void,
  |},
  'stellar.1.local.getAccountAssetsLocal': {|
    inParam: $ReadOnly<{|accountID: AccountID|}>,
    outParam: ?Array<AccountAssetLocal>,
  |},
  'stellar.1.local.getDisplayCurrenciesLocal': {|
    inParam: void,
    outParam: ?Array<CurrencyLocal>,
  |},
  'stellar.1.local.getDisplayCurrencyLocal': {|
    inParam: $ReadOnly<{|accountID?: ?AccountID|}>,
    outParam: CurrencyLocal,
  |},
  'stellar.1.local.getPaymentDetailsLocal': {|
    inParam: $ReadOnly<{|accountID?: ?AccountID, id: PaymentID|}>,
    outParam: PaymentDetailsLocal,
  |},
  'stellar.1.local.getPaymentsLocal': {|
    inParam: $ReadOnly<{|accountID: AccountID, cursor?: ?PageCursor|}>,
    outParam: PaymentsPageLocal,
  |},
  'stellar.1.local.getPendingPaymentsLocal': {|
    inParam: $ReadOnly<{|accountID: AccountID|}>,
    outParam: ?Array<PaymentOrErrorLocal>,
  |},
  'stellar.1.local.getRequestDetailsLocal': {|
    inParam: $ReadOnly<{|reqID: KeybaseRequestID|}>,
    outParam: RequestDetailsLocal,
  |},
  'stellar.1.local.getSendAssetChoicesLocal': {|
    inParam: $ReadOnly<{|from: AccountID, to: String|}>,
    outParam: ?Array<SendAssetChoiceLocal>,
  |},
  'stellar.1.local.getWalletAccountLocal': {|
    inParam: $ReadOnly<{|accountID: AccountID|}>,
    outParam: WalletAccountLocal,
  |},
  'stellar.1.local.getWalletAccountSecretKeyLocal': {|
    inParam: $ReadOnly<{|accountID: AccountID|}>,
    outParam: SecretKey,
  |},
  'stellar.1.local.getWalletAccountsLocal': {|
    inParam: void,
    outParam: ?Array<WalletAccountLocal>,
  |},
  'stellar.1.local.hasAcceptedDisclaimerLocal': {|
    inParam: void,
    outParam: Bool,
  |},
  'stellar.1.local.isAccountMobileOnlyLocal': {|
    inParam: $ReadOnly<{|accountID: AccountID|}>,
    outParam: Boolean,
  |},
  'stellar.1.local.linkNewWalletAccountLocal': {|
    inParam: $ReadOnly<{|secretKey: SecretKey, name: String|}>,
    outParam: AccountID,
  |},
  'stellar.1.local.makeRequestLocal': {|
    inParam: $ReadOnly<{|recipient: String, asset?: ?Asset, currency?: ?OutsideCurrencyCode, amount: String, note: String|}>,
    outParam: KeybaseRequestID,
  |},
  'stellar.1.local.markAsReadLocal': {|
    inParam: $ReadOnly<{|accountID: AccountID, mostRecentID: PaymentID|}>,
    outParam: void,
  |},
  'stellar.1.local.sendPaymentLocal': {|
    inParam: $ReadOnly<{|bid: BuildPaymentID, bypassBid: Boolean, bypassReview: Boolean, from: AccountID, to: String, toIsAccountID: Boolean, amount: String, asset: Asset, worthAmount: String, worthCurrency?: ?OutsideCurrencyCode, secretNote: String, publicMemo: String, quickReturn: Boolean|}>,
    outParam: SendPaymentResLocal,
  |},
  'stellar.1.local.setAccountAllDevicesLocal': {|
    inParam: $ReadOnly<{|accountID: AccountID|}>,
    outParam: void,
  |},
  'stellar.1.local.setAccountMobileOnlyLocal': {|
    inParam: $ReadOnly<{|accountID: AccountID|}>,
    outParam: void,
  |},
  'stellar.1.local.setWalletAccountAsDefaultLocal': {|
    inParam: $ReadOnly<{|accountID: AccountID|}>,
    outParam: void,
  |},
  'stellar.1.local.startBuildPaymentLocal': {|
    inParam: void,
    outParam: BuildPaymentID,
  |},
  'stellar.1.local.stopBuildPaymentLocal': {|
    inParam: $ReadOnly<{|bid: BuildPaymentID|}>,
    outParam: void,
  |},
  'stellar.1.local.validateAccountNameLocal': {|
    inParam: $ReadOnly<{|name: String|}>,
    outParam: void,
  |},
  'stellar.1.local.validateSecretKeyLocal': {|
    inParam: $ReadOnly<{|secretKey: SecretKey|}>,
    outParam: void,
  |},
  'stellar.1.notify.accountDetailsUpdate': {|
    inParam: $ReadOnly<{|accountID: AccountID, account: WalletAccountLocal|}>,
    outParam: void,
  |},
  'stellar.1.notify.paymentNotification': {|
    inParam: $ReadOnly<{|accountID: AccountID, paymentID: PaymentID|}>,
    outParam: void,
  |},
  'stellar.1.notify.paymentStatusNotification': {|
    inParam: $ReadOnly<{|accountID: AccountID, paymentID: PaymentID|}>,
    outParam: void,
  |},
  'stellar.1.notify.pendingPaymentsUpdate': {|
    inParam: $ReadOnly<{|accountID: AccountID, pending?: ?Array<PaymentOrErrorLocal>|}>,
    outParam: void,
  |},
  'stellar.1.notify.recentPaymentsUpdate': {|
    inParam: $ReadOnly<{|accountID: AccountID, firstPage: PaymentsPageLocal|}>,
    outParam: void,
  |},
  'stellar.1.notify.requestStatusNotification': {|
    inParam: $ReadOnly<{|reqID: KeybaseRequestID|}>,
    outParam: void,
  |},
  'stellar.1.ui.paymentReviewed': {|
    inParam: $ReadOnly<{|msg: UIPaymentReviewed|}>,
    outParam: void,
  |},
|}

export const bundleAccountBundleVersion = {
  v1: 1,
  v2: 2,
  v3: 3,
  v4: 4,
  v5: 5,
  v6: 6,
  v7: 7,
  v8: 8,
  v9: 9,
  v10: 10,
}

export const bundleAccountMode = {
  none: 0,
  user: 1,
  mobile: 2,
}

export const bundleBundleVersion = {
  v1: 1,
  v2: 2,
  v3: 3,
  v4: 4,
  v5: 5,
  v6: 6,
  v7: 7,
  v8: 8,
  v9: 9,
  v10: 10,
}

export const commonPaymentStrategy = {
  none: 0,
  direct: 1,
  relay: 2,
}

export const commonRelayDirection = {
  claim: 0,
  yank: 1,
}

export const commonRequestStatus = {
  ok: 0,
  canceled: 1,
}

export const commonTransactionStatus = {
  none: 0,
  pending: 1,
  success: 2,
  errorTransient: 3,
  errorPermanent: 4,
}

export const localBalanceDelta = {
  none: 0,
  increase: 1,
  decrease: 2,
}

export const localInflationDestinationType = {
  self: 1,
  accountid: 2,
  lumenaut: 3,
}

export const localParticipantType = {
  none: 0,
  keybase: 1,
  stellar: 2,
  sbs: 3,
  ownaccount: 4,
}

export const localPaymentStatus = {
  none: 0,
  pending: 1,
  claimable: 2,
  completed: 3,
  error: 4,
  unknown: 5,
  canceled: 6,
}

export const remotePaymentSummaryType = {
  none: 0,
  stellar: 1,
  direct: 2,
  relay: 3,
}
export type AccountAssetLocal = $ReadOnly<{name: String, assetCode: String, issuerName: String, issuerAccountID: String, issuerVerifiedDomain: String, balanceTotal: String, balanceAvailableToSend: String, worthCurrency: String, worth: String, availableToSendWorth: String, reserves?: ?Array<AccountReserve>}>
export type AccountBundle = $ReadOnly<{prev: Hash, ownHash: Hash, accountID: AccountID, signers?: ?Array<SecretKey>}>
export type AccountBundleSecretUnsupported = $ReadOnly<{}>
export type AccountBundleSecretV1 = $ReadOnly<{accountID: AccountID, signers?: ?Array<SecretKey>}>
export type AccountBundleSecretVersioned = {version: 1, v1: ?AccountBundleSecretV1} | {version: 2, v2: ?AccountBundleSecretUnsupported} | {version: 3, v3: ?AccountBundleSecretUnsupported} | {version: 4, v4: ?AccountBundleSecretUnsupported} | {version: 5, v5: ?AccountBundleSecretUnsupported} | {version: 6, v6: ?AccountBundleSecretUnsupported} | {version: 7, v7: ?AccountBundleSecretUnsupported} | {version: 8, v8: ?AccountBundleSecretUnsupported} | {version: 9, v9: ?AccountBundleSecretUnsupported} | {version: 10, v10: ?AccountBundleSecretUnsupported}
export type AccountBundleVersion =
  | 1 // V1_1
  | 2 // V2_2
  | 3 // V3_3
  | 4 // V4_4
  | 5 // V5_5
  | 6 // V6_6
  | 7 // V7_7
  | 8 // V8_8
  | 9 // V9_9
  | 10 // V10_10

export type AccountDetails = $ReadOnly<{accountID: AccountID, seqno: String, balances?: ?Array<Balance>, subentryCount: Int, available: String, reserves?: ?Array<AccountReserve>, readTransactionID?: ?TransactionID, unreadPayments: Int, displayCurrency: String, inflationDestination?: ?AccountID}>
export type AccountID = String
export type AccountMode =
  | 0 // NONE_0
  | 1 // USER_1
  | 2 // MOBILE_2

export type AccountReserve = $ReadOnly<{amount: String, description: String}>
export type Asset = $ReadOnly<{type: String, code: String, issuer: String, verifiedDomain: String, issuerName: String}>
export type AutoClaim = $ReadOnly<{kbTxID: KeybaseTransactionID}>
export type Balance = $ReadOnly<{asset: Asset, amount: String, limit: String}>
export type BalanceDelta =
  | 0 // NONE_0
  | 1 // INCREASE_1
  | 2 // DECREASE_2

export type BuildPaymentID = String
export type BuildPaymentResLocal = $ReadOnly<{readyToReview: Boolean, from: AccountID, toErrMsg: String, amountErrMsg: String, secretNoteErrMsg: String, publicMemoErrMsg: String, worthDescription: String, worthInfo: String, worthAmount: String, worthCurrency: String, displayAmountXLM: String, displayAmountFiat: String, sendingIntentionXLM: Boolean, amountAvailable: String, banners?: ?Array<SendBannerLocal>}>
export type BuildRequestResLocal = $ReadOnly<{readyToRequest: Boolean, toErrMsg: String, amountErrMsg: String, secretNoteErrMsg: String, worthDescription: String, worthInfo: String, displayAmountXLM: String, displayAmountFiat: String, sendingIntentionXLM: Boolean, banners?: ?Array<SendBannerLocal>}>
export type Bundle = $ReadOnly<{revision: BundleRevision, prev: Hash, ownHash: Hash, accounts?: ?Array<BundleEntry>, accountBundles: {[key: string]: AccountBundle}}>
export type BundleEntry = $ReadOnly<{accountID: AccountID, mode: AccountMode, isPrimary: Boolean, name: String, acctBundleRevision: BundleRevision, encAcctBundleHash: Hash}>
export type BundleRevision = Uint64
export type BundleSecretEntryV2 = $ReadOnly<{accountID: AccountID, name: String}>
export type BundleSecretUnsupported = $ReadOnly<{}>
export type BundleSecretV2 = $ReadOnly<{visibleHash: Hash, accounts?: ?Array<BundleSecretEntryV2>}>
export type BundleSecretVersioned = {version: 1, v1: ?BundleSecretUnsupported} | {version: 2, v2: ?BundleSecretV2} | {version: 3, v3: ?BundleSecretUnsupported} | {version: 4, v4: ?BundleSecretUnsupported} | {version: 5, v5: ?BundleSecretUnsupported} | {version: 6, v6: ?BundleSecretUnsupported} | {version: 7, v7: ?BundleSecretUnsupported} | {version: 8, v8: ?BundleSecretUnsupported} | {version: 9, v9: ?BundleSecretUnsupported} | {version: 10, v10: ?BundleSecretUnsupported}
export type BundleVersion =
  | 1 // V1_1
  | 2 // V2_2
  | 3 // V3_3
  | 4 // V4_4
  | 5 // V5_5
  | 6 // V6_6
  | 7 // V7_7
  | 8 // V8_8
  | 9 // V9_9
  | 10 // V10_10

export type BundleVisibleEntryV2 = $ReadOnly<{accountID: AccountID, mode: AccountMode, isPrimary: Boolean, acctBundleRevision: BundleRevision, encAcctBundleHash: Hash}>
export type BundleVisibleV2 = $ReadOnly<{revision: BundleRevision, prev: Hash, accounts?: ?Array<BundleVisibleEntryV2>}>
export type ChatConversationID = String
export type ClaimSummary = $ReadOnly<{txID: TransactionID, txStatus: TransactionStatus, txErrMsg: String, dir: RelayDirection, toStellar: AccountID, to: Keybase1.UserVersion}>
export type CurrencyLocal = $ReadOnly<{description: String, code: OutsideCurrencyCode, symbol: String, name: String}>
export type CurrencySymbol = $ReadOnly<{symbol: String, ambigious: Boolean, postfix: Boolean}>
export type EncryptedAccountBundle = $ReadOnly<{v: Int, e: Bytes, n: Keybase1.BoxNonce, gen: Keybase1.PerUserKeyGeneration}>
export type EncryptedBundle = $ReadOnly<{v: Int, e: Bytes, n: Keybase1.BoxNonce, gen: Keybase1.PerUserKeyGeneration}>
export type EncryptedNote = $ReadOnly<{v: Int, e: Bytes, n: Keybase1.BoxNonce, sender: NoteRecipient, recipient?: ?NoteRecipient}>
export type EncryptedRelaySecret = $ReadOnly<{v: Int, e: Bytes, n: Keybase1.BoxNonce, gen: Keybase1.PerTeamKeyGeneration}>
export type Hash = Bytes
export type InflationDestination = {typ: 1} | {typ: 2, accountid: ?AccountID} | {typ: 3}
export type InflationDestinationResultLocal = $ReadOnly<{destination?: ?AccountID, comment: String}>
export type InflationDestinationType =
  | 1 // SELF_1
  | 2 // ACCOUNTID_2
  | 3 // LUMENAUT_3

export type KeybaseRequestID = String
export type KeybaseTransactionID = String
export type LookupResultCLILocal = $ReadOnly<{accountID: AccountID, username?: ?String}>
export type NoteContents = $ReadOnly<{note: String, stellarID: TransactionID}>
export type NoteRecipient = $ReadOnly<{user: Keybase1.UserVersion, pukGen: Keybase1.PerUserKeyGeneration}>
export type OutsideCurrencyCode = String
export type OutsideCurrencyDefinition = $ReadOnly<{name: String, symbol: CurrencySymbol}>
export type OutsideExchangeRate = $ReadOnly<{currency: OutsideCurrencyCode, rate: String}>
export type OwnAccountCLILocal = $ReadOnly<{accountID: AccountID, isPrimary: Boolean, name: String, balance?: ?Array<Balance>, exchangeRate?: ?OutsideExchangeRate}>
export type PageCursor = $ReadOnly<{horizonCursor: String, directCursor: String, relayCursor: String}>
export type ParticipantType =
  | 0 // NONE_0
  | 1 // KEYBASE_1
  | 2 // STELLAR_2
  | 3 // SBS_3
  | 4 // OWNACCOUNT_4

export type PaymentCLILocal = $ReadOnly<{txID: TransactionID, time: TimeMs, status: String, statusDetail: String, amount: String, asset: Asset, displayAmount?: ?String, displayCurrency?: ?String, fromStellar: AccountID, toStellar?: ?AccountID, fromUsername?: ?String, toUsername?: ?String, toAssertion?: ?String, note: String, noteErr: String, unread: Boolean}>
export type PaymentDetails = $ReadOnly<{summary: PaymentSummary, memo: String, memoType: String, externalTxURL: String}>
export type PaymentDetailsLocal = $ReadOnly<{id: PaymentID, txID: TransactionID, time: TimeMs, statusSimplified: PaymentStatus, statusDescription: String, statusDetail: String, showCancel: Boolean, amountDescription: String, delta: BalanceDelta, worth: String, worthCurrency: String, issuerDescription: String, issuerAccountID?: ?AccountID, fromType: ParticipantType, toType: ParticipantType, fromAccountID: AccountID, fromAccountName: String, fromUsername: String, toAccountID?: ?AccountID, toAccountName: String, toUsername: String, toAssertion: String, originalToAssertion: String, note: String, noteErr: String, publicNote: String, publicNoteType: String, externalTxURL: String}>
export type PaymentDirectPost = $ReadOnly<{fromDeviceID: Keybase1.DeviceID, to?: ?Keybase1.UserVersion, displayAmount: String, displayCurrency: String, noteB64: String, signedTransaction: String, quickReturn: Boolean, chatConversationID?: ?ChatConversationID}>
export type PaymentID = String
export type PaymentLocal = $ReadOnly<{id: PaymentID, time: TimeMs, statusSimplified: PaymentStatus, statusDescription: String, statusDetail: String, showCancel: Boolean, amountDescription: String, delta: BalanceDelta, worth: String, worthCurrency: String, issuerDescription: String, issuerAccountID?: ?AccountID, fromType: ParticipantType, toType: ParticipantType, fromAccountID: AccountID, fromAccountName: String, fromUsername: String, toAccountID?: ?AccountID, toAccountName: String, toUsername: String, toAssertion: String, originalToAssertion: String, note: String, noteErr: String, unread: Boolean}>
export type PaymentNotificationMsg = $ReadOnly<{accountID: AccountID, paymentID: PaymentID}>
export type PaymentOrErrorCLILocal = $ReadOnly<{payment?: ?PaymentCLILocal, err?: ?String}>
export type PaymentOrErrorLocal = $ReadOnly<{payment?: ?PaymentLocal, err?: ?String}>
export type PaymentRelayPost = $ReadOnly<{fromDeviceID: Keybase1.DeviceID, to?: ?Keybase1.UserVersion, toAssertion: String, relayAccount: AccountID, teamID: Keybase1.TeamID, displayAmount: String, displayCurrency: String, boxB64: String, signedTransaction: String, quickReturn: Boolean, chatConversationID?: ?ChatConversationID}>
export type PaymentResult = $ReadOnly<{senderAccountID: AccountID, keybaseID: KeybaseTransactionID, stellarID: TransactionID, pending: Boolean}>
export type PaymentStatus =
  | 0 // NONE_0
  | 1 // PENDING_1
  | 2 // CLAIMABLE_2
  | 3 // COMPLETED_3
  | 4 // ERROR_4
  | 5 // UNKNOWN_5
  | 6 // CANCELED_6

export type PaymentStatusMsg = $ReadOnly<{accountID: AccountID, kbTxID: KeybaseTransactionID, txID: TransactionID}>
export type PaymentStrategy =
  | 0 // NONE_0
  | 1 // DIRECT_1
  | 2 // RELAY_2

export type PaymentSummary = {typ: 1, stellar: ?PaymentSummaryStellar} | {typ: 2, direct: ?PaymentSummaryDirect} | {typ: 3, relay: ?PaymentSummaryRelay}
export type PaymentSummaryDirect = $ReadOnly<{kbTxID: KeybaseTransactionID, txID: TransactionID, txStatus: TransactionStatus, txErrMsg: String, fromStellar: AccountID, from: Keybase1.UserVersion, fromDeviceID: Keybase1.DeviceID, toStellar: AccountID, to?: ?Keybase1.UserVersion, amount: String, asset: Asset, displayAmount?: ?String, displayCurrency?: ?String, noteB64: String, fromDisplayAmount: String, fromDisplayCurrency: String, toDisplayAmount: String, toDisplayCurrency: String, ctime: TimeMs, rtime: TimeMs, cursorToken: String}>
export type PaymentSummaryRelay = $ReadOnly<{kbTxID: KeybaseTransactionID, txID: TransactionID, txStatus: TransactionStatus, txErrMsg: String, fromStellar: AccountID, from: Keybase1.UserVersion, fromDeviceID: Keybase1.DeviceID, to?: ?Keybase1.UserVersion, toAssertion: String, relayAccount: AccountID, amount: String, displayAmount?: ?String, displayCurrency?: ?String, ctime: TimeMs, rtime: TimeMs, boxB64: String, teamID: Keybase1.TeamID, claim?: ?ClaimSummary, cursorToken: String}>
export type PaymentSummaryStellar = $ReadOnly<{txID: TransactionID, from: AccountID, to: AccountID, amount: String, asset: Asset, ctime: TimeMs, cursorToken: String, unread: Boolean}>
export type PaymentSummaryType =
  | 0 // NONE_0
  | 1 // STELLAR_1
  | 2 // DIRECT_2
  | 3 // RELAY_3

export type PaymentsPage = $ReadOnly<{payments?: ?Array<PaymentSummary>, cursor?: ?PageCursor, oldestUnread?: ?TransactionID}>
export type PaymentsPageLocal = $ReadOnly<{payments?: ?Array<PaymentOrErrorLocal>, cursor?: ?PageCursor, oldestUnread?: ?PaymentID}>
export type RelayClaimPost = $ReadOnly<{keybaseID: KeybaseTransactionID, dir: RelayDirection, signedTransaction: String, autoClaimToken?: ?String}>
export type RelayClaimResult = $ReadOnly<{claimStellarID: TransactionID}>
export type RelayContents = $ReadOnly<{stellarID: TransactionID, sk: SecretKey, note: String}>
export type RelayDirection =
  | 0 // CLAIM_0
  | 1 // YANK_1

export type RequestDetails = $ReadOnly<{id: KeybaseRequestID, fromUser: Keybase1.UserVersion, toUser?: ?Keybase1.UserVersion, toAssertion: String, amount: String, asset?: ?Asset, currency?: ?OutsideCurrencyCode, fundingKbTxID: KeybaseTransactionID, status: RequestStatus}>
export type RequestDetailsLocal = $ReadOnly<{id: KeybaseRequestID, fromAssertion: String, fromCurrentUser: Boolean, toUserType: ParticipantType, toAssertion: String, amount: String, asset?: ?Asset, currency?: ?OutsideCurrencyCode, amountDescription: String, status: RequestStatus}>
export type RequestPost = $ReadOnly<{toUser?: ?Keybase1.UserVersion, toAssertion: String, amount: String, asset?: ?Asset, currency?: ?OutsideCurrencyCode}>
export type RequestStatus =
  | 0 // OK_0
  | 1 // CANCELED_1

export type RequestStatusMsg = $ReadOnly<{reqID: KeybaseRequestID}>
export type SecretKey = String
export type SendAssetChoiceLocal = $ReadOnly<{asset: Asset, enabled: Boolean, left: String, right: String, subtext: String}>
export type SendBannerLocal = $ReadOnly<{level: String, message: String, proofsChanged: Boolean}>
export type SendPaymentResLocal = $ReadOnly<{kbTxID: KeybaseTransactionID, pending: Boolean}>
export type SendResultCLILocal = $ReadOnly<{kbTxID: KeybaseTransactionID, txID: TransactionID}>
export type StellarServerDefinitions = $ReadOnly<{revision: Int, currencies: {[key: string]: OutsideCurrencyDefinition}}>
export type TimeMs = Long
export type TimeboundsRecommendation = $ReadOnly<{timeNow: Keybase1.UnixTime, timeout: Int64}>
export type TransactionID = String
export type TransactionStatus =
  | 0 // NONE_0
  | 1 // PENDING_1
  | 2 // SUCCESS_2
  | 3 // ERROR_TRANSIENT_3
  | 4 // ERROR_PERMANENT_4

export type UIPaymentReviewed = $ReadOnly<{bid: BuildPaymentID, seqno: Int, banners?: ?Array<SendBannerLocal>, nextButton: String}>
export type WalletAccountLocal = $ReadOnly<{accountID: AccountID, isDefault: Boolean, name: String, balanceDescription: String, seqno: String, currencyLocal: CurrencyLocal}>

export type IncomingCallMapType = {|
  'stellar.1.notify.paymentNotification'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.notify.paymentNotification'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn,
  'stellar.1.notify.paymentStatusNotification'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.notify.paymentStatusNotification'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn,
  'stellar.1.notify.requestStatusNotification'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.notify.requestStatusNotification'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn,
  'stellar.1.notify.accountDetailsUpdate'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.notify.accountDetailsUpdate'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn,
  'stellar.1.notify.pendingPaymentsUpdate'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.notify.pendingPaymentsUpdate'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn,
  'stellar.1.notify.recentPaymentsUpdate'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.notify.recentPaymentsUpdate'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn,
  'stellar.1.ui.paymentReviewed'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.ui.paymentReviewed'>, 'inParam'>> & {|sessionID: number|}) => IncomingReturn,
|}

export type CustomResponseIncomingCallMap = {|
  'stellar.1.ui.paymentReviewed'?: (params: $Exact<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.ui.paymentReviewed'>, 'inParam'>> & {|sessionID: number|}, response: {error: IncomingErrorCallback, result: ($PropertyType<$PropertyType<MessageTypes, 'stellar.1.ui.paymentReviewed'>, 'outParam'>) => void}) => IncomingReturn,
|}
declare export function localAcceptDisclaimerLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.acceptDisclaimerLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.acceptDisclaimerLocal'>, 'outParam'>>
declare export function localBuildPaymentLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.buildPaymentLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.buildPaymentLocal'>, 'outParam'>>
declare export function localBuildRequestLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.buildRequestLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.buildRequestLocal'>, 'outParam'>>
declare export function localCancelPaymentLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.cancelPaymentLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.cancelPaymentLocal'>, 'outParam'>>
declare export function localCancelRequestLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.cancelRequestLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.cancelRequestLocal'>, 'outParam'>>
declare export function localChangeDisplayCurrencyLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.changeDisplayCurrencyLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.changeDisplayCurrencyLocal'>, 'outParam'>>
declare export function localChangeWalletAccountNameLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.changeWalletAccountNameLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.changeWalletAccountNameLocal'>, 'outParam'>>
declare export function localCreateWalletAccountLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.createWalletAccountLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.createWalletAccountLocal'>, 'outParam'>>
declare export function localDeleteWalletAccountLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.deleteWalletAccountLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.deleteWalletAccountLocal'>, 'outParam'>>
declare export function localGetAccountAssetsLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.getAccountAssetsLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.getAccountAssetsLocal'>, 'outParam'>>
declare export function localGetDisplayCurrenciesLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.getDisplayCurrenciesLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.getDisplayCurrenciesLocal'>, 'outParam'>>
declare export function localGetDisplayCurrencyLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.getDisplayCurrencyLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.getDisplayCurrencyLocal'>, 'outParam'>>
declare export function localGetPaymentDetailsLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.getPaymentDetailsLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.getPaymentDetailsLocal'>, 'outParam'>>
declare export function localGetPaymentsLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.getPaymentsLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.getPaymentsLocal'>, 'outParam'>>
declare export function localGetPendingPaymentsLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.getPendingPaymentsLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.getPendingPaymentsLocal'>, 'outParam'>>
declare export function localGetRequestDetailsLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.getRequestDetailsLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.getRequestDetailsLocal'>, 'outParam'>>
declare export function localGetSendAssetChoicesLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.getSendAssetChoicesLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.getSendAssetChoicesLocal'>, 'outParam'>>
declare export function localGetWalletAccountLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.getWalletAccountLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.getWalletAccountLocal'>, 'outParam'>>
declare export function localGetWalletAccountSecretKeyLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.getWalletAccountSecretKeyLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.getWalletAccountSecretKeyLocal'>, 'outParam'>>
declare export function localGetWalletAccountsLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.getWalletAccountsLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.getWalletAccountsLocal'>, 'outParam'>>
declare export function localHasAcceptedDisclaimerLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.hasAcceptedDisclaimerLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.hasAcceptedDisclaimerLocal'>, 'outParam'>>
declare export function localIsAccountMobileOnlyLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.isAccountMobileOnlyLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.isAccountMobileOnlyLocal'>, 'outParam'>>
declare export function localLinkNewWalletAccountLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.linkNewWalletAccountLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.linkNewWalletAccountLocal'>, 'outParam'>>
declare export function localMakeRequestLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.makeRequestLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.makeRequestLocal'>, 'outParam'>>
declare export function localMarkAsReadLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.markAsReadLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.markAsReadLocal'>, 'outParam'>>
declare export function localSendPaymentLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.sendPaymentLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.sendPaymentLocal'>, 'outParam'>>
declare export function localSetAccountAllDevicesLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.setAccountAllDevicesLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.setAccountAllDevicesLocal'>, 'outParam'>>
declare export function localSetAccountMobileOnlyLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.setAccountMobileOnlyLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.setAccountMobileOnlyLocal'>, 'outParam'>>
declare export function localSetWalletAccountAsDefaultLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.setWalletAccountAsDefaultLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.setWalletAccountAsDefaultLocal'>, 'outParam'>>
declare export function localStartBuildPaymentLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.startBuildPaymentLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.startBuildPaymentLocal'>, 'outParam'>>
declare export function localStopBuildPaymentLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.stopBuildPaymentLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.stopBuildPaymentLocal'>, 'outParam'>>
declare export function localValidateAccountNameLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.validateAccountNameLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.validateAccountNameLocal'>, 'outParam'>>
declare export function localValidateSecretKeyLocalRpcPromise(params: $PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.validateSecretKeyLocal'>, 'inParam'>, waitingKey?: WaitingKey): Promise<$PropertyType<$PropertyType<MessageTypes, 'stellar.1.local.validateSecretKeyLocal'>, 'outParam'>>
// Not enabled calls. To enable add to enabled-calls.json: 'stellar.1.local.validateAccountIDLocal' 'stellar.1.local.getWalletAccountPublicKeyLocal' 'stellar.1.local.reviewPaymentLocal' 'stellar.1.local.setInflationDestinationLocal' 'stellar.1.local.getInflationDestinationLocal' 'stellar.1.local.balancesLocal' 'stellar.1.local.sendCLILocal' 'stellar.1.local.claimCLILocal' 'stellar.1.local.recentPaymentsCLILocal' 'stellar.1.local.paymentDetailCLILocal' 'stellar.1.local.walletInitLocal' 'stellar.1.local.walletDumpLocal' 'stellar.1.local.walletGetAccountsCLILocal' 'stellar.1.local.ownAccountLocal' 'stellar.1.local.importSecretKeyLocal' 'stellar.1.local.exportSecretKeyLocal' 'stellar.1.local.setDisplayCurrency' 'stellar.1.local.exchangeRateLocal' 'stellar.1.local.getAvailableLocalCurrencies' 'stellar.1.local.formatLocalCurrencyString' 'stellar.1.local.makeRequestCLILocal' 'stellar.1.local.lookupCLILocal' 'stellar.1.notify.paymentNotification' 'stellar.1.notify.paymentStatusNotification' 'stellar.1.notify.requestStatusNotification' 'stellar.1.notify.accountDetailsUpdate' 'stellar.1.notify.pendingPaymentsUpdate' 'stellar.1.notify.recentPaymentsUpdate' 'stellar.1.remote.balances' 'stellar.1.remote.details' 'stellar.1.remote.recentPayments' 'stellar.1.remote.pendingPayments' 'stellar.1.remote.markAsRead' 'stellar.1.remote.paymentDetails' 'stellar.1.remote.accountSeqno' 'stellar.1.remote.submitPayment' 'stellar.1.remote.submitRelayPayment' 'stellar.1.remote.submitRelayClaim' 'stellar.1.remote.acquireAutoClaimLock' 'stellar.1.remote.releaseAutoClaimLock' 'stellar.1.remote.nextAutoClaim' 'stellar.1.remote.isMasterKeyActive' 'stellar.1.remote.submitRequest' 'stellar.1.remote.requestDetails' 'stellar.1.remote.cancelRequest' 'stellar.1.remote.setInflationDestination' 'stellar.1.remote.ping' 'stellar.1.ui.paymentReviewed'
