apply plugin: "com.android.application"
apply plugin: "com.facebook.react"
apply plugin: 'com.github.triplet.play'

// KB: app version
def VERSION_NAME = "6.5.0"

// KB: Number of commits, like ios
Integer getVersionCode() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-list', 'HEAD', '--count'
        standardOutput = stdout
    }
    return Integer.parseInt(stdout.toString().trim()) + 10517780 // plus bump it so its above the old version code
}

project.logger.lifecycle('Version code: ' + getVersionCode().toString())

def nodeModules = "../../node_modules"
def defaultDir = file("$nodeModules/react-native/android")
def androidSourcesDir = defaultDir.parentFile.toString()
def prebuiltDir = "$buildDir/react-native-0*/jni"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */

react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("index.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace "io.keybase.ossifrage"
    defaultConfig {
        applicationId "io.keybase.ossifrage"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode getVersionCode()
        versionName VERSION_NAME
        // KB added
        multiDexEnabled true
    }

    signingConfigs {
        release {
            storeFile file(KB_RELEASE_STORE_FILE)
            storePassword KB_RELEASE_STORE_PASSWORD
            keyAlias KB_RELEASE_KEY_ALIAS
            keyPassword KB_RELEASE_KEY_PASSWORD
        }
    }

    buildTypes {
        debug {
        }

        storyBook.initWith(buildTypes.debug)
        storyBook {
            applicationIdSuffix ".storybook"
            matchingFallbacks = ['debug']
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        releaseUnsigned.initWith(buildTypes.release)
        releaseUnsigned {
            applicationIdSuffix ".unsigned"
            signingConfig buildTypes.debug.signingConfig
            matchingFallbacks = ['release']
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.versionCodeOverride = getVersionCode()
        }
    }
    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }

   play {
       track = 'internal'
       serviceAccountCredentials = file(KB_SERVICE_ACCT_JSON)
   }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    implementation 'androidx.work:work-runtime:2.8.1'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "com.google.firebase:firebase-messaging:22.0.0"
    implementation "com.facebook.fresco:animated-gif:2.6.0"
    implementation "com.facebook.fresco:fresco:2.6.0"
    implementation 'org.msgpack:msgpack-core:0.9.0'
    implementation project(':keybaselib')
    implementation 'com.android.installreferrer:installreferrer:2.2'
    implementation "me.leolin:ShortcutBadger:1.1.22@aar"
    implementation "androidx.lifecycle:lifecycle-common-java8:2.6.1"
    implementation "androidx.lifecycle:lifecycle-process:2.6.1"
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
// This requires a google-services.json file locally.  Drop it in
// android/app/src/debug/google-services.json
// android/app/src/releaseUnsigned/google-services.json
apply plugin: 'com.google.gms.google-services'
