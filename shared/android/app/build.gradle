apply plugin: "com.android.application"
// KB:
apply plugin: 'com.github.triplet.play'
apply from: '../../node_modules/react-native-unimodules/gradle.groovy'

import com.android.build.OutputFile

// KB: app version
def VERSION_NAME = "5.6.1"

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // https://facebook.github.io/react-native/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

// KB:
project.ext.react = [
    // the root of your project, i.e. where "package.json" lives
    root: "../../",
    enableHermes: KB_USEHERMES == 'true',  // clean and rebuild if changing
    enableV8: KB_USEV8 == 'true',  // clean and rebuild if changing
]


apply from: "../../node_modules/react-native/react.gradle"

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/** The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'
/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);
def enableV8 = project.ext.react.get("enableV8", false);

// KB: Number of commits, like ios
def Integer getVersionCode() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-list', 'HEAD', '--count'
        standardOutput = stdout
    }
    return Integer.parseInt(stdout.toString().trim()) + 10516799 // plus bump it so its above the old version code
}

project.logger.lifecycle('Version code: ' + getVersionCode().toString())

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
    // KB:
        applicationId "io.keybase.ossifrage"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
    // KB:
        versionCode getVersionCode()
    // KB:
        versionName VERSION_NAME
    // KB: our binary is too big
        multiDexEnabled true
    }

    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }

    // KB:
    signingConfigs {
        release {
            storeFile file(KB_RELEASE_STORE_FILE)
            storePassword KB_RELEASE_STORE_PASSWORD
            keyAlias KB_RELEASE_KEY_ALIAS
            keyPassword KB_RELEASE_KEY_PASSWORD
        }
    }

    buildTypes {
        // KB:
        debug {
            // applicationIdSuffix ".debug"
        }

        // KB:
        storyBook.initWith(buildTypes.debug)
        // KB:
        storyBook {
            applicationIdSuffix ".storybook"
            matchingFallbacks = ['debug']
        }
        release {
            // KB:
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        // KB:
        releaseUnsigned.initWith(buildTypes.release)
        // KB:
        releaseUnsigned {
            applicationIdSuffix ".unsigned"
            signingConfig buildTypes.debug.signingConfig
            matchingFallbacks = ['release']
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.versionCodeOverride = getVersionCode()
        }
    }

    packagingOptions {
        if (enableV8) {
            // Make sure libjsc.so does not packed in APK
            exclude "**/libjsc.so"
        }
    }
}

// KB:
play {
    track = 'internal'
    serviceAccountCredentials = file(KB_SERVICE_ACCT_JSON)
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.facebook.react:react-native:+"  // From node_modules

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else if (enableV8) {
        // Add v8-android - prebuilt libv8.so into APK
        implementation 'org.chromium:v8-android:+'
    } else {
        implementation jscFlavor
    }

    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "com.google.firebase:firebase-messaging:17.3.0" // sync with firebaseVersion in gradle.properties
    implementation "com.facebook.fresco:animated-gif:1.13.0"
    implementation "com.facebook.fresco:fresco:1.13.0"
    implementation "com.evernote:android-job:1.2.6"
    implementation 'org.msgpack:msgpack:0.6.12'
    implementation project(':keybaselib')
    implementation 'com.android.installreferrer:installreferrer:1.0'

    addUnimodulesDependencies([modulesPaths: ['../../node_modules']])
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
