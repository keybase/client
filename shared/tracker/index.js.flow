// @flow
import {Component} from 'react'

import type {SimpleProofState, UserInfo, Proof} from '../constants/types/tracker'

// TODO we don't need both of these props
export type TrackerProps = {
  actionBarReady: boolean,
  closed: boolean,
  currentlyFollowing: boolean,
  inviteLink?: ?string,
  isPrivate?: boolean,
  lastAction: ?('followed' | 'refollowed' | 'unfollowed' | 'error'),
  loading: boolean,
  loggedIn: boolean,
  myUsername: string,
  name?: string,
  nonUser: ?boolean,
  onChat: () => void,
  onClose: () => void,
  onFollow: () => void,
  onIgnore: () => void,
  onRefollow: () => void,
  onUnfollow: () => void,
  parentProps?: Object,
  proofs: Array<Proof>,
  reason: string,
  serviceName?: string,
  trackerState: SimpleProofState,
  userInfo: ?UserInfo,
  username: string,
  waiting: boolean,
  onClickAvatar: () => void,
  onClickFollowers: () => void,
  onClickFollowing: () => void,
  errorMessage: ?string,
  onRetry: ?() => void,
}

export type Props = {|
  loading: boolean,
  currentlyFollowing: boolean,
  inviteLink?: ?string,
  isPrivate?: boolean,
  lastAction: ?('followed' | 'refollowed' | 'unfollowed' | 'error'),
  loggedIn: boolean,
  myUsername?: string,
  name?: string,
  nonUser?: ?boolean,
  onChat: () => void,
  onClose: () => void,
  onFollow: () => void,
  onIgnore: () => void,
  onRefollow: () => void,
  onUnfollow: () => void,
  proofs: Array<Proof>,
  reason: string,
  serviceName?: string,
  trackerState: SimpleProofState,
  userInfo: ?UserInfo,
  username: string,
  waiting: boolean,
  afterMount?: any,
  loading: boolean,
  actionBarReady: boolean,
  onClickAvatar: () => void,
  onClickFollowers: () => void,
  onClickFollowing: () => void,
  errorMessage: ?string,
  onRetry: ?() => void,

  // Optional showcased team props
  _checkRequestedAccess: string => void,
  _loadTeams: () => void,
  _onSetTeamJoinError: string => void,
  _onSetTeamJoinSuccess: boolean => void,
  description?: string,
  following?: {[key: string]: true},
  memberCount?: number,
  onHidden?: () => void,
  onJoinTeam?: string => void,
  onSetSelectedTeamRect: (rect?: ?any) => void,
  onUpdateSelectedTeam: (teamname: string) => void,
  onUserClick?: string => void,
  openTeam?: boolean,
  publicAdmins?: Array<string>,
  publicAdminsOthers?: number,
  selectedTeamRect?: any,
  showTeam?: Object,
  teamJoinError?: string,
  teamJoinSuccess?: boolean,
  teamname?: string,
  youAreInTeam?: boolean,
  youHaveRequestedAccess?: boolean,
|}

export default class Render extends Component<Props> {}
