require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}
ENV['RCT_USE_RN_DEP'] = '1' if podfile_properties['ios.buildReactNativeFromSource'] != 'true' && podfile_properties['newArchEnabled'] != 'false'
ENV['RCT_USE_PREBUILT_RNCORE'] = '1' if podfile_properties['ios.buildReactNativeFromSource'] != 'true' && podfile_properties['newArchEnabled'] != 'false'
platform :ios,  min_ios_version_supported

prepare_react_native_project!

# Store config for use in post_install
$react_native_config = nil

target 'Keybase' do
  use_expo_modules!
  config = use_native_modules!
  $react_native_config = config

  use_frameworks! :linkage => :static

  pod 'KBCommon', :path => '../../rnmodules/kb-common'

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => true,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
  )
end

target 'KeybaseShare' do
  pod 'KBCommon', :path => '../../rnmodules/kb-common'
  use_frameworks! :linkage => :static
end

post_install do |installer|
  # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
  react_native_post_install(
    installer,
    $react_native_config[:reactNativePath],
    :mac_catalyst_enabled => false,
    # :ccache_enabled => true
  )

  # Convert @import to #import in node_modules since modules are disabled
  # This fixes @import statements in React Native dependencies
  node_modules_path = File.join(Dir.pwd, '..', 'node_modules')
  Dir.glob("#{node_modules_path}/**/*.{m,mm}").each do |file_path|
    next unless File.file?(file_path)

    content = File.read(file_path)
    original_content = content.dup

    # Convert @import statements to #import
    # e.g., @import SystemConfiguration.CaptiveNetwork; -> #import <SystemConfiguration/CaptiveNetwork.h>
    content.gsub!(/@import\s+([^;]+);/) do
      framework_path = $1.strip
      parts = framework_path.split('.')
      if parts.length == 1
        # @import Foundation; -> #import <Foundation/Foundation.h>
        "#import <#{parts[0]}/#{parts[0]}.h>"
      else
        # @import SystemConfiguration.CaptiveNetwork; -> #import <SystemConfiguration/CaptiveNetwork.h>
        "#import <#{parts[0]}/#{parts[1]}.h>"
      end
    end

    if content != original_content
      File.write(file_path, content)
      puts "âœ“ Fixed @import in: #{File.basename(file_path)}"
    end
  end

  # Disable Clang modules at project level for all pods
  installer.pods_project.build_configurations.each do |build_config|
    build_config.build_settings['CLANG_ENABLE_MODULES'] = 'NO'
  end

  # Enable pointer authentication for all pods
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |build_config|
      build_config.build_settings['CLANG_ENABLE_MODULES'] = 'NO'
      build_config.build_settings['ENABLE_POINTER_AUTHENTICATION'] = 'YES'
      build_config.build_settings['ENABLE_ENHANCED_SECURITY'] = 'YES'

      # WORKAROUND: iOS SDK 18 / Xcode 16 malloc header bug with pointer authentication
      #
      # When ENABLE_POINTER_AUTHENTICATION = YES, the iOS 18 SDK's malloc/_malloc_type.h
      # header contains a bug where it references undefined _backdeploy symbols.
      # This causes compilation to fail with:
      #   error: use of undeclared identifier 'malloc_type_zone_malloc_with_options_backdeploy'
      #
      # The workarounds below are needed until Apple fixes this SDK bug:
      # 1. Disable explicit modules to prevent precompilation before our fix applies
      # 2. Define _MALLOC_TYPED as empty to remove the buggy attribute
      # 3. Pass the flag to both C and Swift compilation
      #
      # NOTE: CLANG_ENABLE_MODULES = NO is also set in the main project targets
      # This makes builds slower but is necessary for pointer authentication to work.
      #
      # Related: Can be removed when Apple releases a fixed SDK in future Xcode updates

      build_config.build_settings['SWIFT_ENABLE_EXPLICIT_MODULES'] = 'NO'

      build_config.build_settings['OTHER_CFLAGS'] ||= ['$(inherited)']
      build_config.build_settings['OTHER_CFLAGS'] << '-D_MALLOC_TYPED(x,y)='

      build_config.build_settings['OTHER_SWIFT_FLAGS'] ||= ['$(inherited)']
      build_config.build_settings['OTHER_SWIFT_FLAGS'] << '-Xcc'
      build_config.build_settings['OTHER_SWIFT_FLAGS'] << '-D_MALLOC_TYPED(x,y)='
    end
  end
end
