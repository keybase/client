require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}
ENV['RCT_USE_RN_DEP'] = '1' if podfile_properties['ios.buildReactNativeFromSource'] != 'true' && podfile_properties['newArchEnabled'] != 'false'
ENV['RCT_USE_PREBUILT_RNCORE'] = '1' if podfile_properties['ios.buildReactNativeFromSource'] != 'true' && podfile_properties['newArchEnabled'] != 'false'
platform :ios,  min_ios_version_supported

prepare_react_native_project!

# Store config for use in post_install
$react_native_config = nil

target 'Keybase' do
  use_expo_modules!
  config = use_native_modules!
  $react_native_config = config

  use_frameworks! :linkage => :static

  pod 'KBCommon', :path => '../../rnmodules/kb-common'

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => true,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
  )
end

target 'KeybaseShare' do
  pod 'KBCommon', :path => '../../rnmodules/kb-common'
  use_frameworks! :linkage => :static
end

post_install do |installer|
  # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
  react_native_post_install(
    installer,
    $react_native_config[:reactNativePath],
    :mac_catalyst_enabled => false,
    # :ccache_enabled => true
  )

  # Enable pointer authentication for all pods
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |build_config|
      build_config.build_settings['ENABLE_POINTER_AUTHENTICATION'] = 'YES'
      build_config.build_settings['ENABLE_ENHANCED_SECURITY'] = 'YES'

      # Workaround for iOS SDK 18/Xcode 16 malloc header bug with pointer authentication
      # The SDK headers reference _backdeploy variants that don't exist
      build_config.build_settings['OTHER_CFLAGS'] ||= ['$(inherited)']
      build_config.build_settings['OTHER_CFLAGS'] << '-D_MALLOC_TYPED(x,y)='
    end
  end
end
