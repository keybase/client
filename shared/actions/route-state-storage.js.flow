// @flow

import type {Dispatch, GetState} from '../constants/types/flux'

// RouteStateStorage is a platform-specific implementation of route
// state storage, e.g. storing the current loaded tab so that it is
// restored on the next load.
//
// Usage:
//
//   const routeStateStorage = new RouteStateStorage()
//
//   // Once (or more) on app load:
//   await dispatch(routeStateStorage.load)
//   // Read e.g. config.initialTab from the state and navigate to it.
//
//   // On a tab switch after the initialTab has been navigated to:
//   dispatch(routeStateStorage.store)
//
//   // On logout.
//   dispatch(routeStateStorage.clear)
//
// Implementations should ignore stores that happen when
// getState().routeTree.loggedInUserNavigated is false, since that is
// set when a user has performed a navigation action, or the state
// from .load has been applied, and we don't want to store any state
// until either of those two events happens.
//
// Implementations should take care to ensure that multiple in-flight
// loads can happen concurrently, though.
declare class RouteStateStorage {
  // load returns a promise that, when resolved, means that the route
  // state has been loaded from the storage into the redux state.
  load: (dispatch: Dispatch, getState: GetState) => Promise<void>;
  // store returns a promise that, when resolved, means that the route
  // state in the redux state has been stored.
  store: (dispatch: Dispatch, getState: GetState) => Promise<void>;
  // store returns a promise that, when resolved, means that the route
  // state has been cleared.
  clear: (dispatch: Dispatch, getState: GetState) => Promise<void>;
}

export {RouteStateStorage}
