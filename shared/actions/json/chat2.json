{
  "prelude": [
    "import * as RPCChatTypes from '../constants/types/rpc-chat-gen'",
    "import * as Types from '../constants/types/chat2'",
    "import * as TeamsTypes from '../constants/types/teams'",
    "import HiddenString from '../util/hidden-string'",
    "import {RetentionPolicy} from '../constants/types/retention-policy'",
    "import {AmpTracker} from '../chat/audio/amptracker'"
  ],
  "actions": {
    "toggleSmallTeamsExpanded": {},
    // Deselct if this is still selected, used in nav2 when you go away from a chat convo
    "deselectConversation": {
      "ifConversationIDKey": "Types.ConversationIDKey"
    },
    // Select a conversation (or leave nothing selected)
    "selectConversation": {
      "conversationIDKey": "Types.ConversationIDKey",
      // why this happened, sometimes there's different side effects
      "reason": [
        "'focused'", // nav focus changed
        "'clearSelected'", // deselect
        "'desktopNotification'", // clicked notification
        "'createdMessagePrivately'", // messaging privately and maybe made it
        "'extension'", // from a notification from iOS share extension
        "'files'", // from the Files tab
        "'findNewestConversation'", // find a new chat to select
        "'inboxBig'", // inbox row
        "'inboxFilterArrow'", // arrow keys in inbox filter
        "'inboxFilterChanged'", // inbox filter made first one selected
        "'inboxSmall'", // inbox row
        "'inboxNewConversation'", // new conversation row
        "'inboxSearch'", // selected from inbox seaech
        "'jumpFromReset'", // from older reset convo
        "'jumpToReset'", // going to an older reset convo
        "'justCreated'", // just made it and select it
        "'manageView'", // clicked from manage screen
        "'previewResolved'", // did a preview and are now selecting it
        "'push'", // from a push
        "'savedLastState'", // last seen chat tab
        "'startFoundExisting'", // starting a conversation and found one already
        "'teamChat'", // from team
        "'addedToChannel'", // just added people to this channel
        "'teamMention'" // from team mention
      ],
      "navKey?": "string"
    },
    // Got an error while creating a conversation.
    "conversationErrored": {
      "message": "string"
    },
    // Select an existing conversation or setup an empty one. Can either be adhoc or a tlf (adhoc or team)
    // fromAReset means you were in a reset kbfs convo and you want to make a new one
    // Chatting from external places in the app should usually call this
    // if you want to preview a team chat (and add it to the inbox use selectConversation instead)
    "previewConversation": {
      "participants?": "Array<string>",
      "teamname?": "string",
      "channelname?": "string",
      "conversationIDKey?": "Types.ConversationIDKey", // we only use this when we click on channel mentions. we could maybe change that plumbing but keeping it for now
      "reason": [
        "'manageView'",
        "'messageLink'",
        "'resetChatWithoutThem'",
        "'tracker'",
        "'teamHeader'",
        "'files'",
        "'teamInvite'",
        "'fromAReset'",
        "'profile'",
        "'teamMember'",
        "'teamHeader'",
        "'convertAdHoc'",
        "'memberView'",
        "'newChannel'",
        "'transaction'",
        "'sentPayment'",
        "'requestedPayment'",
        "'teamMention'",
        "'appLink'",
        "'search'",
        "'journeyCardPopular'"
      ]
    },
    "createConversation": {
      "_description": "Actually start a conversation",
      "participants": "Array<string>"
    },
    "changeFocus": {
      "_description": "Where we want our focus for keypresses",
      "nextFocus": "Types.Focus"
    },
    // Update our badges in the nav
    "badgesUpdated": {
      "conversations": "Array<RPCTypes.BadgeConversationInfo>"
    },
    // Refresh the inbox
    "inboxRefresh": {
      "reason": [
        "'bootstrap'",
        "'componentNeverLoaded'",
        "'inboxStale'",
        "'inboxSyncedClear'",
        "'inboxSyncedUnknown'",
        "'joinedAConversation'",
        "'leftAConversation'",
        "'teamTypeChanged'",
        "'maybeKickedFromTeam'",
        "'widgetRefresh'"
      ]
    },
    // We want to unbox an inbox row
    "metaNeedsUpdating": {
      "conversationIDKeys": "Array<Types.ConversationIDKey>",
      "reason": "string"
    },
    // Internal action: pull more metas from the queue to request
    "metaHandleQueue": {},
    // About to try and unbox some inbox rows
    "metaRequestingTrusted": {
      "conversationIDKeys": "Array<Types.ConversationIDKey>"
    },
    // Actually unboxing
    "metaRequestTrusted": {
      "force?": "boolean",
      "noWaiting?": "boolean",
      "reason": [
        "'refreshPreviousSelected'",
        "'requestTeamsUnboxing'",
        "'inboxSynced'",
        "'setConvRetention'",
        "'subTeamRename'",
        "'tlfFinalize'",
        "'threadStale'",
        "'membersUpdate'",
        "'scroll'",
        "'ensureSelectedMeta'",
        "'ensureWidgetMetas'",
        "'inboxSearchResults'"
      ],
      "conversationIDKeys": "Array<Types.ConversationIDKey>"
    },
    // Got some new inbox rows
    "metasReceived": {
      "metas": "Array<Types.ConversationMeta>",
      "removals?": "Array<Types.ConversationIDKey>", // convs to remove
      "fromInboxRefresh?": "boolean", // If true from an inbox refresh
      "initialTrustedLoad?": "boolean" // If true this is the first trusted inbox load
    },
    "clearMetas": {},
    "clearMessages": {},
    // Got some inbox errors
    "metaReceivedError": {
      "conversationIDKey": "Types.ConversationIDKey",
      "error": "RPCChatTypes.InboxUIItemError | null",
      "username": "string | null"
    },
    // We got a status update saying it was blocked or ignored
    "metaDelete": {
      "conversationIDKey": "Types.ConversationIDKey",
      "selectSomethingElse": "boolean"
    },
    // We updated our view of a thread
    "updateMoreToLoad": {
      "conversationIDKey": "Types.ConversationIDKey",
      "moreToLoad": "boolean"
    },
    // Add a new message
    "messagesAdd": {
      // sent = we sent it
      // incoming = a streaming message
      // threadLoad = we're loading more messages on select / scroll
      "context": [
        "{type: 'sent'}",
        "{type: 'incoming'}",
        "{type: 'threadLoad', conversationIDKey: Types.ConversationIDKey}"
      ],
      "messages": "Array<Types.Message>",
      // true if these should be the only messages we know about
      "shouldClearOthers?": "boolean",
      "centeredMessageIDs?": "Array<{conversationIDKey: Types.ConversationIDKey, messageID: Types.MessageID, highlightMode: Types.CenterOrdinalHighlightMode}>",
      "forceContainsLatestCalc?": "boolean"
    },
    // Got an error sending a message
    "messageErrored": {
      "conversationIDKey": "Types.ConversationIDKey",
      "reason": "string",
      "errorTyp": "number | null",
      "outboxID": "Types.OutboxID"
    },
    // Start editing a message / or edit the last message / or clear editing
    "messageSetEditing": {
      "conversationIDKey": "Types.ConversationIDKey",
      "ordinal": "Types.Ordinal | null",
      "editLastUser?": "string"
    },
    // Start quoting a message / or clear quoting
    "messageSetQuoting": {
      "sourceConversationIDKey": "Types.ConversationIDKey",
      "targetConversationIDKey": "Types.ConversationIDKey",
      "ordinal": "Types.Ordinal"
    },
    // Reply privately to a message with quoting
    "messageReplyPrivately": {
      "sourceConversationIDKey": "Types.ConversationIDKey",
      "ordinal": "Types.Ordinal"
    },
    // Submit an edit to the daemon
    "messageEdit": {
      "conversationIDKey": "Types.ConversationIDKey",
      "ordinal": "Types.Ordinal",
      "text": "HiddenString"
    },
    // Update a message which changed
    "messageWasEdited": {
      "conversationIDKey": "Types.ConversationIDKey",
      "messageID": "RPCChatTypes.MessageID",
      "text": "HiddenString",
      "mentionsAt": "Set<string>",
      "mentionsChannel": "'none' | 'all' | 'here'",
      "mentionsChannelName": "Map<string, Types.ConversationIDKey>"
    },
    "pendingMessageWasEdited": {
      "conversationIDKey": "Types.ConversationIDKey",
      "ordinal": "Types.Ordinal",
      "text": "HiddenString"
    },
    // Mark a message as deleted
    "messagesWereDeleted": {
      "conversationIDKey": "Types.ConversationIDKey",
      "messageIDs?": "Array<RPCChatTypes.MessageID>",
      "upToMessageID?": "RPCChatTypes.MessageID", // expunge calls give us a message we should delete up to (don't delete it)
      "deletableMessageTypes?": "Set<Types.MessageType>", // expunge calls don't delete _all_ messages, only these types
      "ordinals?": "Array<Types.Ordinal>"
    },
    "messagesExploded": {
      "_description": "Exploding messages expired or were manually detonated.",
      "conversationIDKey": "Types.ConversationIDKey",
      "messageIDs": "Array<RPCChatTypes.MessageID>",
      "explodedBy?": "string"
    },
    // Delete a message
    "messageDelete": {
      "conversationIDKey": "Types.ConversationIDKey",
      "ordinal": "Types.Ordinal"
    },
    // Deletes all messages
    "messageDeleteHistory": {
      "conversationIDKey": "Types.ConversationIDKey"
    },
    // Load some more messages for a conversation
    "loadOlderMessagesDueToScroll": {
      "conversationIDKey": "Types.ConversationIDKey"
    },
    "loadNewerMessagesDueToScroll": {
      "conversationIDKey": "Types.ConversationIDKey"
    },
    "loadMessagesCentered": {
      "conversationIDKey": "Types.ConversationIDKey",
      "messageID": "Types.MessageID",
      "highlightMode": "Types.CenterOrdinalHighlightMode"
    },
    // Show a desktop notification
    "desktopNotification": {
      "conversationIDKey": "Types.ConversationIDKey",
      "author": "string",
      "body": "string"
    },
    // Send a text message
    "messageSend": {
      "conversationIDKey": "Types.ConversationIDKey",
      "text": "HiddenString",
      "replyTo?": "Types.MessageID",
      "waitingKey?": "string"
    },
    "messageSendByUsernames": {
      "usernames": "string",
      "text": "HiddenString",
      "waitingKey?": "string"
    },
    "toggleLocalReaction": {
      "_description": "Toggle a reaction in the store.",
      "conversationIDKey": "Types.ConversationIDKey",
      "emoji": "string",
      "targetOrdinal": "Types.Ordinal",
      "username": "string"
    },
    "toggleMessageReaction": {
      "_description": "Tell the service to toggle a reaction on a message.",
      "conversationIDKey": "Types.ConversationIDKey",
      "emoji": "string",
      "ordinal": "Types.Ordinal"
    },
    "updateReactions": {
      "_description": "The service sent us an update for the reaction map of a message.",
      "conversationIDKey": "Types.ConversationIDKey",
      "updates": "Array<{targetMsgID: RPCChatTypes.MessageID, reactions: Types.Reactions}>"
    },
    // Resend a message
    "messageRetry": {
      "conversationIDKey": "Types.ConversationIDKey",
      "outboxID": "Types.OutboxID"
    },
    "joinConversation": {
      "conversationIDKey": "Types.ConversationIDKey"
    },
    "leaveConversation": {
      "conversationIDKey": "Types.ConversationIDKey",
      "dontNavigateToInbox?": "boolean"
    },
    "muteConversation": {
      "conversationIDKey": "Types.ConversationIDKey",
      "muted": "boolean"
    },
    "openFolder": {
      "conversationIDKey": "Types.ConversationIDKey"
    },
    // If an implied team chat member resets you can start a new chat w/o any reset people
    "resetChatWithoutThem": {
      "conversationIDKey": "Types.ConversationIDKey"
    },
    // If an implied team chat member resets you can add them back in
    "resetLetThemIn": {
      "conversationIDKey": "Types.ConversationIDKey",
      "username": "string"
    },
    // The user has selected an attachment with a preview
    "attachmentPreviewSelect": {
      "message": "Types.MessageAttachment"
    },
    // We want to save an attachment to the local disk
    "attachmentDownload": {
      "message": "Types.Message"
    },
    // Saving an attachment to mobile storage
    "attachmentMobileSave": {
      "conversationIDKey": "Types.ConversationIDKey",
      "ordinal": "Types.Ordinal"
    },
    // Saving an attachment to mobile storage has finished
    "attachmentMobileSaved": {
      "conversationIDKey": "Types.ConversationIDKey",
      "ordinal": "Types.Ordinal"
    },
    // Update the loading bars
    "attachmentLoading": {
      "conversationIDKey": "Types.ConversationIDKey",
      "message": "Types.Message",
      "ratio": "number", // 0-1
      "isPreview": "boolean"
    },
    // We saved an attachment to the local disk
    "attachmentDownloaded": {
      "message": "Types.Message",
      "error?": "string",
      "path?": "string"
    },
    // We want to upload some attachments
    "attachmentsUpload": {
      "conversationIDKey": "Types.ConversationIDKey",
      "paths": "Array<Types.PathAndOutboxID>",
      "titles": "Array<string>"
    },
    // Update progress on an upload
    "attachmentUploading": {
      "conversationIDKey": "Types.ConversationIDKey",
      "outboxID": "Types.OutboxID",
      "ratio": "number" // 0-1
    },
    // We're done uploading
    "attachmentUploaded": {
      "conversationIDKey": "Types.ConversationIDKey",
      "ordinal": "Types.Ordinal"
    },
    // Image data pasted into a conversation
    "attachmentPasted": {
      "conversationIDKey": "Types.ConversationIDKey",
      "data": "Buffer"
    },
    "attachmentFullscreenSelection": {
      "autoPlay": "boolean",
      "message": "Types.Message"
    },
    "attachmentFullscreenNext": {
      "conversationIDKey": "Types.ConversationIDKey",
      "messageID": "Types.MessageID",
      "backInTime": "boolean"
    },
    // We got an uploaded attachment, while online this is like an edit of the placeholder
    "messageAttachmentUploaded": {
      "conversationIDKey": "Types.ConversationIDKey",
      "placeholderID": "RPCChatTypes.MessageID",
      "message": "Types.MessageAttachment"
    },
    // Tell server we're typing
    "sendTyping": {
      "conversationIDKey": "Types.ConversationIDKey",
      "typing": "boolean"
    },
    // On startup we're automatically loading a thread sometimes. When we first view it we should
    // go through our marking as read logic
    "markInitiallyLoadedThreadAsRead": {
      "conversationIDKey": "Types.ConversationIDKey"
    },
    // Server told us a conversation is out of date
    "markConversationsStale": {
      "conversationIDKeys": "Array<Types.ConversationIDKey>",
      "updateType": "RPCChatTypes.StaleUpdateType"
    },
    // Navigation helpers. Nav is slightly different on mobile / desktop
    "navigateToInbox": {},
    "navigateToThread": {},
    // Share to external app on mobile
    "messageAttachmentNativeShare": {
      "message": "Types.Message"
    },
    // Save on mobile (camera roll)
    "messageAttachmentNativeSave": {
      "message": "Types.Message"
    },
    // We're changing the notification settings
    "updateNotificationSettings": {
      "conversationIDKey": "Types.ConversationIDKey",
      "notificationsDesktop": "Types.NotificationsType",
      "notificationsMobile": "Types.NotificationsType",
      "notificationsGlobalIgnoreMentions": "boolean"
    },
    // We get new notification settings
    "notificationSettingsUpdated": {
      "conversationIDKey": "Types.ConversationIDKey",
      "settings": "RPCChatTypes.ConversationNotificationInfo"
    },
    // Block a conversation
    "blockConversation": {
      "conversationIDKey": "Types.ConversationIDKey",
      "reportUser": "boolean"
    },
    // Hide a conversation until future activity
    "hideConversation": {
      "conversationIDKey": "Types.ConversationIDKey"
    },
    "unhideConversation": {
      "conversationIDKey": "Types.ConversationIDKey"
    },
    // Conversation was loaded and is offline
    "setConversationOffline": {
      "conversationIDKey": "Types.ConversationIDKey",
      "offline": "boolean"
    },
    "setConvRetentionPolicy": {
      "_description": "Sets the retention policy for a conversation.",
      "conversationIDKey": "Types.ConversationIDKey",
      "policy": "RetentionPolicy"
    },
    "updateConvRetentionPolicy": {
      "_description": "Consume a service notification that a conversation's retention policy has been updated",
      "meta": "Types.ConversationMeta"
    },
    "updateTeamRetentionPolicy": {
      "_description": "Consume a service notification that a team retention policy was updated",
      "metas": "Array<Types.ConversationMeta>"
    },
    "setConvExplodingMode": {
      "_description": "Set the remote exploding mode for a conversation.",
      "conversationIDKey": "Types.ConversationIDKey",
      "seconds": "number"
    },
    "setExplodingModeLock": {
      "_description": "Set a lock on the exploding mode for a conversation.",
      "conversationIDKey": "Types.ConversationIDKey",
      "unset?": "boolean"
    },
    "updateConvExplodingModes": {
      "_description": "Handle an update to our conversation exploding modes.",
      "modes": "Array<{conversationIDKey: Types.ConversationIDKey, seconds: number}>"
    },
    "setWalletsOld": {
      "_description": "Set that wallets in chat is not new."
    },
    "handleSeeingWallets": {
      "_description": "The user has interacted with wallets in chat."
    },
    "staticConfigLoaded": {
      "_description": "Static configuration info was loaded from the service.",
      "staticConfig": "Types.StaticConfig"
    },
    "setMinWriterRole": {
      "_description": "Set the minimum role required to write into a conversation. Valid only for team conversations.",
      "conversationIDKey": "Types.ConversationIDKey",
      "role": "TeamsTypes.TeamRoleType"
    },
    "saveMinWriterRole": {
      "_description": "Update the minWriterRole stored with the conversation metadata.",
      "conversationIDKey": "Types.ConversationIDKey",
      "role": "TeamsTypes.TeamRoleType",
      "cannotWrite": "boolean"
    },
    "openChatFromWidget": {
      "conversationIDKey?": "Types.ConversationIDKey"
    },
    "paymentInfoReceived": {
      "_description": "We received payment info for a sendPayment message",
      "conversationIDKey": "Types.ConversationIDKey",
      "messageID": "RPCChatTypes.MessageID",
      "paymentInfo": "Types.ChatPaymentInfo"
    },
    "requestInfoReceived": {
      "_description": "We received request info for a requestPayment message",
      "conversationIDKey": "Types.ConversationIDKey",
      "messageID": "RPCChatTypes.MessageID",
      "requestInfo": "Types.ChatRequestInfo"
    },
    "prepareFulfillRequestForm": {
      "_description": "Prime data to fulfill this message's request and navigate to the send form.",
      "conversationIDKey": "Types.ConversationIDKey",
      "ordinal": "Types.Ordinal"
    },
    "unfurlResolvePrompt": {
      "_description": "Response to an unfurl prompt",
      "conversationIDKey": "Types.ConversationIDKey",
      "messageID": "Types.MessageID",
      "domain": "string",
      "result": "RPCChatTypes.UnfurlPromptResult"
    },
    "unfurlTogglePrompt": {
      "_description": "Add an unfurl prompt to a message",
      "conversationIDKey": "Types.ConversationIDKey",
      "messageID": "Types.MessageID",
      "domain": "string",
      "show": "boolean"
    },
    "unfurlRemove": {
      "_description": "Remove an unfurl",
      "conversationIDKey": "Types.ConversationIDKey",
      "messageID": "Types.MessageID"
    },
    "unsentTextChanged": {
      "_description": "Unsent text changed",
      "conversationIDKey": "Types.ConversationIDKey",
      "text": "HiddenString"
    },
    "updateMessages": {
      "_description": "Update messages that we might have in the store",
      "conversationIDKey": "Types.ConversationIDKey",
      "messages": "Array<{messageID: Types.MessageID, message: Types.Message}>"
    },
    "giphySend": {
      "_description": "send a message from Giphy search",
      "conversationIDKey": "Types.ConversationIDKey",
      "url": "HiddenString"
    },
    "giphyGotSearchResult": {
      "_description": "Giphy search results obtained",
      "conversationIDKey": "Types.ConversationIDKey",
      "results": "RPCChatTypes.GiphySearchResults"
    },
    "giphyToggleWindow": {
      "_description": "Toggle Giphy search preview window",
      "conversationIDKey": "Types.ConversationIDKey",
      "show": "boolean",
      "clearInput": "boolean"
    },
    "clearPaymentConfirmInfo": {
      "_description": "Clear data for payment confirm modal"
    },
    "setPaymentConfirmInfo": {
      "_description": "Set the payment confirm modal payment data",
      "error?": "RPCTypes.Status",
      "summary?": "RPCChatTypes.UIChatPaymentSummary"
    },
    "confirmScreenResponse": {
      "_description": "User responded to the chat Stellar confirm screen",
      "accept": "boolean"
    },
    "setUnsentText": {
      "_description": "Set unsent text for a conversation",
      "conversationIDKey": "Types.ConversationIDKey",
      "text?": "HiddenString"
    },
    "setPrependText": {
      "_description": "Set prepend text for a conversation",
      "conversationIDKey": "Types.ConversationIDKey",
      "text": "HiddenString | null"
    },
    "updateUnreadline": {
      "_description": "Update the unreadline line position for a conversation",
      "conversationIDKey": "Types.ConversationIDKey",
      "messageID": "Types.MessageID"
    },
    "toggleMessageCollapse": {
      "_description": "Set the collapse status of a message",
      "conversationIDKey": "Types.ConversationIDKey",
      "messageID": "Types.MessageID",
      "collapse": "boolean"
    },
    "toggleInfoPanel": {},
    "updateCoinFlipStatus": {
      "_description": "Update status of a coin flip game",
      "statuses": "Array<RPCChatTypes.UICoinFlipStatus>"
    },
    "setCommandMarkdown": {
      "_description": "Set command markdown for a conversation",
      "conversationIDKey": "Types.ConversationIDKey",
      "md": "RPCChatTypes.UICommandMarkdown | null"
    },
    "addUsersToChannel": {
      "_description": "Add a list of users to a conversation. Creates a SystemBulkAddToConv message.",
      "conversationIDKey": "Types.ConversationIDKey",
      "usernames": "Array<string>"
    },
    "jumpToRecent": {
      "_description": "Jump to most recent messages in a conversation",
      "conversationIDKey": "Types.ConversationIDKey"
    },
    "setContainsLastMessage": {
      "_description": "Explicitly set whether a thread is loaded to the most recent message",
      "conversationIDKey": "Types.ConversationIDKey",
      "contains": "boolean"
    },
    "threadSearch": {
      "_description": "Perform a search in a thread",
      "conversationIDKey": "Types.ConversationIDKey",
      "query": "HiddenString"
    },
    "threadSearchResults": {
      "_description": "Record a new thread search result",
      "conversationIDKey": "Types.ConversationIDKey",
      "messages": "Array<Types.Message>",
      "clear": "boolean"
    },
    "setThreadSearchStatus": {
      "_description": "Set the status of a thread search",
      "conversationIDKey": "Types.ConversationIDKey",
      "status": "Types.ThreadSearchStatus"
    },
    "toggleThreadSearch": {
      "_description": "Toggle the display of the thread search window",
      "conversationIDKey": "Types.ConversationIDKey"
    },
    "toggleReplyToMessage": {
      "_description": "Reply to a message publicly",
      "conversationIDKey": "Types.ConversationIDKey",
      "ordinal?": "Types.Ordinal"
    },
    "replyJump": {
      "_description": "Jump to a replied to message",
      "conversationIDKey": "Types.ConversationIDKey",
      "messageID": "Types.MessageID"
    },
    "setThreadSearchQuery": {
      "_description": "Set thread search query (used from inbox search to initialize it)",
      "conversationIDKey": "Types.ConversationIDKey",
      "query": "HiddenString"
    },
    "inboxSearch": {
      "_description": "Perform an inbox search",
      "query": "HiddenString"
    },
    "inboxSearchStarted": {
      "_description": "Inbox search has started"
    },
    "toggleInboxSearch": {
      "_description": "Toggle inbox search view",
      "enabled": "boolean"
    },
    "inboxSearchNameResults": {
      "_description": "Inbox search name results received",
      "results": "Array<Types.InboxSearchConvHit>",
      "unread": "boolean"
    },
    "inboxSearchTextResult": {
      "_description": "Inbox text result has arrived",
      "result": "Types.InboxSearchTextHit"
    },
    "inboxSearchMoveSelectedIndex": {
      "_description": "Change selected index of inbox search",
      "increment": "boolean"
    },
    "inboxSearchSelect": {
      "_description": "Select an inbox search item",
      "conversationIDKey?": "Types.ConversationIDKey",
      "query?": "HiddenString",
      "selectedIndex?": "number"
    },
    "inboxSearchSetTextStatus": {
      "_description": "Set the status of the inbox text search",
      "status": "Types.InboxSearchStatus"
    },
    "inboxSearchSetIndexPercent": {
      "_description": "Set index percent complete",
      "percent": "number"
    },
    "setMaybeMentionInfo": {
      "_description": "Set team mention info",
      "name": "string",
      "info": "RPCChatTypes.UIMaybeMentionInfo"
    },
    "tabSelected": {
      "_description": "Desktop changed tab to chat"
    },
    "setInboxShowIsNew": {
      "_description": "We've seen chat search before",
      "isNew": "boolean"
    },
    "resolveMaybeMention": {
      "_description": "Resolve an unknown @ mention",
      "name": "string",
      "channel": "string"
    },
    "loadAttachmentView": {
      "_description": "Load attachment view pane",
      "conversationIDKey": "Types.ConversationIDKey",
      "viewType": "RPCChatTypes.GalleryItemTyp",
      "fromMsgID?": "Types.MessageID"
    },
    "addAttachmentViewMessage": {
      "_description": "Add result for attachment view",
      "conversationIDKey": "Types.ConversationIDKey",
      "viewType": "RPCChatTypes.GalleryItemTyp",
      "message": "Types.Message"
    },
    "setAttachmentViewStatus": {
      "_description": "Set attachment view status",
      "conversationIDKey": "Types.ConversationIDKey",
      "viewType": "RPCChatTypes.GalleryItemTyp",
      "status": "Types.AttachmentViewStatus",
      "last?": "boolean"
    },
    "clearAttachmentView": {
      "_description": "Clear attachment views",
      "conversationIDKey": "Types.ConversationIDKey"
    },
    "updateUserReacjis": {
      "userReacjis": "RPCTypes.UserReacjis"
    },
    "setCommandStatusInfo": {
      "_description": "Set command status info",
      "conversationIDKey": "Types.ConversationIDKey",
      "info": "Types.CommandStatusInfo"
    },
    "clearCommandStatusInfo": {
      "_description": "Clear command status info",
      "conversationIDKey": "Types.ConversationIDKey"
    },
    "setThreadLoadStatus": {
      "_description": "Set thread load status",
      "conversationIDKey": "Types.ConversationIDKey",
      "status": "RPCChatTypes.UIChatThreadStatus"
    },
    "pinMessage": {
      "_description": "Pin a message",
      "conversationIDKey": "Types.ConversationIDKey",
      "messageID": "Types.MessageID"
    },
    "unpinMessage": {
      "_description": "Unpin a message",
      "conversationIDKey": "Types.ConversationIDKey"
    },
    "ignorePinnedMessage": {
      "_description": "Ignore pinned message",
      "conversationIDKey": "Types.ConversationIDKey"
    },
    "dismissBottomBanner": {
      "_description": "Set the bottom banner on a new conversation as dismissed",
      "conversationIDKey": "Types.ConversationIDKey"
    },
    "updateLastCoord": {
      "_description": "Update last known coordinate",
      "coord": "Types.Coordinate"
    },
    "toggleGiphyPrefill": {
      "_description": "Toggle /giphy text to trigger preview window",
      "conversationIDKey": "Types.ConversationIDKey"
    },
    "setChannelSearchText": {
      "_description": "Set filter for channel search",
      "text": "string"
    },
    "updateBlockButtons": {
      "_description": "Show or hide invitation to block for a given team ID",
      "teamID": "RPCTypes.TeamID",
      "adder?": "string",
      "show": "boolean"
    },
    "dismissBlockButtons": {
      "teamID": "RPCTypes.TeamID"
    },
    "setInboxNumSmallRows": {
      "ignoreWrite?": "boolean",
      "rows": "number"
    },
    "enableAudioRecording": {
      "conversationIDKey": "Types.ConversationIDKey",
      "meteringCb": "(amp: number) => void"
    },
    "attemptAudioRecording": {
      "conversationIDKey": "Types.ConversationIDKey",
      "meteringCb": "(amp: number) => void"
    },
    "stopAudioRecording": {
      "conversationIDKey": "Types.ConversationIDKey",
      "stopType": "Types.AudioStopType",
      "amps?": "AmpTracker"
    },
    "lockAudioRecording": {
      "conversationIDKey": "Types.ConversationIDKey"
    },
    "sendAudioRecording": {
      "conversationIDKey": "Types.ConversationIDKey",
      "fromStaged": "boolean",
      "info": "Types.AudioRecordingInfo"
    },
    "setAudioRecordingPostInfo": {
      "conversationIDKey": "Types.ConversationIDKey",
      "path": "string",
      "outboxID": "Buffer"
    }
  }
}
