{
  "prelude": [
    "import * as RPCChatTypes from '../constants/types/rpc-chat-gen'",
    "import * as Types from '../constants/types/chat2'",
    "import HiddenString from '../util/hidden-string'",
    "import type {RetentionPolicy} from '../constants/types/teams'"
  ],
  "actions": {
    // Set the loading state. Loading true increments the value
    "setLoading": {
      "key": "string",
      "loading": "boolean"
    },
    // Sometimes we just want to clear the loading state and not do a true increment/decrement
    "clearLoading": {
      "key": "string"
    },
    // Select the pending conversation (building a search or a set of users from a folder)
    "setPendingSelected": {
      "selected": "boolean"
    },
    // Select a conversation (or leave nothing selected)
    "selectConversation": {
      "conversationIDKey": "Types.ConversationIDKey",
      // why this happened, sometimes there's different side effects
      "reason": [
        "'clearSelected'", // deselect
        "'desktopNotification'", // clicked notification
        "'existingSearch'", // searching and found one
        "'findNewestConversation'", // find a new chat to select
        "'inboxBig'", // inbox row
        "'inboxFilterArrow'", // arrow keys in inbox filter
        "'inboxFilterChanged'", // inbox filter made first one selected
        "'inboxSmall'", // inbox row
        "'jumpFromReset'", // from older reset convo
        "'jumpToReset'", // going to an older reset convo
        "'justCreated'", // just made it and select it
        "'manageView'", // clicked from manage screen
        "'messageLink'", // link in a message
        "'preview'", // preview from manage screen
        "'push'", // from a push
        "'savedLastState'", // last seen chat tab
        "'startFoundExisting'", // starting a conversation and found one already
        "'teamChat'" // from team
      ]
    },
    // Select an existing conversation or setup an empty one. Can either be adhoc or a tlf (adhoc or team)
    // fromAReset means you were in a reset kbfs convo and you want to make a new one
    "startConversation": {
      "participants?": "?Array<string>",
      "tlf?": "?string",
      "fromAReset?": "boolean"
    },
    // Update our badges in the nav
    "badgesUpdated": {
      "conversations": "Array<RPCTypes.BadgeConversationInfo>"
    },
    // Setup sagas
    "setupChatHandlers": {},
    // Refresh the inbox
    "inboxRefresh": {
      "reason": [
        "'bootstrap'",
        "'componentNeverLoaded'",
        "'inboxStale'",
        "'inboxSyncedClear'",
        "'inboxSyncedUnknown'",
        "'joinedAConversation'",
        "'leftAConversation'",
        "'teamTypeChanged'"
      ]
    },
    // Update the 'jump to conversation' filter
    "setInboxFilter": {
      "filter": "string"
    },
    // We want to unbox an inbox row
    "metaNeedsUpdating": {
      "conversationIDKeys": "Array<Types.ConversationIDKey>",
      "reason": "string"
    },
    // Internal action: pull more metas from the queue to request
    "metaHandleQueue": {},
    // About to try and unbox some inbox rows
    "metaRequestingTrusted": {
      "conversationIDKeys": "Array<Types.ConversationIDKey>"
    },
    // Actually unboxing
    "metaRequestTrusted": {
      "force?": "boolean",
      "conversationIDKeys": "Array<Types.ConversationIDKey>"
    },
    // Got some new inbox rows
    "metasReceived": {
      "metas": "Array<Types.ConversationMeta>",
      "neverCreate?": "boolean", // If true never create a brand new meta, only update
      "clearExistingMetas?": "boolean", // If true, clear out the existing metaMap before inserting
      "clearExistingMessages?": "boolean" // If true, clear out any message data we already have.
    },
    // Got some inbox errors
    "metaReceivedError": {
      "conversationIDKey": "Types.ConversationIDKey",
      "error": "?RPCChatTypes.InboxUIItemError",
      "username": "?string"
    },
    // We got a status update saying it was blocked or ignored
    "metaDelete": {
      "conversationIDKey": "Types.ConversationIDKey",
      "selectSomethingElse": "boolean"
    },
    // We updated our view of a thread
    "metaUpdatePagination": {
      "conversationIDKey": "Types.ConversationIDKey",
      "paginationKey": "?Types.PaginationKey"
    },
    // Add a new message
    "messagesAdd": {
      // sent = we sent it
      // incoming = a streaming message
      // threadLoad = we're loading more messages on select / scroll
      "context": [
        "{type: 'sent'}",
        "{type: 'incoming'}",
        "{type: 'threadLoad', conversationIDKey: Types.ConversationIDKey}"
      ],
      "messages": "Array<Types.Message>"
    },
    // Got an error sending a message
    "messageErrored": {
      "conversationIDKey": "Types.ConversationIDKey",
      "reason": "string",
      "outboxID": "Types.OutboxID"
    },
    "setPendingMessageSubmitState": {
      "_description": "Sets pending messages in the store to the supplied state and logs the reason",
      "reason": "string",
      "submitState": ["'failed'", "'pending'"]
    },
    "cancelPendingConversation": {
      "_description":
        "Cancels the pending conversation, clears out all pending data from the store, and navigates to the inbox"
    },
    "retryPendingConversation": {
      "_description": "Retries sending the pending message that is currently stored in the metaMap"
    },
    // Start editing a message / or edit the last message / or clear editing
    "messageSetEditing": {
      "conversationIDKey": "Types.ConversationIDKey",
      "ordinal": "?Types.Ordinal",
      "editLastUser?": "string"
    },
    // Start quoting a message / or clear quoting
    "messageSetQuoting": {
      "sourceConversationIDKey": "Types.ConversationIDKey",
      // Has to be a string because it can be "pending".
      "targetConversationIDKey": "string",
      "ordinal": "?Types.Ordinal"
    },
    // Reply privately to a message with quoting
    "messageReplyPrivately": {
      "sourceConversationIDKey": "Types.ConversationIDKey",
      "ordinal": "Types.Ordinal"
    },
    // Submit an edit to the daemon
    "messageEdit": {
      "conversationIDKey": "Types.ConversationIDKey",
      "ordinal": "Types.Ordinal",
      "text": "HiddenString"
    },
    // Update a message which changed
    "messageWasEdited": {
      "conversationIDKey": "Types.ConversationIDKey",
      "messageID": "RPCChatTypes.MessageID",
      "text": "HiddenString",
      "mentionsAt": "I.Set<string>",
      "mentionsChannel": "'none' | 'all' | 'here'",
      "mentionsChannelName": "I.Map<string, Types.ConversationIDKey>"
    },
    // Mark a message as deleted
    "messagesWereDeleted": {
      "conversationIDKey": "Types.ConversationIDKey",
      "messageIDs?": "Array<RPCChatTypes.MessageID>",
      "upToMessageID?": "RPCChatTypes.MessageID", // expunge calls give us a message we should delete up to (don't delete it)
      "ordinals?": "Array<Types.Ordinal>"
    },
    // Delete a message
    "messageDelete": {
      "conversationIDKey": "Types.ConversationIDKey",
      "ordinal": "Types.Ordinal"
    },
    // Deletes a message and above
    "messageDeleteHistory": {
      "conversationIDKey": "Types.ConversationIDKey",
      "ordinal": "Types.Ordinal"
    },
    // Clear our knowledge of which messages are in a thread
    "clearOrdinals": {
      "conversationIDKey": "Types.ConversationIDKey"
    },
    // Update why we have a pending conversation, either we're searching or we have a fixed set of users (you clicked a folder for example)
    "setPendingMode": {
      "pendingMode": "Types.PendingMode"
    },
    "setPendingStatus": {
      "_description":
        "Sets the `pendingStatus` of the currently pending conversation. This controls how the input box behaves in a pending conversation.",
      "pendingStatus": "Types.PendingStatus"
    },
    // Load some more messages for a conversation
    "loadOlderMessagesDueToScroll": {
      "conversationIDKey": "Types.ConversationIDKey"
    },
    // Show a desktop notification
    "desktopNotification": {
      "conversationIDKey": "Types.ConversationIDKey",
      "author": "string",
      "body": "string"
    },
    // Send a text message
    "messageSend": {
      "conversationIDKey": "Types.ConversationIDKey",
      "text": "HiddenString"
    },
    // Resend a message
    "messageRetry": {
      "conversationIDKey": "Types.ConversationIDKey",
      "outboxID": "Types.OutboxID"
    },
    "joinConversation": {
      "conversationIDKey": "Types.ConversationIDKey"
    },
    "leaveConversation": {
      "conversationIDKey": "Types.ConversationIDKey",
      "dontNavigateToInbox?": "boolean"
    },
    "muteConversation": {
      "conversationIDKey": "Types.ConversationIDKey",
      "muted": "boolean"
    },
    "openFolder": {
      "conversationIDKey": "Types.ConversationIDKey"
    },
    // If an implied team chat member resets you can start a new chat w/o any reset people
    "resetChatWithoutThem": {
      "conversationIDKey": "Types.ConversationIDKey"
    },
    // If an implied team chat member resets you can add them back in
    "resetLetThemIn": {
      "conversationIDKey": "Types.ConversationIDKey",
      "username": "string"
    },
    // You're done searching
    "exitSearch": {
      "canceled": "boolean"
    },
    // Update the pending conversation users
    "setPendingConversationUsers": {
      "users": "Array<string>",
      "fromSearch": "boolean"
    },
    // Actually starting a conversation from a search. SendingAction is what happens after the chat is created
    "sendToPendingConversation": {
      "users": "Array<string>",
      "sendingAction": [
        "More.ReturnType<typeof createMessageSend>",
        "More.ReturnType<typeof createAttachmentUpload>"
      ]
    },
    // We've made a new conversation successfully and want to clean up the pending info now
    "clearPendingConversation": {},
    // We want to save an attachment to the local disk
    "attachmentDownload": {
      "conversationIDKey": "Types.ConversationIDKey",
      "ordinal": "Types.Ordinal",
      "forShare?": "boolean",
    },
    // Update the loading bars
    "attachmentLoading": {
      "conversationIDKey": "Types.ConversationIDKey",
      "ordinal": "Types.Ordinal",
      "ratio": "number", // 0-1
      "isPreview": "boolean"
    },
    // We saved an attachment to the local disk
    "attachmentDownloaded": {
      "conversationIDKey": "Types.ConversationIDKey",
      "ordinal": "Types.Ordinal",
      "path?": "string",
      "forShare?": "boolean",
    },
    // We want to upload an attachment
    "attachmentUpload": {
      "conversationIDKey": "Types.ConversationIDKey",
      "path": "string",
      "title": "string"
    },
    // Update progress on an upload
    "attachmentUploading": {
      "conversationIDKey": "Types.ConversationIDKey",
      "ordinal": "Types.Ordinal",
      "ratio": "number" // 0-1
    },
    // We're done uploading
    "attachmentUploaded": {
      "conversationIDKey": "Types.ConversationIDKey",
      "ordinal": "Types.Ordinal"
    },
    // We got an uploaded attachment, while online this is like an edit of the placeholder
    "messageAttachmentUploaded": {
      "conversationIDKey": "Types.ConversationIDKey",
      "placeholderID": "RPCChatTypes.MessageID",
      "message": "Types.MessageAttachment"
    },
    // Update who's typing in a conversation
    "updateTypers": {
      "conversationToTypers": "I.Map<Types.ConversationIDKey, I.Set<string>>"
    },
    // Tell server we're typing
    "sendTyping": {
      "conversationIDKey": "Types.ConversationIDKey",
      "typing": "boolean"
    },
    // On startup we're automatically loading a thread sometimes. When we first view it we should
    // go through our marking as read logic
    "markInitiallyLoadedThreadAsRead": {
      "conversationIDKey": "Types.ConversationIDKey"
    },
    // Server told us a conversation is out of date
    "markConversationsStale": {
      "conversationIDKeys": "Array<Types.ConversationIDKey>"
    },
    // Navigation helpers. Nav is slightly different on mobile / desktop
    "navigateToInbox": {},
    "navigateToThread": {},
    // Share to external app on mobile
    "messageAttachmentNativeShare": {
      "conversationIDKey": "Types.ConversationIDKey",
      "ordinal": "Types.Ordinal"
    },
    // Save on mobile (camera roll)
    "messageAttachmentNativeSave": {
      "conversationIDKey": "Types.ConversationIDKey",
      "ordinal": "Types.Ordinal"
    },
    // We're changing the notification settings
    "updateNotificationSettings": {
      "conversationIDKey": "Types.ConversationIDKey",
      "notificationsDesktop": "Types.NotificationsType",
      "notificationsMobile": "Types.NotificationsType",
      "notificationsGlobalIgnoreMentions": "boolean"
    },
    // We get new notification settings
    "notificationSettingsUpdated": {
      "conversationIDKey": "Types.ConversationIDKey",
      "settings": "RPCChatTypes.ConversationNotificationInfo"
    },
    // Block a conversation
    "blockConversation": {
      "conversationIDKey": "Types.ConversationIDKey",
      "reportUser": "boolean"
    },
    // Conversation was loaded and is offline
    "setConversationOffline": {
      "conversationIDKey": "Types.ConversationIDKey",
      "offline": "boolean"
    },
    "setConvRetentionPolicy": {
      "_description": "Sets the retention policy for a conversation.",
      "conversationIDKey": "Types.ConversationIDKey",
      "policy": "RetentionPolicy"
    },
    "updateConvRetentionPolicy": {
      "_description":
        "Consume a service notification that a conversation's retention policy has been updated",
      "conv": "RPCChatTypes.InboxUIItem"
    },
    "updateTeamRetentionPolicy": {
      "_description": "Consume a service notification that a team retention policy was updated",
      "convs": "Array<RPCChatTypes.InboxUIItem>"
    }
  }
}
