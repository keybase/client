{
  "prelude": [
    "import * as ChatTypes from '../constants/types/chat2'",
    "import * as Types from '../constants/types/teams'",
    "import {RetentionPolicy} from '../constants/types/retention-policy'"
  ],
  "actions": {
    "addUserToTeams": {
      "role": "Types.TeamRoleType",
      "teams": "Array<string>",
      "user": "string"
    },
    "clearNavBadges": {},
    "createNewTeam": {
      "joinSubteam": "boolean",
      "teamname": "string",
      "rootPath?": "I.List<string>",
      "sourceSubPath?": "I.List<string>",
      "destSubPath?": "I.List<string>"
    },
    "createNewTeamFromConversation": {
      "conversationIDKey": "ChatTypes.ConversationIDKey",
      "teamname": "string"
    },
    "createChannel": {
      "teamname": "string",
      "channelname": "string",
      "description": "string | null",
      "rootPath?": "I.List<string>",
      "sourceSubPath?": "I.List<string>",
      "destSubPath?": "I.List<string>"
    },
    "clearAddUserToTeamsResults": {},
    "setAddUserToTeamsResults": {
      "error": "boolean",
      "results": "string"
    },
    "setEmailInviteError": {
      "message": "string",
      "malformed": "Array<string>"
    },
    "getChannelInfo": {
      "_description": "Fetches the channel information for a single channel in a team from the server.",
      "conversationIDKey": "ChatTypes.ConversationIDKey",
      "teamname": "string"
    },
    "getChannels": {
      "_description": "Fetches the channel information for all channels in a team from the server. Should only be called for components that need the full list.",
      "teamname": "string"
    },
    "getTeams": {},
    "getDetails": {
      "teamname": "string"
    },
    "getMembers": {
      "teamname": "string"
    },
    "setMembers": {
      "teamname": "string",
      "members": "I.Map<string, Types.MemberInfo>"
    },
    "getDetailsForAllTeams": {},
    "getTeamOperations": {
      "teamname": "string"
    },
    "getTeamProfileAddList": {
      "username": "string"
    },
    "getTeamPublicity": {
      "teamname": "string"
    },
    "addTeamWithChosenChannels": {
      "teamname": "string"
    },
    "saveChannelMembership": {
      "teamname": "string",
      "oldChannelState": "Types.ChannelMembershipState",
      "newChannelState": "Types.ChannelMembershipState"
    },
    "addParticipant": {
      "teamname": "string",
      "conversationIDKey": "ChatTypes.ConversationIDKey"
    },
    "removeParticipant": {
      "teamname": "string",
      "conversationIDKey": "ChatTypes.ConversationIDKey"
    },
    "deleteTeam": {
      "teamname": "string"
    },
    "inviteToTeamByEmail": {
      "destSubPath?": "I.List<string>",
      "invitees": "string",
      "role": "Types.TeamRoleType",
      "rootPath?": "I.List<string>",
      "sourceSubPath?": "I.List<string>",
      "teamname": "string"
    },
    "inviteToTeamByPhone": {
      "teamname": "string",
      "role": "Types.TeamRoleType",
      "phoneNumber": "string",
      "fullName": "string"
    },
    "joinTeam": {
      "teamname": "string"
    },
    "leaveTeam": {
      "teamname": "string",
      "context": "'teams' | 'chat'"
    },
    "leftTeam": {
      "_description": "We successfully left a team",
      "teamname": "string",
      "context": "'teams' | 'chat'"
    },
    "addToTeam": {
      "teamname": "string",
      "username": "string",
      "role": "Types.TeamRoleType",
      "sendChatNotification": "boolean"
    },
    "reAddToTeam": {
      "teamname": "string",
      "username": "string"
    },
    "editTeamDescription": {
      "teamname": "string",
      "description": "string"
    },
    "uploadTeamAvatar": {
      "crop?": "RPCTypes.ImageCropRect",
      "filename": "string",
      "sendChatNotification": "boolean",
      "teamname": "string"
    },
    "editMembership": {
      "teamname": "string",
      "username": "string",
      "role": "Types.TeamRoleType"
    },
    "removeMemberOrPendingInvite": {
      "email": "string",
      "teamname": "string",
      "username": "string",
      "inviteID": "string"
    },
    "ignoreRequest": {
      "teamname": "string",
      "username": "string"
    },
    "setMemberPublicity": {
      "teamname": "string",
      "showcase": "boolean"
    },
    "setPublicity": {
      "teamname": "string",
      "settings": "Types.PublicitySettings"
    },
    "setChannelCreationError": {
      "error": "string"
    },
    "setTeamsWithChosenChannels": {
      "teamsWithChosenChannels": "I.Set<Types.Teamname>"
    },
    "setTeamCreationError": {
      "error": "string"
    },
    "setTeamInviteError": {
      "error": "string"
    },
    "setTeamJoinError": {
      "error": "string"
    },
    "setTeamJoinSuccess": {
      "success": "boolean",
      "teamname": "string"
    },
    "setTeamRetentionPolicy": {
      "teamname": "string",
      "retentionPolicy": "RetentionPolicy"
    },
    "setTeamLoadingInvites": {
      "teamname": "string",
      "invitees": "string",
      "loadingInvites": "boolean"
    },
    "clearTeamRequests": {
      "teamname": "string"
    },
    "setTeamDetails": {
      "teamname": "string",
      "members": "I.Map<string, Types.MemberInfo>",
      "settings": "Types.TeamSettings",
      "invites": "I.Set<Types.InviteInfo>",
      "subteams": "I.Set<Types.Teamname>",
      "requests": "I.Map<string, I.Set<Types.RequestInfo>>"
    },
    "setTeamCanPerform": {
      "teamname": "string",
      "teamOperation": "Types.TeamOperations"
    },
    "setTeamPublicitySettings": {
      "teamname": "string",
      "publicity": "Types._PublicitySettings"
    },
    "setTeamChannelInfo": {
      "teamname": "string",
      "conversationIDKey": "ChatTypes.ConversationIDKey",
      "channelInfo": "Types.ChannelInfo"
    },
    "setTeamChannels": {
      "teamname": "string",
      "channelInfos": "I.Map<ChatTypes.ConversationIDKey, Types.ChannelInfo>"
    },
    "setTeamInfo": {
      "teamnames": "I.Set<Types.Teamname>",
      "teammembercounts": "I.Map<Types.Teamname, number>",
      "teamNameToIsOpen": "I.Map<Types.Teamname, boolean>",
      "teamNameToRole": "I.Map<Types.Teamname, Types.MaybeTeamRoleType>",
      "teamNameToAllowPromote": "I.Map<Types.Teamname, boolean>",
      "teamNameToIsShowcasing": "I.Map<Types.Teamname, boolean>",
      "teamNameToID": "I.Map<Types.Teamname, string>"
    },
    "setTeamProfileAddList": {
      "teamlist": "I.List<Types.TeamProfileAddList>"
    },
    "setTeamAccessRequestsPending": {
      "accessRequestsPending": "I.Set<Types.Teamname>"
    },
    "setNewTeamInfo": {
      "deletedTeams": "I.List<RPCTypes.DeletedTeamInfo>",
      "newTeams": "I.Set<string>",
      "newTeamRequests": "I.List<string>",
      "teamNameToResetUsers": "I.Map<Types.Teamname, I.Set<Types.ResetUser>>"
    },
    "setTeamSawChatBanner": {},
    "setTeamSawSubteamsBanner": {},
    "updateChannelName": {
      "teamname": "Types.Teamname",
      "conversationIDKey": "ChatTypes.ConversationIDKey",
      "newChannelName": "string"
    },
    "setUpdatedChannelName": {
      "teamname": "Types.Teamname",
      "conversationIDKey": "ChatTypes.ConversationIDKey",
      "newChannelName": "string"
    },
    "updateTopic": {
      "teamname": "Types.Teamname",
      "conversationIDKey": "ChatTypes.ConversationIDKey",
      "newTopic": "string"
    },
    "setUpdatedTopic": {
      "teamname": "Types.Teamname",
      "conversationIDKey": "ChatTypes.ConversationIDKey",
      "newTopic": "string"
    },
    "deleteChannelConfirmed": {
      "teamname": "Types.Teamname",
      "conversationIDKey": "ChatTypes.ConversationIDKey"
    },
    "deleteChannelInfo": {
      "teamname": "Types.Teamname",
      "conversationIDKey": "ChatTypes.ConversationIDKey"
    },
    "badgeAppForTeams": {
      "deletedTeams": "I.List<RPCTypes.DeletedTeamInfo>",
      "newTeamNames": "I.List<string>",
      "newTeamAccessRequests": "I.List<string>",
      "teamsWithResetUsers": "ReadonlyArray<{id: Buffer, teamname: string, username: string, uid: string}>"
    },
    "checkRequestedAccess": {
      "teamname": "string"
    },
    "getTeamRetentionPolicy": {
      "_description": "Gets the team retention policy and stores in `state.entities.teams.teamNameToRetentionPolicy`.",
      "teamname": "string"
    },
    "saveTeamRetentionPolicy": {
      "_description": "Sets the retention policy for a team. The store will be updated automatically.",
      "teamname": "string",
      "policy": "RetentionPolicy"
    },
    "renameTeam": {
      "_description": "Rename a subteam",
      "oldName": "string",
      "newName": "string"
    }
  }
}
