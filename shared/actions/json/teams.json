{
  "prelude": [
    "import type {ConversationIDKey} from '../constants/types/chat2'",
    "import type * as Types from '../constants/types/teams'",
    "import type {RetentionPolicy} from '../constants/types/retention-policy'"
  ],
  "actions": {
    "clearNavBadges": {},
    "createNewTeamFromConversation": {
      "conversationIDKey": "ConversationIDKey",
      "teamname": "string"
    },
    "createChannel": {
      "teamID": "Types.TeamID",
      "channelname": "string",
      "description?": "string",
      "navToChatOnSuccess": "boolean"
    },
    "clearAddUserToTeamsResults": {},
    "setChannelSelected": {
      "_description": "Sets whether a channel is selected on the team page",
      "teamID": "Types.TeamID",
      "channel": "string",
      "selected": "boolean",
      "clearAll?": "boolean"
    },
    "loadTeam": {
      "_description": [
        "Load team details if we are stale.",
        "",
        "`_subscribe` is for use by teams/subscriber only."
      ],
      "_subscribe?": "boolean",
      "teamID": "Types.TeamID"
    },
    "teamLoaded": {
      "teamID": "Types.TeamID",
      "team": "RPCTypes.AnnotatedTeam"
    },
    "unsubscribeTeamDetails": {
      "_description": "Stop listening for team details for this team",
      "teamID": "Types.TeamID"
    },
    "setTeamVersion": {
      "teamID": "Types.TeamID",
      "version": "Types.TeamVersion"
    },
    "getMembers": {
      "teamID": "Types.TeamID"
    },
    "setMembers": {
      "teamID": "Types.TeamID",
      "members": "Map<string, Types.MemberInfo>"
    },
    "teamSetMemberSelected": {
      "_description": "Sets whether a member is selected on the team page",
      "teamID": "Types.TeamID",
      "username": "string",
      "selected": "boolean",
      "clearAll?": "boolean"
    },
    "getTeamProfileAddList": {
      "username": "string"
    },
    "addTeamWithChosenChannels": {
      "teamID": "Types.TeamID"
    },
    "saveChannelMembership": {
      "teamID": "Types.TeamID",
      "oldChannelState": "Types.ChannelMembershipState",
      "newChannelState": "Types.ChannelMembershipState"
    },
    "addParticipant": {
      "teamID": "Types.TeamID",
      "conversationIDKey": "ConversationIDKey"
    },
    "removeParticipant": {
      "teamID": "Types.TeamID",
      "conversationIDKey": "ConversationIDKey"
    },
    "deleteTeam": {
      "teamID": "Types.TeamID"
    },
    "inviteToTeamByPhone": {
      "teamID": "Types.TeamID",
      "teamname": "string",
      "role": "Types.TeamRoleType",
      "phoneNumber": "string",
      "fullName": "string",
      "loadingKey?": "string"
    },
    "joinTeam": {
      "_description": "Called either by the join team UI or invite links when the modal appears",
      "teamname": "string",
      "deeplink?": "boolean"
    },
    "openInviteLink": {
      "_description": "First stage of the invite link process, opens the modal",
      "inviteID": "string",
      "inviteKey": "string"
    },
    "requestInviteLinkDetails": {
      "_description": "Called by the modal if the key is missing"
    },
    "updateInviteLinkDetails": {
      "_description": "Saves the details from the API in the store, prompting the user to make a decision",
      "details": "RPCTypes.InviteLinkDetails"
    },
    "respondToInviteLink": {
      "_description": "Completes the invite link decision flow, processed by joinTeam",
      "accept": "boolean"
    },
    "launchNewTeamWizardOrModal": {
      "subteamOf?": "Types.TeamID"
    },
    "leaveTeam": {
      "teamname": "string",
      "permanent": "boolean",
      "context": "'teams' | 'chat'"
    },
    "leftTeam": {
      "_description": "We successfully left a team",
      "teamname": "string",
      "context": "'teams' | 'chat'"
    },
    "reAddToTeam": {
      "teamID": "Types.TeamID",
      "username": "string"
    },
    "uploadTeamAvatar": {
      "crop?": "RPCTypes.ImageCropRect",
      "filename": "string",
      "sendChatNotification": "boolean",
      "teamname": "string"
    },
    "removeMember": {
      "teamID": "Types.TeamID",
      "username": "string"
    },
    "removePendingInvite": {
      "teamID": "Types.TeamID",
      "inviteID": "string"
    },
    "ignoreRequest": {
      "teamID": "Types.TeamID",
      "teamname": "string",
      "username": "string"
    },
    "setPublicity": {
      "teamID": "Types.TeamID",
      "settings": "Types.PublicitySettings"
    },
    "setTeamsWithChosenChannels": {
      "teamsWithChosenChannels": "Set<Types.TeamID>"
    },
    "setTeamInviteError": {
      "error": "string"
    },
    "setTeamJoinError": {
      "error": "string"
    },
    "setTeamJoinSuccess": {
      "open": "boolean",
      "success": "boolean",
      "teamname": "string"
    },
    "setTeamRetentionPolicy": {
      "teamID": "Types.TeamID",
      "retentionPolicy": "RetentionPolicy"
    },
    "setTeamProfileAddList": {
      "teamlist": "Array<Types.TeamProfileAddList>"
    },
    "setTeamAccessRequestsPending": {
      "accessRequestsPending": "Set<Types.Teamname>"
    },
    "setTeamSawChatBanner": {},
    "setTeamSawSubteamsBanner": {},
    "updateChannelName": {
      "teamID": "Types.TeamID",
      "conversationIDKey": "ConversationIDKey",
      "newChannelName": "string"
    },
    "setUpdatedChannelName": {
      "teamID": "Types.TeamID",
      "conversationIDKey": "ConversationIDKey",
      "newChannelName": "string"
    },
    "updateTopic": {
      "teamID": "Types.TeamID",
      "conversationIDKey": "ConversationIDKey",
      "newTopic": "string"
    },
    "setUpdatedTopic": {
      "teamID": "Types.TeamID",
      "conversationIDKey": "ConversationIDKey",
      "newTopic": "string"
    },
    "deleteChannelConfirmed": {
      "teamID": "Types.TeamID",
      "conversationIDKey": "ConversationIDKey"
    },
    "deleteMultiChannelsConfirmed": {
      "teamID": "Types.TeamID",
      "channels": "Array<ConversationIDKey>"
    },
    "checkRequestedAccess": {
      "teamname": "string"
    },
    "getTeamRetentionPolicy": {
      "_description": "Gets the team retention policy and stores in `state.entities.teams.teamIDToRetentionPolicy`.",
      "teamID": "Types.TeamID"
    },
    "renameTeam": {
      "_description": "Rename a subteam",
      "oldName": "string",
      "newName": "string"
    },
    "setTeamRoleMapLatestKnownVersion": {
      "version": "number"
    },
    "setTeamRoleMap": {
      "map": "Types.TeamRoleMap"
    },
    "toggleInvitesCollapsed": {
      "_description": "Toggle whether invites are collapsed in the member list for this team",
      "teamID": "Types.TeamID"
    },
    "startAddMembersWizard": {
      "_description": "Setup store and navigate to start of add members wizard.",
      "teamID": "Types.TeamID"
    },
    "setAddMembersWizardRole": {
      "_description": "Set the role for the add members wizard.",
      "role": ["Types.AddingMemberTeamRoleType", "'setIndividually'"]
    },
    "setAddMembersWizardIndividualRole": {
      "_description": "Set the role for a pending member in the add member wizard.",
      "assertion": "string",
      "role": "Types.AddingMemberTeamRoleType"
    },
    "addMembersWizardPushMembers": {
      "_description": "Should be called when user is trying to add new assertions to the wizard",
      "members": "Array<Types.AddingMember>"
    },
    "addMembersWizardAddMembers": {
      "_description": "Takes a member list and appends it to wizard state, using assertionsInTeam as a filter. When filtering, it also maintains membersAlreadyInTeam list.",
      "members": "Array<Types.AddingMember>",
      "assertionsInTeam": "Array<string>"
    },
    "addMembersWizardRemoveMember": {
      "_description": "Remove a pending member from the add members wizard.",
      "assertion": "string"
    },
    "addMembersWizardSetDefaultChannels": {
      "_description": "Change the set of default channels we're adding these users to.",
      "toAdd?": "Array<Types.ChannelNameID>",
      "toRemove?": "Types.ChannelNameID"
    },
    "cancelAddMembersWizard": {
      "_description": "Nav away from add members wizard and clear related state."
    },
    "finishedAddMembersWizard": {
      "_description": "Nav away from add members wizard and clear related state."
    },
    "finishedNewTeamWizard": {
      "_description": "Clear new team wizard state and nav to team.",
      "teamID": "Types.TeamID"
    },
    "setJustFinishedAddMembersWizard": {
      "justFinished": "boolean"
    },
    "setSubteamFilter": {
      "_description": "Set filtering for the subteams tab.",
      "filter": "string",
      "parentTeam?": "Types.TeamID"
    },
    "showTeamByName": {
      "_description": [
        "Tries to show a team with this name whether the user is in the team or not.",
        "For teams we are not in:",
        "- with teamsRedesign on go to external team page",
        "- with teamsRedesign off noop"
      ],
      "teamname": "string",
      "initialTab?": "Types.TabKey",
      "join?": "boolean",
      "addMembers?": "boolean"
    },
    "setMemberActivityDetails": {
      "activityMap": "Map<Types.TeamID, number>",
      "username": "string"
    },
    "loadTeamTree": {
      "teamID": "Types.TeamID",
      "username": "string"
    },
    "startNewTeamWizard": {},
    "setTeamWizardTeamType": {
      "teamType": "Types.TeamWizardTeamType"
    },
    "setTeamWizardNameDescription": {
      "teamname": "string",
      "description": "string",
      "openTeam": "boolean",
      "openTeamJoinRole": "Types.TeamRoleType",
      "profileShowcase": "boolean",
      "addYourself": "boolean"
    },
    "setTeamWizardAvatar": {
      "crop?": "Types.AvatarCrop",
      "filename?": "string"
    },
    "setTeamWizardTeamSize": {
      "isBig": "boolean"
    },
    "setTeamWizardChannels": {
      "channels": "Array<string>"
    },
    "setTeamWizardSubteams": {
      "subteams": "Array<string>"
    },
    "setTeamWizardSubteamMembers": {
      "members": "Array<string>"
    },
    "setTeamWizardError": {
      "error": "string"
    },
    "finishNewTeamWizard": {},
    "manageChatChannels": {
      "teamID": "Types.TeamID"
    },
    "teamSeen": {
      "_description": "User has viewed this team. Clear related badges.",
      "teamID": "Types.TeamID"
    },
    "setTeamListFilterSort": {
      "_description": "Set filtering and sort order for main team list. Leaves existing for undefinted params.",
      "filter?": "string",
      "sortOrder?": "Types.TeamListSort"
    }
  }
}
