{
  "prelude": [
    "import * as Types from '../constants/types/config'",
    "import * as Tabs from '../constants/tabs'",
    "import * as ChatTypes from '../constants/types/chat2'",
    "import * as FsTypes from '../constants/types/fs'",
    "import HiddenString from '../util/hidden-string'",
    "import {RPCError} from '../util/errors'"
  ],
  "actions": {
    "startHandshake": {
      "_description": "internal to config. should start the handshake process"
    },
    "restartHandshake": {
      "_description": "internal to config. should restart the handshake process"
    },
    "daemonHandshake": {
      "_description": "starting the connect process. Things that need to happen before we see the app should call daemonHandshakeWait",
      "firstTimeConnecting": "boolean",
      "version": "number"
    },
    "daemonHandshakeWait": {
      "_description": "subsystems that need to do things during boot need to call this to register that we should wait.",
      "name": "string",
      "version": "number",
      "increment": "boolean",
      "failedReason?": "string",
      "failedFatal?": "true"
    },
    "daemonHandshakeDone": {
      "_description": "ready to show the app"
    },
    "filePickerError": {
      "_description": "Sent whenever the mobile file picker encounters an error.",
      "error": "Error"
    },
    "logout": {
      "_description": "someone wants to log out"
    },
    "logoutAndTryToLogInAs": {
      "_description": "Log out the current user, keeping secrets stored. Then prefill the username for provisioned another user to log in.",
      "username": "string"
    },
    "logoutHandshake": {
      "_description": "starting the logout process. Things that need to happen before we see the app should call logoutHandshakeWait",
      "version": "number"
    },
    "logoutHandshakeWait": {
      "_description": "subsystems that need to do things during logout need to call this to register that we should wait.",
      "name": "string",
      "version": "number",
      "increment": "boolean"
    },
    "installerRan": {
      "_description": "desktop only: the installer ran and we can start up"
    },
    "dumpLogs": {"reason": ["'quitting through menu'"]},
    "openAppSettings": {
      "_description": "mobile only: open the settings page"
    },
    "changedFocus": {"appFocused": "boolean"},
    "changedActive": {"userActive": "boolean"},
    "mobileAppState": {"nextAppState": ["'active'", "'background'", "'inactive'"]},
    "showMain": {},
    "bootstrapStatusLoaded": {
      "deviceID": "string",
      "deviceName": "string",
      "fullname": "string",
      "loggedIn": "boolean",
      "registered": "boolean",
      "uid": "string",
      "username": "string",
      "userReacjis": "RPCTypes.UserReacjis"
    },
    "followerInfoUpdated": {
      "uid": "string",
      "followers": "Array<string>",
      "followees": "Array<string>"
    },
    "daemonError": {"daemonError?": "Error"},
    "setAccounts": {"configuredAccounts": "Array<RPCTypes.ConfiguredAccount>"},
    "setDefaultUsername": {"username": "string"},
    "globalError": {"globalError?": "Error | RPCError"},
    "pushLoaded": {"pushLoaded": "boolean"},
    "setStartupDetails": {
      "startupWasFromPush": "boolean",
      "startupConversation?": "ChatTypes.ConversationIDKey",
      "startupLink": "string",
      "startupTab?": "Tabs.Tab",
      "startupFollowUser": "string",
      "startupSharePath?": "FsTypes.LocalPath",
      "startupShareText?": "string",
      "startupPushPayload?": "string"
    },
    "setStartupFile": {
      "_description": "Stores the startup file path when launching Keybase from a cold start beofre log in",
      "startupFile": "HiddenString"
    },
    "setOpenAtLogin": {"openAtLogin": "boolean"},
    "setNotifySound": {"notifySound": "boolean"},
    "setDeletedSelf": {"deletedUsername": "string"},
    "persistRoute": {"path?": "Array<any>"},
    "setNavigator": {"navigator": "any"},
    "loggedOut": {},
    "loggedIn": {
      "_description": "Used internally to know we were logged in. if you want to react to being logged in likely you want bootstrapStatusLoaded",
      "causedBySignup": "boolean",
      "causedByStartup": "boolean"
    },
    "setUserSwitching": {
      "userSwitching": "boolean"
    },
    "updateMenubarWindowID": {"id": "number"},
    "copyToClipboard": {"text": "string"},
    "checkForUpdate": {},
    "updateInfo": {"isOutOfDate": "boolean", "critical": "boolean", "message?": "string"},
    "updateNow": {},
    "openAppStore": {
      "_description": "Open a link to the app store"
    },
    "updateCriticalCheckStatus": {
      "_description": "Save critical check status",
      "status": "'critical' | 'suggested' | 'ok'",
      "message": "string"
    },
    "osNetworkStatusChanged": {
      "online": "boolean",
      "type": "Types.ConnectionType",
      "isInit?": "boolean"
    },
    "setDarkModePreference": {
      "preference": ["'system'", "'alwaysDark'", "'alwaysLight'", "undefined"]
    },
    "setSystemDarkMode": {"dark": "boolean"},
    "updateHTTPSrvInfo": {
      "address": "string",
      "token": "string"
    },
    "remoteWindowWantsProps": {
      "_description": "remote electron window wants props sent",
      "component": "string",
      "param": "string"
    },
    "updateWindowState": {
      "_description": "main electron window wants to store its state",
      "windowState": "Types.WindowState"
    },
    "setUseNativeFrame": {
      "useNativeFrame": "boolean"
    },
    "setWhatsNewLastSeenVersion": {
      "_description": "Set the latest version number that a user has seen from Gregor. This is used to set the badged state of the 'What's New' radio icon",
      "lastSeenVersion": "string"
    },
    "toggleRuntimeStats": {},
    "loadOnLoginStartup": {},
    "loadedOnLoginStartup": {
      "status": "boolean | null"
    },
    "loadOnStart": {
      "_description": "This action is dispatched multiple times with various flags. if you want to do something as a result of startup or login listen to this",
      "phase": "'initialStartupAsEarlyAsPossible' | 'connectedToDaemonForFirstTime' | 'reloggedIn' | 'startupOrReloginButNotInARush'"
    },
    "showShareActionSheet": {
      "filePath": "string",
      "mimeType": "string"
    },
    "androidShare": {
      "_description": "Intent fired with a share url",
      "url?": "string",
      "text?": "string"
    }
  }
}
