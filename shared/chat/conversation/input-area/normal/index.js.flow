// @flow
import * as I from 'immutable'
import {Component} from 'react'
import * as Types from '../../../../constants/types/chat2'
import {Input as TextInput} from '../../../../common-adapters'

export type PreMentionHocProps = {
  conversationIDKey: Types.ConversationIDKey,
  channelName: ?string,
  isEditing: boolean,
  focusInputCounter: number,
  clearInboxFilter: () => void,
  inputBlur: () => void,
  inputClear: () => void,
  inputFocus: () => void,
  inputSetRef: (r: ?TextInput) => void,
  inputValue: () => string,
  onAttach: (paths: Array<string>) => void,
  onEditLastMessage: () => void,
  onCancelEditing: () => void,
  onJoinChannel: () => void,
  onLeaveChannel: () => void,
  onSubmit: (text: string) => void,
  pendingWaiting: boolean,
  setText: (text: string) => void,
  text: string,
  typing: I.Set<string>,
}

export type MentionHocProps = {
  insertMention: (u: string, options?: {notUser: boolean}) => void,
  insertChannelMention: (c: string, options?: {notChannel: boolean}) => void,

  // on desktop:
  onKeyDown?: (e: SyntheticKeyboardEvent<>) => void,
  onKeyUp?: (e: SyntheticKeyboardEvent<*>) => void,
  switchMention?: (u: string) => void,
  switchChannelMention?: (c: string) => void,
  upArrowCounter?: number,
  downArrowCounter?: number,
  // on mobile:
  onChangeText?: (newText: string) => void,
  onSelectionChange?: ({selectionStart: number, selectionEnd: number}) => void,
  onBlur?: () => void,
  onFocus?: () => void,
  insertMentionMarker?: () => void,

  onEnterKeyDown: (e: SyntheticKeyboardEvent<>) => void,
  pickSelectedCounter: number,
  channelMentionFilter: string,
  channelMentionPopupOpen: boolean,
  setChannelMentionPopupOpen: (setOpen: boolean) => void,
  mentionFilter: string,
  mentionPopupOpen: boolean,
  setMentionPopupOpen: (setOpen: boolean) => void,
}

export type Props = PreMentionHocProps & MentionHocProps

export default class Input extends Component<Props> {}
