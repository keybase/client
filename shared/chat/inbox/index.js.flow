// @flow
import * as I from 'immutable'
import * as React from 'react'
import type {ConversationIDKey} from '../../constants/types/chat2'

export type RowItemSmall = {|
  type: 'small',
  conversationIDKey: ConversationIDKey,
|}
export type RowItemBigTeamsLabel = {|
  type: 'bigTeamsLabel',
  isFiltered: boolean,
|}
export type RowItemBigHeader = {|
  type: 'bigHeader',
  teamname: string,
|}
export type RowItemBig = {|
  type: 'big',
  conversationIDKey: ConversationIDKey,
  teamname: string,
  channelname: string,
|}
export type RowItemDivider = {|
  type: 'divider',
|}

export type RowItem = RowItemSmall | RowItemBigTeamsLabel | RowItemBigHeader | RowItemBig | RowItemDivider

export type RouteState = I.RecordOf<{
  smallTeamsExpanded: boolean,
}>

export type Props = {
  children?: React$Element<any>,
  filter: string,
  filterFocusCount: number,
  isLoading: boolean,
  nowOverride?: number, // just for dumb rendering
  onNewChat: () => void,
  onSelectUp: () => void,
  onSelectDown: () => void,
  onHotkey: (cmd: string) => void,
  onSetFilter: (filter: string) => void,
  onUntrustedInboxVisible: (conversationIDKeys: Array<ConversationIDKey>) => void,
  rows: Array<RowItem>,
  showBuildATeam: boolean,
  showNewConversation: boolean,
  showSmallTeamsExpandDivider: boolean,
  smallTeamsExpanded: boolean,
  smallIDsHidden: Array<ConversationIDKey>,
  toggleSmallTeamsExpanded: () => void,
}

export default class Inbox extends React.Component<Props> {}
