// @flow
import * as I from 'immutable'
import type {ConversationIDKey} from '../../constants/types/chat2'

export type RowItemSmall = {|
  type: 'small',
  conversationIDKey: ConversationIDKey,
|}
export type RowItemBigTeamsLabel = {|
  type: 'bigTeamsLabel',
  isFiltered: boolean,
|}
export type RowItemBigHeader = {|
  type: 'bigHeader',
  teamname: string,
|}
export type RowItemBig = {|
  type: 'big',
  conversationIDKey: ConversationIDKey,
  teamname: string,
  channelname: string,
|}
export type RowItemDivider = {|
  showButton: boolean,
  type: 'divider',
|}

export type RowItem = RowItemSmall | RowItemBigTeamsLabel | RowItemBigHeader | RowItemBig | RowItemDivider

export type RouteState = I.RecordOf<{
  smallTeamsExpanded: boolean,
}>

export type Props = {|
  allowShowFloatingButton: boolean,
  children?: React$Element<any>,
  clearedFilterCount: number,
  focusFilter: () => void, // withStateHandler function
  filter: string,
  filterFocusCount: number,
  neverLoaded: boolean,
  nowOverride?: number, // just for dumb rendering
  onDeselectConversation: () => void,
  onEnsureSelection: () => void,
  onNewChat: () => void,
  onSelectUp: () => void,
  onSelectDown: () => void,
  onUntrustedInboxVisible: (conversationIDKeys: Array<ConversationIDKey>) => void,
  rows: Array<RowItem>,
  selectedConversationIDKey: ConversationIDKey,
  smallTeamsExpanded: boolean,
  toggleSmallTeamsExpanded: () => void,
|}
