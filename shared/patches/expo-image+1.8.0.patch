diff --git a/node_modules/expo-image/android/src/main/java/expo/modules/image/ExpoImageViewWrapper.kt b/node_modules/expo-image/android/src/main/java/expo/modules/image/ExpoImageViewWrapper.kt
index 75f5612..a665b38 100644
--- a/node_modules/expo-image/android/src/main/java/expo/modules/image/ExpoImageViewWrapper.kt
+++ b/node_modules/expo-image/android/src/main/java/expo/modules/image/ExpoImageViewWrapper.kt
@@ -33,7 +33,7 @@ import expo.modules.image.records.ImageProgressEvent
 import expo.modules.image.records.ImageTransition
 import expo.modules.image.records.SourceMap
 import expo.modules.kotlin.AppContext
-import expo.modules.kotlin.tracing.beginAsyncTraceBlock
+//import expo.modules.kotlin.tracing.beginAsyncTraceBlock
 import expo.modules.kotlin.tracing.trace
 import expo.modules.kotlin.viewevent.EventDispatcher
 import expo.modules.kotlin.views.ExpoView
@@ -265,7 +265,7 @@ class ExpoImageViewWrapper(context: Context, appContext: AppContext) : ExpoView(
     // However, in this case, it is safe to use as long as nothing else is added to the queue.
     // The intention is simply to wait for the Glide code to finish before the content of the underlying views is changed during the same rendering tick.
     mainHandler.postAtFrontOfQueue {
-      trace(Trace.tag, "onResourceReady") {
+      trace(Trace.tag) {
         val transitionDuration = (transition?.duration ?: 0).toLong()
 
         // If provided resource is a placeholder, but the target doesn't have a source, we treat it as a normal image.
@@ -340,9 +340,9 @@ class ExpoImageViewWrapper(context: Context, appContext: AppContext) : ExpoView(
         // If our image is animated, we want to see if autoplay is disabled. If it is, we should
         // stop the animation as soon as the resource is ready. Placeholders should not follow this
         // value since the intention is almost certainly to display the animation (i.e. a spinner)
-        if (resource is Animatable && !isPlaceholder && !autoplay) {
+        /*if (resource is Animatable && !isPlaceholder && !autoplay) {
           resource.stop()
-        }
+        }*/
       }
     }
 
@@ -439,7 +439,7 @@ class ExpoImageViewWrapper(context: Context, appContext: AppContext) : ExpoView(
     requestManager.clear(secondTarget)
   }
 
-  internal fun rerenderIfNeeded(shouldRerenderBecauseOfResize: Boolean = false) = trace(Trace.tag, "rerenderIfNeeded(shouldRerenderBecauseOfResize=$shouldRerenderBecauseOfResize)") {
+  internal fun rerenderIfNeeded(shouldRerenderBecauseOfResize: Boolean = false) = trace(Trace.tag) {
     val bestSource = bestSource
     val bestPlaceholder = bestPlaceholder
 
@@ -591,7 +591,7 @@ class ExpoImageViewWrapper(context: Context, appContext: AppContext) : ExpoView(
         .apply(propOptions)
 
       val cookie = Trace.getNextCookieValue()
-      beginAsyncTraceBlock(Trace.tag, Trace.loadNewImageBlock, cookie)
+      //beginAsyncTraceBlock(Trace.tag, Trace.loadNewImageBlock, cookie)
       newTarget.setCookie(cookie)
       request.into(newTarget)
     } else {
diff --git a/node_modules/expo-image/android/src/main/java/expo/modules/image/ImageViewWrapperTarget.kt b/node_modules/expo-image/android/src/main/java/expo/modules/image/ImageViewWrapperTarget.kt
index bdd3b3e..a6ca98c 100644
--- a/node_modules/expo-image/android/src/main/java/expo/modules/image/ImageViewWrapperTarget.kt
+++ b/node_modules/expo-image/android/src/main/java/expo/modules/image/ImageViewWrapperTarget.kt
@@ -18,7 +18,7 @@ import com.bumptech.glide.util.Preconditions
 import com.bumptech.glide.util.Synthetic
 import expo.modules.core.utilities.ifNull
 import expo.modules.image.enums.ContentFit
-import expo.modules.kotlin.tracing.endAsyncTraceBlock
+//import expo.modules.kotlin.tracing.endAsyncTraceBlock
 import java.lang.ref.WeakReference
 import kotlin.math.max
 
@@ -74,7 +74,7 @@ class ImageViewWrapperTarget(
       return@synchronized
     }
 
-    endAsyncTraceBlock(Trace.tag, Trace.loadNewImageBlock, cookie)
+    //endAsyncTraceBlock(Trace.tag, Trace.loadNewImageBlock, cookie)
     cookie = -1
   }
 
