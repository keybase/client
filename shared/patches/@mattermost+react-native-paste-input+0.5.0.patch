diff --git a/node_modules/@mattermost/react-native-paste-input/android/src/main/java/com/mattermost/pasteinput/PasteInputManager.kt b/node_modules/@mattermost/react-native-paste-input/android/src/main/java/com/mattermost/pasteinput/PasteInputManager.kt
index 8cb70cf..92f50e0 100644
--- a/node_modules/@mattermost/react-native-paste-input/android/src/main/java/com/mattermost/pasteinput/PasteInputManager.kt
+++ b/node_modules/@mattermost/react-native-paste-input/android/src/main/java/com/mattermost/pasteinput/PasteInputManager.kt
@@ -18,7 +18,7 @@ class PasteInputManager(reactContext: ReactContext) : ReactTextInputManager() {
 
   companion object {
     const val REACT_CLASS = "PasteInput"
-    const val CACHE_DIR_NAME = "mmPasteInput"
+    const val CACHE_DIR_NAME = "Audio"
   }
 
   override fun getName(): String {
diff --git a/node_modules/@mattermost/react-native-paste-input/ios/PasteInputTextView.m b/node_modules/@mattermost/react-native-paste-input/ios/PasteInputTextView.m
index 73ed099..aebf25b 100644
--- a/node_modules/@mattermost/react-native-paste-input/ios/PasteInputTextView.m
+++ b/node_modules/@mattermost/react-native-paste-input/ios/PasteInputTextView.m
@@ -35,8 +35,6 @@
 }
 
 -(void)paste:(id)sender {
-    [super paste:sender];
-    
     UIPasteboard *pasteboard = [UIPasteboard generalPasteboard];
 
     BOOL hasStrings = pasteboard.hasStrings;
@@ -46,9 +44,14 @@
             hasStrings = [s length] != 0 && ![s containsString:@"<img src="];
         }
     }
-    if (pasteboard.hasURLs || hasStrings || pasteboard.hasColors) {
+    
+    if ([pasteboard hasStrings] && ![pasteboard hasImages]) {
+        [super paste:sender];
         return;
     }
+    /*if (pasteboard.hasURLs || hasStrings || pasteboard.hasColors) {
+        return;
+    }*/
     
     if (_onPaste) {
         NSArray<NSDictionary *> *files = [pasteboard getCopiedFiles];
@@ -56,11 +59,11 @@
             _onPaste(@{
                 @"data": files,
             });
-        } else {
             return;
         }
     }
     
+    [super paste:sender];
     // Dismiss contextual menu
     [self resignFirstResponder];
 }
diff --git a/node_modules/@mattermost/react-native-paste-input/ios/PasteInputView.h b/node_modules/@mattermost/react-native-paste-input/ios/PasteInputView.h
index be73123..900fd06 100644
--- a/node_modules/@mattermost/react-native-paste-input/ios/PasteInputView.h
+++ b/node_modules/@mattermost/react-native-paste-input/ios/PasteInputView.h
@@ -10,7 +10,7 @@
 
 NS_ASSUME_NONNULL_BEGIN
 
-@interface PasteInputView : RCTMultilineTextInputView
+@interface PasteInputView : RCTMultilineTextInputView<UIDropInteractionDelegate>
     @property (nonatomic, assign) BOOL disableCopyPaste;
     @property (nonatomic, copy, nullable) RCTDirectEventBlock onPaste;
 @end
diff --git a/node_modules/@mattermost/react-native-paste-input/ios/PasteInputView.m b/node_modules/@mattermost/react-native-paste-input/ios/PasteInputView.m
index 4d3b464..0fe800e 100644
--- a/node_modules/@mattermost/react-native-paste-input/ios/PasteInputView.m
+++ b/node_modules/@mattermost/react-native-paste-input/ios/PasteInputView.m
@@ -24,6 +24,7 @@
     _backedTextInputView = [[PasteInputTextView alloc] initWithFrame:self.bounds];
     _backedTextInputView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
     _backedTextInputView.textInputDelegate = self;
+    _backedTextInputView.interactions = @[[[UIDropInteraction alloc] initWithDelegate:self]];
 
     [self addSubview:_backedTextInputView];
   }
@@ -31,6 +32,11 @@
   return self;
 }
 
+- (BOOL)dropInteraction:(UIDropInteraction *)interaction canHandleSession:(id<UIDropSession>)session
+{
+  return NO;
+}
+
 - (id<RCTBackedTextInputViewProtocol>)backedTextInputView
 {
   return _backedTextInputView;
diff --git a/node_modules/@mattermost/react-native-paste-input/ios/UIPasteboard+GetImageInfo.m b/node_modules/@mattermost/react-native-paste-input/ios/UIPasteboard+GetImageInfo.m
index df52bb7..a4424b8 100644
--- a/node_modules/@mattermost/react-native-paste-input/ios/UIPasteboard+GetImageInfo.m
+++ b/node_modules/@mattermost/react-native-paste-input/ios/UIPasteboard+GetImageInfo.m
@@ -54,7 +54,10 @@
         }
         
         NSString *tempFilename = [NSString stringWithFormat:@"%@.%@", [[NSProcessInfo processInfo] globallyUniqueString], extension];
-        NSURL *tempFileURL = [NSURL fileURLWithPath:[NSTemporaryDirectory() stringByAppendingPathComponent:tempFilename]];
+        NSString * kbroot = [NSHomeDirectory() stringByAppendingString:@"/Library/Caches/AV"];
+        NSError * error = nil;
+        [[NSFileManager defaultManager] createDirectoryAtPath:kbroot withIntermediateDirectories:YES attributes:nil error:&error];
+        NSURL *tempFileURL = [NSURL fileURLWithPath:[kbroot stringByAppendingPathComponent:tempFilename]];
         BOOL success = [fileData writeToURL:tempFileURL atomically:YES];
         if (success) {
           added = YES;
diff --git a/node_modules/@mattermost/react-native-paste-input/src/ios.tsx b/node_modules/@mattermost/react-native-paste-input/src/ios.tsx
index 51534e8..2fea4cc 100644
--- a/node_modules/@mattermost/react-native-paste-input/src/ios.tsx
+++ b/node_modules/@mattermost/react-native-paste-input/src/ios.tsx
@@ -18,6 +18,7 @@ import {
 } from 'react-native';
 import TextInputState from 'react-native/Libraries/Components/TextInput/TextInputState';
 import TextAncestor from 'react-native/Libraries/Text/TextAncestor';
+import setAndForwardRef from 'react-native/Libraries/Utilities/setAndForwardRef';
 
 import type {
     PasteEvent,
@@ -202,6 +203,62 @@ const PasteInput = forwardRef((props: PasteInputProps, ref) => {
         });
     };
 
+    function clear() {
+        if (inputRef.current != null) {
+            viewCommands.setTextAndSelection(
+                inputRef.current,
+                mostRecentEventCount,
+                '',
+                0,
+                0
+            );
+        }
+    }
+
+    // TODO: Fix this returning true on null === null, when no input is focused
+    function isFocused() {
+        return TextInputState.currentlyFocusedInput() === inputRef.current;
+    }
+
+    function getNativeRef() {
+        return inputRef.current;
+    }
+
+    const _setNativeRef = setAndForwardRef({
+        getForwardedRef: () => props.forwardedRef,
+        setLocalRef: (ref) => {
+            inputRef.current = ref;
+
+            /*
+         Hi reader from the future. I'm sorry for this.
+ 
+         This is a hack. Ideally we would forwardRef to the underlying
+         host component. However, since TextInput has it's own methods that can be
+         called as well, if we used the standard forwardRef then these
+         methods wouldn't be accessible and thus be a breaking change.
+ 
+         We have a couple of options of how to handle this:
+         - Return a new ref with everything we methods from both. This is problematic
+           because we need React to also know it is a host component which requires
+           internals of the class implementation of the ref.
+         - Break the API and have some other way to call one set of the methods or
+           the other. This is our long term approach as we want to eventually
+           get the methods on host components off the ref. So instead of calling
+           ref.measure() you might call ReactNative.measure(ref). This would hopefully
+           let the ref for TextInput then have the methods like `.clear`. Or we do it
+           the other way and make it TextInput.clear(textInputRef) which would be fine
+           too. Either way though is a breaking change that is longer term.
+         - Mutate this ref. :( Gross, but accomplishes what we need in the meantime
+           before we can get to the long term breaking change.
+         */
+            if (ref) {
+                ref.clear = clear;
+                ref.isFocused = isFocused;
+                ref.getNativeRef = getNativeRef;
+            }
+        },
+    });
+
     return (
         <TextAncestor.Provider value={true}>
             <TouchableWithoutFeedback
@@ -231,7 +288,7 @@ const PasteInput = forwardRef((props: PasteInputProps, ref) => {
                     style={[props.style]}
                     textBreakStrategy={props.textBreakStrategy}
                     //@ts-ignore
-                    ref={inputRef}
+                    ref={_setNativeRef}
                 />
             </TouchableWithoutFeedback>
         </TextAncestor.Provider>
