// @flow
import Session from './session'
import type {TypedActions} from '../util/container'
import type {RPCError} from '../util/errors'
import type {TypedState} from '../constants/reducer'
import type {IncomingCallMapType, CustomResponseIncomingCallMapType} from '../constants/types/rpc-all-gen'

type WaitingKey = string | Array<string>

declare export class Engine {
  deprecatedGetDispatch: () => TypedActions => void; // escape hatch for deprecated code to get dispatch, TODO remove all usages of this
  // TODO maybe get rid of this, only used by tracker
  deprecatedGetGetState: () => () => TypedState; // escape hatch for deprecated code to get getState, TODO remove all usages of this
  dispatchWaitingAction: (key: WaitingKey, waiting: boolean, err: ?RPCError) => void;
  reset(): void;
  // TODO maybe get rid of this, only used by tracker
  cancelSession(sessionID: any): void;
  rpc(): void;
  actionOnConnect(key: string, f: () => ?TypedActions): void;
  actionOnDisconnect(key: string, f: () => ?TypedActions): void;
  hasEverConnected(): void;
  setIncomingCallMap(incomingCallMap: IncomingCallMapType): void;
  setCustomResponseIncomingCallMap(customResponseIncomingCallMap: CustomResponseIncomingCallMapType): void;
  createSession({
    incomingCallMap?: IncomingCallMapType,
    waitingKey?: WaitingKey,
    cancelHandler?: any,
    dangling?: boolean,
  }): Session;
  _rpcOutgoing({
    method: string,
    params: ?Object,
    callback: (...args: Array<any>) => void,
    waitingKey?: WaitingKey,
  }): void;
}

declare export function getEngine(): Engine
declare export function makeEngine(any, any): Engine
export default getEngine
export type {IncomingCallMapType, CustomResponseIncomingCallMapType}
