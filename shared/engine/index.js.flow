// @flow
import Session from './session'
import type {RPCError} from '../util/errors'
import type {IncomingCallMapType, CustomResponseIncomingCallMapType} from '../constants/types/rpc-all-gen'

type WaitingKey = string | Array<string>

declare export class Engine {
  dispatchWaitingAction: (key: WaitingKey, waiting: boolean, err: ?RPCError) => void;
  reset(): void;
  rpc(): void;
  sagasAreReady(): void;
  hasEverConnected(): void;
  registerCustomResponse($Keys<CustomResponseIncomingCallMapType>): void;
  createSession({
    incomingCallMap?: any,
    waitingKey?: WaitingKey,
    cancelHandler?: any,
    dangling?: boolean,
  }): Session;
  _rpcOutgoing({
    method: string,
    params: ?Object,
    callback: (...args: Array<any>) => void,
    waitingKey?: WaitingKey,
  }): void;
}

declare export function getEngine(): Engine
declare export function makeEngine(any, any): Engine
export default getEngine
export type {IncomingCallMapType, CustomResponseIncomingCallMapType}
