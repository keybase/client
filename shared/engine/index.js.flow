// @flow
import Session from './session'
import type {TypedActions} from '../util/container'
import type {TypedState} from '../constants/reducer'
import type {IncomingCallMapType as KBIncomingCallMap} from '../constants/types/rpc-gen'
import type {IncomingCallMapType as ChatIncomingCallMap} from '../constants/types/rpc-chat-gen'
import type {IncomingCallMapType as GregorIncomingCallMap} from '../constants/types/rpc-gregor-gen'
import type {IncomingCallMapType as SellarIncomingCallMap} from '../constants/types/rpc-stellar-gen'

type IncomingCallMap = {|
  ...KBIncomingCallMap<TypedState>,
  ...ChatIncomingCallMap<TypedState>,
  ...GregorIncomingCallMap<TypedState>,
  ...SellarIncomingCallMap<TypedState>,
|}

declare export class Engine {
  deprecatedGetDispatch: () => TypedActions => void; // escape hatch for deprecated code to get dispatch, TODO remove all usages of this
  deprecatedGetGetState: () => () => TypedState; // escape hatch for deprecated code to get getState, TODO remove all usages of this
  dispatchWaitingAction: (key: string, waiting: boolean) => void;
  reset(): void;
  cancelRPC(): void;
  cancelSession(sessionID: any): void;
  rpc(): void;
  setFailOnError(): void;
  actionOnConnect(key: string, f: () => ?TypedActions): void;
  actionOnDisconnect(key: string, f: () => ?TypedActions): void;
  hasEverConnected(): void;
  setIncomingCallMap(incomingCallMap: IncomingCallMap): void;
  createSession({
    incomingCallMap?: IncomingCallMap,
    waitingKey?: string,
    cancelHandler?: any,
    dangling?: boolean,
  }): Session;
  _rpcOutgoing({
    method: string,
    params: ?Object,
    callback: (...args: Array<any>) => void,
    waitingKey?: string,
  }): void;
}

declare export function getEngine(): Engine
declare export function makeEngine(any, any): Engine
export default getEngine
