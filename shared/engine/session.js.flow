// @flow
import type {TypedState} from '../constants/reducer'
import type {IncomingCallMapType as KBIncomingCallMap} from '../constants/types/rpc-gen'
import type {IncomingCallMapType as ChatIncomingCallMap} from '../constants/types/rpc-chat-gen'
import type {IncomingCallMapType as GregorIncomingCallMap} from '../constants/types/rpc-gregor-gen'
import type {IncomingCallMapType as SellarIncomingCallMap} from '../constants/types/rpc-stellar-gen'

type IncomingCallMap = {|
  ...KBIncomingCallMap<TypedState>,
  ...ChatIncomingCallMap<TypedState>,
  ...GregorIncomingCallMap<TypedState>,
  ...SellarIncomingCallMap<TypedState>,
|}

declare class Session {
  id: number;
  getId: () => number;
  end: () => void;
  getDangling: () => boolean;
  hasSeqID: (seqID: number) => boolean;
  _startMethod: ?string;
  cancel: () => void;
  incomingCall: (method: string, param: Object, response: ?Object) => boolean;
  start: (method: string, param: ?Object, callback: ?() => void) => void;
  constructor({
    sessionID: number,
    incomingCallMap: ?IncomingCallMap,
    waitingKey?: string,
    invoke: (method: string, param: ?[Object], cb: (err: any, data: any) => void) => void,
    endHandler: (session: Object) => void,
    cancelHandler?: (session: Session) => void,
    dangling?: boolean,
  }): this;
}

export default Session

export type CancelHandlerType = (session: Session) => void
